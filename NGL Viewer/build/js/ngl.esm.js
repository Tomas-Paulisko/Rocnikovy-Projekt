import { Vector2, Vector3, Matrix4, Quaternion, Color, ShaderChunk, Points, Box3, PerspectiveCamera, OrthographicCamera, StereoCamera, Scene, Group, Fog, DirectionalLight, AmbientLight, WebGLRenderer, WebGLRenderTarget, NearestFilter, RGBAFormat, UnsignedByteType, LinearFilter, HalfFloatType, Uniform, ShaderMaterial, AdditiveBlending, Mesh, PlaneGeometry, BufferGeometry, BufferAttribute, LineSegments, FloatType, Matrix3, UniformsUtils, UniformsLib, DynamicDrawUsage, StaticDrawUsage, NoBlending, FrontSide, BackSide, DoubleSide, IcosahedronGeometry, DataTexture, NormalBlending, Euler, CanvasTexture, CylinderGeometry, ConeGeometry, BoxGeometry, OctahedronGeometry, TetrahedronGeometry, TorusGeometry, Float32BufferAttribute } from 'three';
export { Box3, Color, Euler, Matrix3, Matrix4, Plane, Quaternion, Vector2, Vector3 } from 'three';
import * as chroma from 'chroma-js';
import * as signalsWrapper from 'signals';
import { Signal } from 'signals';
export { Signal } from 'signals';
import { sprintf } from 'sprintf-js';

/**
 * @file Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getQuery(id) {
    if (typeof window === 'undefined')
        return undefined;
    const a = new RegExp(`${id}=([^&#=]*)`);
    const m = a.exec(window.location.search);
    if (m) {
        return decodeURIComponent(m[1]);
    }
    else {
        return undefined;
    }
}
function boolean(value) {
    if (!value) {
        return false;
    }
    if (typeof value === 'string') {
        return /^1|true|t|yes|y$/i.test(value);
    }
    return true;
}
function defaults(value, defaultValue) {
    return value !== undefined ? value : defaultValue;
}
function createParams(params, defaultParams) {
    const o = Object.assign({}, params);
    for (const k in defaultParams) {
        const value = params[k];
        if (value === undefined)
            o[k] = defaultParams[k];
    }
    return o;
}
function updateParams(params, newParams) {
    for (const k in newParams) {
        const value = newParams[k];
        if (value !== undefined)
            params[k] = value;
    }
    return params;
}
function flatten(array, ret) {
    ret = defaults(ret, []);
    for (let i = 0; i < array.length; i++) {
        if (Array.isArray(array[i])) {
            flatten(array[i], ret);
        }
        else {
            ret.push(array[i]);
        }
    }
    return ret;
}
function getProtocol() {
    const protocol = window.location.protocol;
    return protocol.match(/http(s)?:/gi) === null ? 'http:' : protocol;
}
function getBrowser() {
    if (typeof window === 'undefined')
        return false;
    const ua = window.navigator.userAgent;
    if (/Opera|OPR/.test(ua)) {
        return 'Opera';
    }
    else if (/Chrome/i.test(ua)) {
        return 'Chrome';
    }
    else if (/Firefox/i.test(ua)) {
        return 'Firefox';
    }
    else if (/Mobile(\/.*)? Safari/i.test(ua)) {
        return 'Mobile Safari';
    }
    else if (/MSIE/i.test(ua)) {
        return 'Internet Explorer';
    }
    else if (/Safari/i.test(ua)) {
        return 'Safari';
    }
    return false;
}
function getAbsolutePath(relativePath) {
    const loc = window.location;
    const pn = loc.pathname;
    const basePath = pn.substring(0, pn.lastIndexOf('/') + 1);
    return loc.origin + basePath + relativePath;
}
function openUrl(url) {
    const opened = window.open(url, '_blank');
    if (!opened) {
        window.location.href = url;
    }
}
function download(data, downloadName = 'download') {
    // using ideas from https://github.com/eligrey/FileSaver.js/blob/master/FileSaver.js
    if (!data)
        return;
    const isSafari = getBrowser() === 'Safari';
    const isChromeIos = /CriOS\/[\d]+/.test(window.navigator.userAgent);
    const a = document.createElement('a');
    function open(str) {
        openUrl(isChromeIos ? str : str.replace(/^data:[^;]*;/, 'data:attachment/file;'));
    }
    if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
        // native saveAs in IE 10+
        navigator.msSaveOrOpenBlob(data, downloadName);
    }
    else if ((isSafari || isChromeIos) && FileReader) {
        if (data instanceof Blob) {
            // no downloading of blob urls in Safari
            var reader = new FileReader();
            reader.onloadend = function () {
                open(reader.result);
            };
            reader.readAsDataURL(data);
        }
        else {
            open(data);
        }
    }
    else {
        let objectUrlCreated = false;
        if (data instanceof Blob) {
            data = URL.createObjectURL(data);
            objectUrlCreated = true;
        }
        if ('download' in a) {
            // download link available
            a.style.display = 'hidden';
            document.body.appendChild(a);
            a.href = data;
            a.download = downloadName;
            a.target = '_blank';
            a.click();
            document.body.removeChild(a);
        }
        else {
            openUrl(data);
        }
        if (objectUrlCreated) {
            window.URL.revokeObjectURL(data);
        }
    }
}
function throttle(func, wait, options) {
    // from http://underscorejs.org/docs/underscore.html
    let context;
    let args;
    let result;
    let timeout = null;
    let previous = 0;
    if (!options)
        options = {};
    function later() {
        previous = options.leading === false ? 0 : Date.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout)
            context = args = null;
    }
    return function throttle() {
        var now = Date.now();
        if (!previous && options.leading === false)
            previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout)
                context = args = null;
        }
        else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
        }
        return result;
    };
}
function lexicographicCompare(elm1, elm2) {
    if (elm1 < elm2)
        return -1;
    if (elm1 > elm2)
        return 1;
    return 0;
}
/**
 * Does a binary search to get the index of an element in the input array
 * @function
 * @example
 * var array = [ 1, 2, 3, 4, 5, 6 ];
 * var element = 4;
 * binarySearchIndexOf( array, element );  // returns 3
 *
 * @param {Array} array - sorted array
 * @param {Anything} element - element to search for in the array
 * @param {Function} [compareFunction] - compare function
 * @return {Number} the index of the element or -1 if not in the array
 */
function binarySearchIndexOf(array, element, compareFunction = lexicographicCompare) {
    let low = 0;
    let high = array.length - 1;
    while (low <= high) {
        const mid = (low + high) >> 1;
        const cmp = compareFunction(element, array[mid]);
        if (cmp > 0) {
            low = mid + 1;
        }
        else if (cmp < 0) {
            high = mid - 1;
        }
        else {
            return mid;
        }
    }
    return -low - 1;
}
function binarySearchForLeftRange(array, leftRange) {
    let high = array.length - 1;
    if (array[high] < leftRange)
        return -1;
    let low = 0;
    while (low <= high) {
        const mid = (low + high) >> 1;
        if (array[mid] >= leftRange) {
            high = mid - 1;
        }
        else {
            low = mid + 1;
        }
    }
    return high + 1;
}
function binarySearchForRightRange(array, rightRange) {
    if (array[0] > rightRange)
        return -1;
    let low = 0;
    let high = array.length - 1;
    while (low <= high) {
        const mid = (low + high) >> 1;
        if (array[mid] > rightRange) {
            high = mid - 1;
        }
        else {
            low = mid + 1;
        }
    }
    return low - 1;
}
function rangeInSortedArray(array, min, max) {
    const indexLeft = binarySearchForLeftRange(array, min);
    const indexRight = binarySearchForRightRange(array, max);
    if (indexLeft === -1 || indexRight === -1 || indexLeft > indexRight) {
        return 0;
    }
    else {
        return indexRight - indexLeft + 1;
    }
}
function uniqueArray(array) {
    return array.sort().filter(function (value, index, sorted) {
        return (index === 0) || (value !== sorted[index - 1]);
    });
}
// String/arraybuffer conversion
function uint8ToString(u8a) {
    const chunkSize = 0x7000;
    if (u8a.length > chunkSize) {
        const c = [];
        for (let i = 0; i < u8a.length; i += chunkSize) {
            c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + chunkSize)));
        }
        return c.join('');
    }
    else {
        return String.fromCharCode.apply(null, u8a);
    }
}
function uint8ToLines(u8a, chunkSize = 1024 * 1024 * 10, newline = '\n') {
    let partialLine = '';
    let lines = [];
    for (let i = 0; i < u8a.length; i += chunkSize) {
        const str = uint8ToString(u8a.subarray(i, i + chunkSize));
        const idx = str.lastIndexOf(newline);
        if (idx === -1) {
            partialLine += str;
        }
        else {
            const str2 = partialLine + str.substr(0, idx);
            lines = lines.concat(str2.split(newline));
            if (idx === str.length - newline.length) {
                partialLine = '';
            }
            else {
                partialLine = str.substr(idx + newline.length);
            }
        }
    }
    if (partialLine !== '') {
        lines.push(partialLine);
    }
    return lines;
}
function getTypedArray(arrayType, arraySize) {
    switch (arrayType) {
        case 'int8':
            return new Int8Array(arraySize);
        case 'int16':
            return new Int16Array(arraySize);
        case 'int32':
            return new Int32Array(arraySize);
        case 'uint8':
            return new Uint8Array(arraySize);
        case 'uint16':
            return new Uint16Array(arraySize);
        case 'uint32':
            return new Uint32Array(arraySize);
        case 'float32':
            return new Float32Array(arraySize);
        default:
            throw new Error('arrayType unknown: ' + arrayType);
    }
}
function getUintArray(sizeOrArray, maxUint) {
    const TypedArray = maxUint > 65535 ? Uint32Array : Uint16Array;
    return new TypedArray(sizeOrArray);
}
function ensureArray(value) {
    return Array.isArray(value) ? value : [value];
}
function ensureBuffer(a) {
    return (a.buffer && a.buffer instanceof ArrayBuffer) ? a.buffer : a;
}
function _ensureClassFromArg(arg, constructor) {
    return arg instanceof constructor ? arg : new constructor(arg);
}
function _ensureClassFromArray(array, constructor) {
    if (array === undefined) {
        array = new constructor();
    }
    else if (Array.isArray(array)) {
        array = new constructor().fromArray(array);
    }
    return array;
}
function ensureVector2(v) {
    return _ensureClassFromArray(v, Vector2);
}
function ensureVector3(v) {
    return _ensureClassFromArray(v, Vector3);
}
function ensureMatrix4(m) {
    return _ensureClassFromArray(m, Matrix4);
}
function ensureQuaternion(q) {
    return _ensureClassFromArray(q, Quaternion);
}
function ensureFloat32Array(a) {
    return _ensureClassFromArg(a, Float32Array);
}
function createRingBuffer(length) {
    let pointer = 0;
    let count = 0;
    const buffer = [];
    return {
        has: function (value) { return buffer.indexOf(value) !== -1; },
        get: function (idx) { return buffer[idx]; },
        push: function (item) {
            buffer[pointer] = item;
            pointer = (length + pointer + 1) % length;
            ++count;
        },
        get count() { return count; },
        get data() { return buffer.slice(0, Math.min(count, length)); },
        clear: function () {
            count = 0;
            pointer = 0;
            buffer.length = 0;
        }
    };
}
function createSimpleDict() {
    const set = {};
    return {
        has: function (k) { return set[JSON.stringify(k)] !== undefined; },
        add: function (k, v) { set[JSON.stringify(k)] = v; },
        del: function (k) { delete set[JSON.stringify(k)]; },
        get values() { return Object.keys(set).map(k => set[k]); }
    };
}

/**
 * @file Registry
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function toLowerCaseString(value) {
    return defaults(value, '').toString().toLowerCase();
}
class Registry {
    constructor(name) {
        this.name = name;
        this._dict = {};
    }
    add(key, value) {
        this._dict[toLowerCaseString(key)] = value;
    }
    get(key) {
        return this._dict[toLowerCaseString(key)];
    }
    get names() {
        return Object.keys(this._dict);
    }
}

/**
 * @file Math Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function degToRad$1(deg) {
    return deg * 0.01745; // deg * Math.PI / 180
}
function radToDeg(rad) {
    return rad * 57.29578; // rad * 180 / Math.PI
}
// http://www.broofa.com/Tools/Math.uuid.htm
const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
const uuid = new Array(36);
function generateUUID() {
    let rnd = 0;
    let r;
    for (let i = 0; i < 36; i++) {
        if (i === 8 || i === 13 || i === 18 || i === 23) {
            uuid[i] = '-';
        }
        else if (i === 14) {
            uuid[i] = '4';
        }
        else {
            if (rnd <= 0x02)
                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;
            r = rnd & 0xf;
            rnd = rnd >> 4;
            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];
        }
    }
    return uuid.join('');
}
function countSetBits(i) {
    i = i - ((i >> 1) & 0x55555555);
    i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
    return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
}
function normalize(value, min, max) {
    return (value - min) / (max - min);
}
function clamp$1(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
function pclamp(value) {
    return clamp$1(value, 0, 100);
}
function saturate(value) {
    return clamp$1(value, 0, 1);
}
function lerp(start, stop, alpha) {
    return start + (stop - start) * alpha;
}
function spline$1(p0, p1, p2, p3, t, tension) {
    const v0 = (p2 - p0) * tension;
    const v1 = (p3 - p1) * tension;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 +
        (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 +
        v0 * t + p1;
}
function smoothstep(min, max, x) {
    x = saturate(normalize(x, min, max));
    return x * x * (3 - 2 * x);
}
function almostIdentity(value, start, stop) {
    if (value > start)
        return value;
    const a = 2 * stop - start;
    const b = 2 * start - 3 * stop;
    const t = value / start;
    return (a * t + b) * t * t + stop;
}

/**
 * @file Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Internal color space for all colors (global).
 * Colors are always specified as sRGB; if this is set to
 * 'linear' then colors get linearized when used internally
 * as vertex or texture colors.
 * @see setColorSpace/getColorSpace.
 */
var colorSpace = 'sRGB'; // default: don't linearize
/** Set the global internal color space for colormakers */
function setColorSpace(space) {
    colorSpace = space;
}
const ScaleDefaultParameters = {
    scale: 'uniform',
    mode: 'hcl',
    domain: [0, 1],
    value: 0xFFFFFF,
    reverse: false,
};
const tmpColor$1 = new Color();
function manageColor(_target, _name, descriptor) {
    const originalMethod = descriptor.value;
    const linearize = function (value, fromTo) {
        let result = originalMethod.bind(this, value, fromTo)();
        if (colorSpace == 'linear') {
            tmpColor$1.set(result);
            tmpColor$1.convertSRGBToLinear();
            return tmpColor$1.getHex();
        }
        else {
            return result;
        }
    };
    descriptor.value = linearize;
    return descriptor;
}
/**
 * Class for making colors.
 * @interface
 */
class Colormaker {
    /**
     * Create a colormaker instance
     * @param  {ColormakerParameters} params - colormaker parameter
     */
    constructor(params = {}) {
        this.parameters = createParams(params, ScaleDefaultParameters);
        if (typeof this.parameters.value === 'string') {
            this.parameters.value = tmpColor$1.set(this.parameters.value).getHex();
        }
        if (this.parameters.structure) {
            this.atomProxy = this.parameters.structure.getAtomProxy();
        }
    }
    getScale(params = {}) {
        const p = createParams(params, this.parameters);
        if (p.scale === 'rainbow') {
            p.scale = ['red', 'orange', 'yellow', 'green', 'blue'];
        }
        else if (p.scale === 'rwb') {
            p.scale = ['red', 'white', 'blue'];
        }
        if (p.reverse) {
            p.domain = p.domain.slice().reverse();
        }
        return chroma
            .scale(p.scale) // TODO
            .mode(p.mode)
            .domain(p.domain)
            .out('num'); // returns RGB color as numeric (not string "#ffffff")
    }
    /**
     * save a color to an array
     * @param  {Integer} color - hex color value
     * @param  {Array|TypedArray} array - destination
     * @param  {Integer} offset - index into the array
     * @return {Array} the destination array
     */
    colorToArray(color, array = [], offset = 0) {
        array[offset] = (color >> 16 & 255) / 255;
        array[offset + 1] = (color >> 8 & 255) / 255;
        array[offset + 2] = (color & 255) / 255;
        return array;
    }
    /**
     * save an atom color to an array
     * @param  {AtomProxy} atom - atom to get color for
     * @param  {Array|TypedArray} array - destination
     * @param  {Integer} offset - index into the array
     * @return {Array} the destination array
     */
    atomColorToArray(atom, array, offset) {
        return this.colorToArray(this.atomColor ? this.atomColor(atom) : 0x000000, array, offset);
    }
    /**
     * return the color for an bond
     * @param  {BondProxy} bond - bond to get color for
     * @param  {Boolean} fromTo - whether to use the first or second atom of the bond
     * @return {Integer} hex bond color
     */
    bondColor(bond, fromTo) {
        if (this.atomProxy && this.atomColor) {
            this.atomProxy.index = fromTo ? bond.atomIndex1 : bond.atomIndex2;
            return this.atomColor(this.atomProxy);
        }
        else {
            return 0x000000;
        }
    }
    /**
     * safe a bond color to an array
     * @param  {BondProxy} bond - bond to get color for
     * @param  {Boolean} fromTo - whether to use the first or second atom of the bond
     * @param  {Array|TypedArray} array - destination
     * @param  {Integer} offset - index into the array
     * @return {Array} the destination array
     */
    bondColorToArray(bond, fromTo, array, offset) {
        return this.colorToArray(this.bondColor(bond, fromTo), array, offset);
    }
    /**
     * safe a volume cell color to an array
     * @param  {Integer} index - volume cell index
     * @param  {Array|TypedArray} array - destination
     * @param  {Integer} offset - index into the array
     * @return {Array} the destination array
     */
    volumeColorToArray(index, array, offset) {
        return this.colorToArray(this.volumeColor ? this.volumeColor(index) : 0x000000, array, offset);
    }
    /**
     * safe a color for coordinates in space to an array
     * @param  {Vector3} coords - xyz coordinates
     * @param  {Array|TypedArray} array - destination
     * @param  {Integer} offset - index into the array
     * @return {Array} the destination array
     */
    positionColorToArray(coords, array, offset) {
        return this.colorToArray(this.positionColor ? this.positionColor(coords) : 0x000000, array, offset);
    }
}

/**
 * @file Selection Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
var kwd;
(function (kwd) {
    kwd[kwd["PROTEIN"] = 1] = "PROTEIN";
    kwd[kwd["NUCLEIC"] = 2] = "NUCLEIC";
    kwd[kwd["RNA"] = 3] = "RNA";
    kwd[kwd["DNA"] = 4] = "DNA";
    kwd[kwd["POLYMER"] = 5] = "POLYMER";
    kwd[kwd["WATER"] = 6] = "WATER";
    kwd[kwd["HELIX"] = 7] = "HELIX";
    kwd[kwd["SHEET"] = 8] = "SHEET";
    kwd[kwd["TURN"] = 9] = "TURN";
    kwd[kwd["BACKBONE"] = 10] = "BACKBONE";
    kwd[kwd["SIDECHAIN"] = 11] = "SIDECHAIN";
    kwd[kwd["ALL"] = 12] = "ALL";
    kwd[kwd["HETERO"] = 13] = "HETERO";
    kwd[kwd["ION"] = 14] = "ION";
    kwd[kwd["SACCHARIDE"] = 15] = "SACCHARIDE";
    kwd[kwd["SUGAR"] = 15] = "SUGAR";
    kwd[kwd["BONDED"] = 16] = "BONDED";
    kwd[kwd["RING"] = 17] = "RING";
    kwd[kwd["AROMATICRING"] = 18] = "AROMATICRING";
    kwd[kwd["METAL"] = 19] = "METAL";
    kwd[kwd["POLARH"] = 20] = "POLARH";
    kwd[kwd["NONE"] = 21] = "NONE";
})(kwd || (kwd = {}));
const SelectAllKeyword = ['*', '', 'ALL'];
const SelectNoneKeyword = ['NONE'];
const AtomOnlyKeywords = [
    kwd.BACKBONE, kwd.SIDECHAIN, kwd.BONDED, kwd.RING, kwd.AROMATICRING, kwd.METAL, kwd.POLARH
];
const ChainKeywords = [
    kwd.POLYMER, kwd.WATER
];
const SmallResname = ['ALA', 'GLY', 'SER'];
const NucleophilicResname = ['CYS', 'SER', 'THR'];
const HydrophobicResname = ['ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL'];
const AromaticResname = ['PHE', 'TRP', 'TYR', 'HIS'];
const AmideResname = ['ASN', 'GLN'];
const AcidicResname = ['ASP', 'GLU'];
const BasicResname = ['ARG', 'HIS', 'LYS'];
const ChargedResname = ['ARG', 'ASP', 'GLU', 'HIS', 'LYS'];
const PolarResname = ['ASN', 'ARG', 'ASP', 'CYS', 'GLY', 'GLN', 'GLU', 'HIS', 'LYS', 'SER', 'THR', 'TYR'];
const NonpolarResname = ['ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL'];
const CyclicResname = ['HIS', 'PHE', 'PRO', 'TRP', 'TYR'];
const AliphaticResname = ['ALA', 'GLY', 'ILE', 'LEU', 'VAL'];

/**
 * @file Selection Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function parseSele(string) {
    let retSelection = {
        operator: undefined,
        rules: []
    };
    if (!string) {
        return retSelection;
    }
    let selection = retSelection;
    let newSelection;
    let oldSelection;
    const selectionStack = [];
    string = string.replace(/\(/g, ' ( ').replace(/\)/g, ' ) ').trim();
    if (string.charAt(0) === '(' && string.substr(-1) === ')') {
        string = string.slice(1, -1).trim();
    }
    const chunks = string.split(/\s+/);
    // Log.log( string, chunks )
    const createNewContext = (operator) => {
        newSelection = {
            operator,
            rules: []
        };
        if (selection === undefined) {
            selection = newSelection;
            retSelection = newSelection;
        }
        else {
            selection.rules.push(newSelection);
            selectionStack.push(selection);
            selection = newSelection;
        }
    };
    const getPrevContext = function (operator) {
        oldSelection = selection;
        selection = selectionStack.pop();
        if (selection === undefined) {
            createNewContext(operator);
            pushRule(oldSelection);
        }
    };
    const pushRule = function (rule) {
        selection.rules.push(rule);
    };
    let not = false;
    for (let i = 0; i < chunks.length; ++i) {
        const c = chunks[i];
        const cu = c.toUpperCase();
        // handle parens
        if (c === '(') {
            // Log.log( "(" );
            not = false;
            createNewContext();
            continue;
        }
        else if (c === ')') {
            // Log.log( ")" );
            getPrevContext();
            if (selection.negate) {
                getPrevContext();
            }
            continue;
        }
        // leave 'not' context
        if (not > 0) {
            if (cu === 'NOT') {
                not = 1;
            }
            else if (not === 1) {
                not = 2;
            }
            else if (not === 2) {
                not = false;
                getPrevContext();
            }
            else {
                throw new Error("something went wrong with 'not'");
            }
        }
        // handle logic operators
        if (cu === 'AND') {
            // Log.log( "AND" );
            if (selection.operator === 'OR') {
                const lastRule = selection.rules.pop();
                createNewContext('AND');
                pushRule(lastRule);
            }
            else {
                selection.operator = 'AND';
            }
            continue;
        }
        else if (cu === 'OR') {
            // Log.log( "OR" );
            if (selection.operator === 'AND') {
                getPrevContext('OR');
            }
            else {
                selection.operator = 'OR';
            }
            continue;
        }
        else if (c.toUpperCase() === 'NOT') {
            // Log.log( "NOT", j );
            not = 1;
            createNewContext();
            selection.negate = true;
            continue;
        }
        else ;
        // handle keyword attributes
        // ensure `cu` is not a number before testing if it is in the
        // kwd enum dictionary which includes the enum numbers as well...
        if (+cu !== +cu) {
            const keyword = kwd[cu];
            if (keyword !== undefined) {
                pushRule({ keyword });
                continue;
            }
        }
        if (cu === 'HYDROGEN') {
            pushRule({
                operator: 'OR',
                rules: [
                    { element: 'H' },
                    { element: 'D' }
                ]
            });
            continue;
        }
        if (cu === 'SMALL') {
            pushRule({ resname: SmallResname });
            continue;
        }
        if (cu === 'NUCLEOPHILIC') {
            pushRule({ resname: NucleophilicResname });
            continue;
        }
        if (cu === 'HYDROPHOBIC') {
            pushRule({ resname: HydrophobicResname });
            continue;
        }
        if (cu === 'AROMATIC') {
            pushRule({ resname: AromaticResname });
            continue;
        }
        if (cu === 'AMIDE') {
            pushRule({ resname: AmideResname });
            continue;
        }
        if (cu === 'ACIDIC') {
            pushRule({ resname: AcidicResname });
            continue;
        }
        if (cu === 'BASIC') {
            pushRule({ resname: BasicResname });
            continue;
        }
        if (cu === 'CHARGED') {
            pushRule({ resname: ChargedResname });
            continue;
        }
        if (cu === 'POLAR') {
            pushRule({ resname: PolarResname });
            continue;
        }
        if (cu === 'NONPOLAR') {
            pushRule({ resname: NonpolarResname });
            continue;
        }
        if (cu === 'CYCLIC') {
            pushRule({ resname: CyclicResname });
            continue;
        }
        if (cu === 'ALIPHATIC') {
            pushRule({ resname: AliphaticResname });
            continue;
        }
        if (cu === 'SIDECHAINATTACHED') {
            pushRule({
                operator: 'OR',
                rules: [
                    { keyword: kwd.SIDECHAIN },
                    {
                        operator: 'AND',
                        negate: false,
                        rules: [
                            { keyword: kwd.PROTEIN },
                            {
                                operator: 'OR',
                                negate: false,
                                rules: [
                                    { atomname: 'CA' },
                                    { atomname: 'BB' }
                                ]
                            }
                        ]
                    },
                    {
                        operator: 'AND',
                        negate: false,
                        rules: [
                            { resname: 'PRO' },
                            { atomname: 'N' }
                        ]
                    },
                    {
                        operator: 'AND',
                        negate: false,
                        rules: [
                            { keyword: kwd.NUCLEIC },
                            {
                                operator: 'OR',
                                negate: true,
                                rules: [
                                    { atomname: 'P' },
                                    { atomname: 'OP1' },
                                    { atomname: 'OP2' },
                                    { atomname: "O3'" },
                                    { atomname: 'O3*' },
                                    { atomname: "HO3'" },
                                    { atomname: "O5'" },
                                    { atomname: 'O5*' },
                                    { atomname: "HO5'" },
                                    { atomname: "C5'" },
                                    { atomname: 'C5*' },
                                    { atomname: "H5'" },
                                    { atomname: "H5''" }
                                ]
                            }
                        ]
                    }
                ]
            });
            continue;
        }
        if (cu === 'APOLARH') {
            pushRule({
                operator: 'AND',
                negate: false,
                rules: [
                    { element: 'H' },
                    {
                        negate: true,
                        operator: undefined,
                        rules: [
                            { keyword: kwd.POLARH }
                        ]
                    }
                ]
            });
            continue;
        }
        if (cu === 'LIGAND') {
            pushRule({
                operator: 'AND',
                rules: [
                    {
                        operator: 'OR',
                        rules: [
                            {
                                operator: 'AND',
                                rules: [
                                    { keyword: kwd.HETERO },
                                    {
                                        negate: true,
                                        operator: undefined,
                                        rules: [
                                            { keyword: kwd.POLYMER }
                                        ]
                                    }
                                ]
                            },
                            {
                                negate: true,
                                operator: undefined,
                                rules: [
                                    { keyword: kwd.POLYMER }
                                ]
                            }
                        ]
                    },
                    {
                        negate: true,
                        operator: undefined,
                        rules: [
                            {
                                operator: 'OR',
                                rules: [
                                    { keyword: kwd.WATER },
                                    { keyword: kwd.ION }
                                ]
                            }
                        ]
                    }
                ]
            });
            continue;
        }
        if (SelectAllKeyword.indexOf(cu) !== -1) {
            pushRule({ keyword: kwd.ALL });
            continue;
        }
        // handle atom expressions
        if (c.charAt(0) === '@') {
            const indexList = c.substr(1).split(',').map(x => parseInt(x));
            indexList.sort(function (a, b) { return a - b; });
            pushRule({ atomindex: indexList });
            continue;
        }
        if (c.charAt(0) === '#') {
            console.error('# for element selection deprecated, use _');
            pushRule({ element: cu.substr(1) });
            continue;
        }
        if (c.charAt(0) === '_') {
            pushRule({ element: cu.substr(1) });
            continue;
        }
        if (c[0] === '[' && c[c.length - 1] === ']') {
            const resnameList = cu.substr(1, c.length - 2).split(',');
            const resname = resnameList.length > 1 ? resnameList : resnameList[0];
            pushRule({ resname: resname });
            continue;
        }
        else if ((c.length >= 1 && c.length <= 4) &&
            c[0] !== '^' && c[0] !== ':' && c[0] !== '.' && c[0] !== '%' && c[0] !== '/' &&
            isNaN(parseInt(c))) {
            pushRule({ resname: cu });
            continue;
        }
        // there must be only one constraint per rule
        // otherwise a test quickly becomes not applicable
        // e.g. chainTest for chainname when resno is present too
        const sele = {
            operator: 'AND',
            rules: []
        };
        const model = c.split('/');
        if (model.length > 1 && model[1]) {
            if (isNaN(parseInt(model[1]))) {
                throw new Error('model must be an integer');
            }
            sele.rules.push({
                model: parseInt(model[1])
            });
        }
        const altloc = model[0].split('%');
        if (altloc.length > 1) {
            sele.rules.push({
                altloc: altloc[1]
            });
        }
        const atomname = altloc[0].split('.');
        if (atomname.length > 1 && atomname[1]) {
            if (atomname[1].length > 4) {
                throw new Error('atomname must be one to four characters');
            }
            sele.rules.push({
                atomname: atomname[1].substring(0, 4).toUpperCase()
            });
        }
        const chain = atomname[0].split(':');
        if (chain.length > 1 && chain[1]) {
            sele.rules.push({
                chainname: chain[1]
            });
        }
        const inscode = chain[0].split('^');
        if (inscode.length > 1) {
            sele.rules.push({
                inscode: inscode[1]
            });
        }
        if (inscode[0]) {
            let negate, negate2;
            if (inscode[0][0] === '-') {
                inscode[0] = inscode[0].substr(1);
                negate = true;
            }
            if (inscode[0].includes('--')) {
                inscode[0] = inscode[0].replace('--', '-');
                negate2 = true;
            }
            let resi = inscode[0].split('-');
            if (resi.length === 1) {
                let resiSingle = parseInt(resi[0]);
                if (isNaN(resiSingle)) {
                    throw new Error('resi must be an integer');
                }
                if (negate)
                    resiSingle *= -1;
                sele.rules.push({
                    resno: resiSingle
                });
            }
            else if (resi.length === 2) {
                const resiRange = resi.map(x => parseInt(x));
                if (negate)
                    resiRange[0] *= -1;
                if (negate2)
                    resiRange[1] *= -1;
                sele.rules.push({
                    resno: [resiRange[0], resiRange[1]]
                });
            }
            else {
                throw new Error("resi range must contain one '-'");
            }
        }
        // round up
        if (sele.rules.length === 1) {
            pushRule(sele.rules[0]);
        }
        else if (sele.rules.length > 1) {
            pushRule(sele);
        }
        else {
            throw new Error('empty selection chunk');
        }
    }
    // cleanup
    if (retSelection.operator === undefined &&
        retSelection.rules.length === 1 &&
        retSelection.rules[0].hasOwnProperty('operator')) {
        retSelection = retSelection.rules[0];
    }
    return retSelection;
}

/**
 * @file Selection Test
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function atomTestFn(a, s) {
    // returning -1 means the rule is not applicable
    if (s.atomname === undefined && s.element === undefined &&
        s.altloc === undefined && s.atomindex === undefined &&
        s.keyword === undefined && s.inscode === undefined &&
        s.resname === undefined && s.sstruc === undefined &&
        s.resno === undefined && s.chainname === undefined &&
        s.model === undefined)
        return -1;
    if (s.keyword !== undefined) {
        if (s.keyword === kwd.BACKBONE && !a.isBackbone())
            return false;
        if (s.keyword === kwd.SIDECHAIN && !a.isSidechain())
            return false;
        if (s.keyword === kwd.BONDED && !a.isBonded())
            return false;
        if (s.keyword === kwd.RING && !a.isRing())
            return false;
        if (s.keyword === kwd.AROMATICRING && !a.isAromatic())
            return false;
        if (s.keyword === kwd.HETERO && !a.isHetero())
            return false;
        if (s.keyword === kwd.PROTEIN && !a.isProtein())
            return false;
        if (s.keyword === kwd.NUCLEIC && !a.isNucleic())
            return false;
        if (s.keyword === kwd.RNA && !a.isRna())
            return false;
        if (s.keyword === kwd.DNA && !a.isDna())
            return false;
        if (s.keyword === kwd.POLYMER && !a.isPolymer())
            return false;
        if (s.keyword === kwd.WATER && !a.isWater())
            return false;
        if (s.keyword === kwd.HELIX && !a.isHelix())
            return false;
        if (s.keyword === kwd.SHEET && !a.isSheet())
            return false;
        if (s.keyword === kwd.TURN && !a.isTurn())
            return false;
        if (s.keyword === kwd.ION && !a.isIon())
            return false;
        if (s.keyword === kwd.SACCHARIDE && !a.isSaccharide())
            return false;
        if (s.keyword === kwd.METAL && !a.isMetal())
            return false;
        if (s.keyword === kwd.POLARH && !a.isPolarHydrogen())
            return false;
    }
    if (s.atomname !== undefined && s.atomname !== a.atomname)
        return false;
    if (s.element !== undefined && s.element !== a.element)
        return false;
    if (s.altloc !== undefined && s.altloc !== a.altloc)
        return false;
    if (s.atomindex !== undefined &&
        binarySearchIndexOf(s.atomindex, a.index) < 0)
        return false;
    if (s.resname !== undefined) {
        if (Array.isArray(s.resname)) {
            if (!s.resname.includes(a.resname))
                return false;
        }
        else {
            if (s.resname !== a.resname)
                return false;
        }
    }
    if (s.sstruc !== undefined && s.sstruc !== a.sstruc)
        return false;
    if (s.resno !== undefined) {
        if (Array.isArray(s.resno) && s.resno.length === 2) {
            if (s.resno[0] > a.resno || s.resno[1] < a.resno)
                return false;
        }
        else {
            if (s.resno !== a.resno)
                return false;
        }
    }
    if (s.inscode !== undefined && s.inscode !== a.inscode)
        return false;
    if (s.chainname !== undefined && s.chainname !== a.chainname)
        return false;
    if (s.model !== undefined && s.model !== a.modelIndex)
        return false;
    return true;
}
function residueTestFn(r, s) {
    // returning -1 means the rule is not applicable
    if (s.resname === undefined && s.resno === undefined && s.inscode === undefined &&
        s.sstruc === undefined && s.model === undefined && s.chainname === undefined &&
        s.atomindex === undefined &&
        (s.keyword === undefined || AtomOnlyKeywords.includes(s.keyword)))
        return -1;
    if (s.keyword !== undefined) {
        if (s.keyword === kwd.HETERO && !r.isHetero())
            return false;
        if (s.keyword === kwd.PROTEIN && !r.isProtein())
            return false;
        if (s.keyword === kwd.NUCLEIC && !r.isNucleic())
            return false;
        if (s.keyword === kwd.RNA && !r.isRna())
            return false;
        if (s.keyword === kwd.DNA && !r.isDna())
            return false;
        if (s.keyword === kwd.POLYMER && !r.isPolymer())
            return false;
        if (s.keyword === kwd.WATER && !r.isWater())
            return false;
        if (s.keyword === kwd.HELIX && !r.isHelix())
            return false;
        if (s.keyword === kwd.SHEET && !r.isSheet())
            return false;
        if (s.keyword === kwd.TURN && !r.isTurn())
            return false;
        if (s.keyword === kwd.ION && !r.isIon())
            return false;
        if (s.keyword === kwd.SACCHARIDE && !r.isSaccharide())
            return false;
    }
    if (s.atomindex !== undefined &&
        rangeInSortedArray(s.atomindex, r.atomOffset, r.atomEnd) === 0)
        return false;
    if (s.resname !== undefined) {
        if (Array.isArray(s.resname)) {
            if (!s.resname.includes(r.resname))
                return false;
        }
        else {
            if (s.resname !== r.resname)
                return false;
        }
    }
    if (s.sstruc !== undefined && s.sstruc !== r.sstruc)
        return false;
    if (s.resno !== undefined) {
        if (Array.isArray(s.resno) && s.resno.length === 2) {
            if (s.resno[0] > r.resno || s.resno[1] < r.resno)
                return false;
        }
        else {
            if (s.resno !== r.resno)
                return false;
        }
    }
    if (s.inscode !== undefined && s.inscode !== r.inscode)
        return false;
    if (s.chainname !== undefined && s.chainname !== r.chainname)
        return false;
    if (s.model !== undefined && s.model !== r.modelIndex)
        return false;
    return true;
}
function chainTestFn(c, s) {
    // returning -1 means the rule is not applicable
    if (s.chainname === undefined && s.model === undefined && s.atomindex === undefined &&
        (s.keyword === undefined || !ChainKeywords.includes(s.keyword) || !c.entity))
        return -1;
    if (s.keyword !== undefined) {
        if (s.keyword === kwd.POLYMER && !c.entity.isPolymer())
            return false;
        if (s.keyword === kwd.WATER && !c.entity.isWater())
            return false;
    }
    if (s.atomindex !== undefined &&
        rangeInSortedArray(s.atomindex, c.atomOffset, c.atomEnd) === 0)
        return false;
    if (s.chainname !== undefined && s.chainname !== c.chainname)
        return false;
    if (s.model !== undefined && s.model !== c.modelIndex)
        return false;
    return true;
}
function modelTestFn(m, s) {
    // returning -1 means the rule is not applicable
    if (s.model === undefined && s.atomindex === undefined)
        return -1;
    if (s.atomindex !== undefined &&
        rangeInSortedArray(s.atomindex, m.atomOffset, m.atomEnd) === 0)
        return false;
    if (s.model !== undefined && s.model !== m.index)
        return false;
    return true;
}
function makeTest(selection, fn) {
    if (selection === null)
        return false;
    if (selection.error)
        return false;
    if (!selection.rules || selection.rules.length === 0)
        return false;
    const n = selection.rules.length;
    const t = !selection.negate;
    const f = !!selection.negate;
    const subTests = [];
    for (let i = 0; i < n; ++i) {
        const s = selection.rules[i];
        if (s.hasOwnProperty('operator')) {
            subTests[i] = makeTest(s, fn); // TODO
        }
    }
    // ( x and y ) can short circuit on false
    // ( x or y ) can short circuit on true
    // not ( x and y )
    return function test(entity) {
        const and = selection.operator === 'AND';
        let na = false;
        for (let i = 0; i < n; ++i) {
            const s = selection.rules[i]; // TODO
            let ret;
            if (s.hasOwnProperty('operator')) {
                const test = subTests[i];
                if (test !== false) {
                    ret = test(entity);
                }
                else {
                    ret = -1;
                }
                if (ret === -1) {
                    na = true;
                    continue;
                }
                else if (ret === true) {
                    if (and) {
                        continue;
                    }
                    else {
                        return t;
                    }
                }
                else {
                    if (and) {
                        return f;
                    }
                    else {
                        continue;
                    }
                }
            }
            else {
                if (s.keyword === kwd.ALL) {
                    if (and) {
                        continue;
                    }
                    else {
                        return t;
                    }
                }
                else if (s.keyword === kwd.NONE) {
                    if (and) {
                        continue;
                    }
                    else {
                        return f;
                    }
                }
                ret = fn(entity, s);
                // console.log( entity.qualifiedName(), ret, s, selection.negate, "t", t, "f", f )
                if (ret === -1) {
                    na = true;
                    continue;
                }
                else if (ret === true) {
                    if (and) {
                        continue;
                    }
                    else {
                        return t;
                    }
                }
                else {
                    if (and) {
                        return f;
                    }
                    else {
                        continue;
                    }
                }
            }
        }
        if (na) {
            return -1;
        }
        else {
            if (and) {
                return t;
            }
            else {
                return f;
            }
        }
    };
}
function filter(selection, fn) {
    if (selection.error)
        return selection;
    if (!selection.rules || selection.rules.length === 0)
        return selection;
    const n = selection.rules.length;
    const filtered = {
        operator: selection.operator,
        rules: []
    };
    if (selection.hasOwnProperty('negate')) {
        filtered.negate = selection.negate;
    }
    for (let i = 0; i < n; ++i) {
        const s = selection.rules[i];
        if (s.hasOwnProperty('operator')) {
            const fs = filter(s, fn);
            if (fs !== null)
                filtered.rules.push(fs); // TODO
        }
        else if (!fn(s)) {
            filtered.rules.push(s); // TODO
        }
    }
    if (filtered.rules.length > 0) { // TODO
        // TODO maybe the filtered rules could be returned
        // in some case, but the way how tests are applied
        // e.g. when traversing a structure would also need
        // to change
        return selection;
        // return filtered;
    }
    else {
        return null;
    }
}
function makeAtomTest(selection, atomOnly = false) {
    let filteredSelection = selection;
    if (atomOnly) {
        filteredSelection = filter(selection, function (s) {
            if (s.keyword !== undefined && !AtomOnlyKeywords.includes(s.keyword))
                return true;
            if (s.model !== undefined)
                return true;
            if (s.chainname !== undefined)
                return true;
            if (s.resname !== undefined)
                return true;
            if (s.resno !== undefined)
                return true;
            if (s.sstruc !== undefined)
                return true;
            return false;
        });
    }
    return makeTest(filteredSelection, atomTestFn);
}
function makeResidueTest(selection, residueOnly = false) {
    let filteredSelection = selection;
    if (residueOnly) {
        filteredSelection = filter(selection, function (s) {
            if (s.keyword !== undefined && AtomOnlyKeywords.includes(s.keyword))
                return true;
            if (s.model !== undefined)
                return true;
            if (s.chainname !== undefined)
                return true;
            if (s.atomname !== undefined)
                return true;
            if (s.element !== undefined)
                return true;
            if (s.altloc !== undefined)
                return true;
            return false;
        });
    }
    return makeTest(filteredSelection, residueTestFn);
}
function makeChainTest(selection, chainOnly = false) {
    let filteredSelection = selection;
    if (chainOnly) {
        filteredSelection = filter(selection, function (s) {
            if (s.keyword !== undefined && !ChainKeywords.includes(s.keyword))
                return true;
            // if( s.model!==undefined ) return true;
            if (s.resname !== undefined)
                return true;
            if (s.resno !== undefined)
                return true;
            if (s.atomname !== undefined)
                return true;
            if (s.element !== undefined)
                return true;
            if (s.altloc !== undefined)
                return true;
            if (s.sstruc !== undefined)
                return true;
            if (s.inscode !== undefined)
                return true;
            return false;
        });
    }
    return makeTest(filteredSelection, chainTestFn);
}
function makeModelTest(selection, modelOnly = false) {
    let filteredSelection = selection;
    if (modelOnly) {
        filteredSelection = filter(selection, function (s) {
            if (s.keyword !== undefined)
                return true;
            if (s.chainname !== undefined)
                return true;
            if (s.resname !== undefined)
                return true;
            if (s.resno !== undefined)
                return true;
            if (s.atomname !== undefined)
                return true;
            if (s.element !== undefined)
                return true;
            if (s.altloc !== undefined)
                return true;
            if (s.sstruc !== undefined)
                return true;
            if (s.inscode !== undefined)
                return true;
            return false;
        });
    }
    return makeTest(filteredSelection, modelTestFn);
}

/**
 * @file Selection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Selection
 */
class Selection {
    /**
     * Create Selection
     * @param {String} string - selection string, see {@tutorial selection-language}
     */
    constructor(string) {
        this.signals = {
            stringChanged: new Signal()
        };
        this.setString(string);
    }
    get type() { return 'selection'; }
    setString(string, silent) {
        if (string === undefined)
            string = this.string || '';
        if (string === this.string)
            return;
        try {
            this.selection = parseSele(string);
        }
        catch (e) {
            // Log.error( e.stack );
            this.selection = { 'error': e.message };
        }
        const selection = this.selection;
        this.string = string;
        this.test = makeAtomTest(selection);
        this.residueTest = makeResidueTest(selection);
        this.chainTest = makeChainTest(selection);
        this.modelTest = makeModelTest(selection);
        this.atomOnlyTest = makeAtomTest(selection, true);
        this.residueOnlyTest = makeResidueTest(selection, true);
        this.chainOnlyTest = makeChainTest(selection, true);
        this.modelOnlyTest = makeModelTest(selection, true);
        if (!silent) {
            this.signals.stringChanged.dispatch(this.string);
        }
    }
    isAllSelection() {
        return SelectAllKeyword.includes(this.string.toUpperCase());
    }
    isNoneSelection() {
        return SelectNoneKeyword.includes(this.string.toUpperCase());
    }
}

/**
 * @file Selection Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color based on {@link Selection}
 */
class SelectionColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.colormakerList = []; // TODO
        this.selectionList = [];
        const dataList = params.dataList || [];
        dataList.forEach((data) => {
            const [scheme, sele, params = {}] = data;
            if (ColormakerRegistry.hasScheme(scheme)) {
                Object.assign(params, {
                    scheme: scheme,
                    structure: this.parameters.structure
                });
            }
            else {
                Object.assign(params, {
                    scheme: 'uniform',
                    value: new Color(scheme).getHex()
                });
            }
            this.colormakerList.push(ColormakerRegistry.getScheme(params));
            this.selectionList.push(new Selection(sele));
        });
    }
    // NOT NEEDED @manageColor
    atomColor(a) {
        for (let i = 0, n = this.selectionList.length; i < n; ++i) {
            const test = this.selectionList[i].test;
            if (test && test(a)) {
                return this.colormakerList[i].atomColor(a);
            }
        }
        return 0xFFFFFF;
    }
}

/**
 * @file Colormaker Registry
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const ColormakerScales = {
    '': '',
    // Sequential
    OrRd: '[S] Orange-Red',
    PuBu: '[S] Purple-Blue',
    BuPu: '[S] Blue-Purple',
    Oranges: '[S] Oranges',
    BuGn: '[S] Blue-Green',
    YlOrBr: '[S] Yellow-Orange-Brown',
    YlGn: '[S] Yellow-Green',
    Reds: '[S] Reds',
    RdPu: '[S] Red-Purple',
    Greens: '[S] Greens',
    YlGnBu: '[S] Yellow-Green-Blue',
    Purples: '[S] Purples',
    GnBu: '[S] Green-Blue',
    Greys: '[S] Greys',
    YlOrRd: '[S] Yellow-Orange-Red',
    PuRd: '[S] Purple-Red',
    Blues: '[S] Blues',
    PuBuGn: '[S] Purple-Blue-Green',
    // Diverging
    Viridis: '[D] Viridis',
    Spectral: '[D] Spectral',
    RdYlGn: '[D] Red-Yellow-Green',
    RdBu: '[D] Red-Blue',
    PiYG: '[D] Pink-Yellowgreen',
    PRGn: '[D] Purplered-Green',
    RdYlBu: '[D] Red-Yellow-Blue',
    BrBG: '[D] Brown-Bluegreen',
    RdGy: '[D] Red-Grey',
    PuOr: '[D] Purple-Orange',
    // Qualitative
    Set1: '[Q] Set1',
    Set2: '[Q] Set2',
    Set3: '[Q] Set3',
    Dark2: '[Q] Dark2',
    Paired: '[Q] Paired',
    Pastel1: '[Q] Pastel1',
    Pastel2: '[Q] Pastel2',
    Accent: '[Q] Accent',
    // Other
    rainbow: '[?] Rainbow',
    rwb: '[?] Red-White-Blue'
};
const ColormakerModes = {
    '': '',
    rgb: 'Red Green Blue',
    hsv: 'Hue Saturation Value',
    hsl: 'Hue Saturation Lightness',
    hsi: 'Hue Saturation Intensity',
    lab: 'CIE L*a*b*',
    hcl: 'Hue Chroma Lightness'
};
/**
 * Class for registering {@link Colormaker}s. Generally use the
 * global {@link src/globals.js~ColormakerRegistry} instance.
 */
class ColormakerRegistry$1 {
    constructor() {
        this.schemes = {};
        this.userSchemes = {};
    }
    getScheme(params) {
        const p = params || {};
        const id = (p.scheme || '').toLowerCase();
        let SchemeClass;
        if (id in this.schemes) {
            SchemeClass = this.schemes[id];
        }
        else if (id in this.userSchemes) {
            SchemeClass = this.userSchemes[id];
        }
        else {
            //@ts-expect-error  abstract class used as a constructor
            SchemeClass = Colormaker;
        }
        return new SchemeClass(params);
    }
    /**
     * Get an description of available schemes as an
     * object with id-label as key-value pairs
     * @return {Object} available schemes
     */
    getSchemes() {
        const types = {};
        Object.keys(this.schemes).forEach(function (k) {
            types[k] = k;
        });
        Object.keys(this.userSchemes).forEach(function (k) {
            types[k] = k.split('|')[1];
        });
        return types;
    }
    /**
     * Get an description of available scales as an
     * object with id-label as key-value pairs
     * @return {Object} available scales
     */
    getScales() {
        return ColormakerScales;
    }
    getModes() {
        return ColormakerModes;
    }
    /**
     * Add a scheme with a hardcoded id
     * @param {String} id - the id
     * @param {Colormaker} scheme - the colormaker
     * @return {undefined}
     */
    add(id, scheme) {
        id = id.toLowerCase();
        this.schemes[id] = scheme;
    }
    /**
     * Register a custom scheme
     *
     * @example
     * // Create a class with a `atomColor` method that returns a hex color.
     * var schemeId = NGL.ColormakerRegistry.addScheme( function( params ){
     *     this.atomColor = function( atom ){
     *         if( atom.serial < 1000 ){
     *             return 0x0000FF;  // blue
     *         }else if( atom.serial > 2000 ){
     *             return 0xFF0000;  // red
     *         }else{
     *             return 0x00FF00;  // green
     *         }
     *     };
     * } );
     *
     * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
     *     o.addRepresentation( "cartoon", { color: schemeId } );  // pass schemeId here
     *     o.autoView();
     * } );
     *
     * @param {Function|Colormaker} scheme - constructor or {@link Colormaker} instance
     * @param {String} label - scheme label
     * @return {String} id to refer to the registered scheme
     */
    addScheme(scheme, label) {
        if (!(isColormakerSubClass(scheme))) {
            scheme = this._createScheme(scheme);
        }
        return this._addUserScheme(scheme, label);
    }
    /**
     * Add a user-defined scheme
     * @param {Colormaker} scheme - the user-defined scheme
     * @param {String} [label] - scheme label
     * @return {String} id to refer to the registered scheme
     */
    _addUserScheme(scheme, label) {
        label = label || '';
        const id = `${generateUUID()}|${label}`.toLowerCase();
        this.userSchemes[id] = scheme;
        return id;
    }
    /**
     * Remove the scheme with the given id
     * @param  {String} id - scheme to remove
     * @return {undefined}
     */
    removeScheme(id) {
        id = id.toLowerCase();
        delete this.userSchemes[id];
    }
    _createScheme(constructor) {
        class _Colormaker extends Colormaker {
            constructor(params) {
                super(params);
                constructor.call(this, params);
            }
        }
        return _Colormaker;
    }
    /**
     * Create and a selection-based coloring scheme. Supply a list with pairs
     * of colorname and selection for coloring by selections. Use the last
     * entry as a default (catch all) coloring definition.
     *
     * @example
     * var schemeId = NGL.ColormakerRegistry.addSelectionScheme( [
     *     [ "red", "64-74 or 134-154 or 222-254 or 310-310 or 322-326" ],
     *     [ "green", "311-322" ],
     *     [ "yellow", "40-63 or 75-95 or 112-133 or 155-173 or 202-221 or 255-277 or 289-309" ],
     *     [ "blue", "1-39 or 96-112 or 174-201 or 278-288" ],
     *     [ "white", "*" ]
     * ], "Transmembrane 3dqb" );
     *
     * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
     *     o.addRepresentation( "cartoon", { color: schemeId } );  // pass schemeId here
     *     o.autoView();
     * } );
     *
     * @param {Array} dataList - cloror-selection pairs
     * @param {String} label - scheme name
     * @return {String} id to refer to the registered scheme
     */
    addSelectionScheme(dataList, label) {
        class MySelectionColormaker extends SelectionColormaker {
            constructor(params) {
                super(Object.assign({ dataList }, params));
            }
        }
        return this._addUserScheme(MySelectionColormaker, label);
    }
    /**
     * Check if a scheme with the given id exists
     * @param  {String}  id - the id to check
     * @return {Boolean} flag indicating if the scheme exists
     */
    hasScheme(id) {
        id = id.toLowerCase();
        return id in this.schemes || id in this.userSchemes;
    }
}
function isColormakerSubClass(scheme) {
    return (scheme instanceof Colormaker);
}

/**
 * @file Parser Registry
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class ParserRegistry$1 extends Registry {
    constructor() {
        super('parser');
    }
    __hasObjName(key, objName) {
        const parser = this.get(key);
        return parser && parser.prototype.__objName === objName;
    }
    isTrajectory(key) {
        return this.__hasObjName(key, 'frames');
    }
    isStructure(key) {
        return this.__hasObjName(key, 'structure');
    }
    isVolume(key) {
        return this.__hasObjName(key, 'volume');
    }
    isSurface(key) {
        return this.__hasObjName(key, 'surface');
    }
    isBinary(key) {
        const parser = this.get(key);
        return parser && parser.prototype.isBinary;
    }
    isXml(key) {
        const parser = this.get(key);
        return parser && parser.prototype.isXml;
    }
    isJson(key) {
        const parser = this.get(key);
        return parser && parser.prototype.isJson;
    }
    getTrajectoryExtensions() {
        return this.names.filter(name => this.isTrajectory(name));
    }
    getStructureExtensions() {
        return this.names.filter(name => this.isStructure(name));
    }
    getVolumeExtensions() {
        return this.names.filter(name => this.isVolume(name));
    }
    getSurfaceExtensions() {
        return this.names.filter(name => this.isSurface(name));
    }
}

/**
 * @file Worker Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getWorkerDeps(vars) {
    const deps = vars;
    vars.forEach(function (sym) {
        if (sym.__deps) {
            Array.prototype.push.apply(deps, getWorkerDeps(sym.__deps));
        }
    });
    return deps;
}
function makeWorkerString(vars) {
    const deps = uniqueArray(getWorkerDeps(vars));
    return deps.map(function (sym) {
        return sym.toString();
    }).join('\n\n\n');
}
function onmessage(e) {
    const name = e.data.__name;
    const postId = e.data.__postId;
    /* global self */
    if (name === undefined) {
        console.error('message __name undefined');
    }
    else if (self.func === undefined) {
        console.error('worker func undefined', name);
    }
    else {
        const callback = function (aMessage, transferList) {
            aMessage = aMessage || {};
            if (postId !== undefined)
                aMessage.__postId = postId;
            try {
                self.postMessage(aMessage, transferList);
            }
            catch (error) {
                console.error('self.postMessage:', error);
                self.postMessage(aMessage);
            }
        };
        self.func(e, callback);
    }
}
function makeWorkerBlob(func, deps) {
    let str = "'use strict';\n\n" + makeWorkerString(deps);
    str += '\n\n\nself.func = ' + func.toString() + ';';
    str += '\n\n\nself.onmessage = ' + onmessage.toString() + ';';
    // console.log(str);
    return new Blob([str], { type: 'application/javascript' });
}

/**
 * @file Worker Registry
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class WorkerRegistry$1 {
    constructor() {
        this.activeWorkerCount = 0;
        this._funcDict = {};
        this._depsDict = {};
        this._blobDict = {};
    }
    add(name, func, deps) {
        this._funcDict[name] = func;
        this._depsDict[name] = deps;
    }
    get(name) {
        if (!this._blobDict[name]) {
            this._blobDict[name] = makeWorkerBlob(this._funcDict[name], this._depsDict[name]);
        }
        return this._blobDict[name];
    }
}

/**
 * @file Globals
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * The browser name: "Opera", "Chrome", "Firefox", "Mobile Safari",
 * "Internet Explorer", "Safari" or false.
 */
const Browser = getBrowser();
/**
 * Flag indicating support for the 'passive' option for event handler
 */
let SupportsPassiveEventHandler = false;
try {
    // Test via a getter in the options object to see if the passive property is accessed
    const opts = Object.defineProperty({}, 'passive', {
        get: function () {
            SupportsPassiveEventHandler = true;
        }
    });
    window.addEventListener('test', e => { }, opts);
}
catch (e) { }
/**
 * Flag indicating a mobile browser
 */
const Mobile = typeof window !== 'undefined' ? typeof window.orientation !== 'undefined' : false;
let SupportsReadPixelsFloat = false;
function setSupportsReadPixelsFloat(value) {
    SupportsReadPixelsFloat = value;
}
/**
 * Flag indicating support for the `EXT_frag_depth` WebGL extension
 * (Always present in WebGL2)
 */
let ExtensionFragDepth = false;
function setExtensionFragDepth(value) {
    ExtensionFragDepth = value;
}
const Log = {
    log: Function.prototype.bind.call(console.log, console),
    info: Function.prototype.bind.call(console.info, console),
    warn: Function.prototype.bind.call(console.warn, console),
    error: Function.prototype.bind.call(console.error, console),
    time: Function.prototype.bind.call(console.time, console),
    timeEnd: Function.prototype.bind.call(console.timeEnd, console)
};
let MeasurementDefaultParams = {
    color: 'green',
    labelColor: 0x808080,
    labelAttachment: 'bottom-center',
    labelSize: 0.7,
    labelZOffset: 0.5,
    labelYOffset: 0.1,
    labelBorder: true,
    labelBorderColor: 0xd3d3d3,
    labelBorderWidth: 0.25,
    lineOpacity: 0.8,
    linewidth: 5.0,
    opacity: 0.6,
    labelUnit: 'angstrom',
    arcVisible: true,
    planeVisible: false
};
function setMeasurementDefaultParams(params = {}) {
    Object.assign(MeasurementDefaultParams, params);
}
let Debug = boolean(getQuery('debug'));
function setDebug(value) {
    Debug = value;
}
const WebglErrorMessage = '<div style="display:flex;align-items:center;justify-content:center;height:100%;"><p style="padding:15px;text-align:center;">Your browser/graphics card does not seem to support <a target="_blank" href="https://en.wikipedia.org/wiki/WebGL">WebGL</a>.<br/><br/>Find out how to get it <a target="_blank" href="http://get.webgl.org/">here</a>.</p></div>';
/**
 * List of file extensions to be recognized as scripts
 */
const ScriptExtensions = ['ngl', 'js'];
const WorkerRegistry = new WorkerRegistry$1();
const ColormakerRegistry = new ColormakerRegistry$1();
const DatasourceRegistry = new Registry('datasource');
const RepresentationRegistry = new Registry('representatation');
const ParserRegistry = new ParserRegistry$1();
const ShaderRegistry = new Registry('shader');
const DecompressorRegistry = new Registry('decompressor');
const ComponentRegistry = new Registry('component');
const BufferRegistry = new Registry('buffer');
const PickerRegistry = new Registry('picker');
let ListingDatasource;
function setListingDatasource(value) {
    ListingDatasource = value;
}
let TrajectoryDatasource; // TODO should accept mdsrvDatasource
function setTrajectoryDatasource(value) {
    TrajectoryDatasource = value;
}

/**
 * @file Streamer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Streamer {
    constructor(src, params = {}) {
        this.chunkSize = 1024 * 1024 * 10;
        this.newline = '\n';
        this.__pointer = 0;
        this.__partialLine = '';
        this.compressed = defaults(params.compressed, false);
        this.binary = defaults(params.binary, false);
        this.json = defaults(params.json, false);
        this.xml = defaults(params.xml, false);
        this.src = src;
    }
    isBinary() {
        return this.binary || this.compressed;
    }
    read() {
        return this._read().then(data => {
            const decompressFn = this.compressed ? DecompressorRegistry.get(this.compressed) : undefined;
            if (this.compressed && decompressFn) {
                this.data = decompressFn(data);
            }
            else {
                if ((this.binary || this.compressed) && data instanceof ArrayBuffer) {
                    data = new Uint8Array(data);
                }
                this.data = data;
            }
            return this.data;
        });
    }
    _chunk(start, end) {
        end = Math.min(this.data.length, end);
        if (start === 0 && this.data.length === end) {
            return this.data;
        }
        else {
            if (this.isBinary()) {
                return this.data.subarray(start, end);
            }
            else {
                return this.data.substring(start, end);
            }
        }
    }
    chunk(start) {
        const end = start + this.chunkSize;
        return this._chunk(start, end);
    }
    peekLines(m) {
        const data = this.data;
        const n = data.length;
        // FIXME does not work for multi-char newline
        const newline = this.isBinary() ? this.newline.charCodeAt(0) : this.newline;
        let i;
        let count = 0;
        for (i = 0; i < n; ++i) {
            if (data[i] === newline)
                ++count;
            if (count === m)
                break;
        }
        const chunk = this._chunk(0, i + 1);
        const d = this.chunkToLines(chunk, '', i > n);
        return d.lines;
    }
    chunkCount() {
        return Math.floor(this.data.length / this.chunkSize) + 1;
    }
    asText() {
        return this.isBinary() ? uint8ToString(this.data) : this.data;
    }
    chunkToLines(chunk, partialLine, isLast) {
        const newline = this.newline;
        if (!this.isBinary() && chunk.length === this.data.length) {
            return {
                lines: chunk.split(newline),
                partialLine: ''
            };
        }
        let lines = [];
        const str = this.isBinary() ? uint8ToString(chunk) : chunk;
        const idx = str.lastIndexOf(newline);
        if (idx === -1) {
            partialLine += str;
        }
        else {
            const str2 = partialLine + str.substr(0, idx);
            lines = lines.concat(str2.split(newline));
            if (idx === str.length - newline.length) {
                partialLine = '';
            }
            else {
                partialLine = str.substr(idx + newline.length);
            }
        }
        if (isLast && partialLine !== '') {
            lines.push(partialLine);
        }
        return {
            lines: lines,
            partialLine: partialLine
        };
    }
    nextChunk() {
        const start = this.__pointer;
        if (start > this.data.length) {
            return undefined;
        }
        this.__pointer += this.chunkSize;
        return this.chunk(start);
    }
    nextChunkOfLines() {
        const chunk = this.nextChunk();
        if (chunk === undefined) {
            return undefined;
        }
        const isLast = this.__pointer > this.data.length;
        const d = this.chunkToLines(chunk, this.__partialLine, isLast);
        this.__partialLine = d.partialLine;
        return d.lines;
    }
    eachChunk(callback) {
        const chunkSize = this.chunkSize;
        const n = this.data.length;
        const chunkCount = this.chunkCount();
        for (let i = 0; i < n; i += chunkSize) {
            const chunk = this.chunk(i);
            const chunkNo = Math.round(i / chunkSize);
            callback(chunk, chunkNo, chunkCount);
        }
    }
    eachChunkOfLines(callback) {
        this.eachChunk((chunk, chunkNo, chunkCount) => {
            const isLast = chunkNo === chunkCount + 1;
            const d = this.chunkToLines(chunk, this.__partialLine, isLast);
            this.__partialLine = d.partialLine;
            callback(d.lines, chunkNo, chunkCount);
        });
    }
    dispose() {
        delete this.src;
    }
}

/**
 * @file File Streamer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class FileStreamer extends Streamer {
    _read() {
        return new Promise((resolve, reject) => {
            const file = this.src;
            const reader = new FileReader();
            reader.onload = (event) => {
                if (event.target)
                    resolve(event.target.result);
            };
            // if (typeof this.onprogress === 'function') {
            //   reader.onprogress = event => this.onprogress(event)
            // }
            reader.onerror = event => reject(event);
            if (this.binary || this.compressed) {
                reader.readAsArrayBuffer(file);
            }
            else {
                reader.readAsText(file);
            }
        });
    }
}

/**
 * @file Network Streamer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class NetworkStreamer extends Streamer {
    _read() {
        return new Promise((resolve, reject) => {
            const url = this.src;
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.addEventListener('load', () => {
                if (xhr.status === 200 || xhr.status === 304 ||
                    // when requesting from local file system
                    // the status in Google Chrome/Chromium is 0
                    xhr.status === 0) {
                    try {
                        resolve(xhr.response);
                    }
                    catch (e) {
                        reject(e);
                    }
                }
                else {
                    reject(xhr.statusText);
                }
            }, false);
            // if (typeof this.onprogress === 'function') {
            //   xhr.addEventListener('progress', event => this.onprogress(event), false);
            // }
            xhr.addEventListener('error', event => reject('network error'), false);
            if (this.isBinary()) {
                xhr.responseType = 'arraybuffer';
            }
            else if (this.json) {
                xhr.responseType = 'json';
            }
            else if (this.xml) {
                xhr.responseType = 'document';
            }
            else {
                xhr.responseType = 'text';
            }
            // xhr.crossOrigin = true;
            xhr.send();
        });
    }
}

/**
 * @file Loader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Loader parameter object.
 * @typedef {Object} LoaderParameters - loader parameters
 * @property {String} ext - file extension, determines file type
 * @property {Boolean} compressed - flag data as compressed
 * @property {Boolean} binary - flag data as binary
 * @property {String} name - set data name
 */
/**
 * Loader base class
 */
class Loader {
    /**
     * Construct a loader object
     * @param  {String|File|Blob} src - data source, string is interpreted as an URL
     * @param  {LoaderParameters} params - parameters object
     */
    constructor(src, params = {}) {
        this.parameters = createParams(params, {
            ext: '',
            compressed: false,
            binary: ParserRegistry.isBinary(params.ext || ''),
            name: '',
            dir: '',
            path: '',
            protocol: ''
        });
        const streamerParams = {
            compressed: this.parameters.compressed,
            binary: this.parameters.binary,
            json: ParserRegistry.isJson(this.parameters.ext),
            xml: ParserRegistry.isXml(this.parameters.ext)
        };
        if ((typeof File !== 'undefined' && src instanceof File) ||
            (typeof Blob !== 'undefined' && src instanceof Blob)) {
            this.streamer = new FileStreamer(src, streamerParams);
        }
        else {
            this.streamer = new NetworkStreamer(src, streamerParams);
        }
    }
}

/**
 * @file Parser Loader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Parser loader class
 * @extends Loader
 */
class ParserLoader extends Loader {
    constructor(src, params = {}) {
        super(src, params);
        this.parserParams = {
            voxelSize: params.voxelSize,
            firstModelOnly: params.firstModelOnly,
            asTrajectory: params.asTrajectory,
            cAlphaOnly: params.cAlphaOnly,
            delimiter: params.delimiter,
            comment: params.comment,
            columnNames: params.columnNames,
            inferBonds: params.inferBonds,
            name: this.parameters.name,
            path: this.parameters.path
        };
    }
    /**
     * Load parsed object
     * @return {Promise} resolves to the loaded & parsed {@link Structure},
     *                   {@link Volume}, {@link Surface} or data object
     */
    load() {
        var ParserClass = ParserRegistry.get(this.parameters.ext);
        var parser = new ParserClass(this.streamer, this.parserParams);
        return parser.parse();
    }
}

/**
 * @file Script
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Script class
 */
class Script {
    /**
     * Create a script instance
     * @param {String} functionBody - the function source
     * @param {String} name - name of the script
     * @param {String} path - path of the script
     */
    constructor(functionBody, name, path) {
        this.name = name;
        this.path = path;
        this.signals = {
            elementAdded: new Signal(),
            elementRemoved: new Signal(),
            nameChanged: new Signal()
        };
        this.type = 'Script';
        this.dir = path.substring(0, path.lastIndexOf('/') + 1);
        try {
            /* eslint-disable no-new-func */
            this.fn = new Function('stage', '__name', '__path', '__dir', functionBody);
        }
        catch (e) {
            Log.error('Script compilation failed', e);
            this.fn = function () { };
        }
    }
    /**
     * Execute the script
     * @param  {Stage} stage - the stage context
     * @return {Promise} - resolve when script finished running
     */
    run(stage) {
        return new Promise((resolve, reject) => {
            try {
                this.fn.apply(null, [stage, this.name, this.path, this.dir]);
                resolve();
            }
            catch (e) {
                Log.error('Script.fn', e);
                reject(e);
            }
        });
    }
}

/**
 * @file Script Loader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Script loader class
 * @extends Loader
 */
class ScriptLoader extends Loader {
    /**
     * Load script
     * @return {Promise} resolves to the loaded {@link Script}
     */
    load() {
        return this.streamer.read().then(() => {
            return new Script(this.streamer.asText(), this.parameters.name, this.parameters.path);
        });
    }
}

/**
 * @file Loader Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getFileInfo(file) {
    const compressedExtList = DecompressorRegistry.names;
    let path;
    let compressed;
    let protocol = '';
    if (file instanceof File) {
        path = file.name;
    }
    else if (file instanceof Blob) {
        path = '';
    }
    else {
        path = file;
    }
    const queryIndex = path.lastIndexOf('?');
    const query = queryIndex !== -1 ? path.substring(queryIndex) : '';
    path = path.substring(0, queryIndex === -1 ? path.length : queryIndex);
    const name = path.replace(/^.*[\\/]/, '');
    let base = name.substring(0, name.lastIndexOf('.'));
    const nameSplit = name.split('.');
    let ext = nameSplit.length > 1 ? (nameSplit.pop() || '').toLowerCase() : '';
    const protocolMatch = path.match(/^(.+):\/\/(.+)$/);
    if (protocolMatch) {
        protocol = protocolMatch[1].toLowerCase();
        path = protocolMatch[2] || '';
    }
    const dir = path.substring(0, path.lastIndexOf('/') + 1);
    if (compressedExtList.includes(ext)) {
        compressed = ext;
        const n = path.length - ext.length - 1;
        ext = (path.substr(0, n).split('.').pop() || '').toLowerCase();
        const m = base.length - ext.length - 1;
        base = base.substr(0, m);
    }
    else {
        compressed = false;
    }
    return { path, name, ext, base, dir, compressed, protocol, query, 'src': file };
}
function getDataInfo(src) {
    let info = getFileInfo(src);
    const datasource = DatasourceRegistry.get(info.protocol);
    if (datasource) {
        info = getFileInfo(datasource.getUrl(info.src));
        if (!info.ext && datasource.getExt) {
            info.ext = datasource.getExt(src);
        }
    }
    return info;
}
/**
 * Load a file
 *
 * @example
 * // load from URL
 * NGL.autoLoad( "http://files.rcsb.org/download/5IOS.cif" );
 *
 * @example
 * // load binary data in CCP4 format via a Blob
 * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
 * NGL.autoLoad( binaryBlob, { ext: "ccp4" } );
 *
 * @example
 * // load string data in PDB format via a Blob
 * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
 * NGL.autoLoad( stringBlob, { ext: "pdb" } );
 *
 * @example
 * // load a File object
 * NGL.autoLoad( file );
 *
 * @param  {String|File|Blob} file - either a URL or an object containing the file data
 * @param  {LoaderParameters} params - loading parameters
 * @return {Promise} Promise resolves to the loaded data
 */
function autoLoad(file, params = {}) {
    const p = Object.assign(getDataInfo(file), params);
    let loader;
    if (ParserRegistry.names.includes(p.ext)) {
        loader = new ParserLoader(p.src, p);
    }
    else if (ScriptExtensions.includes(p.ext)) {
        loader = new ScriptLoader(p.src, p);
    }
    if (loader) {
        return loader.load();
    }
    else {
        return Promise.reject(new Error(`autoLoad: ext '${p.ext}' unknown`));
    }
}

/**
 * @file Writer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Base class for writers
 * @interface
 */
class Writer {
    /**
     * Get a blob with the written data
     * @return {Blob} the blob
     */
    getBlob() {
        return new Blob([this.getData()], { type: this.mimeType });
    }
    /**
     * Trigger a download of the
     * @param  {[type]} name [description]
     * @param  {[type]} ext  [description]
     * @return {[type]}      [description]
     */
    download(name, ext) {
        name = defaults(name, this.defaultName);
        ext = defaults(ext, this.defaultExt);
        download(this.getBlob(), `${name}.${ext}`);
    }
}

/**
 * @file Pdb Writer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// http://www.wwpdb.org/documentation/file-format
// Sample PDB line, the coords X,Y,Z are fields 5,6,7 on each line.
// ATOM      1  N   ARG     1      29.292  13.212 -12.751  1.00 33.78      1BPT 108
const AtomFormat = 'ATOM  %5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%1s%1s';
const HetatmFormat = 'HETATM%5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%1s%1s';
/**
 * Create a PDB file from a Structure object
 */
class PdbWriter extends Writer {
    /**
     * @param  {Structure} structure - the structure object
     * @param  {Object} params - parameters]
     */
    constructor(structure, params) {
        super();
        this.mimeType = 'text/plain';
        this.defaultName = 'structure';
        this.defaultExt = 'pdb';
        const p = Object.assign({}, params);
        this.renumberSerial = defaults(p.renumberSerial, true);
        this.remarks = ensureArray(defaults(p.remarks, []));
        this.structure = structure;
        this._records = [];
    }
    _writeRecords() {
        this._records.length = 0;
        this._writeTitle();
        this._writeRemarks();
        this._writeAtoms();
    }
    _writeTitle() {
        // FIXME multiline if title line longer than 80 chars
        this._records.push(sprintf('TITLE %-74s', this.structure.name));
    }
    _writeRemarks() {
        this.remarks.forEach(str => {
            this._records.push(sprintf('REMARK %-73s', str));
        });
        if (this.structure.trajectory) {
            this._records.push(sprintf('REMARK %-73s', "Trajectory '" + this.structure.trajectory.name + "'"));
            this._records.push(sprintf('REMARK %-73s', `Frame ${this.structure.trajectory.frame}` // TODO
            ));
        }
    }
    _writeAtoms() {
        let ia = 1;
        let im = 1;
        let charge = " ";
        let chargeSign = " ";
        const hasModels = this.structure.modelStore.count > 1;
        this.structure.eachModel(m => {
            if (hasModels)
                this._records.push(sprintf('MODEL     %4d%-66s', im++, ''));
            m.eachAtom((a) => {
                const formatString = a.hetero ? HetatmFormat : AtomFormat;
                const serial = this.renumberSerial ? ia : a.serial;
                // Formal PDB spec
                // Alignment of one-letter atom name such as C starts at column 14,
                // while two-letter atom name such as FE starts at column 13.
                // This, however, leaves Calcium and C-alpha ambiguous
                // The convention (from earlier versions of the spec, see 1992, and also: 
                // https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html#misalignment)
                // is that element is right-justified in 13-14, modifiers are left justified in columns 15-16
                // A single-character element symmbol should not appear in column 13 unless the atom name has four characters
                let atomname = a.atomname;
                if (atomname.length === 1) {
                    // Simple case
                    atomname = ' ' + atomname;
                }
                else if (atomname.length < 4) {
                    // 2 or 3-letter name, if element symbol is single char and matches name, add a space
                    if (a.element.length === 1 && atomname[0] === a.element) {
                        atomname = ' ' + atomname;
                    }
                }
                if (a.formalCharge) { // Skip nulls and zeros
                    charge = Math.abs(a.formalCharge).toPrecision(1);
                    chargeSign = (a.formalCharge > 0) ? "+" : "-";
                }
                else {
                    charge = " ";
                    chargeSign = " ";
                }
                this._records.push(sprintf(formatString, serial, atomname, a.resname, defaults(a.chainname, ' '), a.resno, a.x, a.y, a.z, defaults(a.occupancy, 1.0), defaults(a.bfactor, 0.0), '', // segid
                defaults(a.element, ''), charge, chargeSign));
                ia += 1;
            }, this.structure.getSelection());
            if (hasModels)
                this._records.push(sprintf('%-80s', 'ENDMDL'));
        });
        this._records.push(sprintf('%-80s', 'END'));
    }
    getString() {
        console.warn('PdbWriter.getString() is deprecated, use .getData instead');
        return this.getData();
    }
    /**
     * Get string containing the PDB file data
     * @return {String} PDB file
     */
    getData() {
        this._writeRecords();
        return this._records.join('\n');
    }
}

/**
 * Writer class for sdf/mol files.
 */
// Hard-coded chiral as false as we don't specify it any atoms
const CountFormat = '%3i%3i  0  0  0  0  0  0  0  0999 V2000';
const AtomLine = '%10.4f%10.4f%10.4f %-3s 0%3i  0  0  0';
const BondFormat = '%3i%3i%3i  0  0  0';
class SdfWriter extends Writer {
    /**
     * @param {Structure} structure - structure to write
     * @param {Object} params - parameters
     */
    constructor(structure) {
        super();
        this.mimeType = 'text/plain';
        this.defaultName = 'structure';
        this.defaultExt = 'sdf';
        this.structure = structure;
        // Follow the pdb-writer example:
        this._records = [];
    }
    get idString() {
        return this.structure.id;
    }
    get titleString() {
        return '  ' + this.structure.title;
    }
    get countsString() {
        return sprintf(CountFormat, this.structure.atomCount, this.structure.bondCount);
    }
    get chargeLines() {
        const pairs = [];
        this.structure.eachAtom(ap => {
            if (ap.formalCharge != null && ap.formalCharge !== 0) {
                pairs.push([ap.index, ap.formalCharge]);
            }
        });
        const lines = [];
        for (let i = 0; i < pairs.length; i += 8) {
            const nCharges = Math.min(8, pairs.length - i);
            let s = sprintf('M  CHG%3i', nCharges);
            for (let j = i; j < i + nCharges; j++) {
                s += sprintf(' %3i %3i', pairs[j][0] + 1, pairs[j][1]);
            }
            lines.push(s);
        }
        return lines;
    }
    formatAtom(ap) {
        let charge = 0;
        if (ap.formalCharge != null && ap.formalCharge !== 0) {
            charge = 4 - ap.formalCharge;
        }
        const line = sprintf(AtomLine, ap.x, ap.y, ap.z, ap.element, charge);
        if (line.length !== 48) {
            throw new Error('Incompatible atom for sdf format');
        }
        return line;
    }
    formatBond(bp) {
        return sprintf(BondFormat, bp.atomIndex1 + 1, bp.atomIndex2 + 1, bp.bondOrder);
    }
    _writeRecords() {
        this._records.length = 0;
        this._writeHeader();
        this._writeCTab();
        this._writeFooter();
    }
    _writeHeader() {
        this._records.push(this.idString, this.titleString, '');
    }
    _writeCTab() {
        this._records.push(this.countsString);
        this.structure.eachAtom(ap => {
            this._records.push(this.formatAtom(ap));
        });
        this.structure.eachBond(bp => {
            this._records.push(this.formatBond(bp));
        });
        this.chargeLines.forEach(line => {
            this._records.push(line);
        });
        this._records.push('M  END');
    }
    _writeFooter() {
        this._records.push('$$$$');
    }
    getData() {
        this._writeRecords();
        return this._records.join('\n');
    }
}

/**
 * @file IO Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 *
 * Adapted and converted to TypeScript from https://github.com/image-js/iobuffer
 * MIT License, Copyright (c) 2015 Michaël Zasso
 */
const defaultByteLength = 1024 * 8;
const charArray = [];
/**
 * Class for writing and reading binary data
 */
class IOBuffer {
    /**
     * If it's a number, it will initialize the buffer with the number as
     * the buffer's length. If it's undefined, it will initialize the buffer
     * with a default length of 8 Kb. If its an ArrayBuffer, a TypedArray,
     * it will create a view over the underlying ArrayBuffer.
     */
    constructor(data, params = {}) {
        this._mark = 0;
        this._marks = [];
        this.offset = 0; // The current offset of the buffer's pointer
        this.littleEndian = true;
        let dataIsGiven = false;
        if (data === undefined) {
            data = defaultByteLength;
        }
        if (typeof data === 'number') {
            data = new ArrayBuffer(data);
        }
        else {
            dataIsGiven = true;
        }
        const offset = params.offset ? params.offset >>> 0 : 0;
        let byteLength = data.byteLength - offset;
        let dvOffset = offset;
        if (!(data instanceof ArrayBuffer)) {
            if (data.byteLength !== data.buffer.byteLength) {
                dvOffset = data.byteOffset + offset;
            }
            data = data.buffer;
        }
        if (dataIsGiven) {
            this._lastWrittenByte = byteLength;
        }
        else {
            this._lastWrittenByte = 0;
        }
        this.buffer = data;
        this.length = byteLength;
        this.byteLength = byteLength;
        this.byteOffset = dvOffset;
        this._data = new DataView(this.buffer, dvOffset, byteLength);
    }
    /**
     * Checks if the memory allocated to the buffer is sufficient to store more bytes after the offset
     * @param {number} [byteLength=1] The needed memory in bytes
     * @return {boolean} Returns true if there is sufficient space and false otherwise
     */
    available(byteLength) {
        if (byteLength === undefined)
            byteLength = 1;
        return (this.offset + byteLength) <= this.length;
    }
    /**
     * Check if little-endian mode is used for reading and writing multi-byte values
     * @return {boolean} Returns true if little-endian mode is used, false otherwise
     */
    isLittleEndian() {
        return this.littleEndian;
    }
    /**
     * Set little-endian mode for reading and writing multi-byte values
     * @return {IOBuffer}
     */
    setLittleEndian() {
        this.littleEndian = true;
        return this;
    }
    /**
     * Check if big-endian mode is used for reading and writing multi-byte values
     * @return {boolean} Returns true if big-endian mode is used, false otherwise
     */
    isBigEndian() {
        return !this.littleEndian;
    }
    /**
     * Switches to big-endian mode for reading and writing multi-byte values
     * @return {IOBuffer}
     */
    setBigEndian() {
        this.littleEndian = false;
        return this;
    }
    /**
     * Move the pointer n bytes forward
     * @param {number} n
     * @return {IOBuffer}
     */
    skip(n) {
        if (n === undefined)
            n = 1;
        this.offset += n;
        return this;
    }
    /**
     * Move the pointer to the given offset
     * @param {number} offset
     * @return {IOBuffer}
     */
    seek(offset) {
        this.offset = offset;
        return this;
    }
    /**
     * Store the current pointer offset.
     * @see {@link IOBuffer#reset}
     * @return {IOBuffer}
     */
    mark() {
        this._mark = this.offset;
        return this;
    }
    /**
     * Move the pointer back to the last pointer offset set by mark
     * @see {@link IOBuffer#mark}
     * @return {IOBuffer}
     */
    reset() {
        this.offset = this._mark;
        return this;
    }
    /**
     * Push the current pointer offset to the mark stack
     * @see {@link IOBuffer#popMark}
     * @return {IOBuffer}
     */
    pushMark() {
        this._marks.push(this.offset);
        return this;
    }
    /**
     * Pop the last pointer offset from the mark stack, and set the current pointer offset to the popped value
     * @see {@link IOBuffer#pushMark}
     * @return {IOBuffer}
     */
    popMark() {
        const offset = this._marks.pop();
        if (offset === undefined)
            throw new Error('Mark stack empty');
        this.seek(offset);
        return this;
    }
    /**
     * Move the pointer offset back to 0
     * @return {IOBuffer}
     */
    rewind() {
        this.offset = 0;
        return this;
    }
    /**
     * Make sure the buffer has sufficient memory to write a given byteLength at the current pointer offset
     * If the buffer's memory is insufficient, this method will create a new buffer (a copy) with a length
     * that is twice (byteLength + current offset)
     * @param {number} [byteLength = 1]
     * @return {IOBuffer}
     */
    ensureAvailable(byteLength) {
        if (byteLength === undefined)
            byteLength = 1;
        if (!this.available(byteLength)) {
            const lengthNeeded = this.offset + byteLength;
            const newLength = lengthNeeded * 2;
            const newArray = new Uint8Array(newLength);
            newArray.set(new Uint8Array(this.buffer));
            this.buffer = newArray.buffer;
            this.length = this.byteLength = newLength;
            this._data = new DataView(this.buffer);
        }
        return this;
    }
    /**
     * Read a byte and return false if the byte's value is 0, or true otherwise
     * Moves pointer forward
     * @return {boolean}
     */
    readBoolean() {
        return this.readUint8() !== 0;
    }
    /**
     * Read a signed 8-bit integer and move pointer forward
     * @return {number}
     */
    readInt8() {
        return this._data.getInt8(this.offset++);
    }
    /**
     * Read an unsigned 8-bit integer and move pointer forward
     * @return {number}
     */
    readUint8() {
        return this._data.getUint8(this.offset++);
    }
    /**
     * Alias for {@link IOBuffer#readUint8}
     * @return {number}
     */
    readByte() {
        return this.readUint8();
    }
    /**
     * Read n bytes and move pointer forward.
     * @param {number} n
     * @return {Uint8Array}
     */
    readBytes(n) {
        if (n === undefined)
            n = 1;
        var bytes = new Uint8Array(n);
        for (var i = 0; i < n; i++) {
            bytes[i] = this.readByte();
        }
        return bytes;
    }
    /**
     * Read a 16-bit signed integer and move pointer forward
     * @return {number}
     */
    readInt16() {
        var value = this._data.getInt16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
    }
    /**
     * Read a 16-bit unsigned integer and move pointer forward
     * @return {number}
     */
    readUint16() {
        var value = this._data.getUint16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
    }
    /**
     * Read a 32-bit signed integer and move pointer forward
     * @return {number}
     */
    readInt32() {
        var value = this._data.getInt32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
    }
    /**
     * Read a 32-bit unsigned integer and move pointer forward
     * @return {number}
     */
    readUint32() {
        var value = this._data.getUint32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
    }
    /**
     * Read a 32-bit floating number and move pointer forward
     * @return {number}
     */
    readFloat32() {
        var value = this._data.getFloat32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
    }
    /**
     * Read a 64-bit floating number and move pointer forward
     * @return {number}
     */
    readFloat64() {
        var value = this._data.getFloat64(this.offset, this.littleEndian);
        this.offset += 8;
        return value;
    }
    /**
     * Read 1-byte ascii character and move pointer forward
     * @return {string}
     */
    readChar() {
        return String.fromCharCode(this.readInt8());
    }
    /**
     * Read n 1-byte ascii characters and move pointer forward
     * @param {number} n
     * @return {string}
     */
    readChars(n = 1) {
        charArray.length = n;
        for (var i = 0; i < n; i++) {
            charArray[i] = this.readChar();
        }
        return charArray.join('');
    }
    /**
     * Write 0xff if the passed value is truthy, 0x00 otherwise
     * @param {any} value
     * @return {IOBuffer}
     */
    writeBoolean(value = false) {
        this.writeUint8(value ? 0xff : 0x00);
        return this;
    }
    /**
     * Write value as an 8-bit signed integer
     * @param {number} value
     * @return {IOBuffer}
     */
    writeInt8(value) {
        this.ensureAvailable(1);
        this._data.setInt8(this.offset++, value);
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write value as a 8-bit unsigned integer
     * @param {number} value
     * @return {IOBuffer}
     */
    writeUint8(value) {
        this.ensureAvailable(1);
        this._data.setUint8(this.offset++, value);
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * An alias for {@link IOBuffer#writeUint8}
     * @param {number} value
     * @return {IOBuffer}
     */
    writeByte(value) {
        return this.writeUint8(value);
    }
    /**
     * Write bytes
     * @param {Array|Uint8Array} bytes
     * @return {IOBuffer}
     */
    writeBytes(bytes) {
        this.ensureAvailable(bytes.length);
        for (var i = 0; i < bytes.length; i++) {
            this._data.setUint8(this.offset++, bytes[i]);
        }
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write value as an 16-bit signed integer
     * @param {number} value
     * @return {IOBuffer}
     */
    writeInt16(value) {
        this.ensureAvailable(2);
        this._data.setInt16(this.offset, value, this.littleEndian);
        this.offset += 2;
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write value as a 16-bit unsigned integer
     * @param {number} value
     * @return {IOBuffer}
     */
    writeUint16(value) {
        this.ensureAvailable(2);
        this._data.setUint16(this.offset, value, this.littleEndian);
        this.offset += 2;
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write a 32-bit signed integer at the current pointer offset
     * @param {number} value
     * @return {IOBuffer}
     */
    writeInt32(value) {
        this.ensureAvailable(4);
        this._data.setInt32(this.offset, value, this.littleEndian);
        this.offset += 4;
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write a 32-bit unsigned integer at the current pointer offset
     * @param {number} value - The value to set
     * @return {IOBuffer}
     */
    writeUint32(value) {
        this.ensureAvailable(4);
        this._data.setUint32(this.offset, value, this.littleEndian);
        this.offset += 4;
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write a 32-bit floating number at the current pointer offset
     * @param {number} value - The value to set
     * @return {IOBuffer}
     */
    writeFloat32(value) {
        this.ensureAvailable(4);
        this._data.setFloat32(this.offset, value, this.littleEndian);
        this.offset += 4;
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write a 64-bit floating number at the current pointer offset
     * @param {number} value
     * @return {IOBuffer}
     */
    writeFloat64(value) {
        this.ensureAvailable(8);
        this._data.setFloat64(this.offset, value, this.littleEndian);
        this.offset += 8;
        this._updateLastWrittenByte();
        return this;
    }
    /**
     * Write the charCode of the passed string's first character to the current pointer offset
     * @param {string} str - The character to set
     * @return {IOBuffer}
     */
    writeChar(str) {
        return this.writeUint8(str.charCodeAt(0));
    }
    /**
     * Write the charCodes of the passed string's characters to the current pointer offset
     * @param {string} str
     * @return {IOBuffer}
     */
    writeChars(str) {
        for (var i = 0; i < str.length; i++) {
            this.writeUint8(str.charCodeAt(i));
        }
        return this;
    }
    /**
     * Export a Uint8Array view of the internal buffer.
     * The view starts at the byte offset and its length
     * is calculated to stop at the last written byte or the original length.
     * @return {Uint8Array}
     */
    toArray() {
        return new Uint8Array(this.buffer, this.byteOffset, this._lastWrittenByte);
    }
    /**
     * Update the last written byte offset
     * @private
     */
    _updateLastWrittenByte() {
        if (this.offset > this._lastWrittenByte) {
            this._lastWrittenByte = this.offset;
        }
    }
}

/**
 * @file STL Writer
 * @author Paul Pillot <paul.pillot@cimf.ca>
 * @private
 */
// https://en.wikipedia.org/wiki/STL_(file_format)#ASCII_STL
/**
 * Create an STL File from a surface Object (e.g. for 3D printing)
 *
 * @example
 * molsurf = new MolecularSurface(structure)
 * surf = molsurf.getSurface({type: 'av', probeRadius: 1.4})
 * stl = new StlWriter(surf)
 * stl.download('myFileName')
 */
class StlWriter extends Writer {
    /**
     * @param {Surface} surface - the surface to write out
     */
    constructor(surface) {
        super();
        this.mimeType = 'application/vnd.ms-pki.stl';
        this.defaultName = 'surface';
        this.defaultExt = 'stl';
        this.surface = surface;
    }
    /*
     * Get STL Binary data
     *
     * Adapted from: https://github.com/mrdoob/three.js/blob/master/examples/js/exporters/STLBinaryExporter.js
     * see https://en.wikipedia.org/wiki/STL_(file_format)#Binary_STL for the file format description
     *
     * @return {DataView} the data
     */
    getData() {
        const triangles = this.surface.index.length / 3;
        const bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;
        const output = new IOBuffer(bufferLength);
        output.skip(80); // skip header
        output.writeUint32(triangles);
        const vector = new Vector3();
        const vectorNorm1 = new Vector3();
        const vectorNorm2 = new Vector3();
        const vectorNorm3 = new Vector3();
        // traversing vertices
        for (let i = 0; i < triangles; i++) {
            const indices = [
                this.surface.index[i * 3],
                this.surface.index[i * 3 + 1],
                this.surface.index[i * 3 + 2]
            ];
            vectorNorm1.fromArray(this.surface.normal, indices[0] * 3);
            vectorNorm2.fromArray(this.surface.normal, indices[1] * 3);
            vectorNorm3.fromArray(this.surface.normal, indices[2] * 3);
            vector.addVectors(vectorNorm1, vectorNorm2).add(vectorNorm3).normalize();
            output.writeFloat32(vector.x);
            output.writeFloat32(vector.y);
            output.writeFloat32(vector.z);
            for (let j = 0; j < 3; j++) {
                vector.fromArray(this.surface.position, indices[j] * 3);
                output.writeFloat32(vector.x); // vertices
                output.writeFloat32(vector.y);
                output.writeFloat32(vector.z);
            }
            output.writeUint16(0); // attribute byte count
        }
        return new DataView(output.buffer);
    }
}

/**
 * @file Counter
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Counter class for keeping track of counts
 */
class Counter {
    constructor() {
        this.count = 0;
        this.signals = {
            countChanged: new signalsWrapper.Signal()
        };
    }
    /**
     * Set the `count` to zero
     * @return {undefined}
     */
    clear() {
        this.change(-this.count);
    }
    /**
     * Change the `count`
     * @fires Counter#countChanged
     * @param {Integer} delta - count change
     * @return {undefined}
     */
    change(delta) {
        this.count += delta;
        this.signals.countChanged.dispatch(delta, this.count);
        if (this.count < 0) {
            Log.warn('Counter.count below zero', this.count);
        }
    }
    /**
     * Increments the `count` by one.
     * @return {undefined}
     */
    increment() {
        this.change(1);
    }
    /**
     * Decrements the `count` by one.
     * @return {undefined}
     */
    decrement() {
        this.change(-1);
    }
    /**
     * Listen to another counter object and change this `count` by the
     * same amount
     * @param  {Counter} counter - the counter object to listen to
     * @return {undefined}
     */
    listen(counter) {
        this.change(counter.count);
        counter.signals.countChanged.add(this.change, this);
    }
    /**
     * Stop listening to the other counter object
     * @param  {Counter} counter - the counter object to stop listening to
     * @return {undefined}
     */
    unlisten(counter) {
        const countChanged = counter.signals.countChanged;
        if (countChanged.has(this.change, this)) {
            countChanged.remove(this.change, this);
        }
    }
    /**
     * Invole the callback function once, when the `count` becomes zero
     * @param  {Function} callback - the callback function
     * @param  {Object}   context - the context for the callback function
     * @return {undefined}
     */
    onZeroOnce(callback, context) {
        if (this.count === 0) {
            callback.call(context);
        }
        else {
            const fn = () => {
                if (this.count === 0) {
                    this.signals.countChanged.remove(fn, this);
                    callback.call(context);
                }
            };
            this.signals.countChanged.add(fn, this);
        }
    }
    dispose() {
        this.clear();
        this.signals.countChanged.dispose();
    }
}

ShaderRegistry.add('shader/BasicLine.vert', "void main(){\n#include begin_vertex\n#include project_vertex\n}");

ShaderRegistry.add('shader/BasicLine.frag', "uniform vec3 uColor;\n#include common\n#include fog_pars_fragment\nvoid main(){\ngl_FragColor = vec4( uColor, 1.0 );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n}");

ShaderRegistry.add('shader/Quad.vert', "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}");

ShaderRegistry.add('shader/Quad.frag', "varying vec2 vUv;\nuniform sampler2D tForeground;\nuniform float scale;\nvoid main() {\nvec4 foreground = texture2D( tForeground, vUv );\ngl_FragColor = foreground * scale;\n}");

/**
 * @file Stats
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Stats {
    constructor() {
        this.signals = {
            updated: new signalsWrapper.Signal()
        };
        this.maxDuration = -Infinity;
        this.minDuration = Infinity;
        this.avgDuration = 14;
        this.lastDuration = Infinity;
        this.prevFpsTime = 0;
        this.lastFps = Infinity;
        this.lastFrames = 1;
        this.frames = 0;
        this.count = 0;
        this.begin();
    }
    update() {
        this.startTime = this.end();
        this.currentTime = this.startTime;
        this.signals.updated.dispatch();
    }
    begin() {
        this.startTime = window.performance.now();
        this.lastFrames = this.frames;
    }
    end() {
        const time = window.performance.now();
        this.count += 1;
        this.frames += 1;
        this.lastDuration = time - this.startTime;
        this.minDuration = Math.min(this.minDuration, this.lastDuration);
        this.maxDuration = Math.max(this.maxDuration, this.lastDuration);
        this.avgDuration -= this.avgDuration / 30;
        this.avgDuration += this.lastDuration / 30;
        if (time > this.prevFpsTime + 1000) {
            this.lastFps = this.frames;
            this.prevFpsTime = time;
            this.frames = 0;
        }
        return time;
    }
}

ShaderRegistry.add('shader/chunk/fog_fragment.glsl', "#ifdef USE_FOG\nfloat depth = length( vViewPosition );\n#ifdef FOG_EXP2\nfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif");

ShaderRegistry.add('shader/chunk/interior_fragment.glsl', "if( gl_FrontFacing == false ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}");

ShaderRegistry.add('shader/chunk/matrix_scale.glsl', "float matrixScale( in mat4 m ){\nvec4 r = m[ 0 ];\nreturn sqrt( r[ 0 ] * r[ 0 ] + r[ 1 ] * r[ 1 ] + r[ 2 ] * r[ 2 ] );\n}");

ShaderRegistry.add('shader/chunk/nearclip_vertex.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < clipNear - 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

ShaderRegistry.add('shader/chunk/nearclip_fragment.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < clipNear )\ndiscard;\n#endif");

ShaderRegistry.add('shader/chunk/opaque_back_fragment.glsl', "#ifdef OPAQUE_BACK\n#ifdef FLIP_SIDED\nif( gl_FrontFacing == true ){\ngl_FragColor.a = 1.0;\n}\n#else\nif( gl_FrontFacing == false ){\ngl_FragColor.a = 1.0;\n}\n#endif\n#endif");

ShaderRegistry.add('shader/chunk/radiusclip_vertex.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius + 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

ShaderRegistry.add('shader/chunk/radiusclip_fragment.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius )\ndiscard;\n#endif");

ShaderRegistry.add('shader/chunk/unpack_color.glsl', "vec3 unpackColor(float f) {\nvec3 color;\ncolor.r = floor(f / 256.0 / 256.0);\ncolor.g = floor((f - color.r * 256.0 * 256.0) / 256.0);\ncolor.b = floor(f - color.r * 256.0 * 256.0 - color.g * 256.0);\nreturn color / 255.0;\n}");

/**
 * @file Shader Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getDefines(defines) {
    if (defines === undefined)
        return '';
    const lines = [];
    for (const name in defines) {
        const value = defines[name];
        if (!value)
            continue;
        lines.push(`#define ${name} ${value}`);
    }
    return lines.join('\n') + '\n';
}
const reInclude = /^(?!\/\/)\s*#include\s+(\S+)/gmi;
const shaderCache = {};
function getShader(name, defines = {}) {
    let hash = name + '|';
    for (const key in defines) {
        hash += key + ':' + defines[key];
    }
    if (!shaderCache[hash]) {
        const definesText = getDefines(defines);
        let shaderText = ShaderRegistry.get(`shader/${name}`);
        if (!shaderText) {
            throw new Error(`empty shader, '${name}'`);
        }
        shaderText = shaderText.replace(reInclude, function (match, p1) {
            const path = `shader/chunk/${p1}.glsl`;
            const chunk = ShaderRegistry.get(path) || ShaderChunk[p1];
            if (!chunk) {
                throw new Error(`empty chunk, '${p1}'`);
            }
            return chunk;
        });
        shaderCache[hash] = definesText + shaderText;
    }
    return shaderCache[hash];
}

/**
 * @file Viewer Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
if (typeof WebGLRenderingContext !== 'undefined') {
    const wrcp = WebGLRenderingContext.prototype;
    // wrap WebGL debug function used by three.js and
    // ignore calls to them when the debug flag is not set
    const _getShaderParameter = wrcp.getShaderParameter;
    wrcp.getShaderParameter = function getShaderParameter() {
        if (Debug) {
            return _getShaderParameter.apply(this, arguments);
        }
        else {
            return true;
        }
    };
    const _getShaderInfoLog = wrcp.getShaderInfoLog;
    wrcp.getShaderInfoLog = function getShaderInfoLog() {
        if (Debug) {
            return _getShaderInfoLog.apply(this, arguments);
        }
        else {
            return '';
        }
    };
    const _getProgramParameter = wrcp.getProgramParameter;
    wrcp.getProgramParameter = function getProgramParameter(program, pname) {
        if (Debug || pname !== wrcp.LINK_STATUS) {
            return _getProgramParameter.apply(this, arguments);
        }
        else {
            return true;
        }
    };
    const _getProgramInfoLog = wrcp.getProgramInfoLog;
    wrcp.getProgramInfoLog = function getProgramInfoLog() {
        if (Debug) {
            return _getProgramInfoLog.apply(this, arguments);
        }
        else {
            return '';
        }
    };
}
const JitterVectors = [
    [
        [0, 0]
    ],
    [
        [4, 4], [-4, -4]
    ],
    [
        [-2, -6], [6, -2], [-6, 2], [2, 6]
    ],
    [
        [1, -3], [-1, 3], [5, 1], [-3, -5],
        [-5, 5], [-7, -1], [3, 7], [7, -7]
    ],
    [
        [1, 1], [-1, -3], [-3, 2], [4, -1],
        [-5, -2], [2, 5], [5, 3], [3, -5],
        [-2, 6], [0, -7], [-4, -6], [-6, 4],
        [-8, 0], [7, -4], [6, 7], [-7, -8]
    ],
    [
        [-4, -7], [-7, -5], [-3, -5], [-5, -4],
        [-1, -4], [-2, -2], [-6, -1], [-4, 0],
        [-7, 1], [-1, 2], [-6, 3], [-3, 3],
        [-7, 6], [-3, 6], [-5, 7], [-1, 7],
        [5, -7], [1, -6], [6, -5], [4, -4],
        [2, -3], [7, -2], [1, -1], [4, -1],
        [2, 1], [6, 2], [0, 4], [4, 4],
        [2, 5], [7, 5], [5, 6], [3, 7]
    ]
];
JitterVectors.forEach(offsetList => {
    offsetList.forEach(offset => {
        // 0.0625 = 1 / 16
        offset[0] *= 0.0625;
        offset[1] *= 0.0625;
    });
});

/**
 * @file Tiled Renderer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class TiledRenderer {
    constructor(renderer, camera, viewer, params) {
        this.canvas = document.createElement('canvas');
        this._viewer = viewer;
        this._factor = defaults(params.factor, 2);
        this._antialias = defaults(params.antialias, false);
        this._onProgress = params.onProgress;
        this._onFinish = params.onFinish;
        if (this._antialias)
            this._factor *= 2;
        this._n = this._factor * this._factor;
        // canvas
        this._width = this._viewer.width;
        this._height = this._viewer.height;
        if (this._antialias) {
            this.canvas.width = this._width * this._factor / 2;
            this.canvas.height = this._height * this._factor / 2;
        }
        else {
            this.canvas.width = this._width * this._factor;
            this.canvas.height = this._height * this._factor;
        }
        this._ctx = this.canvas.getContext('2d');
        this._viewerSampleLevel = viewer.sampleLevel;
        this._viewer.setSampling(-1);
    }
    _renderTile(i) {
        const viewer = this._viewer;
        const width = this._width;
        const height = this._height;
        const factor = this._factor;
        const x = i % factor;
        const y = Math.floor(i / factor);
        const offsetX = x * width;
        const offsetY = y * height;
        viewer.camera.setViewOffset(width * factor, height * factor, offsetX, offsetY, width, height);
        viewer.render();
        if (this._antialias) {
            const w = Math.round((offsetX + width) / 2) - Math.round(offsetX / 2);
            const h = Math.round((offsetY + height) / 2) - Math.round(offsetY / 2);
            this._ctx.drawImage(viewer.renderer.domElement, Math.round(offsetX / 2), Math.round(offsetY / 2), w, h);
        }
        else {
            this._ctx.drawImage(viewer.renderer.domElement, Math.floor(offsetX), Math.floor(offsetY), Math.ceil(width), Math.ceil(height));
        }
        if (typeof this._onProgress === 'function') {
            this._onProgress(i + 1, this._n, false);
        }
    }
    _finalize() {
        this._viewer.setSampling(this._viewerSampleLevel);
        this._viewer.camera.view = null; // TODO
        if (typeof this._onFinish === 'function') {
            this._onFinish(this._n + 1, this._n, false);
        }
    }
    render() {
        for (let i = 0; i <= this._n; ++i) {
            if (i === this._n) {
                this._finalize();
            }
            else {
                this._renderTile(i);
            }
        }
    }
    renderAsync() {
        let count = 0;
        const n = this._n;
        const fn = () => {
            if (count === n) {
                this._finalize();
            }
            else {
                this._renderTile(count);
            }
            count += 1;
        };
        for (let i = 0; i <= n; ++i) {
            setTimeout(fn, 0);
        }
    }
}

/**
 * @file Math Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const TwoPI = 2 * Math.PI;
const RAD2DEG = 180 / Math.PI;

/**
 * @file Array Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function circularMean(array, max, stride = 1, offset = 0, indices) {
    // http://en.wikipedia.org/wiki/Center_of_mass#Systems_with_periodic_boundary_conditions
    // Bai, Linge; Breen, David (2008). Calculating Center of Mass in an Unbounded 2D Environment. Journal of Graphics, GPU, and Game Tools 13 (4): 53–60.
    // http://stackoverflow.com/questions/18166507/using-fft-to-find-the-center-of-mass-under-periodic-boundary-conditions
    const n = indices ? indices.length : array.length / stride;
    let cosMean = 0;
    let sinMean = 0;
    if (indices) {
        for (let i = 0; i < n; ++i) {
            const c = (array[indices[i] * stride + offset] + max) % max;
            const angle = (c / max) * TwoPI - Math.PI;
            cosMean += Math.cos(angle);
            sinMean += Math.sin(angle);
        }
    }
    else {
        for (let i = offset; i < n; i += stride) {
            const c = (array[i] + max) % max;
            const angle = (c / max) * TwoPI - Math.PI;
            cosMean += Math.cos(angle);
            sinMean += Math.sin(angle);
        }
    }
    cosMean /= n;
    sinMean /= n;
    const meanAngle = Math.atan2(sinMean, cosMean);
    const mean = (meanAngle + Math.PI) / TwoPI * max;
    return mean;
}
function calculateCenterArray(array1, array2, center, offset = 0) {
    const n = array1.length;
    const c = center || new Float32Array(n);
    for (let i = 0; i < n; i += 3) {
        c[offset + i + 0] = (array1[i + 0] + array2[i + 0]) / 2.0;
        c[offset + i + 1] = (array1[i + 1] + array2[i + 1]) / 2.0;
        c[offset + i + 2] = (array1[i + 2] + array2[i + 2]) / 2.0;
    }
    return c;
}
function calculateDirectionArray(array1, array2) {
    const n = array1.length;
    const direction = new Float32Array(n);
    for (let i = 0; i < n; i += 3) {
        direction[i + 0] = array2[i + 0] - array1[i + 0];
        direction[i + 1] = array2[i + 1] - array1[i + 1];
        direction[i + 2] = array2[i + 2] - array1[i + 2];
    }
    return direction;
}
function uniformArray(n, a, optionalTarget) {
    const array = optionalTarget || new Float32Array(n);
    for (let i = 0; i < n; ++i) {
        array[i] = a;
    }
    return array;
}
function uniformArray3(n, a, b, c, optionalTarget) {
    const array = optionalTarget || new Float32Array(n * 3);
    for (let i = 0; i < n; ++i) {
        const j = i * 3;
        array[j + 0] = a;
        array[j + 1] = b;
        array[j + 2] = c;
    }
    return array;
}
function centerArray3(array, center = new Vector3()) {
    const n = array.length;
    for (let i = 0; i < n; i += 3) {
        center.x += array[i];
        center.y += array[i + 1];
        center.z += array[i + 2];
    }
    center.divideScalar(n / 3);
    return center;
}
function serialArray(n) {
    const array = new Float32Array(n);
    for (let i = 0; i < n; ++i) {
        array[i] = i;
    }
    return array;
}
function serialBlockArray(n, b, offset = 0, optionalTarget) {
    const array = optionalTarget || new Float32Array(n * b);
    for (let i = 0; i < n; ++i) {
        const k = offset + i * b;
        for (let j = 0; j < b; ++j) {
            array[k + j] = i;
        }
    }
    return array;
}
function replicateArrayEntries(array, m) {
    const n = array.length;
    const repArr = new Float32Array(n * m);
    for (let i = 0; i < n; ++i) {
        const k = i * m;
        const a = array[i];
        for (let j = 0; j < m; ++j) {
            repArr[k + j] = a;
        }
    }
    return repArr;
}
function replicateArray3Entries(array, m) {
    const n = array.length / 3;
    const repArr = new Float32Array(n * m * 3);
    for (let i = 0; i < n; ++i) {
        const v = i * 3;
        const k = i * m * 3;
        const a = array[v + 0];
        const b = array[v + 1];
        const c = array[v + 2];
        for (let j = 0; j < m; ++j) {
            const l = k + j * 3;
            repArr[l + 0] = a;
            repArr[l + 1] = b;
            repArr[l + 2] = c;
        }
    }
    return repArr;
}
function calculateMinArray(array1, array2) {
    const n = array1.length;
    const min = new Float32Array(n);
    for (let i = 0; i < n; i++) {
        min[i] = Math.min(array1[i], array2[i]);
    }
    return min;
}
function copyArray(src, dst, srcOffset, dstOffset, length) {
    for (let i = 0; i < length; ++i) {
        dst[dstOffset + i] = src[srcOffset + i];
    }
}
function copyWithin(array, srcOffset, dstOffset, length) {
    copyArray(array, array, srcOffset, dstOffset, length);
}
function quicksortCmp(arr, cmp, begin = 0, end) {
    cmp = cmp || function cmp(a, b) {
        if (a > b)
            return 1;
        if (a < b)
            return -1;
        return 0;
    };
    end = (end || arr.length) - 1;
    const stack = [];
    let sp = -1;
    let left = begin;
    let right = end;
    let tmp;
    function swap(a, b) {
        const tmp2 = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp2;
    }
    let i, j;
    while (true) {
        if (right - left <= 25) {
            for (let k = left + 1; k <= right; ++k) {
                tmp = arr[k];
                i = k - 1;
                while (i >= left && cmp(arr[i], tmp) > 0) {
                    arr[i + 1] = arr[i];
                    --i;
                }
                arr[i + 1] = tmp;
            }
            if (sp === -1)
                break;
            right = stack[sp--]; // ?
            left = stack[sp--];
        }
        else {
            const median = (left + right) >> 1;
            i = left + 1;
            j = right;
            swap(median, i);
            if (cmp(arr[left], arr[right]) > 0) {
                swap(left, right);
            }
            if (cmp(arr[i], arr[right]) > 0) {
                swap(i, right);
            }
            if (cmp(arr[left], arr[i]) > 0) {
                swap(left, i);
            }
            tmp = arr[i];
            while (true) {
                do
                    i++;
                while (cmp(arr[i], tmp) < 0);
                do
                    j--;
                while (cmp(arr[j], tmp) > 0);
                if (j < i)
                    break;
                swap(i, j);
            }
            arr[left + 1] = arr[j];
            arr[j] = tmp;
            if (right - i + 1 >= j - left) {
                stack[++sp] = i;
                stack[++sp] = right;
                right = j - 1;
            }
            else {
                stack[++sp] = left;
                stack[++sp] = j - 1;
                left = i;
            }
        }
    }
    return arr;
}
function arrayMax(array) {
    let max = -Infinity;
    for (let i = 0, il = array.length; i < il; ++i) {
        if (array[i] > max)
            max = array[i];
    }
    return max;
}
function arrayMin(array) {
    let min = Infinity;
    for (let i = 0, il = array.length; i < il; ++i) {
        if (array[i] < min)
            min = array[i];
    }
    return min;
}
function arraySum(array, stride = 1, offset = 0) {
    const n = array.length;
    let sum = 0;
    for (let i = offset; i < n; i += stride) {
        sum += array[i];
    }
    return sum;
}
function arrayMean(array, stride = 1, offset = 0) {
    return arraySum(array, stride, offset) / (array.length / stride);
}
function arrayRms(array) {
    const n = array.length;
    let sumSq = 0;
    for (let i = 0; i < n; ++i) {
        const di = array[i];
        sumSq += di * di;
    }
    return Math.sqrt(sumSq / n);
}

/**
 * @file Viewer Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function _trimCanvas(canvas, r, g, b, a) {
    const canvasHeight = canvas.height;
    const canvasWidth = canvas.width;
    const ctx = canvas.getContext('2d');
    const pixels = ctx.getImageData(0, 0, canvasWidth, canvasHeight).data;
    let x, y, doBreak, off;
    doBreak = false;
    for (y = 0; y < canvasHeight; y++) {
        for (x = 0; x < canvasWidth; x++) {
            off = (y * canvasWidth + x) * 4;
            if (pixels[off] !== r || pixels[off + 1] !== g ||
                pixels[off + 2] !== b || pixels[off + 3] !== a) {
                doBreak = true;
                break;
            }
        }
        if (doBreak) {
            break;
        }
    }
    const topY = y;
    doBreak = false;
    for (x = 0; x < canvasWidth; x++) {
        for (y = 0; y < canvasHeight; y++) {
            off = (y * canvasWidth + x) * 4;
            if (pixels[off] !== r || pixels[off + 1] !== g ||
                pixels[off + 2] !== b || pixels[off + 3] !== a) {
                doBreak = true;
                break;
            }
        }
        if (doBreak) {
            break;
        }
    }
    const topX = x;
    doBreak = false;
    for (y = canvasHeight - 1; y >= 0; y--) {
        for (x = canvasWidth - 1; x >= 0; x--) {
            off = (y * canvasWidth + x) * 4;
            if (pixels[off] !== r || pixels[off + 1] !== g ||
                pixels[off + 2] !== b || pixels[off + 3] !== a) {
                doBreak = true;
                break;
            }
        }
        if (doBreak) {
            break;
        }
    }
    const bottomY = y;
    doBreak = false;
    for (x = canvasWidth - 1; x >= 0; x--) {
        for (y = canvasHeight - 1; y >= 0; y--) {
            off = (y * canvasWidth + x) * 4;
            if (pixels[off] !== r || pixels[off + 1] !== g ||
                pixels[off + 2] !== b || pixels[off + 3] !== a) {
                doBreak = true;
                break;
            }
        }
        if (doBreak) {
            break;
        }
    }
    const bottomX = x;
    const trimedCanvas = document.createElement('canvas');
    trimedCanvas.width = bottomX - topX;
    trimedCanvas.height = bottomY - topY;
    const trimedCtx = trimedCanvas.getContext('2d');
    trimedCtx.drawImage(canvas, topX, topY, trimedCanvas.width, trimedCanvas.height, 0, 0, trimedCanvas.width, trimedCanvas.height);
    return trimedCanvas;
}
/**
 * Image parameter object.
 * @typedef {Object} ImageParameters - image generation parameters
 * @property {Boolean} trim - trim the image
 * @property {Integer} factor - scaling factor to apply to the viewer canvas
 * @property {Boolean} antialias - antialias the image
 * @property {Boolean} transparent - transparent image background
 */
const ImageDefaultParameters = {
    trim: false,
    factor: 1,
    antialias: false,
    transparent: false,
    onProgress: undefined
};
/**
 * Make image from what is shown in a viewer canvas
 * @param  {Viewer} viewer - the viewer
 * @param  {ImageParameters} params - parameters object
 * @return {Promise} A Promise object that resolves to an image {@link Blob}.
 */
function makeImage(viewer, params = {}) {
    const { trim, factor, antialias, transparent } = createParams(params, ImageDefaultParameters);
    const renderer = viewer.renderer;
    const camera = viewer.camera;
    const originalClearAlpha = renderer.getClearAlpha();
    const backgroundColor = renderer.getClearColor(new Color());
    function setLineWidthAndPixelSize(invert = false) {
        let _factor = factor;
        if (antialias)
            _factor *= 2;
        if (invert)
            _factor = 1 / _factor;
        viewer.scene.traverse(function (o) {
            const m = o.material;
            if (m && m.linewidth) {
                m.linewidth *= _factor;
            }
            if (m && m.uniforms && m.uniforms.size) {
                if (m.uniforms.size.__seen === undefined) {
                    m.uniforms.size.value *= _factor;
                    m.uniforms.size.__seen = true;
                }
            }
            if (m && m.uniforms && m.uniforms.linewidth) {
                if (m.uniforms.linewidth.__seen === undefined) {
                    m.uniforms.linewidth.value *= _factor;
                    m.uniforms.linewidth.__seen = true;
                }
            }
        });
        viewer.scene.traverse(function (o) {
            const m = o.material;
            if (m && m.uniforms && m.uniforms.size) {
                delete m.uniforms.size.__seen;
            }
            if (m && m.uniforms && m.uniforms.linewidth) {
                delete m.uniforms.linewidth.__seen;
            }
        });
    }
    function trimCanvas(canvas) {
        if (trim) {
            const bg = backgroundColor;
            const r = transparent ? 0 : bg.r * 255;
            const g = transparent ? 0 : bg.g * 255;
            const b = transparent ? 0 : bg.b * 255;
            const a = transparent ? 0 : 255;
            return _trimCanvas(canvas, r, g, b, a);
        }
        else {
            return canvas;
        }
    }
    function onProgress(i, n, finished) {
        if (typeof params.onProgress === 'function') {
            params.onProgress(i, n, finished);
        }
    }
    return new Promise(function (resolve, reject) {
        const tiledRenderer = new TiledRenderer(renderer, camera, viewer, { factor, antialias, onProgress, onFinish });
        renderer.setClearAlpha(transparent ? 0 : 1);
        setLineWidthAndPixelSize();
        tiledRenderer.renderAsync();
        function onFinish(i, n) {
            const canvas = trimCanvas(tiledRenderer.canvas);
            canvas.toBlob(function (blob) {
                renderer.setClearAlpha(originalClearAlpha);
                setLineWidthAndPixelSize(true);
                viewer.requestRender();
                onProgress(n, n, true);
                if (blob) {
                    resolve(blob);
                }
                else {
                    reject('error creating image');
                }
            }, 'image/png');
        }
    });
}
const vertex = new Vector3();
const matrix$1 = new Matrix4();
const modelViewProjectionMatrix = new Matrix4();
function sortProjectedPosition(scene, camera) {
    // console.time( "sort" );
    scene.traverseVisible(function (o) {
        if (!(o instanceof Points) || !o.userData.buffer.parameters.sortParticles) {
            return;
        }
        const attributes = o.geometry.attributes; // TODO
        const n = attributes.position.count;
        if (n === 0)
            return;
        matrix$1.multiplyMatrices(camera.matrixWorldInverse, o.matrixWorld);
        modelViewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, matrix$1);
        let sortData, sortArray, zArray, cmpFn;
        if (!o.userData.sortData) {
            zArray = new Float32Array(n);
            sortArray = new Uint32Array(n);
            cmpFn = function (ai, bi) {
                const a = zArray[ai];
                const b = zArray[bi];
                if (a > b)
                    return 1;
                if (a < b)
                    return -1;
                return 0;
            };
            sortData = {
                __zArray: zArray,
                __sortArray: sortArray,
                __cmpFn: cmpFn
            };
            o.userData.sortData = sortData;
        }
        else {
            sortData = o.userData.sortData;
            zArray = sortData.__zArray;
            sortArray = sortData.__sortArray;
            cmpFn = sortData.__cmpFn;
        }
        for (let i = 0; i < n; ++i) {
            vertex.fromArray(attributes.position.array, i * 3);
            vertex.applyMatrix4(modelViewProjectionMatrix);
            // negate, so that sorting order is reversed
            zArray[i] = -vertex.z;
            sortArray[i] = i;
        }
        quicksortCmp(sortArray, cmpFn);
        let index, indexSrc, indexDst, tmpTab;
        for (let name in attributes) {
            const attr = attributes[name];
            const array = attr.array;
            const itemSize = attr.itemSize;
            if (!sortData[name]) {
                sortData[name] = new Float32Array(itemSize * n);
            }
            tmpTab = sortData[name];
            sortData[name] = array;
            for (let i = 0; i < n; ++i) {
                index = sortArray[i];
                for (let j = 0; j < itemSize; ++j) {
                    indexSrc = index * itemSize + j;
                    indexDst = i * itemSize + j;
                    tmpTab[indexDst] = array[indexSrc];
                }
            }
            attributes[name].array = tmpTab;
            attributes[name].needsUpdate = true;
        }
    });
    // console.timeEnd( "sort" );
}
const resolution = new Vector2();
const projectionMatrixInverse = new Matrix4();
const projectionMatrixTranspose = new Matrix4();
function updateMaterialUniforms(group, camera, renderer, cDist, bRadius) {
    let size = new Vector2();
    renderer.getSize(size);
    const canvasHeight = size.height;
    const pixelRatio = renderer.getPixelRatio();
    const ortho = camera.type === 'OrthographicCamera';
    resolution.set(size.width, size.height);
    projectionMatrixInverse.copy(camera.projectionMatrix).invert();
    projectionMatrixTranspose.copy(camera.projectionMatrix).transpose();
    group.traverse(function (o) {
        const m = o.material;
        if (!m)
            return;
        const u = m.uniforms;
        if (!u)
            return;
        if (m.clipNear) {
            const nearFactor = (50 - m.clipNear) / 50;
            const nearClip = cDist - (bRadius * nearFactor);
            u.clipNear.value = nearClip;
        }
        if (u.canvasHeight) {
            u.canvasHeight.value = canvasHeight;
        }
        if (u.resolution) {
            u.resolution.value.copy(resolution);
        }
        if (u.pixelRatio) {
            u.pixelRatio.value = pixelRatio;
        }
        if (u.projectionMatrixInverse) {
            u.projectionMatrixInverse.value.copy(projectionMatrixInverse);
        }
        if (u.projectionMatrixTranspose) {
            u.projectionMatrixTranspose.value.copy(projectionMatrixTranspose);
        }
        if (u.ortho) {
            u.ortho.value = ortho;
        }
    });
}
function updateCameraUniforms(group, camera) {
    projectionMatrixInverse.copy(camera.projectionMatrix).invert();
    projectionMatrixTranspose.copy(camera.projectionMatrix).transpose();
    group.traverse(function (o) {
        const m = o.material;
        if (!m)
            return;
        const u = m.uniforms;
        if (!u)
            return;
        if (u.projectionMatrixInverse) {
            u.projectionMatrixInverse.value.copy(projectionMatrixInverse);
        }
        if (u.projectionMatrixTranspose) {
            u.projectionMatrixTranspose.value.copy(projectionMatrixTranspose);
        }
    });
}

/**
 * @file Viewer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// adapted from https://webglfundamentals.org/webgl/resources/webgl-utils.js
// Copyright 2012, Gregg Tavares. Modified BSD License
function createProgram(gl, shaders, attribs, locations) {
    const program = gl.createProgram();
    if (!program) {
        console.log(`error creating WebGL program`);
        return;
    }
    shaders.forEach(shader => gl.attachShader(program, shader));
    if (attribs) {
        attribs.forEach((attrib, i) => {
            gl.bindAttribLocation(program, locations ? locations[i] : i, attrib);
        });
    }
    gl.linkProgram(program);
    // Check the link status
    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (!linked) {
        console.log(`error linking program: ${gl.getProgramInfoLog(program)}`);
        gl.deleteProgram(program);
        return null;
    }
    return program;
}
function loadShader(gl, shaderSource, shaderType) {
    const shader = gl.createShader(shaderType);
    if (!shader) {
        console.log(`error creating WebGL shader ${shaderType}`);
        return; // can't create shader
    }
    gl.shaderSource(shader, shaderSource);
    gl.compileShader(shader);
    // Check the compile status
    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (!compiled) {
        console.log(`error compiling shader ${shader}: ${gl.getShaderInfoLog(shader)}`);
        gl.deleteShader(shader);
        return null;
    }
    return shader;
}
//
function getErrorDescription(gl, error) {
    switch (error) {
        case gl.NO_ERROR: return 'no error';
        case gl.INVALID_ENUM: return 'invalid enum';
        case gl.INVALID_VALUE: return 'invalid value';
        case gl.INVALID_OPERATION: return 'invalid operation';
        case gl.INVALID_FRAMEBUFFER_OPERATION: return 'invalid framebuffer operation';
        case gl.OUT_OF_MEMORY: return 'out of memory';
        case gl.CONTEXT_LOST_WEBGL: return 'context lost';
    }
    return 'unknown error';
}
function getExtension(gl, name) {
    const ext = gl.getExtension(name);
    if (!ext)
        console.log(`extension '${name}' not available`);
    return ext;
}
const TextureTestVertShader = `
attribute vec4 a_position;

void main() {
  gl_Position = a_position;
}`;
const TextureTestFragShader = `
precision mediump float;
uniform vec4 u_color;
uniform sampler2D u_texture;

void main() {
  gl_FragColor = texture2D(u_texture, vec2(0.5, 0.5)) * u_color;
}`;
const TextureTestTexCoords = new Float32Array([
    -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0
]);
function testTextureSupport(type) {
    // adapted from
    // https://stackoverflow.com/questions/28827511/webgl-ios-render-to-floating-point-texture
    // Get A WebGL context
    const canvas = document.createElement('canvas');
    canvas.width = 16;
    canvas.height = 16;
    canvas.style.width = 16 + 'px';
    canvas.style.height = 16 + 'px';
    const gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
    if (!gl) {
        console.log(`error creating webgl context for ${type}`);
        return false;
    }
    if (!(gl instanceof WebGLRenderingContext)) {
        console.log(`Got unexpected type for WebGL rendering context`);
        return false;
    }
    getExtension(gl, 'OES_texture_float');
    getExtension(gl, 'OES_texture_half_float');
    getExtension(gl, 'WEBGL_color_buffer_float');
    // setup shaders
    const vertShader = loadShader(gl, TextureTestVertShader, gl.VERTEX_SHADER);
    const fragShader = loadShader(gl, TextureTestFragShader, gl.FRAGMENT_SHADER);
    if (!vertShader || !fragShader)
        return false;
    // setup program
    const program = createProgram(gl, [vertShader, fragShader]);
    if (!program) {
        console.log(`error creating WebGL program`);
        return false;
    }
    gl.useProgram(program);
    // look up where the vertex data needs to go.
    const positionLocation = gl.getAttribLocation(program, "a_position");
    const colorLoc = gl.getUniformLocation(program, "u_color");
    if (!colorLoc) {
        console.log(`error getting 'u_color' uniform location`);
        return false;
    }
    // provide texture coordinates for the rectangle.
    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, TextureTestTexCoords, gl.STATIC_DRAW);
    gl.enableVertexAttribArray(positionLocation);
    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
    const whiteTex = gl.createTexture();
    const whiteData = new Uint8Array([255, 255, 255, 255]);
    gl.bindTexture(gl.TEXTURE_2D, whiteTex);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, whiteData);
    const tex = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, tex);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, type, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    const fb = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    if (status !== gl.FRAMEBUFFER_COMPLETE) {
        console.log(`error creating framebuffer for ${type}`);
        return false;
    }
    // Draw the rectangle.
    gl.bindTexture(gl.TEXTURE_2D, whiteTex);
    gl.uniform4fv(colorLoc, [0, 10, 20, 1]);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
    gl.bindTexture(gl.TEXTURE_2D, tex);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.clearColor(1, 0, 0, 1);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.uniform4fv(colorLoc, [0, 1 / 10, 1 / 20, 1]);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
    // Check if rendered correctly
    const pixel = new Uint8Array(4);
    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);
    if (pixel[0] !== 0 || pixel[1] < 248 || pixel[2] < 248 || pixel[3] < 254) {
        console.log(`not able to actually render to ${type} texture`);
        return false;
    }
    // Check reading from float texture
    if (type === gl.FLOAT) {
        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
        const floatPixel = new Float32Array(4);
        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, floatPixel);
        const error = gl.getError();
        if (error) {
            console.log(`error reading pixels as float: '${getErrorDescription(gl, error)}'`);
            return false;
        }
    }
    return true;
}

/**
 * @file Viewer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const pixelBufferFloat = new Float32Array(4 * 25);
const pixelBufferUint = new Uint8Array(4 * 25);
// When picking, we read a 25 pixel (5x5) array (readRenderTargetPixels)
// We read the pixels in the order below to find what was picked.
// This starts at the center and tries successively further points.
// (Many points will be at equal distance to the center, their order
// is arbitrary).
const pixelOrder = [12, 7, 13, 17, 11, 6, 8, 18, 16, 2, 14, 22, 10, 1, 3, 9, 19, 23, 21, 15, 5, 0, 4, 24, 20];
const tmpMatrix$1 = new Matrix4();
function onBeforeRender(renderer, scene, camera, geometry, material /*, group */) {
    const u = material.uniforms;
    const updateList = [];
    if (!u)
        return; // See #908 - some materials may not have uniforms, ignore these
    if (u.objectId) {
        u.objectId.value = SupportsReadPixelsFloat ? this.id : this.id / 255;
        updateList.push('objectId');
    }
    if (u.modelViewMatrixInverse || u.modelViewMatrixInverseTranspose ||
        u.modelViewProjectionMatrix || u.modelViewProjectionMatrixInverse) {
        this.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, this.matrixWorld);
    }
    if (u.modelViewMatrixInverse) {
        u.modelViewMatrixInverse.value.copy(this.modelViewMatrix).invert();
        updateList.push('modelViewMatrixInverse');
    }
    if (u.modelViewMatrixInverseTranspose) {
        if (u.modelViewMatrixInverse) {
            u.modelViewMatrixInverseTranspose.value.copy(u.modelViewMatrixInverse.value).transpose();
        }
        else {
            u.modelViewMatrixInverseTranspose.value
                .copy(this.modelViewMatrix).invert()
                .transpose();
        }
        updateList.push('modelViewMatrixInverseTranspose');
    }
    if (u.modelViewProjectionMatrix) {
        u.modelViewProjectionMatrix.value.multiplyMatrices(camera.projectionMatrix, this.modelViewMatrix);
        updateList.push('modelViewProjectionMatrix');
    }
    if (u.modelViewProjectionMatrixInverse) {
        if (u.modelViewProjectionMatrix) {
            tmpMatrix$1.copy(u.modelViewProjectionMatrix.value);
            u.modelViewProjectionMatrixInverse.value.copy(tmpMatrix$1.invert());
        }
        else {
            tmpMatrix$1.multiplyMatrices(camera.projectionMatrix, this.modelViewMatrix);
            u.modelViewProjectionMatrixInverse.value.copy(tmpMatrix$1.invert());
        }
        updateList.push('modelViewProjectionMatrixInverse');
    }
    if (updateList.length) {
        const materialProperties = renderer.properties.get(material);
        if (materialProperties.program) {
            const gl = renderer.getContext();
            const p = materialProperties.program;
            gl.useProgram(p.program);
            const pu = p.getUniforms();
            updateList.forEach(function (name) {
                pu.setValue(gl, name, u[name].value);
            });
        }
    }
}
/**
 * Viewer class
 * @class
 * @param {String|Element} [idOrElement] - dom id or element
 */
class Viewer {
    constructor(idOrElement) {
        this.boundingBox = new Box3();
        this.boundingBoxSize = new Vector3();
        this.boundingBoxLength = 0;
        this.info = {
            memory: {
                programs: 0,
                geometries: 0,
                textures: 0
            },
            render: {
                calls: 0,
                vertices: 0,
                faces: 0,
                points: 0
            }
        };
        this.distVector = new Vector3();
        this.signals = {
            ticked: new Signal(),
            rendered: new Signal()
        };
        if (typeof idOrElement === 'string') {
            const elm = document.getElementById(idOrElement);
            if (elm === null) {
                this.container = document.createElement('div');
            }
            else {
                this.container = elm;
            }
        }
        else if (idOrElement instanceof HTMLElement) {
            this.container = idOrElement;
        }
        else {
            this.container = document.createElement('div');
        }
        if (this.container === document.body) {
            this.width = window.innerWidth || 1;
            this.height = window.innerHeight || 1;
        }
        else {
            const box = this.container.getBoundingClientRect();
            this.width = box.width || 1;
            this.height = box.height || 1;
            this.container.style.overflow = 'hidden';
        }
        this.wrapper = document.createElement('div');
        this.wrapper.style.position = 'relative';
        this.container.appendChild(this.wrapper);
        this._initParams();
        this._initStats();
        this._initCamera();
        this._initScene();
        if (this._initRenderer() === false) {
            Log.error('Viewer: could not initialize renderer');
            return;
        }
        this._initHelper();
        // fog & background
        this.setBackground();
        this.setFog();
        this.animate = this.animate.bind(this);
    }
    _initParams() {
        this.parameters = {
            fogColor: new Color(0x000000),
            fogNear: 50,
            fogFar: 100,
            backgroundColor: new Color(0x000000),
            cameraType: 'perspective',
            cameraFov: 40,
            cameraEyeSep: 0.3,
            cameraZ: -80,
            clipNear: 0,
            clipFar: 100,
            clipDist: 10,
            clipMode: 'scene',
            clipScale: 'relative',
            lightColor: new Color(0xdddddd),
            lightIntensity: 1.2,
            ambientColor: new Color(0xdddddd),
            ambientIntensity: 0.3,
            sampleLevel: 0,
            // output encoding: use srgb for a linear internal workflow, srgb-linear for traditional sRGB workflow.
            outputColorSpace: 'srgb-linear',
        };
    }
    _initCamera() {
        const lookAt = new Vector3(0, 0, 0);
        const { width, height } = this;
        this.perspectiveCamera = new PerspectiveCamera(this.parameters.cameraFov, width / height);
        this.perspectiveCamera.position.z = this.parameters.cameraZ;
        this.perspectiveCamera.lookAt(lookAt);
        this.orthographicCamera = new OrthographicCamera(width / -2, width / 2, height / 2, height / -2);
        this.orthographicCamera.position.z = this.parameters.cameraZ;
        this.orthographicCamera.lookAt(lookAt);
        this.stereoCamera = new StereoCamera();
        this.stereoCamera.aspect = 0.5;
        this.stereoCamera.eyeSep = this.parameters.cameraEyeSep;
        const cameraType = this.parameters.cameraType;
        if (cameraType === 'orthographic') {
            this.camera = this.orthographicCamera;
        }
        else if (cameraType === 'perspective' || cameraType === 'stereo') {
            this.camera = this.perspectiveCamera;
        }
        else {
            throw new Error(`Unknown cameraType '${cameraType}'`);
        }
        this.camera.updateProjectionMatrix();
    }
    _initStats() {
        this.stats = new Stats();
    }
    _initScene() {
        if (!this.scene) {
            this.scene = new Scene();
            this.scene.name = 'scene';
        }
        this.rotationGroup = new Group();
        this.rotationGroup.name = 'rotationGroup';
        this.scene.add(this.rotationGroup);
        this.translationGroup = new Group();
        this.translationGroup.name = 'translationGroup';
        this.rotationGroup.add(this.translationGroup);
        this.modelGroup = new Group();
        this.modelGroup.name = 'modelGroup';
        this.translationGroup.add(this.modelGroup);
        this.pickingGroup = new Group();
        this.pickingGroup.name = 'pickingGroup';
        this.translationGroup.add(this.pickingGroup);
        this.backgroundGroup = new Group();
        this.backgroundGroup.name = 'backgroundGroup';
        this.translationGroup.add(this.backgroundGroup);
        this.helperGroup = new Group();
        this.helperGroup.name = 'helperGroup';
        this.translationGroup.add(this.helperGroup);
        // fog
        this.scene.fog = new Fog(this.parameters.fogColor.getHex());
        // light
        this.directionalLight = new DirectionalLight(this.parameters.lightColor.getHex(), this.parameters.lightIntensity);
        this.scene.add(this.directionalLight);
        this.ambientLight = new AmbientLight(this.parameters.ambientColor.getHex(), this.parameters.ambientIntensity);
        this.scene.add(this.ambientLight);
    }
    _initRenderer() {
        const dpr = window.devicePixelRatio;
        const { width, height } = this;
        try {
            this.renderer = new WebGLRenderer({
                preserveDrawingBuffer: true,
                alpha: true,
                antialias: true
            });
        }
        catch (e) {
            this.wrapper.innerHTML = WebglErrorMessage;
            return false;
        }
        this.renderer.setPixelRatio(dpr);
        this.renderer.setSize(width, height);
        this.renderer.autoClear = false;
        this.renderer.sortObjects = true;
        this.renderer.outputColorSpace = this.parameters.outputColorSpace;
        this.renderer.useLegacyLights = true;
        const gl = this.renderer.getContext();
        // console.log(gl.getContextAttributes().antialias)
        // console.log(gl.getParameter(gl.SAMPLES))
        // For WebGL1, extensions must be explicitly enabled.
        // The following are builtin to WebGL2 (and don't appear as
        // extensions)
        // EXT_frag_depth, OES_element_index_uint, OES_texture_float
        // OES_texture_half_float
        // The WEBGL_color_buffer_float extension is replaced by
        // EXT_color_buffer_float
        // If not webgl2 context, explicitly check for these
        if (!this.renderer.capabilities.isWebGL2) {
            setExtensionFragDepth(this.renderer.extensions.get('EXT_frag_depth'));
            this.renderer.extensions.get('OES_element_index_uint');
            setSupportsReadPixelsFloat((this.renderer.extensions.get('OES_texture_float') &&
                this.renderer.extensions.get('WEBGL_color_buffer_float')) ||
                (this.renderer.extensions.get('OES_texture_float') &&
                    testTextureSupport(gl.FLOAT)));
            // picking texture
            this.renderer.extensions.get('OES_texture_float');
            this.supportsHalfFloat = (this.renderer.extensions.get('OES_texture_half_float') &&
                testTextureSupport(0x8D61));
        }
        else {
            setExtensionFragDepth(true);
            setSupportsReadPixelsFloat(this.renderer.extensions.get('EXT_color_buffer_float'));
            this.supportsHalfFloat = true;
        }
        this.wrapper.appendChild(this.renderer.domElement);
        const dprWidth = width * dpr;
        const dprHeight = height * dpr;
        if (Debug) {
            console.log(JSON.stringify({
                'Browser': Browser,
                'OES_texture_float': !!this.renderer.extensions.get('OES_texture_float'),
                'OES_texture_half_float': !!this.renderer.extensions.get('OES_texture_half_float'),
                'WEBGL_color_buffer_float': !!this.renderer.extensions.get('WEBGL_color_buffer_float'),
                'testTextureSupport Float': testTextureSupport(gl.FLOAT),
                'testTextureSupport HalfFloat': testTextureSupport(0x8D61),
                'this.supportsHalfFloat': this.supportsHalfFloat,
                'SupportsReadPixelsFloat': SupportsReadPixelsFloat
            }, null, 2));
        }
        this.pickingTarget = new WebGLRenderTarget(dprWidth, dprHeight, {
            minFilter: NearestFilter,
            magFilter: NearestFilter,
            stencilBuffer: false,
            format: RGBAFormat,
            type: SupportsReadPixelsFloat ? FloatType : UnsignedByteType
        });
        this.pickingTarget.texture.generateMipmaps = false;
        this.pickingTarget.texture.colorSpace = this.parameters.outputColorSpace;
        // workaround to reset the gl state after using testTextureSupport
        // fixes some bug where nothing is rendered to the canvas
        // when animations are started on page load
        this.renderer.setRenderTarget(this.pickingTarget);
        this.renderer.clear();
        this.renderer.setRenderTarget(null);
        // ssaa textures
        this.sampleTarget = new WebGLRenderTarget(dprWidth, dprHeight, {
            minFilter: LinearFilter,
            magFilter: LinearFilter,
            format: RGBAFormat,
            type: this.supportsHalfFloat ? HalfFloatType : (SupportsReadPixelsFloat ? FloatType : UnsignedByteType)
        });
        this.sampleTarget.texture.colorSpace = this.parameters.outputColorSpace;
        this.holdTarget = new WebGLRenderTarget(dprWidth, dprHeight, {
            minFilter: NearestFilter,
            magFilter: NearestFilter,
            format: RGBAFormat,
            type: this.supportsHalfFloat ? HalfFloatType : (SupportsReadPixelsFloat ? FloatType : UnsignedByteType)
        });
        this.holdTarget.texture.colorSpace = this.parameters.outputColorSpace;
        this.compositeUniforms = {
            'tForeground': new Uniform(this.sampleTarget.texture),
            'scale': new Uniform(1.0)
        };
        this.compositeMaterial = new ShaderMaterial({
            uniforms: this.compositeUniforms,
            vertexShader: getShader('Quad.vert'),
            fragmentShader: getShader('Quad.frag'),
            premultipliedAlpha: true,
            transparent: true,
            blending: AdditiveBlending,
            depthTest: false,
            depthWrite: false
        });
        this.compositeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
        this.compositeScene = new Scene();
        this.compositeScene.name = 'compositeScene';
        this.compositeScene.add(new Mesh(new PlaneGeometry(2, 2), this.compositeMaterial));
    }
    _initHelper() {
        const indices = new Uint16Array([
            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,
            6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7
        ]);
        const positions = new Float32Array(8 * 3);
        const bbGeometry = new BufferGeometry();
        bbGeometry.setIndex(new BufferAttribute(indices, 1));
        bbGeometry.setAttribute('position', new BufferAttribute(positions, 3));
        const bbMaterial = new ShaderMaterial({
            uniforms: { 'uColor': { value: new Color('skyblue') } },
            vertexShader: getShader('BasicLine.vert'),
            fragmentShader: getShader('BasicLine.frag')
        });
        this.boundingBoxMesh = new LineSegments(bbGeometry, bbMaterial);
        this.helperGroup.add(this.boundingBoxMesh);
    }
    updateHelper() {
        const position = this.boundingBoxMesh.geometry.attributes.position; // TODO
        const array = position.array;
        const { min, max } = this.boundingBox;
        array[0] = max.x;
        array[1] = max.y;
        array[2] = max.z;
        array[3] = min.x;
        array[4] = max.y;
        array[5] = max.z;
        array[6] = min.x;
        array[7] = min.y;
        array[8] = max.z;
        array[9] = max.x;
        array[10] = min.y;
        array[11] = max.z;
        array[12] = max.x;
        array[13] = max.y;
        array[14] = min.z;
        array[15] = min.x;
        array[16] = max.y;
        array[17] = min.z;
        array[18] = min.x;
        array[19] = min.y;
        array[20] = min.z;
        array[21] = max.x;
        array[22] = min.y;
        array[23] = min.z;
        position.needsUpdate = true;
        if (!this.boundingBox.isEmpty()) {
            this.boundingBoxMesh.geometry.computeBoundingSphere();
        }
    }
    /** Distance from origin (lookAt point) */
    get cameraDistance() {
        return Math.abs(this.camera.position.z);
    }
    /** Set distance from origin (lookAt point); along the -z axis */
    set cameraDistance(d) {
        this.camera.position.z = -d;
    }
    add(buffer, instanceList) {
        // Log.time( "Viewer.add" );
        if (instanceList) {
            instanceList.forEach(instance => this.addBuffer(buffer, instance));
        }
        else {
            this.addBuffer(buffer);
        }
        buffer.group.name = 'meshGroup';
        buffer.wireframeGroup.name = 'wireframeGroup';
        if (buffer.parameters.background) {
            this.backgroundGroup.add(buffer.group);
            this.backgroundGroup.add(buffer.wireframeGroup);
        }
        else {
            this.modelGroup.add(buffer.group);
            this.modelGroup.add(buffer.wireframeGroup);
        }
        if (buffer.pickable) {
            this.pickingGroup.add(buffer.pickingGroup);
        }
        if (Debug)
            this.updateHelper();
        // Log.timeEnd( "Viewer.add" );
    }
    addBuffer(buffer, instance) {
        // Log.time( "Viewer.addBuffer" );
        function setUserData(object) {
            if (object instanceof Group) {
                object.children.forEach(setUserData);
            }
            else {
                object.userData.buffer = buffer;
                object.userData.instance = instance;
                object.onBeforeRender = onBeforeRender;
            }
        }
        const mesh = buffer.getMesh();
        if (instance) {
            mesh.applyMatrix4(instance.matrix);
        }
        setUserData(mesh);
        buffer.group.add(mesh);
        const wireframeMesh = buffer.getWireframeMesh();
        if (instance) {
            // wireframeMesh.applyMatrix( instance.matrix );
            wireframeMesh.matrix.copy(mesh.matrix);
            wireframeMesh.position.copy(mesh.position);
            wireframeMesh.quaternion.copy(mesh.quaternion);
            wireframeMesh.scale.copy(mesh.scale);
        }
        setUserData(wireframeMesh);
        buffer.wireframeGroup.add(wireframeMesh);
        if (buffer.pickable) {
            const pickingMesh = buffer.getPickingMesh();
            if (instance) {
                // pickingMesh.applyMatrix( instance.matrix );
                pickingMesh.matrix.copy(mesh.matrix);
                pickingMesh.position.copy(mesh.position);
                pickingMesh.quaternion.copy(mesh.quaternion);
                pickingMesh.scale.copy(mesh.scale);
            }
            setUserData(pickingMesh);
            buffer.pickingGroup.add(pickingMesh);
        }
        if (instance) {
            this._updateBoundingBox(buffer.geometry, buffer.matrix, instance.matrix);
        }
        else {
            this._updateBoundingBox(buffer.geometry, buffer.matrix);
        }
        // Log.timeEnd( "Viewer.addBuffer" );
    }
    remove(buffer) {
        this.translationGroup.children.forEach(function (group) {
            group.remove(buffer.group);
            group.remove(buffer.wireframeGroup);
        });
        if (buffer.pickable) {
            this.pickingGroup.remove(buffer.pickingGroup);
        }
        this.updateBoundingBox();
        if (Debug)
            this.updateHelper();
        // this.requestRender();
    }
    _updateBoundingBox(geometry, matrix, instanceMatrix) {
        const boundingBox = this.boundingBox;
        function updateGeometry(geometry, matrix, instanceMatrix) {
            if (geometry.boundingBox == null) {
                geometry.computeBoundingBox();
            }
            const geoBoundingBox = geometry.boundingBox.clone();
            if (matrix) {
                geoBoundingBox.applyMatrix4(matrix);
            }
            if (instanceMatrix) {
                geoBoundingBox.applyMatrix4(instanceMatrix);
            }
            if (geoBoundingBox.min.equals(geoBoundingBox.max)) {
                // mainly to give a single impostor geometry some volume
                // as it is only expanded in the shader on the GPU
                geoBoundingBox.expandByScalar(5);
            }
            boundingBox.union(geoBoundingBox);
        }
        function updateNode(node) {
            if (node.geometry !== undefined) {
                let matrix, instanceMatrix;
                if (node.userData.buffer) {
                    matrix = node.userData.buffer.matrix;
                }
                if (node.userData.instance) {
                    instanceMatrix = node.userData.instance.matrix;
                }
                updateGeometry(node.geometry, matrix, instanceMatrix); // TODO
            }
        }
        if (geometry) {
            updateGeometry(geometry, matrix, instanceMatrix);
        }
        else {
            boundingBox.makeEmpty();
            this.modelGroup.traverse(updateNode);
            this.backgroundGroup.traverse(updateNode);
        }
        boundingBox.getSize(this.boundingBoxSize);
        this.boundingBoxLength = this.boundingBoxSize.length();
    }
    updateBoundingBox() {
        this._updateBoundingBox();
        if (Debug)
            this.updateHelper();
    }
    getPickingPixels() {
        const { width, height } = this;
        const n = width * height * 4;
        const imgBuffer = SupportsReadPixelsFloat ? new Float32Array(n) : new Uint8Array(n);
        this.render(true);
        this.renderer.readRenderTargetPixels(this.pickingTarget, 0, 0, width, height, imgBuffer);
        return imgBuffer;
    }
    getImage(picking) {
        return new Promise(resolve => {
            if (picking) {
                const { width, height } = this;
                const n = width * height * 4;
                let imgBuffer = this.getPickingPixels();
                if (SupportsReadPixelsFloat) {
                    const imgBuffer2 = new Uint8Array(n);
                    for (let i = 0; i < n; ++i) {
                        imgBuffer2[i] = Math.round(imgBuffer[i] * 255);
                    }
                    imgBuffer = imgBuffer2;
                }
                const canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                const ctx = canvas.getContext('2d'); // TODO
                const imgData = ctx.getImageData(0, 0, width, height);
                imgData.data.set(imgBuffer); // TODO
                ctx.putImageData(imgData, 0, 0);
                canvas.toBlob(resolve, 'image/png'); // TODO
            }
            else {
                this.renderer.domElement.toBlob(resolve, 'image/png'); // TODO
            }
        });
    }
    makeImage(params = {}) {
        return makeImage(this, params);
    }
    setLight(color, intensity, ambientColor, ambientIntensity) {
        const p = this.parameters;
        if (color !== undefined)
            p.lightColor.set(color); // TODO
        if (intensity !== undefined)
            p.lightIntensity = intensity;
        if (ambientColor !== undefined)
            p.ambientColor.set(ambientColor); // TODO
        if (ambientIntensity !== undefined)
            p.ambientIntensity = ambientIntensity;
        this.requestRender();
    }
    setFog(color, near, far) {
        const p = this.parameters;
        if (color !== undefined)
            p.fogColor.set(color); // TODO
        if (near !== undefined)
            p.fogNear = near;
        if (far !== undefined)
            p.fogFar = far;
        this.requestRender();
    }
    setBackground(color) {
        const p = this.parameters;
        if (color)
            p.backgroundColor.set(color); // TODO
        this.setFog(p.backgroundColor);
        this.renderer.setClearColor(p.backgroundColor, 0);
        this.renderer.domElement.style.backgroundColor = p.backgroundColor.getStyle();
        this.requestRender();
    }
    setSampling(level) {
        if (level !== undefined) {
            this.parameters.sampleLevel = level;
            this.sampleLevel = level;
        }
        this.requestRender();
    }
    /**
     * Set the output color encoding, i.e. how the renderer translates
     * colorspaces as it renders to the screen.
  
     * The default is LinearEncoding, because the internals of NGL are
     * already sRGB so no translation is needed to show sRGB colors.
     * Set to sRGBEncoding to create a linear workflow, and also call
     * `setColorEncoding(LinearEncoding)` to linearize colors on input.
     * @see setColorEncoding
     */
    setOutputEncoding(colorspace) {
        this.parameters.outputColorSpace = colorspace;
        this.renderer.outputColorSpace = colorspace;
        this.pickingTarget.texture.colorSpace = colorspace;
        this.sampleTarget.texture.colorSpace = colorspace;
        this.holdTarget.texture.colorSpace = colorspace;
    }
    /**
     * Set the internal color workflow, linear or sRGB.
     * sRGB, the default, is more "vibrant" at the cost of accuracy.
     * Linear gives more accurate results, especially for transparent objects.
     * In all cases, the output is always sRGB; this just affects how colors are computed internally.
     * Call this just after creating the viewer, before loading any models.
     */
    setColorWorkflow(colorspace) {
        if (colorspace != 'srgb-linear' && colorspace != 'srgb')
            throw new Error(`setColorWorkflow: invalid color workflow ${colorspace}`);
        setColorSpace(colorspace == 'srgb-linear' ? 'linear' : 'sRGB');
        this.setOutputEncoding(colorspace == 'srgb-linear' ? 'srgb' : 'srgb-linear');
        // Note: this doesn't rebuild models, so existing geometry will have
        // the old color encoding.
        this.requestRender();
    }
    setCamera(type, fov, eyeSep) {
        const p = this.parameters;
        if (type)
            p.cameraType = type;
        if (fov)
            p.cameraFov = fov;
        if (eyeSep)
            p.cameraEyeSep = eyeSep;
        if (p.cameraType === 'orthographic') {
            if (this.camera !== this.orthographicCamera) {
                this.camera = this.orthographicCamera;
                this.camera.position.copy(this.perspectiveCamera.position);
                this.camera.up.copy(this.perspectiveCamera.up);
                this.updateZoom();
            }
        }
        else if (p.cameraType === 'perspective' || p.cameraType === 'stereo') {
            if (this.camera !== this.perspectiveCamera) {
                this.camera = this.perspectiveCamera;
                this.camera.position.copy(this.orthographicCamera.position);
                this.camera.up.copy(this.orthographicCamera.up);
            }
        }
        else {
            throw new Error(`Unknown cameraType '${p.cameraType}'`);
        }
        this.perspectiveCamera.fov = p.cameraFov;
        this.stereoCamera.eyeSep = p.cameraEyeSep;
        this.camera.updateProjectionMatrix();
        this.requestRender();
    }
    setClip(near, far, dist, clipMode, clipScale) {
        const p = this.parameters;
        if (near !== undefined)
            p.clipNear = near;
        if (far !== undefined)
            p.clipFar = far;
        if (dist !== undefined)
            p.clipDist = dist;
        if (clipMode !== undefined)
            p.clipMode = clipMode;
        if (clipScale !== undefined)
            p.clipScale = clipScale;
        this.requestRender();
    }
    setSize(width, height) {
        this.width = width || 1;
        this.height = height || 1;
        this.perspectiveCamera.aspect = this.width / this.height;
        this.orthographicCamera.left = -this.width / 2;
        this.orthographicCamera.right = this.width / 2;
        this.orthographicCamera.top = this.height / 2;
        this.orthographicCamera.bottom = -this.height / 2;
        this.camera.updateProjectionMatrix();
        const dpr = window.devicePixelRatio;
        this.renderer.setPixelRatio(dpr);
        this.renderer.setSize(width, height);
        const dprWidth = this.width * dpr;
        const dprHeight = this.height * dpr;
        this.pickingTarget.setSize(dprWidth, dprHeight);
        this.sampleTarget.setSize(dprWidth, dprHeight);
        this.holdTarget.setSize(dprWidth, dprHeight);
        this.requestRender();
    }
    handleResize() {
        if (this.container === document.body) {
            this.setSize(window.innerWidth, window.innerHeight);
        }
        else {
            const box = this.container.getBoundingClientRect();
            this.setSize(box.width, box.height);
        }
    }
    updateInfo(reset) {
        const { memory, render } = this.info;
        if (reset) {
            memory.programs = 0;
            memory.geometries = 0;
            memory.textures = 0;
            render.calls = 0;
            render.vertices = 0;
            render.points = 0;
        }
        else {
            const rInfo = this.renderer.info;
            const rMemory = rInfo.memory;
            const rRender = rInfo.render;
            memory.geometries = rMemory.geometries;
            memory.textures = rMemory.textures;
            render.calls += rRender.calls;
            render.faces += rRender.triangles;
            render.points += rRender.points;
        }
    }
    animate() {
        this.signals.ticked.dispatch(this.stats);
        const delta = window.performance.now() - this.stats.startTime;
        if (delta > 500 && !this.isStill && this.sampleLevel < 3 && this.sampleLevel !== -1) {
            const currentSampleLevel = this.sampleLevel;
            this.sampleLevel = 3;
            this.renderPending = true;
            this.render();
            this.isStill = true;
            this.sampleLevel = currentSampleLevel;
            if (Debug)
                Log.log('rendered still frame');
        }
        this.frameRequest = window.requestAnimationFrame(this.animate);
    }
    pick(x, y) {
        if (this.parameters.cameraType === 'stereo') {
            // TODO picking broken for stereo camera
            return {
                'pid': 0,
                'instance': undefined,
                'picker': undefined
            };
        }
        x *= window.devicePixelRatio;
        y *= window.devicePixelRatio;
        x = Math.max(x - 2, 0);
        y = Math.max(y - 2, 0);
        let pid = 0, instance, picker;
        const pixelBuffer = SupportsReadPixelsFloat ? pixelBufferFloat : pixelBufferUint;
        this.render(true);
        this.renderer.readRenderTargetPixels(this.pickingTarget, x, y, 5, 5, pixelBuffer);
        for (let i = 0; i < pixelOrder.length; i++) {
            const offset = pixelOrder[i] * 4;
            const oid = Math.round(pixelBuffer[offset + 3]);
            const object = this.pickingGroup.getObjectById(oid);
            if (object) {
                instance = object.userData.instance;
                picker = object.userData.buffer.picking;
            }
            else {
                continue;
            }
            if (SupportsReadPixelsFloat) {
                pid =
                    ((Math.round(pixelBuffer[offset] * 255) << 16) & 0xFF0000) |
                        ((Math.round(pixelBuffer[offset + 1] * 255) << 8) & 0x00FF00) |
                        ((Math.round(pixelBuffer[offset + 2] * 255)) & 0x0000FF);
            }
            else {
                pid =
                    (pixelBuffer[offset] << 16) |
                        (pixelBuffer[offset + 1] << 8) |
                        (pixelBuffer[offset + 2]);
            }
        }
        // if( Debug ){
        //   const rgba = Array.apply( [], pixelBuffer );
        //   Log.log( pixelBuffer );
        //   Log.log(
        //     "picked color",
        //     rgba.map( c => { return c.toPrecision( 2 ) } )
        //   );
        //   Log.log( "picked pid", pid );
        //   Log.log( "picked oid", oid );
        //   Log.log( "picked object", object );
        //   Log.log( "picked instance", instance );
        //   Log.log( "picked position", x, y );
        //   Log.log( "devicePixelRatio", window.devicePixelRatio );
        // }
        return { pid, instance, picker };
    }
    requestRender() {
        if (this.renderPending) {
            // Log.info("there is still a 'render' call pending")
            return;
        }
        // start gathering stats anew after inactivity
        if (window.performance.now() - this.stats.startTime > 22) {
            this.stats.begin();
            this.isStill = false;
        }
        this.renderPending = true;
        window.requestAnimationFrame(() => {
            this.render();
            this.stats.update();
        });
    }
    updateZoom() {
        const fov = degToRad$1(this.perspectiveCamera.fov);
        const height = 2 * Math.tan(fov / 2) * this.cameraDistance;
        this.orthographicCamera.zoom = this.height / height;
    }
    /**
     * Convert an absolute clip value to a relative one using bRadius.
     *
     * 0.0 -> 50.0
     * bRadius -> 0.0
     */
    absoluteToRelative(d) {
        return 50 * (1 - d / this.bRadius);
    }
    /**
     * Convert a relative clip value to an absolute one using bRadius
     *
     * 0.0 -> bRadius
     * 50.0 -> 0.0
     */
    relativeToAbsolute(d) {
        return this.bRadius * (1 - d / 50);
    }
    /**
     * Intepret clipMode, clipScale and set the camera and fog clipping.
     * Also ensures bRadius and cDist are valid
     */
    __updateClipping() {
        const p = this.parameters;
        // bRadius must always be updated for material-based clipping
        // and for focus calculations
        this.bRadius = Math.max(10, this.boundingBoxLength * 0.5);
        // FL: Removed below, but leaving commented as I don't understand intention
        // this.bRadius += this.boundingBox.getCenter(this.distVector).length()
        if (!isFinite(this.bRadius)) {
            this.bRadius = 50;
        }
        this.camera.getWorldPosition(this.distVector);
        this.cDist = this.distVector.length();
        if (!this.cDist) {
            // recover from a broken (NaN) camera position
            this.cameraDistance = Math.abs(p.cameraZ);
            this.cDist = Math.abs(p.cameraZ);
        }
        // fog
        const fog = this.scene.fog;
        fog.color.set(p.fogColor);
        if (p.clipMode === 'camera') {
            // Always interpret clipScale as absolute for clipMode camera
            this.camera.near = p.clipNear;
            this.camera.far = p.clipFar;
            fog.near = p.fogNear;
            fog.far = p.fogFar;
        }
        else {
            // scene mode
            if (p.clipScale === 'absolute') {
                // absolute scene mode; offset clip planes from scene center
                // (note: positive values move near plane towards camera and rear plane away)
                this.camera.near = this.cDist - p.clipNear;
                this.camera.far = this.cDist + p.clipFar;
                fog.near = this.cDist - p.fogNear;
                fog.far = this.cDist + p.fogFar;
            }
            else {
                // relative scene mode (default): convert pecentages to Angstroms
                const nearFactor = (50 - p.clipNear) / 50;
                const farFactor = -(50 - p.clipFar) / 50;
                this.camera.near = this.cDist - (this.bRadius * nearFactor);
                this.camera.far = this.cDist + (this.bRadius * farFactor);
                const fogNearFactor = (50 - p.fogNear) / 50;
                const fogFarFactor = -(50 - p.fogFar) / 50;
                fog.near = this.cDist - (this.bRadius * fogNearFactor);
                fog.far = this.cDist + (this.bRadius * fogFarFactor);
            }
        }
        if (p.clipMode !== 'camera') {
            if (this.camera.type === 'PerspectiveCamera') {
                this.camera.near = Math.max(0.1, p.clipDist, this.camera.near);
                this.camera.far = Math.max(1, this.camera.far);
                fog.near = Math.max(0.1, fog.near);
                fog.far = Math.max(1, fog.far);
            }
            else if (this.camera.type === 'OrthographicCamera') {
                if (p.clipDist > 0) {
                    this.camera.near = Math.max(p.clipDist, this.camera.near);
                }
            }
        }
    }
    __updateCamera() {
        const camera = this.camera;
        camera.updateMatrix();
        camera.updateMatrixWorld(true);
        camera.updateProjectionMatrix();
        updateMaterialUniforms(this.scene, camera, this.renderer, this.cDist, this.bRadius);
        sortProjectedPosition(this.scene, camera);
    }
    __setVisibility(model, picking, background, helper) {
        this.modelGroup.visible = model;
        this.pickingGroup.visible = picking;
        this.backgroundGroup.visible = background;
        this.helperGroup.visible = helper;
    }
    __updateLights() {
        this.directionalLight.color.set(this.parameters.lightColor);
        this.directionalLight.intensity = this.parameters.lightIntensity;
        this.distVector.copy(this.camera.position).setLength(this.boundingBoxLength * 100);
        this.directionalLight.position.copy(this.camera.position).add(this.distVector);
        this.ambientLight.color.set(this.parameters.ambientColor);
        this.ambientLight.intensity = this.parameters.ambientIntensity;
    }
    __renderPickingGroup(camera) {
        this.renderer.setRenderTarget(this.pickingTarget || null);
        this.renderer.clear();
        this.__setVisibility(false, true, false, false);
        this.renderer.render(this.scene, camera);
        //  back to standard render target
        this.renderer.setRenderTarget(null);
        this.updateInfo();
        // if (Debug) {
        //   this.__setVisibility(false, true, false, true);
        //   this.renderer.clear();
        //   this.renderer.render(this.scene, camera);
        // }
    }
    __renderModelGroup(camera, renderTarget) {
        this.renderer.setRenderTarget(renderTarget || null);
        this.renderer.clear();
        this.__setVisibility(false, false, true, false);
        this.renderer.render(this.scene, camera);
        this.renderer.clear(false, true, true);
        this.updateInfo();
        this.__setVisibility(true, false, false, Debug);
        this.renderer.render(this.scene, camera);
        this.renderer.setRenderTarget(null); // set back to default canvas
        this.updateInfo();
    }
    __renderSuperSample(camera, renderTarget) {
        // based on the Supersample Anti-Aliasing Render Pass
        // contributed to three.js by bhouston / http://clara.io/
        //
        // This manual approach to SSAA re-renders the scene ones for
        // each sample with camera jitter and accumulates the results.
        // References: https://en.wikipedia.org/wiki/Supersampling
        const offsetList = JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];
        const baseSampleWeight = 1.0 / offsetList.length;
        const roundingRange = 1 / 32;
        this.compositeUniforms.tForeground.value = this.sampleTarget.texture;
        let width = this.sampleTarget.width;
        const height = this.sampleTarget.height;
        if (this.parameters.cameraType === 'stereo') {
            width /= 2;
        }
        // render the scene multiple times, each slightly jitter offset
        // from the last and accumulate the results.
        for (let i = 0; i < offsetList.length; ++i) {
            const offset = offsetList[i];
            camera.setViewOffset(width, height, offset[0], offset[1], width, height);
            camera.updateProjectionMatrix();
            updateCameraUniforms(this.scene, camera);
            let sampleWeight = baseSampleWeight;
            // the theory is that equal weights for each sample lead to an
            // accumulation of rounding errors.
            // The following equation varies the sampleWeight per sample
            // so that it is uniformly distributed across a range of values
            // whose rounding errors cancel each other out.
            const uniformCenteredDistribution = -0.5 + (i + 0.5) / offsetList.length;
            sampleWeight += roundingRange * uniformCenteredDistribution;
            this.compositeUniforms.scale.value = sampleWeight;
            this.__renderModelGroup(camera, this.sampleTarget);
            this.renderer.setRenderTarget(this.holdTarget);
            if (i === 0) {
                this.renderer.clear();
            }
            this.renderer.render(this.compositeScene, this.compositeCamera);
        }
        this.compositeUniforms.scale.value = 1.0;
        this.compositeUniforms.tForeground.value = this.holdTarget.texture;
        camera.clearViewOffset();
        this.renderer.setRenderTarget(renderTarget || null);
        this.renderer.clear();
        this.renderer.render(this.compositeScene, this.compositeCamera);
    }
    __renderStereo(picking = false, _renderTarget) {
        const stereoCamera = this.stereoCamera;
        stereoCamera.update(this.perspectiveCamera);
        const renderer = this.renderer;
        let size = new Vector2();
        renderer.getSize(size);
        renderer.setScissorTest(true);
        renderer.setScissor(0, 0, size.width / 2, size.height);
        renderer.setViewport(0, 0, size.width / 2, size.height);
        updateCameraUniforms(this.scene, stereoCamera.cameraL);
        this.__render(picking, stereoCamera.cameraL);
        renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);
        renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);
        updateCameraUniforms(this.scene, stereoCamera.cameraR);
        this.__render(picking, stereoCamera.cameraR);
        renderer.setScissorTest(false);
        renderer.setViewport(0, 0, size.width, size.height);
    }
    __render(picking = false, camera, renderTarget) {
        if (picking) {
            if (!this.lastRenderedPicking)
                this.__renderPickingGroup(camera);
        }
        else if (this.sampleLevel > 0 && this.parameters.cameraType !== 'stereo') {
            // TODO super sample broken for stereo camera
            this.__renderSuperSample(camera, renderTarget);
        }
        else {
            this.__renderModelGroup(camera, renderTarget);
        }
    }
    render(picking = false, renderTarget) {
        if (this.rendering) {
            Log.warn("'tried to call 'render' from within 'render'");
            return;
        }
        // Log.time('Viewer.render')
        this.rendering = true;
        try {
            this.__updateClipping();
            this.__updateCamera();
            this.__updateLights();
            this.updateInfo(true);
            // render
            if (this.parameters.cameraType === 'stereo') {
                this.__renderStereo(picking, renderTarget);
            }
            else {
                this.__render(picking, this.camera, renderTarget);
            }
            this.lastRenderedPicking = picking;
        }
        finally {
            this.rendering = false;
            this.renderPending = false;
        }
        this.signals.rendered.dispatch();
        // Log.timeEnd('Viewer.render')
        // Log.log(this.info.memory, this.info.render)
    }
    clear() {
        Log.log('scene cleared');
        this.scene.remove(this.rotationGroup);
        this._initScene();
        this.renderer.clear();
    }
    dispose() {
        this.renderer.dispose();
        window.cancelAnimationFrame(this.frameRequest);
    }
}

/**
 * @file Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const LeftMouseButton = 1;
const MiddleMouseButton = 2;
const RightMouseButton = 3;

/**
 * @file Mouse Observer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * @example
 * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
 *
 * @typedef {Object} MouseSignals
 * @property {Signal<Integer, Integer>} moved - on move: deltaX, deltaY
 * @property {Signal<Number>} scrolled - on scroll: delta
 * @property {Signal<Integer, Integer>} dragged - on drag: deltaX, deltaY
 * @property {Signal} dropped - on drop
 * @property {Signal} clicked - on click
 * @property {Signal} hovered - on hover
 */
function getTouchDistance(event) {
    const dx = event.touches[0].pageX - event.touches[1].pageX;
    const dy = event.touches[0].pageY - event.touches[1].pageY;
    return Math.sqrt(dx * dx + dy * dy);
}
function getMouseButtons(event) {
    if (typeof event === 'object') {
        if ('buttons' in event) {
            return event.buttons;
        }
        else if ('which' in event) {
            const b = event.which;
            if (b === 2) {
                return 4;
            }
            else if (b === 3) {
                return 2;
            }
            else if (b > 0) {
                return 1 << (b - 1);
            }
        }
        else if ('button' in event) {
            const b = event.button;
            if (b === 1) {
                return 4;
            }
            else if (b === 2) {
                return 2;
            }
            else if (b >= 0) {
                return 1 << b;
            }
        }
    }
    return 0;
}
/**
 * Mouse observer
 *
 * @example
 * // listen to mouse moving (and touch-moving) events
 * mouseObserver.moved.moved.add( function( deltaX, deltaY ){ ... } );
 *
 * @example
 * // listen to scrolling (and pinching) events
 * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
 *
 * @example
 * // listen to dragging (and touch-dragging) events
 * mouseObserver.signals.dragged.add( function( deltaX, deltaY ){ ... } );
 *
 * @example
 * // listen to clicking (and tapping) events
 * mouseObserver.signals.clicked.add( function(){ ... } );
 *
 * @example
 * // listen to double clicking (and double tapping) events
 * mouseObserver.signals.doubleClicked.add( function(){ ... } );
 *
 * @example
 * // listen to hovering events
 * mouseObserver.signals.hovered.add( function(){ ... } );
 */
class MouseObserver {
    /**
     * @param  {Element} domElement - the dom element to observe mouse events in
     * @param  {Object} params - parameters object
     * @param  {Integer} params.hoverTimeout - timeout in ms until the {@link MouseSignals.hovered}
     *                                         signal is fired, set to -1 to ignore hovering
     * @param  {Boolean} params.handleScroll - whether or not to handle scroll events
     * @param  {Integer} params.doubleClickSpeed - max time in ms to trigger double click
     */
    constructor(domElement, params = {}) {
        this.domElement = domElement;
        this.signals = {
            moved: new Signal(),
            scrolled: new Signal(),
            dragged: new Signal(),
            dropped: new Signal(),
            clicked: new Signal(),
            hovered: new Signal(),
            doubleClicked: new Signal()
        };
        this.position = new Vector2(); // Position on page
        this.prevPosition = new Vector2(); // Previous position on page
        this.down = new Vector2(); // Position on page when clicked
        this.canvasPosition = new Vector2(); // Position on dom element
        this.prevClickCP = new Vector2();
        this.moving = false; // Flag indicating if the mouse is moving
        this.hovering = true; // Flag indicating if the mouse is hovering
        this.scrolled = false; // Flag indicating if there was a scolling event since the last mouse move
        this.lastMoved = Infinity; // Timestamp of last mouse move
        this.which = 0; // 0: No button; 1: Left button; 2: Middle button; 3: Right button
        this.buttons = 0; // 0: No button; 1: Left button; 2: Right button; 4: Middle button
        this.pressed = false; // Flag indicating if the mouse is pressed down
        this.altKey = false; // Flag indicating if the alt key is pressed
        this.ctrlKey = false; // Flag indicating if the ctrl key is pressed
        this.metaKey = false; // Flag indicating if the meta key is pressed
        this.shiftKey = false; // Flag indicating if the shift key is pressed
        this.domElement.style.touchAction = 'none';
        this.hoverTimeout = defaults(params.hoverTimeout, 50);
        this.handleScroll = defaults(params.handleScroll, true);
        this.doubleClickSpeed = defaults(params.doubleClickSpeed, 500);
        this._listen = this._listen.bind(this);
        this._onMousewheel = this._onMousewheel.bind(this);
        this._onMousemove = this._onMousemove.bind(this);
        this._onMousedown = this._onMousedown.bind(this);
        this._onMouseup = this._onMouseup.bind(this);
        this._onContextmenu = this._onContextmenu.bind(this);
        this._onTouchstart = this._onTouchstart.bind(this);
        this._onTouchend = this._onTouchend.bind(this);
        this._onTouchmove = this._onTouchmove.bind(this);
        this._listen();
        const opt = { passive: false }; // treat as 'passive' so preventDefault can be called
        document.addEventListener('mousewheel', this._onMousewheel, opt);
        document.addEventListener('wheel', this._onMousewheel, opt);
        document.addEventListener('MozMousePixelScroll', this._onMousewheel, opt);
        document.addEventListener('mousemove', this._onMousemove, opt);
        document.addEventListener('mousedown', this._onMousedown, opt);
        document.addEventListener('mouseup', this._onMouseup, opt);
        document.addEventListener('contextmenu', this._onContextmenu, opt);
        document.addEventListener('touchstart', this._onTouchstart, opt);
        document.addEventListener('touchend', this._onTouchend, opt);
        document.addEventListener('touchmove', this._onTouchmove, opt);
    }
    get key() {
        let key = 0;
        if (this.altKey)
            key += 1;
        if (this.ctrlKey)
            key += 2;
        if (this.metaKey)
            key += 4;
        if (this.shiftKey)
            key += 8;
        return key;
    }
    setParameters(params = {}) {
        this.hoverTimeout = defaults(params.hoverTimeout, this.hoverTimeout);
    }
    /**
     * listen to mouse actions
     * @emits {MouseSignals.clicked} when clicked
     * @emits {MouseSignals.hovered} when hovered
     * @return {undefined}
     */
    _listen() {
        const now = window.performance.now();
        const cp = this.canvasPosition;
        if (this.doubleClickPending && now - this.lastClicked > this.doubleClickSpeed) {
            this.doubleClickPending = false;
        }
        if (now - this.lastMoved > this.hoverTimeout) {
            this.moving = false;
        }
        if (this.scrolled || (!this.moving && !this.hovering)) {
            this.scrolled = false;
            if (this.hoverTimeout !== -1 && this.overElement) {
                this.hovering = true;
                this.signals.hovered.dispatch(cp.x, cp.y);
            }
        }
        this.frameRequest = window.requestAnimationFrame(this._listen);
    }
    /**
     * handle mouse scroll
     * @emits {MouseSignals.scrolled} when scrolled
     * @param  {Event} event - mouse event
     * @return {undefined}
     */
    _onMousewheel(event) {
        if (event.target !== this.domElement || !this.handleScroll) {
            return;
        }
        event.preventDefault();
        this._setKeys(event);
        let delta = 0;
        // This has to be written in a particular way to handle old browsers that
        // all send events with different properties set in different ways.
        if ('deltaY' in event && 'deltaMode' in event &&
            event.deltaY !== undefined && event.deltaMode !== undefined) {
            // all modern browsers, using WheelEvent; deltaY + down (toward user)
            if (event.deltaMode === WheelEvent.DOM_DELTA_PIXEL)
                // everything except Firefox: normally 100 per wheel click
                delta = -event.deltaY * (2.5 / 100.0);
            else if (event.deltaMode === WheelEvent.DOM_DELTA_LINE)
                // Firefox in line mode, normally 3 per wheel click
                delta = -event.deltaY * (2.5 / 3.0);
            else // page mode: 1 per wheel click
                delta = -event.deltaY * 2.5;
        }
        else if ('deltaY' in event && !('detail' in event)) {
            // Old Firefox or IE 11: deltaY but no deltaMode; treat as pixels
            delta = -event.deltaY * (2.5 / 100.0);
        }
        else if (event.wheelDelta !== undefined) {
            delta = -event.wheelDelta * (2.5 / 100);
        }
        else if (event.wheelDeltaY !== undefined) {
            delta = -event.wheelDeltaY * (2.5 / 100);
        }
        else if (event.detail !== undefined) {
            // Old Firefox, MouseWheelEvent
            delta = -event.detail / 3;
        }
        this.signals.scrolled.dispatch(delta);
        setTimeout(() => {
            this.scrolled = true;
        }, this.hoverTimeout);
    }
    /**
     * handle mouse move
     * @emits {MouseSignals.moved} when moved
     * @emits {MouseSignals.dragged} when dragged
     * @param  {Event} event - mouse event
     * @return {undefined}
     */
    _onMousemove(event) {
        if (event.target === this.domElement) {
            event.preventDefault();
            this.overElement = true;
        }
        else {
            this.overElement = false;
        }
        this._setKeys(event);
        this.moving = true;
        this.hovering = false;
        this.lastMoved = window.performance.now();
        this.prevPosition.copy(this.position);
        this.position.set(event.clientX, event.clientY);
        this._setCanvasPosition(event);
        const dx = this.prevPosition.x - this.position.x;
        const dy = this.prevPosition.y - this.position.y;
        this.signals.moved.dispatch(dx, dy);
        if (this.pressed) {
            this.signals.dragged.dispatch(dx, dy);
        }
    }
    _onMousedown(event) {
        if (event.target !== this.domElement) {
            return;
        }
        event.preventDefault();
        this._setKeys(event);
        this.moving = false;
        this.hovering = false;
        this.down.set(event.clientX, event.clientY);
        this.position.set(event.clientX, event.clientY);
        this.which = event.which;
        this.buttons = getMouseButtons(event);
        this.pressed = true;
        this._setCanvasPosition(event);
    }
    /**
     * handle mouse up
     * @emits {MouseSignals.doubleClicked} when double clicked
     * @emits {MouseSignals.dropped} when dropped
     * @param  {Event} event - mouse event
     * @return {undefined}
     */
    _onMouseup(event) {
        if (event.target === this.domElement) {
            event.preventDefault();
        }
        this._setKeys(event);
        const cp = this.canvasPosition;
        if (this._distance() < 4) {
            this.lastClicked = window.performance.now();
            if (this.doubleClickPending && this.prevClickCP.distanceTo(cp) < 4) {
                this.signals.doubleClicked.dispatch(cp.x, cp.y);
                this.doubleClickPending = false;
            }
            this.signals.clicked.dispatch(cp.x, cp.y);
            this.doubleClickPending = true;
            this.prevClickCP.copy(cp);
        }
        this.which = undefined;
        this.buttons = undefined;
        this.pressed = undefined;
        // if (this._distance() > 3 || event.which === RightMouseButton) {
        //   this.signals.dropped.dispatch();
        // }
    }
    _onContextmenu(event) {
        if (event.target === this.domElement) {
            event.preventDefault();
        }
    }
    _onTouchstart(event) {
        if (event.target !== this.domElement) {
            return;
        }
        event.preventDefault();
        this.pressed = true;
        switch (event.touches.length) {
            case 1: {
                this.moving = false;
                this.hovering = false;
                this.down.set(event.touches[0].pageX, event.touches[0].pageY);
                this.position.set(event.touches[0].pageX, event.touches[0].pageY);
                this._setCanvasPosition(event.touches[0]);
                break;
            }
            case 2: {
                this.down.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
                this.position.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
                this.lastTouchDistance = getTouchDistance(event);
            }
        }
    }
    _onTouchend(event) {
        if (event.target === this.domElement) {
            event.preventDefault();
        }
        this.which = undefined;
        this.buttons = undefined;
        this.pressed = undefined;
    }
    _onTouchmove(event) {
        if (event.target === this.domElement) {
            event.preventDefault();
            this.overElement = true;
        }
        else {
            this.overElement = false;
        }
        switch (event.touches.length) {
            case 1: {
                this._setKeys(event);
                this.which = LeftMouseButton;
                this.buttons = 1;
                this.moving = true;
                this.hovering = false;
                this.lastMoved = window.performance.now();
                this.prevPosition.copy(this.position);
                this.position.set(event.touches[0].pageX, event.touches[0].pageY);
                this._setCanvasPosition(event.touches[0]);
                const dx = this.prevPosition.x - this.position.x;
                const dy = this.prevPosition.y - this.position.y;
                this.signals.moved.dispatch(dx, dy);
                if (this.pressed) {
                    this.signals.dragged.dispatch(dx, dy);
                }
                break;
            }
            case 2: {
                const touchDistance = getTouchDistance(event);
                const delta = touchDistance - this.lastTouchDistance;
                this.lastTouchDistance = touchDistance;
                this.prevPosition.copy(this.position);
                this.position.set((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
                if (Math.abs(delta) > 2 && this.handleScroll &&
                    this.position.distanceTo(this.prevPosition) < 2) {
                    this.which = 0;
                    this.buttons = 0;
                    this.signals.scrolled.dispatch(delta / 2);
                }
                else {
                    this.which = RightMouseButton;
                    this.buttons = 2;
                    const dx = this.prevPosition.x - this.position.x;
                    const dy = this.prevPosition.y - this.position.y;
                    this.signals.moved.dispatch(dx, dy);
                    if (this.pressed) {
                        this.signals.dragged.dispatch(dx, dy);
                    }
                }
            }
        }
    }
    _distance() {
        return this.position.distanceTo(this.down);
    }
    _setCanvasPosition(event) {
        const box = this.domElement.getBoundingClientRect();
        let offsetX, offsetY;
        if ('clientX' in event && 'clientY' in event) {
            offsetX = event.clientX - box.left;
            offsetY = event.clientY - box.top;
        }
        else {
            offsetX = event.offsetX;
            offsetY = event.offsetY;
        }
        this.canvasPosition.set(offsetX, box.height - offsetY);
    }
    _setKeys(event) {
        this.altKey = event.altKey;
        this.ctrlKey = event.ctrlKey;
        this.metaKey = event.metaKey;
        this.shiftKey = event.shiftKey;
    }
    dispose() {
        document.removeEventListener('mousewheel', this._onMousewheel);
        document.removeEventListener('wheel', this._onMousewheel);
        document.removeEventListener('MozMousePixelScroll', this._onMousewheel);
        document.removeEventListener('mousemove', this._onMousemove);
        document.removeEventListener('mousedown', this._onMousedown);
        document.removeEventListener('mouseup', this._onMouseup);
        document.removeEventListener('contextmenu', this._onContextmenu);
        document.removeEventListener('touchstart', this._onTouchstart);
        document.removeEventListener('touchend', this._onTouchend);
        document.removeEventListener('touchmove', this._onTouchmove);
        window.cancelAnimationFrame(this.frameRequest);
    }
}

/**
 * @file Trackball Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const tmpRotateXMatrix = new Matrix4();
const tmpRotateYMatrix = new Matrix4();
const tmpRotateZMatrix = new Matrix4();
const tmpRotateMatrix$2 = new Matrix4();
const tmpRotateCameraMatrix = new Matrix4();
const tmpRotateVector$2 = new Vector3();
const tmpRotateQuaternion$1 = new Quaternion();
const tmpRotateQuaternion2 = new Quaternion();
const tmpPanMatrix = new Matrix4();
const tmpPanVector = new Vector3();
const tmpAtomVector = new Vector3();
/**
 * Trackball controls
 */
class TrackballControls {
    constructor(stage, params = {}) {
        this.stage = stage;
        this.rotateSpeed = defaults(params.rotateSpeed, 2.0);
        this.zoomSpeed = defaults(params.zoomSpeed, 1.2);
        this.panSpeed = defaults(params.panSpeed, 1.0);
        this.viewer = stage.viewer;
        this.mouse = stage.mouseObserver;
        this.controls = stage.viewerControls;
    }
    get component() {
        return this.stage.transformComponent;
    }
    get atom() {
        return this.stage.transformAtom;
    }
    _setPanVector(x, y, z = 0) {
        const scaleFactor = this.controls.getCanvasScaleFactor(z);
        tmpPanVector.set(x, y, 0);
        tmpPanVector.multiplyScalar(this.panSpeed * scaleFactor);
    }
    _getRotateXY(x, y) {
        return [
            this.rotateSpeed * -x * 0.01,
            this.rotateSpeed * y * 0.01
        ];
    }
    _getCameraRotation(m) {
        m.extractRotation(this.viewer.camera.matrixWorld);
        m.multiply(tmpRotateYMatrix.makeRotationY(Math.PI));
        return m;
    }
    _transformPanVector() {
        if (!this.component)
            return;
        // Adjust for component and scene rotation
        tmpPanMatrix.extractRotation(this.component.transform);
        tmpPanMatrix.premultiply(this.viewer.rotationGroup.matrix);
        tmpPanMatrix.invert();
        // Adjust for camera rotation
        tmpPanMatrix.multiply(this._getCameraRotation(tmpRotateMatrix$2));
        tmpPanVector.applyMatrix4(tmpPanMatrix);
    }
    zoom(delta) {
        this.controls.zoom(this.zoomSpeed * delta * 0.02);
    }
    pan(x, y) {
        this._setPanVector(x, y);
        // Adjust for scene rotation
        tmpPanMatrix.copy(this.viewer.rotationGroup.matrix).invert();
        // Adjust for camera rotation
        tmpPanMatrix.multiply(this._getCameraRotation(tmpRotateMatrix$2));
        tmpPanVector.applyMatrix4(tmpPanMatrix);
        this.controls.translate(tmpPanVector);
    }
    panComponent(x, y) {
        if (!this.component)
            return;
        this._setPanVector(x, y);
        this._transformPanVector();
        this.component.position.add(tmpPanVector);
        this.component.updateMatrix();
    }
    panAtom(x, y) {
        if (!this.atom || !this.component)
            return;
        this.atom.positionToVector3(tmpAtomVector);
        tmpAtomVector.add(this.viewer.translationGroup.position);
        tmpAtomVector.applyMatrix4(this.viewer.rotationGroup.matrix);
        this._setPanVector(x, y, tmpAtomVector.z);
        this._transformPanVector();
        this.atom.positionAdd(tmpPanVector);
        this.component.updateRepresentations({ 'position': true });
    }
    rotate(x, y) {
        const [dx, dy] = this._getRotateXY(x, y);
        // rotate around screen X then screen Y
        this._getCameraRotation(tmpRotateMatrix$2);
        tmpRotateVector$2.set(1, 0, 0); // X axis
        tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2); // screen X
        tmpRotateQuaternion$1.setFromAxisAngle(tmpRotateVector$2, dy);
        tmpRotateVector$2.set(0, 1, 0); // Y axis
        tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2); // screen Y
        tmpRotateQuaternion2.setFromAxisAngle(tmpRotateVector$2, dx);
        tmpRotateQuaternion$1.multiply(tmpRotateQuaternion2);
        tmpRotateMatrix$2.makeRotationFromQuaternion(tmpRotateQuaternion$1);
        this.controls.applyMatrix(tmpRotateMatrix$2);
    }
    zRotate(x, y) {
        const dz = this.rotateSpeed * ((-x + y) / -2) * 0.01;
        tmpRotateZMatrix.makeRotationZ(dz);
        this.controls.applyMatrix(tmpRotateZMatrix);
    }
    rotateComponent(x, y) {
        if (!this.component)
            return;
        const [dx, dy] = this._getRotateXY(x, y);
        this._getCameraRotation(tmpRotateCameraMatrix);
        tmpRotateMatrix$2.extractRotation(this.component.transform);
        tmpRotateMatrix$2.premultiply(this.viewer.rotationGroup.matrix);
        tmpRotateMatrix$2.invert();
        tmpRotateMatrix$2.premultiply(tmpRotateCameraMatrix);
        tmpRotateVector$2.set(1, 0, 0);
        tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2);
        tmpRotateXMatrix.makeRotationAxis(tmpRotateVector$2, dy);
        tmpRotateVector$2.set(0, 1, 0);
        tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2);
        tmpRotateYMatrix.makeRotationAxis(tmpRotateVector$2, dx);
        tmpRotateXMatrix.multiply(tmpRotateYMatrix);
        tmpRotateQuaternion$1.setFromRotationMatrix(tmpRotateXMatrix);
        this.component.quaternion.premultiply(tmpRotateQuaternion$1);
        this.component.quaternion.normalize();
        this.component.updateMatrix();
    }
}

/**
 * @file Picking Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const tmpVec$1 = new Vector3();
function closer(x, a, b) {
    return x.distanceTo(a) < x.distanceTo(b);
}
/**
 * Picking proxy class.
 */
class PickingProxy {
    /**
     * Create picking proxy object
     * @param  {PickingData} pickingData - picking data
     * @param  {Stage} stage - stage object
     */
    constructor(pickingData, stage) {
        this.stage = stage;
        this.pid = pickingData.pid;
        this.picker = pickingData.picker;
        /**
         * @type {Object}
         */
        this.instance = pickingData.instance;
        /**
         * @type {Stage}
         */
        this.stage = stage;
        /**
         * @type {ViewerControls}
         */
        this.controls = stage.viewerControls;
        /**
         * @type {MouseObserver}
         */
        this.mouse = stage.mouseObserver;
    }
    /**
     * Kind of the picked data
     * @type {String}
     */
    get type() { return this.picker.type; }
    /**
     * If the `alt` key was pressed
     * @type {Boolean}
     */
    get altKey() { return this.mouse.altKey; }
    /**
     * If the `ctrl` key was pressed
     * @type {Boolean}
     */
    get ctrlKey() { return this.mouse.ctrlKey; }
    /**
     * If the `meta` key was pressed
     * @type {Boolean}
     */
    get metaKey() { return this.mouse.metaKey; }
    /**
     * If the `shift` key was pressed
     * @type {Boolean}
     */
    get shiftKey() { return this.mouse.shiftKey; }
    /**
     * Position of the mouse on the canvas
     * @type {Vector2}
     */
    get canvasPosition() { return this.mouse.canvasPosition; }
    /**
     * The component the picked data is part of
     * @type {Component}
     */
    get component() {
        return this.stage.getComponentsByObject(this.picker.data).list[0]; // TODO
    }
    /**
     * The picked object data
     * @type {Object}
     */
    get object() {
        return this.picker.getObject(this.pid);
    }
    /**
     * The 3d position in the scene of the picked object
     * @type {Vector3}
     */
    get position() {
        return this.picker.getPosition(this.pid, this.instance, this.component);
    }
    /**
     * The atom of a picked bond that is closest to the mouse
     * @type {AtomProxy}
     */
    get closestBondAtom() {
        if (this.type !== 'bond' || !this.bond)
            return undefined;
        const bond = this.bond;
        const controls = this.controls;
        const cp = this.canvasPosition;
        const v1 = bond.atom1.positionToVector3();
        const v2 = bond.atom2.positionToVector3();
        v1.applyMatrix4(this.component.matrix);
        v2.applyMatrix4(this.component.matrix);
        const acp1 = controls.getPositionOnCanvas(v1);
        const acp2 = controls.getPositionOnCanvas(v2);
        return closer(cp, acp1, acp2) ? bond.atom1 : bond.atom2;
    }
    /**
     * Close-by atom
     * @type {AtomProxy}
     */
    get closeAtom() {
        const cp = this.canvasPosition;
        const ca = this.closestBondAtom;
        if (!ca)
            return undefined;
        const v = ca.positionToVector3().applyMatrix4(this.component.matrix);
        const acp = this.controls.getPositionOnCanvas(v);
        ca.positionToVector3(tmpVec$1);
        if (this.instance)
            tmpVec$1.applyMatrix4(this.instance.matrix);
        tmpVec$1.applyMatrix4(this.component.matrix);
        const viewer = this.controls.viewer;
        tmpVec$1.add(viewer.translationGroup.position);
        tmpVec$1.applyMatrix4(viewer.rotationGroup.matrix);
        const scaleFactor = this.controls.getCanvasScaleFactor(tmpVec$1.z);
        const sc = this.component;
        const radius = sc.getMaxRepresentationRadius(ca.index);
        //console.log(scaleFactor, cp.distanceTo(acp), radius/scaleFactor, radius)
        if (cp.distanceTo(acp) <= radius / scaleFactor) {
            return ca;
        }
        else {
            return undefined;
        }
    }
    /**
     * @type {Object}
     */
    get arrow() { return this._objectIfType('arrow'); }
    /**
     * @type {AtomProxy}
     */
    get atom() { return this._objectIfType('atom'); }
    /**
     * @type {Object}
     */
    get axes() { return this._objectIfType('axes'); }
    /**
     * @type {BondProxy}
     */
    get bond() { return this._objectIfType('bond'); }
    /**
     * @type {Object}
     */
    get box() { return this._objectIfType('box'); }
    /**
     * @type {Object}
     */
    get cone() { return this._objectIfType('cone'); }
    /**
     * @type {Object}
     */
    get clash() { return this._objectIfType('clash'); }
    /**
     * @type {BondProxy}
     */
    get contact() { return this._objectIfType('contact'); }
    /**
     * @type {Object}
     */
    get cylinder() { return this._objectIfType('cylinder'); }
    /**
     * @type {BondProxy}
     */
    get distance() { return this._objectIfType('distance'); }
    /**
     * @type {Object}
     */
    get ellipsoid() { return this._objectIfType('ellipsoid'); }
    /**
     * @type {Object}
     */
    get octahedron() { return this._objectIfType('octahedron'); }
    /**
     * @type {Object}
     */
    get point() { return this._objectIfType('point'); }
    /**
     * @type {Object}
     */
    get mesh() { return this._objectIfType('mesh'); }
    /**
     * @type {Object}
     */
    get slice() { return this._objectIfType('slice'); }
    /**
     * @type {Object}
     */
    get sphere() { return this._objectIfType('sphere'); }
    /**
     * @type {Object}
     */
    get tetrahedron() { return this._objectIfType('tetrahedron'); }
    /**
     * @type {Object}
     */
    get torus() { return this._objectIfType('torus'); }
    /**
     * @type {Object}
     */
    get surface() { return this._objectIfType('surface'); }
    /**
     * @type {Object}
     */
    get unitcell() { return this._objectIfType('unitcell'); }
    /**
     * @type {Object}
     */
    get unknown() { return this._objectIfType('unknown'); }
    /**
     * @type {Object}
     */
    get volume() { return this._objectIfType('volume'); }
    /**
     * @type {Object}
     */
    get wideline() { return this._objectIfType('wideline'); }
    _objectIfType(type) {
        return this.type === type ? this.object : undefined;
    }
    getLabel() {
        const atom = this.atom || this.closeAtom;
        let msg = 'nothing';
        if (this.arrow) {
            msg = this.arrow.name;
        }
        else if (atom) {
            msg = `atom: ${atom.qualifiedName()} (${atom.structure.name})`;
        }
        else if (this.axes) {
            msg = 'axes';
        }
        else if (this.bond) {
            msg = `bond: ${this.bond.atom1.qualifiedName()} - ${this.bond.atom2.qualifiedName()} (${this.bond.structure.name})`;
        }
        else if (this.box) {
            msg = this.box.name;
        }
        else if (this.cone) {
            msg = this.cone.name;
        }
        else if (this.clash) {
            msg = `clash: ${this.clash.clash.sele1} - ${this.clash.clash.sele2}`;
        }
        else if (this.contact) {
            msg = `${this.contact.type}: ${this.contact.atom1.qualifiedName()} - ${this.contact.atom2.qualifiedName()} (${this.contact.atom1.structure.name})`;
        }
        else if (this.cylinder) {
            msg = this.cylinder.name;
        }
        else if (this.distance) {
            msg = `distance: ${this.distance.atom1.qualifiedName()} - ${this.distance.atom2.qualifiedName()} (${this.distance.structure.name})`;
        }
        else if (this.ellipsoid) {
            msg = this.ellipsoid.name;
        }
        else if (this.octahedron) {
            msg = this.octahedron.name;
        }
        else if (this.point) {
            msg = this.point.name;
        }
        else if (this.mesh) {
            msg = `mesh: ${this.mesh.name || this.mesh.serial} (${this.mesh.shape.name})`;
        }
        else if (this.slice) {
            msg = `slice: ${this.slice.value.toPrecision(3)} (${this.slice.volume.name})`;
        }
        else if (this.sphere) {
            msg = this.sphere.name;
        }
        else if (this.surface) {
            msg = `surface: ${this.surface.surface.name}`;
        }
        else if (this.tetrahedron) {
            msg = this.tetrahedron.name;
        }
        else if (this.torus) {
            msg = this.torus.name;
        }
        else if (this.unitcell) {
            msg = `unitcell: ${this.unitcell.unitcell.spacegroup} (${this.unitcell.structure.name})`;
        }
        else if (this.unknown) {
            msg = 'unknown';
        }
        else if (this.volume) {
            msg = `volume: ${this.volume.value.toPrecision(3)} (${this.volume.volume.name})`;
        }
        else if (this.wideline) {
            msg = this.wideline.name;
        }
        return msg;
    }
}

/**
 * @file Picking Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Picking controls
 */
class PickingControls {
    constructor(stage) {
        this.stage = stage;
        this.viewer = stage.viewer;
    }
    /**
     * get picking data
     * @param {Number} x - canvas x coordinate
     * @param {Number} y - canvas y coordinate
     * @return {PickingProxy|undefined} picking proxy
     */
    pick(x, y) {
        const pickingData = this.viewer.pick(x, y);
        if (pickingData.picker &&
            pickingData.picker.type !== 'ignore' &&
            pickingData.pid !== undefined) {
            const pickerArray = pickingData.picker.array;
            if (pickerArray && pickingData.pid >= pickerArray.length) {
                console.error('pid >= picker.array.length');
            }
            else {
                return new PickingProxy(pickingData, this.stage);
            }
        }
    }
}

/**
 * @file Viewer Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Orientation matrix, a 4x4 transformation matrix with rotation part
 * used for scene rotation, scale part for scene camera distance and
 * position part for scene translation
 * @typedef {Matrix4} OrientationMatrix - orientation matrix
 */
const tmpQ = new Quaternion();
const tmpP = new Vector3();
const tmpS = new Vector3();
const tmpCanvasVector = new Vector3();
const tmpScaleVector = new Vector3();
const tmpRotateMatrix$1 = new Matrix4();
const tmpRotateVector$1 = new Vector3();
const tmpAlignMatrix = new Matrix4();
/**
 * Viewer controls
 */
class ViewerControls {
    /**
     * @param  {Stage} stage - the stage object
     */
    constructor(stage) {
        this.stage = stage;
        this.signals = {
            changed: new signalsWrapper.Signal()
        };
        this.viewer = stage.viewer;
    }
    /**
     * scene center position
     * @type {Vector3}
     */
    get position() {
        return this.viewer.translationGroup.position;
    }
    /**
     * scene rotation
     * @type {Quaternion}
     */
    get rotation() {
        return this.viewer.rotationGroup.quaternion;
    }
    /**
     * Trigger render and emit changed event
     * @emits {ViewerControls.signals.changed}
     * @return {undefined}
     */
    changed() {
        this.viewer.requestRender();
        this.signals.changed.dispatch();
    }
    getPositionOnCanvas(position, optionalTarget) {
        const canvasPosition = ensureVector2(optionalTarget);
        const viewer = this.viewer;
        tmpCanvasVector.copy(position)
            .add(viewer.translationGroup.position)
            .applyMatrix4(viewer.rotationGroup.matrix)
            .project(viewer.camera);
        return canvasPosition.set((tmpCanvasVector.x + 1) * viewer.width / 2, (tmpCanvasVector.y + 1) * viewer.height / 2);
    }
    getCanvasScaleFactor(z = 0) {
        const camera = this.viewer.camera;
        if (camera instanceof OrthographicCamera) {
            return 1 / camera.zoom;
        }
        else {
            z = Math.abs(z);
            z += this.getCameraDistance();
            const fov = degToRad$1(camera.fov);
            const unitHeight = 2.0 * z * Math.tan(fov / 2);
            return unitHeight / this.viewer.height;
        }
    }
    /**
     * get scene orientation
     * @param {Matrix4} optionalTarget - pre-allocated target matrix
     * @return {OrientationMatrix} scene orientation
     */
    getOrientation(optionalTarget) {
        const m = ensureMatrix4(optionalTarget);
        m.copy(this.viewer.rotationGroup.matrix);
        const z = this.getCameraDistance();
        m.scale(tmpScaleVector.set(z, z, z));
        m.setPosition(this.viewer.translationGroup.position);
        return m;
    }
    /**
     * set scene orientation
     * @param {OrientationMatrix|Array} orientation - scene orientation
     * @return {undefined}
     */
    orient(orientation) {
        ensureMatrix4(orientation).decompose(tmpP, tmpQ, tmpS);
        const v = this.viewer;
        v.rotationGroup.setRotationFromQuaternion(tmpQ);
        v.translationGroup.position.copy(tmpP);
        v.cameraDistance = tmpS.z;
        v.updateZoom();
        this.changed();
    }
    /**
     * translate scene
     * @param  {Vector3|Array} vector - translation vector
     * @return {undefined}
     */
    translate(vector) {
        this.viewer.translationGroup.position
            .add(ensureVector3(vector));
        this.changed();
    }
    /**
     * center scene
     * @param  {Vector3|Array} position - center position
     * @return {undefined}
     */
    center(position) {
        this.viewer.translationGroup.position
            .copy(ensureVector3(position)).negate();
        this.changed();
    }
    /**
     * "zoom" scene by moving camera closer to origin
     * @param  {Number} delta - zoom change
     * @return {undefined}
     */
    zoom(delta) {
        this.distance(this.getCameraDistance() * (1 - delta));
    }
    /**
     * get camera distance
     */
    getCameraDistance() {
        return this.viewer.cameraDistance;
    }
    /**
     * camera distance
     * @param  {Number} z - distance
     * @return {undefined}
     */
    distance(distance) {
        // Math.abs because distance used to be "z", normally negative.
        // Math.max to prevent us from getting _too_ close.
        this.viewer.cameraDistance = Math.max(Math.abs(distance), 0.2);
        this.viewer.updateZoom();
        this.changed();
    }
    /**
     * spin scene on axis
     * @param  {Vector3|Array} axis - rotation axis
     * @param  {Number} angle - amount to spin
     * @return {undefined}
     */
    spin(axis, angle) {
        tmpRotateMatrix$1.copy(this.viewer.rotationGroup.matrix).invert();
        tmpRotateVector$1
            .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix$1);
        this.viewer.rotationGroup.rotateOnAxis(tmpRotateVector$1, angle);
        this.changed();
    }
    /**
     * rotate scene
     * @param  {Quaternion|Array} quaternion - rotation quaternion
     * @return {undefined}
     */
    rotate(quaternion) {
        this.viewer.rotationGroup
            .setRotationFromQuaternion(ensureQuaternion(quaternion));
        this.changed();
    }
    /**
     * align scene to basis matrix
     * @param  {Matrix4|Array} basis - basis matrix
     * @return {undefined}
     */
    align(basis) {
        tmpAlignMatrix.copy(ensureMatrix4(basis)).invert();
        this.viewer.rotationGroup.setRotationFromMatrix(tmpAlignMatrix);
        this.changed();
    }
    /**
     * apply rotation matrix to scene
     * @param  {Matrix4|Array} matrix - rotation matrix
     * @return {undefined}
     */
    applyMatrix(matrix) {
        this.viewer.rotationGroup.applyMatrix4(ensureMatrix4(matrix));
        this.changed();
    }
}

/**
 * @file Animation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Animation. Base animation class.
 * @interface
 */
class Animation {
    constructor(duration, controls, ...args) {
        this.pausedTime = -1;
        this.elapsedDuration = 0;
        this.pausedDuration = 0;
        this.ignoreGlobalToggle = false;
        this._paused = false;
        this._resolveList = [];
        this.duration = defaults(duration, 1000);
        this.controls = controls;
        this.startTime = window.performance.now();
        this._init(...args);
    }
    /**
     * True when animation has finished
     */
    get done() {
        return this.alpha === 1;
    }
    /**
     * True when animation is paused
     */
    get paused() {
        return this._paused;
    }
    tick(stats) {
        if (this._paused)
            return;
        this.elapsedDuration = stats.currentTime - this.startTime - this.pausedDuration;
        if (this.duration === 0) {
            this.alpha = 1;
        }
        else {
            this.alpha = smoothstep(0, 1, this.elapsedDuration / this.duration);
        }
        this._tick(stats);
        if (this.done) {
            this._resolveList.forEach(resolve => resolve());
        }
        return this.done;
    }
    /**
     * Pause animation
     * @param {boolean} [hold] - put animation on a hold which
     *                           must be release before it can be resumed
     */
    pause(hold) {
        if (hold)
            this._hold = true;
        if (this.pausedTime === -1) {
            this.pausedTime = window.performance.now();
        }
        this._paused = true;
    }
    /**
     * Resume animation
     * @param {Boolean} [releaseHold] - release a hold on the animation
     */
    resume(releaseHold) {
        if (!releaseHold && this._hold)
            return;
        this.pausedDuration += window.performance.now() - this.pausedTime;
        this._paused = false;
        this._hold = false;
        this.pausedTime = -1;
    }
    /**
     * Toggle animation
     */
    toggle() {
        if (this._paused) {
            this.resume();
        }
        else {
            this.pause();
        }
    }
    /**
     * Promise-like interface
     */
    then(callback) {
        let p;
        if (this.done) {
            p = Promise.resolve();
        }
        else {
            p = new Promise(resolve => this._resolveList.push(resolve));
        }
        return p.then(callback);
    }
}
/**
 * Spin animation. Spin around an axis.
 */
class SpinAnimation extends Animation {
    constructor(duration, controls, ...args) {
        super(defaults(duration, Infinity), controls, ...args);
    }
    _init(axis, angle) {
        if (Array.isArray(axis)) {
            this.axis = new Vector3().fromArray(axis);
        }
        else {
            this.axis = defaults(axis, new Vector3(0, 1, 0));
        }
        this.angle = defaults(angle, 0.01);
    }
    _tick(stats) {
        if (!this.axis || !this.angle)
            return;
        this.controls.spin(this.axis, this.angle * stats.lastDuration / 16);
    }
}
/**
 * Rock animation. Rock around an axis.
 */
class RockAnimation extends Animation {
    constructor(duration, controls, ...args) {
        super(defaults(duration, Infinity), controls, ...args);
        this.angleSum = 0;
        this.direction = 1;
    }
    _init(axis, angleStep, angleEnd) {
        if (Array.isArray(axis)) {
            this.axis = new Vector3().fromArray(axis);
        }
        else {
            this.axis = defaults(axis, new Vector3(0, 1, 0));
        }
        this.angleStep = defaults(angleStep, 0.01);
        this.angleEnd = defaults(angleEnd, 0.2);
    }
    _tick(stats) {
        if (!this.axis || !this.angleStep || !this.angleEnd)
            return;
        const alpha = smoothstep(0, 1, Math.abs(this.angleSum) / this.angleEnd);
        const angle = this.angleStep * this.direction * (1.1 - alpha);
        this.controls.spin(this.axis, angle * stats.lastDuration / 16);
        this.angleSum += this.angleStep;
        if (this.angleSum >= this.angleEnd) {
            this.direction *= -1;
            this.angleSum = -this.angleEnd;
        }
    }
}
/**
 * Move animation. Move from one position to another.
 */
class MoveAnimation extends Animation {
    _init(moveFrom, moveTo) {
        this.moveFrom = ensureVector3(defaults(moveFrom, new Vector3()));
        this.moveTo = ensureVector3(defaults(moveTo, new Vector3()));
    }
    _tick( /* stats */) {
        this.controls.position.lerpVectors(this.moveFrom, this.moveTo, this.alpha).negate();
        this.controls.changed();
    }
}
/**
 * Zoom animation. Gradually change the zoom level.
 */
class ZoomAnimation extends Animation {
    _init(zoomFrom, zoomTo) {
        this.zoomFrom = zoomFrom;
        this.zoomTo = zoomTo;
    }
    _tick() {
        this.controls.distance(lerp(this.zoomFrom, this.zoomTo, this.alpha));
    }
}
/**
 * Rotate animation. Rotate from one orientation to another.
 */
class RotateAnimation extends Animation {
    constructor() {
        super(...arguments);
        this._currentRotation = new Quaternion();
    }
    _init(rotateFrom, rotateTo) {
        this.rotateFrom = ensureQuaternion(rotateFrom);
        this.rotateTo = ensureQuaternion(rotateTo);
        this._currentRotation = new Quaternion();
    }
    _tick() {
        this._currentRotation
            .copy(this.rotateFrom)
            .slerp(this.rotateTo, this.alpha);
        this.controls.rotate(this._currentRotation);
    }
}
/**
 * Value animation. Call callback with interpolated value.
 */
class ValueAnimation extends Animation {
    _init(valueFrom, valueTo, callback) {
        this.valueFrom = valueFrom;
        this.valueTo = valueTo;
        this.callback = callback;
    }
    _tick( /* stats */) {
        this.callback(lerp(this.valueFrom, this.valueTo, this.alpha));
    }
}
/**
 * Timeout animation. Call callback after duration.
 */
class TimeoutAnimation extends Animation {
    _init(callback) {
        this.callback = callback;
    }
    _tick() {
        if (this.alpha === 1)
            this.callback();
    }
}
/**
 * Animation list.
 */
class AnimationList {
    constructor(list = []) {
        this._resolveList = [];
        this._list = list;
    }
    /**
     * True when all animations have finished
     */
    get done() {
        return this._list.every(animation => {
            return animation.done;
        });
    }
    /**
     * Promise-like interface
     */
    then(callback) {
        let p;
        if (this.done) {
            p = Promise.resolve();
        }
        else {
            p = new Promise(resolve => {
                this._resolveList.push(resolve);
                this._list.forEach(animation => {
                    animation.then(() => {
                        this._resolveList.forEach(callback => {
                            callback();
                        });
                        this._resolveList.length = 0;
                    });
                });
            });
        }
        return p.then(callback);
    }
}

/**
 * @file Animation Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Animation controls
 */
class AnimationControls {
    /**
     * Create animation controls
     * @param  {Stage} stage - the stage object
     */
    constructor(stage) {
        this.stage = stage;
        this.animationList = [];
        this.finishedList = [];
        this.viewer = stage.viewer;
        this.controls = stage.viewerControls;
    }
    /**
     * True when all animations are paused
     * @type {Boolean}
     */
    get paused() {
        return this.animationList.every((animation) => animation.paused);
    }
    /**
     * Add an animation
     */
    add(animation) {
        if (animation.duration === 0) {
            animation.tick(this.viewer.stats);
        }
        else {
            this.animationList.push(animation);
        }
        return animation;
    }
    /**
     * Remove an animation
     */
    remove(animation) {
        const list = this.animationList;
        const index = list.indexOf(animation);
        if (index > -1) {
            list.splice(index, 1);
        }
    }
    /**
     * Run all animations
     */
    run(stats) {
        const finishedList = this.finishedList;
        const animationList = this.animationList;
        const n = animationList.length;
        for (let i = 0; i < n; ++i) {
            const animation = animationList[i];
            // tick returns true when finished
            if (animation.tick(stats)) {
                finishedList.push(animation);
            }
        }
        const m = finishedList.length;
        if (m) {
            for (let j = 0; j < m; ++j) {
                this.remove(finishedList[j]);
            }
            finishedList.length = 0;
        }
    }
    /**
     * Add a spin animation
     * @param  {Vector3} axis - axis to spin around
     * @param  {Number} angle - amount to spin per frame, radians
     * @param  {Number} duration - animation time in milliseconds
     * @return {SpinAnimation} the animation
     */
    spin(axis, angle, duration) {
        return this.add(new SpinAnimation(duration, this.controls, axis, angle));
    }
    /**
     * Add a rock animation
     * @param  {Vector3} axis - axis to rock around
     * @param  {Number} angle - amount to spin per frame, radians
     * @param  {Number} end - maximum extend of motion, radians
     * @param  {Number} duration - animation time in milliseconds
     * @return {SpinAnimation} the animation
     */
    rock(axis, angle, end, duration) {
        return this.add(new RockAnimation(duration, this.controls, axis, angle, end));
    }
    /**
     * Add a rotate animation
     * @param  {Quaternion} rotateTo - target rotation
     * @param  {Number} duration - animation time in milliseconds
     * @return {RotateAnimation} the animation
     */
    rotate(rotateTo, duration) {
        const rotateFrom = this.viewer.rotationGroup.quaternion.clone();
        return this.add(new RotateAnimation(duration, this.controls, rotateFrom, rotateTo));
    }
    /**
     * Add a move animation
     * @param  {Vector3} moveTo - target position
     * @param  {Number} duration - animation time in milliseconds
     * @return {MoveAnimation} the animation
     */
    move(moveTo, duration) {
        const moveFrom = this.controls.position.clone().negate();
        return this.add(new MoveAnimation(duration, this.controls, moveFrom, moveTo));
    }
    /**
     * Add a zoom animation
     * @param  {Number} zoomTo - target distance
     * @param  {Number} duration - animation time in milliseconds
     * @return {ZoomAnimation} the animation
     */
    zoom(zoomTo, duration) {
        const zoomFrom = this.viewer.camera.position.z;
        return this.add(new ZoomAnimation(duration, this.controls, zoomFrom, zoomTo));
    }
    /**
     * Add a zoom and a move animation
     * @param  {Vector3} moveTo - target position
     * @param  {Number} zoomTo - target distance
     * @param  {Number} duration - animation time in milliseconds
     * @return {Array} the animations
     */
    zoomMove(moveTo, zoomTo, duration) {
        return new AnimationList([
            this.move(moveTo, duration),
            this.zoom(zoomTo, duration)
        ]);
    }
    /**
     * Add an orient animation
     * @param  {OrientationMatrix|Array} orientTo - target orientation
     * @param  {Number} duration - animation time in milliseconds
     * @return {Array} the animations
     */
    orient(orientTo, duration) {
        const p = new Vector3();
        const q = new Quaternion();
        const s = new Vector3();
        ensureMatrix4(orientTo).decompose(p, q, s);
        return new AnimationList([
            this.move(p.negate(), duration),
            this.rotate(q, duration),
            this.zoom(-s.x, duration)
        ]);
    }
    /**
     * Add a value animation
     * @param  {Number} valueFrom - start value
     * @param  {Number} valueTo - target value
     * @param  {Function} callback - called on every tick
     * @param  {Number} duration - animation time in milliseconds
     * @return {ValueAnimation} the animation
     */
    value(valueFrom, valueTo, callback, duration) {
        return this.add(new ValueAnimation(duration, this.controls, valueFrom, valueTo, callback));
    }
    /**
     * Add a timeout animation
     * @param  {Function} callback - called after duration
     * @param  {Number} duration - timeout in milliseconds
     * @return {TimeoutAnimation} the animation
     */
    timeout(callback, duration) {
        return this.add(new TimeoutAnimation(duration, this.controls, callback));
    }
    /**
     * Add a component spin animation
     * @param  {Component} component - object to move
     * @param  {Vector3} axis - axis to spin around
     * @param  {Number} angle - amount to spin per frame, radians
     * @param  {Number} duration - animation time in milliseconds
     * @return {SpinAnimation} the animation
     */
    spinComponent(component, axis, angle, duration) {
        return this.add(
        // TODO
        new SpinAnimation(duration, component.controls, axis, angle));
    }
    /**
     * Add a component rock animation
     * @param  {Component} component - object to move
     * @param  {Vector3} axis - axis to rock around
     * @param  {Number} angle - amount to spin per frame, radians
     * @param  {Number} end - maximum extend of motion, radians
     * @param  {Number} duration - animation time in milliseconds
     * @return {SpinAnimation} the animation
     */
    rockComponent(component, axis, angle, end, duration) {
        return this.add(
        // TODO
        new RockAnimation(duration, component.controls, axis, angle, end));
    }
    /**
     * Add a component move animation
     * @param  {Component} component - object to move
     * @param  {Vector3} moveTo - target position
     * @param  {Number} duration - animation time in milliseconds
     * @return {MoveAnimation} the animation
     */
    moveComponent(component, moveTo, duration) {
        const moveFrom = component.controls.position.clone().negate();
        return this.add(
        // TODO
        new MoveAnimation(duration, component.controls, moveFrom, moveTo));
    }
    /**
     * Pause all animations
     * @return {undefined}
     */
    pause() {
        this.animationList.forEach(animation => animation.pause());
    }
    /**
     * Resume all animations
     * @return {undefined}
     */
    resume() {
        this.animationList.forEach(animation => animation.resume());
    }
    /**
     * Toggle all animations
     * @return {undefined}
     */
    toggle() {
        if (this.paused) {
            this.resume();
        }
        else {
            this.pause();
        }
    }
    /**
     * Clear all animations
     * @return {undefined}
     */
    clear() {
        this.animationList.length = 0;
    }
    dispose() {
        this.clear();
    }
}

/**
 * @file Queue
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Queue {
    constructor(fn, argList) {
        this.fn = fn;
        this.queue = [];
        this.pending = false;
        this.next = this.next.bind(this);
        if (argList) {
            for (let i = 0, il = argList.length; i < il; ++i) {
                this.queue.push(argList[i]);
            }
            this.next();
        }
    }
    run(arg) {
        this.fn(arg, this.next);
    }
    next() {
        const arg = this.queue.shift();
        if (arg !== undefined) {
            this.pending = true;
            setTimeout(() => this.run(arg));
        }
        else {
            this.pending = false;
        }
    }
    push(arg) {
        this.queue.push(arg);
        if (!this.pending)
            this.next();
    }
    kill() {
        this.queue.length = 0;
    }
    length() {
        return this.queue.length;
    }
}

/**
 * @file Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Representation parameter object.
 * @typedef {Object} RepresentationParameters - representation parameters
 * @property {Boolean} [lazy] - only build & update the representation when visible
 *                            otherwise defer changes until set visible again
 * @property {Integer} [clipNear] - position of camera near/front clipping plane
 *                                in percent of scene bounding box
 * @property {Integer} [clipRadius] - radius of clipping sphere
 * @property {Vector3} [clipCenter] - position of for spherical clipping
 * @property {Boolean} [flatShaded] - render flat shaded
 * @property {Float} [opacity] - translucency: 1 is fully opaque, 0 is fully transparent
 * @property {Boolean} [depthWrite] - depth write
 * @property {String} [side] - which triangle sides to render, "front" front-side,
 *                            "back" back-side, "double" front- and back-side
 * @property {Boolean} [wireframe] - render as wireframe
 * @property {ColorData} [colorData] - atom or bond indexed data for coloring
 * @property {String} [colorScheme] - color scheme
 * @property {String} [colorScale] - color scale, either a string for a
 *                                 predefined scale or an array of
 *                                 colors to be used as the scale
 * @property {Boolean} [colorReverse] - reverse color scale
 * @property {Color} [colorValue] - color value
 * @property {Integer[]} [colorDomain] - scale value range
 * @property {Integer} colorDomain.0 - min value
 * @property {Integer} colorDomain.1 - max value
 * @property {String} [colorMode] - color mode, one of rgb, hsv, hsl, hsi, lab, hcl
 * @property {Float} [roughness] - how rough the material is, between 0 and 1
 * @property {Float} [metalness] - how metallic the material is, between 0 and 1
 * @property {Color} [diffuse] - diffuse color for lighting
 * @property {Boolean} [diffuseInterior] - diffuse interior, i.e. ignore normal
 * @property {Boolean} [useInteriorColor] - use interior color
 * @property {Color} [interiorColor] - interior color
 * @property {Float} [interiorDarkening] - interior darkening: 0 no darking, 1 fully darkened
 * @property {Boolean} [disablePicking] - disable picking
 */
/**
 * Representation object
 * @interface
 * @param {Object} object - the object to be represented
 * @param {Viewer} viewer - a viewer object
 * @param {RepresentationParameters} [params] - representation parameters
 */
class Representation {
    constructor(object, viewer, params) {
        // eslint-disable-next-line no-unused-vars
        // const p = params || {}
        this.type = '';
        this.parameters = {
            lazy: {
                type: 'boolean'
            },
            clipNear: {
                type: 'range', step: 1, max: 100, min: 0, buffer: true
            },
            clipRadius: {
                type: 'number', precision: 1, max: 1000, min: 0, buffer: true
            },
            clipCenter: {
                type: 'vector3', precision: 1, buffer: true
            },
            flatShaded: {
                type: 'boolean', buffer: true
            },
            opacity: {
                type: 'range', step: 0.01, max: 1, min: 0, buffer: true
            },
            depthWrite: {
                type: 'boolean', buffer: true
            },
            side: {
                type: 'select',
                buffer: true,
                options: { front: 'front', back: 'back', double: 'double' }
            },
            wireframe: {
                type: 'boolean', buffer: true
            },
            colorData: {
                type: 'hidden',
                update: 'color',
            },
            colorScheme: {
                type: 'select',
                update: 'color',
                options: {}
            },
            colorScale: {
                type: 'select',
                update: 'color',
                options: ColormakerRegistry.getScales()
            },
            colorReverse: {
                type: 'boolean', update: 'color'
            },
            colorValue: {
                type: 'color', update: 'color'
            },
            colorDomain: {
                type: 'hidden', update: 'color'
            },
            colorMode: {
                type: 'select',
                update: 'color',
                options: ColormakerRegistry.getModes()
            },
            roughness: {
                type: 'range', step: 0.01, max: 1, min: 0, buffer: true
            },
            metalness: {
                type: 'range', step: 0.01, max: 1, min: 0, buffer: true
            },
            diffuse: {
                type: 'color', buffer: true
            },
            diffuseInterior: {
                type: 'boolean', buffer: true
            },
            useInteriorColor: {
                type: 'boolean', buffer: true
            },
            interiorColor: {
                type: 'color', buffer: true
            },
            interiorDarkening: {
                type: 'range', step: 0.01, max: 1, min: 0, buffer: true
            },
            matrix: {
                type: 'hidden', buffer: true
            },
            disablePicking: {
                type: 'boolean', rebuild: true
            }
        };
        /**
         * @type {Viewer}
         */
        this.viewer = viewer;
        /**
         * Counter that keeps track of tasks related to the creation of
         * the representation, including surface calculations.
         * @type {Counter}
         */
        this.tasks = new Counter();
        /**
         * @type {Queue}
         * @private
         */
        this.queue = new Queue(this.make.bind(this));
        /**
         * @type {Array}
         * @private
         */
        this.bufferList = [];
        if (this.parameters.colorScheme) {
            this.parameters.colorScheme.options = ColormakerRegistry.getSchemes();
        }
        this.toBePrepared = false;
    }
    init(params) {
        const p = params || {};
        this.clipNear = defaults(p.clipNear, 0);
        this.clipRadius = defaults(p.clipRadius, 0);
        this.clipCenter = defaults(p.clipCenter, new Vector3());
        this.flatShaded = defaults(p.flatShaded, false);
        this.side = defaults(p.side, 'double');
        this.opacity = defaults(p.opacity, 1.0);
        this.depthWrite = defaults(p.depthWrite, true);
        this.wireframe = defaults(p.wireframe, false);
        this.setColor(p.color, p);
        this.colorData = defaults(p.colorData, undefined);
        this.colorScheme = defaults(p.colorScheme, 'uniform');
        this.colorScale = defaults(p.colorScale, '');
        this.colorReverse = defaults(p.colorReverse, false);
        this.colorValue = defaults(p.colorValue, 0x909090);
        this.colorDomain = defaults(p.colorDomain, undefined);
        this.colorMode = defaults(p.colorMode, 'hcl');
        this.visible = defaults(p.visible, true);
        this.quality = defaults(p.quality, undefined);
        this.roughness = defaults(p.roughness, 0.4);
        this.metalness = defaults(p.metalness, 0.0);
        this.diffuse = defaults(p.diffuse, 0xffffff);
        this.diffuseInterior = defaults(p.diffuseInterior, false);
        this.useInteriorColor = defaults(p.useInteriorColor, false);
        this.interiorColor = defaults(p.interiorColor, 0x222222);
        this.interiorDarkening = defaults(p.interiorDarkening, 0);
        this.lazy = defaults(p.lazy, false);
        this.lazyProps = {
            build: false,
            bufferParams: {},
            what: {}
        };
        this.matrix = defaults(p.matrix, new Matrix4());
        this.disablePicking = defaults(p.disablePicking, false);
        // handle common parameters when applicable
        const tp = this.parameters;
        if (tp.sphereDetail === true) {
            tp.sphereDetail = {
                type: 'integer', max: 3, min: 0, rebuild: 'impostor'
            };
        }
        if (tp.radialSegments === true) {
            tp.radialSegments = {
                type: 'integer', max: 25, min: 5, rebuild: 'impostor'
            };
        }
        if (tp.openEnded === true) {
            tp.openEnded = {
                type: 'boolean', rebuild: 'impostor', buffer: true
            };
        }
        if (tp.disableImpostor === true) {
            tp.disableImpostor = {
                type: 'boolean', rebuild: true
            };
        }
        if (p.quality === 'low') {
            if (tp.sphereDetail)
                this.sphereDetail = 0;
            if (tp.radialSegments)
                this.radialSegments = 5;
        }
        else if (p.quality === 'medium') {
            if (tp.sphereDetail)
                this.sphereDetail = 1;
            if (tp.radialSegments)
                this.radialSegments = 10;
        }
        else if (p.quality === 'high') {
            if (tp.sphereDetail)
                this.sphereDetail = 2;
            if (tp.radialSegments)
                this.radialSegments = 20;
        }
        else {
            if (tp.sphereDetail) {
                this.sphereDetail = defaults(p.sphereDetail, 1);
            }
            if (tp.radialSegments) {
                this.radialSegments = defaults(p.radialSegments, 10);
            }
        }
        if (tp.openEnded) {
            this.openEnded = defaults(p.openEnded, true);
        }
        if (tp.disableImpostor) {
            this.disableImpostor = defaults(p.disableImpostor, false);
        }
    }
    getColorParams(p) {
        return Object.assign({
            data: this.colorData,
            scheme: this.colorScheme,
            scale: this.colorScale,
            reverse: this.colorReverse,
            value: this.colorValue,
            domain: this.colorDomain,
            mode: this.colorMode,
            colorSpace: this.colorSpace,
        }, p);
    }
    getBufferParams(p = {}) {
        return Object.assign({
            clipNear: this.clipNear,
            clipRadius: this.clipRadius,
            clipCenter: this.clipCenter,
            flatShaded: this.flatShaded,
            opacity: this.opacity,
            depthWrite: this.depthWrite,
            side: this.side,
            wireframe: this.wireframe,
            roughness: this.roughness,
            metalness: this.metalness,
            diffuse: this.diffuse,
            diffuseInterior: this.diffuseInterior,
            useInteriorColor: this.useInteriorColor,
            interiorColor: this.interiorColor,
            interiorDarkening: this.interiorDarkening,
            matrix: this.matrix,
            disablePicking: this.disablePicking
        }, p);
    }
    setColor(value, p) {
        const types = Object.keys(ColormakerRegistry.getSchemes());
        if (typeof value === 'string' && types.includes(value.toLowerCase())) {
            if (p) {
                p.colorScheme = value;
            }
            else {
                this.setParameters({ colorScheme: value });
            }
        }
        else if (value !== undefined) {
            let val = new Color(value).getHex(); //TODO
            if (p) {
                p.colorScheme = 'uniform';
                p.colorValue = val;
            }
            else {
                this.setParameters({
                    colorScheme: 'uniform', colorValue: val
                });
            }
        }
        return this;
    }
    // TODO
    prepare(cb) {
    }
    create() {
        // this.bufferList.length = 0;
    }
    update(what) {
        this.build();
    }
    build(updateWhat) {
        if (this.lazy && (!this.visible || !this.opacity)) {
            this.lazyProps.build = true;
            return;
        }
        if (!this.toBePrepared) {
            this.tasks.increment();
            this.make();
            return;
        }
        // don't let tasks accumulate
        if (this.queue.length() > 0) {
            this.tasks.change(1 - this.queue.length());
            this.queue.kill();
        }
        else {
            this.tasks.increment();
        }
        this.queue.push(updateWhat || false);
    }
    make(updateWhat, callback) {
        if (Debug)
            Log.time('Representation.make ' + this.type);
        const _make = () => {
            if (updateWhat) {
                this.update(updateWhat);
                this.viewer.requestRender();
                this.tasks.decrement();
                if (callback)
                    callback();
            }
            else {
                this.clear();
                this.create();
                if (!this.manualAttach && !this.disposed) {
                    if (Debug)
                        Log.time('Representation.attach ' + this.type);
                    this.attach(() => {
                        if (Debug)
                            Log.timeEnd('Representation.attach ' + this.type);
                        this.tasks.decrement();
                        if (callback)
                            callback();
                    });
                }
            }
            if (Debug)
                Log.timeEnd('Representation.make ' + this.type);
        };
        if (this.toBePrepared) {
            this.prepare(_make);
        }
        else {
            _make();
        }
    }
    attach(callback) {
        this.setVisibility(this.visible);
        callback();
    }
    /**
     * Set the visibility of the representation
     * @param {Boolean} value - visibility flag
     * @param {Boolean} [noRenderRequest] - whether or not to request a re-render from the viewer
     * @return {Representation} this object
     */
    setVisibility(value, noRenderRequest) {
        this.visible = value;
        if (this.visible && this.opacity) {
            const lazyProps = this.lazyProps;
            const bufferParams = lazyProps.bufferParams;
            const what = lazyProps.what;
            if (lazyProps.build) {
                lazyProps.build = false;
                this.build();
                return this;
            }
            else if (Object.keys(bufferParams).length || Object.keys(what).length) {
                lazyProps.bufferParams = {};
                lazyProps.what = {};
                this.updateParameters(bufferParams, what);
            }
        }
        this.bufferList.forEach(function (buffer) {
            buffer.setVisibility(value);
        });
        if (!noRenderRequest)
            this.viewer.requestRender();
        return this;
    }
    /**
     * Set the visibility of the representation
     * @param {RepresentationParameters} params - parameters object
     * @param {Object} [what] - buffer data attributes to be updated,
     *                        note that this needs to be implemented in the
     *                        derived classes. Generally it allows more
     *                        fine-grained control over updating than
     *                        forcing a rebuild.
     * @param {Boolean} what.position - update position data
     * @param {Boolean} what.color - update color data
     * @param {Boolean} [rebuild] - whether or not to rebuild the representation
     * @return {Representation} this object
     */
    setParameters(params, what = {}, rebuild = false) {
        const p = params || {};
        const tp = this.parameters;
        const bufferParams = {};
        if (!this.opacity && p.opacity !== undefined) {
            if (this.lazyProps.build) {
                this.lazyProps.build = false;
                rebuild = true;
            }
            else {
                Object.assign(bufferParams, this.lazyProps.bufferParams);
                Object.assign(what, this.lazyProps.what);
                this.lazyProps.bufferParams = {};
                this.lazyProps.what = {};
            }
        }
        this.setColor(p.color, p);
        for (let name in p) {
            if (p[name] === undefined)
                continue;
            if (tp[name] == undefined)
                continue; // Skip nulls as well as undefined
            if (tp[name].int)
                p[name] = parseInt(p[name]);
            if (tp[name].float)
                p[name] = parseFloat(p[name]);
            // no value change
            if (p[name] === this[name] && (!p[name].equals || p[name].equals(this[name])))
                continue;
            if (this[name] && this[name].copy && p[name].copy) {
                this[name].copy(p[name]);
            }
            else if (this[name] && this[name].set) {
                this[name].set(p[name]);
            }
            else {
                this[name] = p[name];
            }
            // buffer param
            if (tp[name].buffer) {
                if (tp[name].buffer === true) {
                    bufferParams[name] = p[name];
                }
                else {
                    let key = tp[name].buffer;
                    bufferParams[key] = p[name];
                }
            }
            // mark for update
            if (tp[name].update) {
                what[tp[name].update] = true;
            }
            // mark for rebuild
            if (tp[name].rebuild &&
                !(tp[name].rebuild === 'impostor' &&
                    ExtensionFragDepth && !this.disableImpostor)) {
                rebuild = true;
            }
        }
        //
        if (rebuild) {
            this.build();
        }
        else {
            this.updateParameters(bufferParams, what);
        }
        return this;
    }
    updateParameters(bufferParams = {}, what) {
        if (this.lazy && (!this.visible || !this.opacity) && bufferParams.hasOwnProperty('opacity') === false) {
            Object.assign(this.lazyProps.bufferParams, bufferParams);
            Object.assign(this.lazyProps.what, what);
            return;
        }
        this.bufferList.forEach(function (buffer) {
            buffer.setParameters(bufferParams);
        });
        if (Object.keys(what).length) {
            this.update(what); // update buffer attribute
        }
        this.viewer.requestRender();
    }
    getParameters() {
        const params = {
            lazy: this.lazy,
            visible: this.visible,
            quality: this.quality
        };
        Object.keys(this.parameters).forEach(name => {
            if (this.parameters[name] !== null) {
                params[name] = this[name];
            }
        });
        return params;
    }
    clear() {
        this.bufferList.forEach(buffer => {
            this.viewer.remove(buffer);
            buffer.dispose();
        });
        this.bufferList.length = 0;
        this.viewer.requestRender();
    }
    dispose() {
        this.disposed = true;
        this.queue.kill();
        this.tasks.dispose();
        this.clear();
    }
}

/**
 * @file Worker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class _Worker {
    constructor(name) {
        this.pending = 0;
        this.postCount = 0;
        this.onmessageDict = {};
        this.onerrorDict = {};
        this.name = name;
        this.blobUrl = window.URL.createObjectURL(WorkerRegistry.get(name));
        this.worker = new Worker(this.blobUrl);
        WorkerRegistry.activeWorkerCount += 1;
        this.worker.onmessage = (event) => {
            this.pending -= 1;
            const postId = event.data.__postId;
            if (Debug)
                Log.timeEnd('Worker.postMessage ' + name + ' #' + postId);
            const onmessage = this.onmessageDict[postId];
            if (onmessage) {
                onmessage.call(this.worker, event);
            }
            delete this.onmessageDict[postId];
            delete this.onerrorDict[postId];
        };
        this.worker.onerror = (event) => {
            this.pending -= 1;
            if (event.data) {
                const postId = event.data.__postId;
                const onerror = this.onerrorDict[postId];
                if (onerror) {
                    onerror.call(this.worker, event);
                }
                else {
                    Log.error('Worker.onerror', postId, name, event);
                }
                delete this.onmessageDict[postId];
                delete this.onerrorDict[postId];
            }
            else {
                Log.error('Worker.onerror', name, event);
            }
        };
    }
    post(aMessage = {}, transferList, onmessage, onerror) {
        this.onmessageDict[this.postCount] = onmessage;
        this.onerrorDict[this.postCount] = onerror;
        aMessage.__name = this.name;
        aMessage.__postId = this.postCount;
        aMessage.__debug = Debug;
        if (Debug)
            Log.time(`Worker.postMessage ${this.name} #${this.postCount}`);
        try {
            this.worker.postMessage(aMessage, transferList);
        }
        catch (error) {
            Log.error('worker.post:', error);
            this.worker.postMessage(aMessage);
        }
        this.pending += 1;
        this.postCount += 1;
        return this;
    }
    terminate() {
        if (this.worker) {
            this.worker.terminate();
            window.URL.revokeObjectURL(this.blobUrl);
            WorkerRegistry.activeWorkerCount -= 1;
        }
        else {
            Log.log('no worker to terminate');
        }
    }
}

/**
 * @file Worker Pool
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class WorkerPool {
    constructor(name, maxCount = 2) {
        this.pool = [];
        this.count = 0;
        this.maxCount = Math.min(8, maxCount);
        this.name = name;
    }
    post(aMessage = {}, transferList, onmessage, onerror) {
        const worker = this.getNextWorker();
        if (worker) {
            worker.post(aMessage, transferList, onmessage, onerror);
        }
        else {
            console.error('unable to get worker from pool');
        }
        return this;
    }
    terminate() {
        this.pool.forEach(function (worker) {
            worker.terminate();
        });
    }
    getNextWorker() {
        let nextWorker;
        let minPending = Infinity;
        for (let i = 0; i < this.maxCount; ++i) {
            if (i >= this.count) {
                nextWorker = new _Worker(this.name);
                this.pool.push(nextWorker);
                this.count += 1;
                break;
            }
            const worker = this.pool[i];
            if (worker.pending === 0) {
                nextWorker = worker;
                break;
            }
            else if (worker.pending < minPending) {
                minPending = worker.pending;
                nextWorker = worker;
            }
        }
        return nextWorker;
    }
}
WorkerPool.prototype.constructor = WorkerPool;

/**
 * @file Vector Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function calculateMeanVector3(array) {
    const n = array.length;
    const m = n / 3;
    let x = 0;
    let y = 0;
    let z = 0;
    for (let i = 0; i < n; i += 3) {
        x += array[i + 0];
        y += array[i + 1];
        z += array[i + 2];
    }
    return new Vector3(x / m, y / m, z / m);
}
function projectPointOnVector(point, vector, origin) {
    if (origin) {
        point.sub(origin).projectOnVector(vector).add(origin);
    }
    else {
        point.projectOnVector(vector);
    }
    return point;
}
function computeBoundingBox(array) {
    let minX = +Infinity;
    let minY = +Infinity;
    let minZ = +Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let maxZ = -Infinity;
    for (let i = 0, l = array.length; i < l; i += 3) {
        const x = array[i];
        const y = array[i + 1];
        const z = array[i + 2];
        if (x < minX)
            minX = x;
        if (y < minY)
            minY = y;
        if (z < minZ)
            minZ = z;
        if (x > maxX)
            maxX = x;
        if (y > maxY)
            maxY = y;
        if (z > maxZ)
            maxZ = z;
    }
    return [
        v3new([minX, minY, minZ]),
        v3new([maxX, maxY, maxZ])
    ];
}
computeBoundingBox.__deps = [v3new];
function applyMatrix4toVector3array(m, a) {
    for (let i = 0, il = a.length; i < il; i += 3) {
        const x = a[i];
        const y = a[i + 1];
        const z = a[i + 2];
        a[i] = m[0] * x + m[4] * y + m[8] * z + m[12];
        a[i + 1] = m[1] * x + m[5] * y + m[9] * z + m[13];
        a[i + 2] = m[2] * x + m[6] * y + m[10] * z + m[14];
    }
}
function applyMatrix3toVector3array(m, a) {
    for (let i = 0, il = a.length; i < il; i += 3) {
        const x = a[i];
        const y = a[i + 1];
        const z = a[i + 2];
        a[i] = m[0] * x + m[3] * y + m[6] * z;
        a[i + 1] = m[1] * x + m[4] * y + m[7] * z;
        a[i + 2] = m[2] * x + m[5] * y + m[8] * z;
    }
}
function normalizeVector3array(a) {
    for (let i = 0, il = a.length; i < il; i += 3) {
        const x = a[i];
        const y = a[i + 1];
        const z = a[i + 2];
        const len2 = x * x + y * y + z * z;
        if (len2 > 0) { // avoid divide by zero
            const s = 1 / Math.sqrt(len2);
            a[i] = x * s;
            a[i + 1] = y * s;
            a[i + 2] = z * s;
        }
        // else leave as all zeros
    }
}
function v3new(array) {
    return new Float32Array(array || 3); // TODO
}
function v3cross(out, a, b) {
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const bx = b[0];
    const by = b[1];
    const bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
}
function v3dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function v3sub(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
}
function v3add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
}
function v3fromArray(out, array, offset = 0) {
    out[0] = array[offset];
    out[1] = array[offset + 1];
    out[2] = array[offset + 2];
}
function v3toArray(input, array, offset = 0) {
    array[offset] = input[0];
    array[offset + 1] = input[1];
    array[offset + 2] = input[2];
}
function v3length2(a) {
    return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
}
function v3length(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
}
function v3divideScalar(out, a, s) {
    v3multiplyScalar(out, a, 1 / s);
}
v3divideScalar.__deps = [v3multiplyScalar];
function v3multiplyScalar(out, a, s) {
    out[0] = a[0] * s;
    out[1] = a[1] * s;
    out[2] = a[2] * s;
}
function v3normalize(out, a) {
    const length2 = v3length2(a);
    if (length2 == 0) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
    }
    else {
        v3multiplyScalar(out, a, 1 / Math.sqrt(length2));
    }
}
v3normalize.__deps = [v3multiplyScalar, v3length2];
function v3subScalar(out, a, s) {
    out[0] = a[0] - s;
    out[1] = a[1] - s;
    out[2] = a[2] - s;
}
function v3addScalar(out, a, s) {
    out[0] = a[0] + s;
    out[1] = a[1] + s;
    out[2] = a[2] + s;
}
function v3floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
}
function v3ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
}
function v3negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
}
function v3angle(a, b) {
    const ax = a[0];
    const ay = a[1];
    const az = a[2];
    const bx = b[0];
    const by = b[1];
    const bz = b[2];
    const cx = ay * bz - az * by;
    const cy = az * bx - ax * bz;
    const cz = ax * by - ay * bx;
    const s = Math.sqrt(cx * cx + cy * cy + cz * cz);
    const c = ax * bx + ay * by + az * bz;
    return Math.atan2(s, c);
}

/**
 * @file Dash
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getFixedCountDashData(data, segmentCount = 9) {
    const s = Math.floor(segmentCount / 2);
    const n = data.position1.length / 3;
    const sn = s * n;
    const sn3 = sn * 3;
    const step = 1 / segmentCount;
    const direction = calculateDirectionArray(data.position1, data.position2);
    const position1 = new Float32Array(sn3);
    const position2 = new Float32Array(sn3);
    const v = new Vector3();
    for (let i = 0; i < n; ++i) {
        const i3 = i * 3;
        v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
        const x = data.position1[i3];
        const y = data.position1[i3 + 1];
        const z = data.position1[i3 + 2];
        for (let j = 0; j < s; ++j) {
            const j3 = s * i3 + j * 3;
            const f1 = step * (j * 2 + 1);
            const f2 = step * (j * 2 + 2);
            position1[j3] = x + v.x * f1;
            position1[j3 + 1] = y + v.y * f1;
            position1[j3 + 2] = z + v.z * f1;
            position2[j3] = x + v.x * f2;
            position2[j3 + 1] = y + v.y * f2;
            position2[j3 + 2] = z + v.z * f2;
        }
    }
    const position = calculateCenterArray(position1, position2);
    const color = replicateArray3Entries(data.color, s); // TODO
    const color2 = color;
    const d = { position, position1, position2, color, color2 };
    if (data.radius) { // TODO
        d.radius = replicateArrayEntries(data.radius, s); // TODO
    }
    if (data.picking && data.picking.array) {
        data.picking.array = replicateArrayEntries(data.picking.array, s);
        d.picking = data.picking;
    }
    if (data.primitiveId) {
        d.primitiveId = replicateArrayEntries(data.primitiveId, s);
    }
    return d;
}
function getFixedLengthDashData(data, segmentLength = 0.1) {
    const direction = calculateDirectionArray(data.position1, data.position2);
    const pos1 = [];
    const pos2 = [];
    const col = [];
    const rad = data.radius ? [] : undefined;
    const pick = data.picking ? [] : undefined;
    const id = data.primitiveId ? [] : undefined;
    const v = new Vector3();
    const n = data.position1.length / 3;
    let k = 0;
    for (let i = 0; i < n; ++i) {
        const i3 = i * 3;
        v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
        const vl = v.length();
        const segmentCount = vl / segmentLength;
        const s = Math.floor(segmentCount / 2);
        const step = 1 / segmentCount;
        const x = data.position1[i3];
        const y = data.position1[i3 + 1];
        const z = data.position1[i3 + 2];
        for (let j = 0; j < s; ++j) {
            const j3 = k * 3 + j * 3;
            const f1 = step * (j * 2 + 1);
            const f2 = step * (j * 2 + 2);
            pos1[j3] = x + v.x * f1;
            pos1[j3 + 1] = y + v.y * f1;
            pos1[j3 + 2] = z + v.z * f1;
            pos2[j3] = x + v.x * f2;
            pos2[j3 + 1] = y + v.y * f2;
            pos2[j3 + 2] = z + v.z * f2;
            if (data.color) {
                col[j3] = data.color[i3];
                col[j3 + 1] = data.color[i3 + 1];
                col[j3 + 2] = data.color[i3 + 2];
            }
            if (rad)
                rad[k + j] = data.radius[i];
            if (pick) {
                if (data.picking.array) {
                    pick[k + j] = data.picking.array[i];
                }
                else {
                    pick[k + j] = i;
                }
            }
            if (id)
                id[k + j] = data.primitiveId[i];
        }
        k += s;
    }
    const position1 = new Float32Array(pos1);
    const position2 = new Float32Array(pos2);
    const position = calculateCenterArray(position1, position2);
    const color = new Float32Array(col);
    const color2 = color;
    const d = { position, position1, position2, color, color2 };
    if (rad)
        d.radius = new Float32Array(rad);
    if (pick && data.picking) {
        data.picking.array = new Float32Array(pick);
        d.picking = data.picking;
    }
    if (id)
        d.primitiveId = new Float32Array(id);
    return d;
}
function getFixedLengthWrappedDashData(data, segmentLength = 0.1) {
    const direction = calculateDirectionArray(data.position1, data.position2);
    const pos1 = [];
    const pos2 = [];
    const col = [];
    const rad = data.radius ? [] : undefined;
    const pick = data.picking ? [] : undefined;
    const id = data.primitiveId ? [] : undefined;
    const v = new Vector3();
    const n = data.position1.length / 3;
    let remaining = segmentLength;
    let drawing = true;
    let k = 0;
    let k3 = 0;
    let kprev = 0;
    for (let i = 0; i < n; ++i) {
        const i3 = i * 3;
        const x = data.position1[i3];
        const y = data.position1[i3 + 1];
        const z = data.position1[i3 + 2];
        v.set(direction[i3], direction[i3 + 1], direction[i3 + 2]);
        const vl = v.length();
        if (drawing) {
            pos1[k3] = x;
            pos1[k3 + 1] = y;
            pos1[k3 + 2] = z;
        }
        let dist = remaining;
        const inv = 1 / vl;
        while (dist < vl) {
            const a = drawing ? pos2 : pos1;
            a[k3] = x + v.x * dist * inv;
            a[k3 + 1] = y + v.y * dist * inv;
            a[k3 + 2] = z + v.z * dist * inv;
            if (drawing) {
                k++;
                k3 = k * 3;
            }
            drawing = !drawing;
            remaining = segmentLength;
            dist += segmentLength;
        }
        if (drawing) {
            pos2[k3] = data.position2[i3];
            pos2[k3 + 1] = data.position2[i3 + 1];
            pos2[k3 + 2] = data.position2[i3 + 2];
            k++;
            k3 = k * 3;
        }
        remaining = dist - vl;
        for (let j = kprev; j < k; j++) {
            if (data.color) {
                const j3 = j * 3;
                col[j3] = data.color[i3];
                col[j3 + 1] = data.color[i3 + 1];
                col[j3 + 2] = data.color[i3 + 2];
            }
            if (rad)
                rad[j] = data.radius[i];
            if (pick) {
                if (data.picking.array) {
                    pick[j] = data.picking.array[i];
                }
                else {
                    pick[j] = i;
                }
            }
            if (id)
                id[j] = data.primitiveId[i];
        }
        kprev = k;
    }
    if (!drawing && n > 0) {
        const k3 = k * 3;
        pos2[k3] = data.position2[3 * n - 3];
        pos2[k3 + 1] = data.position2[3 * n - 2];
        pos2[k3 + 1] = data.position2[3 * n - 1];
    }
    const position1 = new Float32Array(pos1);
    const position2 = new Float32Array(pos2);
    const position = calculateCenterArray(position1, position2);
    const color = new Float32Array(col);
    const color2 = color;
    const d = { position, position1, position2, color, color2 };
    if (rad)
        d.radius = new Float32Array(rad);
    if (pick && data.picking) {
        data.picking.array = new Float32Array(pick);
        d.picking = data.picking;
    }
    if (id)
        d.primitiveId = new Float32Array(id);
    return d;
}

/**
 * @file Primitive
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function addElement(elm, array) {
    if (elm.toArray !== undefined) {
        elm = elm.toArray();
    }
    else if (elm.x !== undefined) {
        elm = [elm.x, elm.y, elm.z];
    }
    else if (elm.r !== undefined) {
        elm = [elm.r, elm.g, elm.b];
    }
    array.push.apply(array, elm);
}
const tmpVec = new Vector3();
/**
 * Base class for geometry primitives
 * @interface
 */
class Primitive {
    static get Picker() { return PickerRegistry.get(this.type); }
    static get Buffer() { return BufferRegistry.get(this.type); }
    static getShapeKey(name) {
        return this.type + name[0].toUpperCase() + name.substr(1);
    }
    static expandBoundingBox(box, data) { }
    static valueToShape(shape, name, value) {
        const data = shape._primitiveData[this.getShapeKey(name)];
        const type = this.fields[name];
        switch (type) {
            case 'v3':
            case 'c':
                addElement(value, data);
                break;
            default:
                data.push(value);
        }
    }
    static objectToShape(shape, data) {
        Object.keys(this.fields).forEach(name => {
            this.valueToShape(shape, name, data[name]);
        });
        this.valueToShape(shape, 'name', data.name);
        this.expandBoundingBox(shape.boundingBox, data);
    }
    static valueFromShape(shape, pid, name) {
        const data = shape._primitiveData[this.getShapeKey(name)];
        const type = this.fields[name];
        switch (type) {
            case 'v3':
                return new Vector3().fromArray(data, 3 * pid);
            case 'c':
                return new Color().fromArray(data, 3 * pid);
            default:
                return data[pid];
        }
    }
    static objectFromShape(shape, pid) {
        let name = this.valueFromShape(shape, pid, 'name');
        if (name === undefined) {
            name = `${this.type}: ${pid} (${shape.name})`;
        }
        const o = { shape, name };
        Object.keys(this.fields).forEach(name => {
            o[name] = this.valueFromShape(shape, pid, name);
        });
        return o;
    }
    static arrayFromShape(shape, name) {
        const data = shape._primitiveData[this.getShapeKey(name)];
        const type = this.fields[name];
        switch (type) {
            case 's':
                return data;
            default:
                return new Float32Array(data);
        }
    }
    static dataFromShape(shape) {
        const data = {};
        if (this.Picker) {
            data.picking = new this.Picker(shape);
        }
        Object.keys(this.fields).forEach(name => {
            data[name] = this.arrayFromShape(shape, name);
        });
        return data;
    }
    static bufferFromShape(shape, params) {
        return new this.Buffer(this.dataFromShape(shape), params);
    }
}
Primitive.type = '';
Primitive.fields = {};
/**
 * Sphere geometry primitive
 */
class SpherePrimitive extends Primitive {
    static positionFromShape(shape, pid) {
        return this.valueFromShape(shape, pid, 'position');
    }
    static expandBoundingBox(box, data) {
        box.expandByPoint(tmpVec.fromArray(data.position));
    }
}
SpherePrimitive.type = 'sphere';
SpherePrimitive.fields = {
    position: 'v3',
    color: 'c',
    radius: 'f'
};
/**
 * Box geometry primitive
 */
class BoxPrimitive extends Primitive {
    static positionFromShape(shape, pid) {
        return this.valueFromShape(shape, pid, 'position');
    }
    static expandBoundingBox(box, data) {
        box.expandByPoint(tmpVec.fromArray(data.position));
    }
}
BoxPrimitive.type = 'box';
BoxPrimitive.fields = {
    position: 'v3',
    color: 'c',
    size: 'f',
    heightAxis: 'v3',
    depthAxis: 'v3'
};
/**
 * Octahedron geometry primitive
 */
class OctahedronPrimitive extends BoxPrimitive {
}
OctahedronPrimitive.type = 'octahedron';
/**
 * Tetrahedron geometry primitive
 */
class TetrahedronPrimitive extends BoxPrimitive {
}
TetrahedronPrimitive.type = 'tetrahedron';
/**
 * Cylinder geometry primitive
 */
class CylinderPrimitive extends Primitive {
    static positionFromShape(shape, pid) {
        const p1 = this.valueFromShape(shape, pid, 'position1');
        const p2 = this.valueFromShape(shape, pid, 'position2');
        return p1.add(p2).multiplyScalar(0.5);
    }
    static expandBoundingBox(box, data) {
        box.expandByPoint(tmpVec.fromArray(data.position1));
        box.expandByPoint(tmpVec.fromArray(data.position2));
    }
    static bufferFromShape(shape, params = {}) {
        let data = this.dataFromShape(shape);
        if (this.type === 'cylinder' && params.dashedCylinder) {
            data = getFixedLengthDashData(data);
        }
        return new this.Buffer(data, params);
    }
}
CylinderPrimitive.type = 'cylinder';
CylinderPrimitive.fields = {
    position1: 'v3',
    position2: 'v3',
    color: 'c',
    radius: 'f'
};
/**
 * Arrow geometry primitive
 */
class ArrowPrimitive extends CylinderPrimitive {
}
ArrowPrimitive.type = 'arrow';
/**
 * Cone geometry primitive
 */
class ConePrimitive extends CylinderPrimitive {
}
ConePrimitive.type = 'cone';
/**
 * Ellipsoid geometry primitive
 */
class EllipsoidPrimitive extends SpherePrimitive {
}
EllipsoidPrimitive.type = 'ellipsoid';
EllipsoidPrimitive.fields = {
    position: 'v3',
    color: 'c',
    radius: 'f',
    majorAxis: 'v3',
    minorAxis: 'v3'
};
/**
 * Torus geometry primitive
 */
class TorusPrimitive extends EllipsoidPrimitive {
}
TorusPrimitive.type = 'torus';
/**
 * Text geometry primitive
 */
class TextPrimitive extends Primitive {
    static positionFromShape(shape, pid) {
        return this.valueFromShape(shape, pid, 'position');
    }
    static expandBoundingBox(box, data) {
        box.expandByPoint(tmpVec.fromArray(data.position));
    }
}
TextPrimitive.type = 'text';
TextPrimitive.fields = {
    position: 'v3',
    color: 'c',
    size: 'f',
    text: 's'
};
/**
 * Point primitive
 */
class PointPrimitive extends Primitive {
    static positionFromShape(shape, pid) {
        return this.valueFromShape(shape, pid, 'position');
    }
    static expandBoundingBox(box, data) {
        box.expandByPoint(tmpVec.fromArray(data.position));
    }
}
PointPrimitive.type = 'point';
PointPrimitive.fields = {
    position: 'v3',
    color: 'c',
};
/**
 * Wideline geometry primitive
 */
class WidelinePrimitive extends Primitive {
    static positionFromShape(shape, pid) {
        const p1 = this.valueFromShape(shape, pid, 'position1');
        const p2 = this.valueFromShape(shape, pid, 'position2');
        return p1.add(p2).multiplyScalar(0.5);
    }
    static expandBoundingBox(box, data) {
        box.expandByPoint(tmpVec.fromArray(data.position1));
        box.expandByPoint(tmpVec.fromArray(data.position2));
    }
}
WidelinePrimitive.type = 'wideline';
WidelinePrimitive.fields = {
    position1: 'v3',
    position2: 'v3',
    color: 'c'
};

/**
 * @file Spatial Hash
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function createBoundingBox(positions) {
    const { x, y, z } = positions;
    const boundingBox = new Box3();
    const count = x.length;
    const { min, max } = boundingBox;
    for (let i = 0; i < count; i++) {
        min.x = Math.min(x[i], min.x);
        min.y = Math.min(y[i], min.y);
        min.z = Math.min(z[i], min.z);
        max.x = Math.max(x[i], max.x);
        max.y = Math.max(y[i], max.y);
        max.z = Math.max(z[i], max.z);
    }
    return boundingBox;
}
class SpatialHash {
    constructor(positions, boundingBox) {
        this.exp = 3;
        const bb = boundingBox || createBoundingBox(positions);
        this.minX = bb.min.x;
        this.minY = bb.min.y;
        this.minZ = bb.min.z;
        this.boundX = ((bb.max.x - this.minX) >> this.exp) + 1;
        this.boundY = ((bb.max.y - this.minY) >> this.exp) + 1;
        this.boundZ = ((bb.max.z - this.minZ) >> this.exp) + 1;
        const n = this.boundX * this.boundY * this.boundZ;
        const an = (positions.count !== undefined) ? positions.count : positions.x.length;
        const xArray = positions.x;
        const yArray = positions.y;
        const zArray = positions.z;
        let count = 0;
        const grid = new Uint32Array(n);
        const bucketIndex = new Int32Array(an);
        for (let i = 0; i < an; ++i) {
            const x = (xArray[i] - this.minX) >> this.exp;
            const y = (yArray[i] - this.minY) >> this.exp;
            const z = (zArray[i] - this.minZ) >> this.exp;
            const idx = (((x * this.boundY) + y) * this.boundZ) + z;
            if ((grid[idx] += 1) === 1) {
                count += 1;
            }
            bucketIndex[i] = idx;
        }
        const bucketCount = new Uint16Array(count);
        for (let i = 0, j = 0; i < n; ++i) {
            const c = grid[i];
            if (c > 0) {
                grid[i] = j + 1;
                bucketCount[j] = c;
                j += 1;
            }
        }
        const bucketOffset = new Uint32Array(count);
        for (let i = 1; i < count; ++i) {
            bucketOffset[i] += bucketOffset[i - 1] + bucketCount[i - 1];
        }
        const bucketFill = new Uint16Array(count);
        const bucketArray = new Int32Array(an);
        for (let i = 0; i < an; ++i) {
            const bucketIdx = grid[bucketIndex[i]];
            if (bucketIdx > 0) {
                const k = bucketIdx - 1;
                bucketArray[bucketOffset[k] + bucketFill[k]] = i;
                bucketFill[k] += 1;
            }
        }
        this.grid = grid;
        this.bucketCount = bucketCount;
        this.bucketOffset = bucketOffset;
        this.bucketArray = bucketArray;
        this.xArray = xArray;
        this.yArray = yArray;
        this.zArray = zArray;
    }
    within(x, y, z, r) {
        const result = [];
        this.eachWithin(x, y, z, r, atomIndex => result.push(atomIndex));
        return result;
    }
    eachWithin(x, y, z, r, callback) {
        const rSq = r * r;
        const loX = Math.max(0, (x - r - this.minX) >> this.exp);
        const loY = Math.max(0, (y - r - this.minY) >> this.exp);
        const loZ = Math.max(0, (z - r - this.minZ) >> this.exp);
        const hiX = Math.min(this.boundX, ((x + r - this.minX) >> this.exp) + 1);
        const hiY = Math.min(this.boundY, ((y + r - this.minY) >> this.exp) + 1);
        const hiZ = Math.min(this.boundZ, ((z + r - this.minZ) >> this.exp) + 1);
        for (let ix = loX; ix < hiX; ++ix) {
            for (let iy = loY; iy < hiY; ++iy) {
                for (let iz = loZ; iz < hiZ; ++iz) {
                    const idx = (((ix * this.boundY) + iy) * this.boundZ) + iz;
                    const bucketIdx = this.grid[idx];
                    if (bucketIdx > 0) {
                        const k = bucketIdx - 1;
                        const offset = this.bucketOffset[k];
                        const count = this.bucketCount[k];
                        const end = offset + count;
                        for (let i = offset; i < end; ++i) {
                            const atomIndex = this.bucketArray[i];
                            const dx = this.xArray[atomIndex] - x;
                            const dy = this.yArray[atomIndex] - y;
                            const dz = this.zArray[atomIndex] - z;
                            const dSq = dx * dx + dy * dy + dz * dz;
                            if (dSq <= rSq)
                                callback(atomIndex, dSq);
                        }
                    }
                }
            }
        }
    }
}

/**
 * @file Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Store base class
 * @interface
 */
class Store {
    /**
     * @param {Integer} [size] - initial size
     */
    constructor(size = 0) {
        this._fields = this._defaultFields;
        this._init(0);
    }
    get _defaultFields() { return []; }
    /**
     * Initialize the store
     * @param  {Integer} size - size to initialize
     * @return {undefined}
     */
    _init(size) {
        this.length = size;
        this.count = 0;
        for (let i = 0, il = this._fields.length; i < il; ++i) {
            const [name, size, type] = this._fields[i];
            this._initField(name, size, type);
        }
    }
    /**
     * Initialize a field
     * @param  {String} name - field name
     * @param  {Integer} size - element size
     * @param  {String} type - data type, one of int8, int16, int32,
     *                         uint8, uint16, uint32, float32
     * @return {undefined}
     */
    _initField(name, size, type) {
        this[name] = getTypedArray(type, this.length * size);
    }
    /**
     * Add a field
     * @param  {String} name - field name
     * @param  {Integer} size - element size
     * @param  {String} type - data type, one of int8, int16, int32,
     *                         uint8, uint16, uint32, float32
     * @return {undefined}
     */
    addField(name, size, type) {
        this._fields.push([name, size, type]);
        this._initField(name, size, type);
    }
    /**
     * Resize the store to the new size
     * @param  {Integer} size - new size
     * @return {undefined}
     */
    resize(size) {
        // Log.time( "Store.resize" );
        this.length = Math.round(size || 0);
        this.count = Math.min(this.count, this.length);
        for (let i = 0, il = this._fields.length; i < il; ++i) {
            const name = this._fields[i][0];
            const itemSize = this._fields[i][1];
            const arraySize = this.length * itemSize;
            const tmpArray = new this[name].constructor(arraySize);
            if (this[name].length > arraySize) {
                tmpArray.set(this[name].subarray(0, arraySize));
            }
            else {
                tmpArray.set(this[name]);
            }
            this[name] = tmpArray;
        }
        // Log.timeEnd( "Store.resize" );
    }
    /**
     * Resize the store to 1.5 times its current size if full
     * @return {undefined}
     */
    growIfFull() {
        if (this.count >= this.length) {
            const size = Math.round(this.length * 1.5);
            this.resize(Math.max(256, size));
        }
    }
    /**
     * Copy data from one store to another
     * @param  {Store} other - store to copy from
     * @param  {Integer} thisOffset - offset to start copying to
     * @param  {Integer} otherOffset - offset to start copying from
     * @param  {Integer} length - number of entries to copy
     * @return {undefined}
     */
    copyFrom(other, thisOffset, otherOffset, length) {
        for (let i = 0, il = this._fields.length; i < il; ++i) {
            const name = this._fields[i][0];
            const itemSize = this._fields[i][1];
            const thisField = this[name];
            const otherField = other[name];
            for (let j = 0; j < length; ++j) {
                const thisIndex = itemSize * (thisOffset + j);
                const otherIndex = itemSize * (otherOffset + j);
                for (let k = 0; k < itemSize; ++k) {
                    thisField[thisIndex + k] = otherField[otherIndex + k];
                }
            }
        }
    }
    /**
     * Copy data within this store
     * @param  {Integer} thisOffset - offset to start copying to
     * @param  {Integer} otherOffset - offset to start copying from
     * @param  {Integer} length - number of entries to copy
     * @return {undefined}
     */
    copyWithin(offsetTarget, offsetSource, length) {
        for (let i = 0, il = this._fields.length; i < il; ++i) {
            const name = this._fields[i][0];
            const itemSize = this._fields[i][1];
            const thisField = this[name];
            for (let j = 0; j < length; ++j) {
                const targetIndex = itemSize * (offsetTarget + j);
                const sourceIndex = itemSize * (offsetSource + j);
                for (let k = 0; k < itemSize; ++k) {
                    thisField[targetIndex + k] = thisField[sourceIndex + k];
                }
            }
        }
    }
    /**
     * Sort entries in the store given the compare function
     * @param  {[type]} compareFunction - function to sort by
     * @return {undefined}
     */
    sort(compareFunction) {
        Log.time('Store.sort');
        const thisStore = this;
        const tmpStore = new this.constructor(1);
        function swap(index1, index2) {
            if (index1 === index2)
                return;
            tmpStore.copyFrom(thisStore, 0, index1, 1);
            thisStore.copyWithin(index1, index2, 1);
            thisStore.copyFrom(tmpStore, index2, 0, 1);
        }
        function quicksort(left, right) {
            if (left < right) {
                let pivot = Math.floor((left + right) / 2);
                let leftNew = left;
                let rightNew = right;
                do {
                    while (compareFunction(leftNew, pivot) < 0) {
                        leftNew += 1;
                    }
                    while (compareFunction(rightNew, pivot) > 0) {
                        rightNew -= 1;
                    }
                    if (leftNew <= rightNew) {
                        if (leftNew === pivot) {
                            pivot = rightNew;
                        }
                        else if (rightNew === pivot) {
                            pivot = leftNew;
                        }
                        swap(leftNew, rightNew);
                        leftNew += 1;
                        rightNew -= 1;
                    }
                } while (leftNew <= rightNew);
                quicksort(left, rightNew);
                quicksort(leftNew, right);
            }
        }
        quicksort(0, this.count - 1);
        Log.timeEnd('Store.sort');
    }
    /**
     * Empty the store
     * @return {undefined}
     */
    clear() {
        this.count = 0;
    }
    /**
     * Dispose of the store entries and fields
     * @return {undefined}
     */
    dispose() {
        for (let i = 0, il = this._fields.length; i < il; ++i) {
            const name = this._fields[i][0];
            delete this[name];
        }
    }
}

/**
 * @file Contact Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Bond store
 */
class ContactStore extends Store {
    get _defaultFields() {
        return [
            ['index1', 1, 'int32'],
            ['index2', 1, 'int32'],
            ['type', 1, 'int8']
        ];
    }
    addContact(index1, index2, type) {
        this.growIfFull();
        const i = this.count;
        if (index1 < index2) {
            this.index1[i] = index1;
            this.index2[i] = index2;
        }
        else {
            this.index2[i] = index1;
            this.index1[i] = index2;
        }
        if (type)
            this.type[i] = type;
        this.count += 1;
    }
}

/**
 * @file Bit array
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Paul Pillot <paulpillot@gmail.com>
 * @private
 */
/**
 * Compute the Hamming weight of a 32-bit unsigned integer
 * @param  {Integer} v - a 32-bit unsigned integer
 * @return {Integer} the Hamming weight
 */
function hammingWeight(v) {
    // works with signed or unsigned shifts
    v -= ((v >>> 1) & 0x55555555);
    v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
    return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
}
/**
 * Bit array
 *
 * Based heavily on https://github.com/lemire/FastBitSet.js
 * which is licensed under the Apache License, Version 2.0.
 */
class BitArray {
    /**
     * @param  {Integer} length - array length
     * @param  {Boolean} [setAll] - initialize with true
     */
    constructor(length, setAll) {
        this.length = length;
        this._words = new Uint32Array((length + 32) >>> 5);
        if (setAll === true) {
            this.setAll();
        }
    }
    /**
     * Get value at index
     * @param  {Integer} index - the index
     * @return {Boolean} value
     */
    get(index) {
        return (this._words[index >>> 5] & (1 << index)) !== 0;
    }
    /**
     * Set value at index to true
     * @param  {Integer} index - the index
     * @return {undefined}
     */
    set(index) {
        this._words[index >>> 5] |= 1 << index;
    }
    /**
     * Set value at index to false
     * @param  {Integer} index - the index
     * @return {undefined}
     */
    clear(index) {
        this._words[index >>> 5] &= ~(1 << index);
    }
    /**
     * Flip value at index
     * @param  {Integer} index - the index
     * @return {undefined}
     */
    flip(index) {
        this._words[index >>> 5] ^= 1 << index;
    }
    _assignRange(start, end, value) {
        if (end < start)
            return;
        const words = this._words;
        const wordValue = value === true ? 0xFFFFFFFF : 0;
        const wordStart = start >>> 5;
        const wordEnd = end >>> 5;
        // set complete words when applicable
        for (let k = wordStart + 1; k < wordEnd; ++k) {
            words[k] = wordValue;
        }
        // set parts of the range not spanning complete words
        const startWord = wordStart << 5;
        const endWord = wordEnd << 5;
        if (value === true) {
            if (end - start < 32) {
                for (let i = start, n = end + 1; i < n; ++i) {
                    words[i >>> 5] |= 1 << i;
                }
            }
            else {
                for (let i = start, n = startWord + 32; i < n; ++i) {
                    words[i >>> 5] |= 1 << i;
                }
                for (let i = endWord, n = end + 1; i < n; ++i) {
                    words[i >>> 5] |= 1 << i;
                }
            }
        }
        else {
            if (end - start < 32) {
                for (let i = start, n = end + 1; i < n; ++i) {
                    words[i >>> 5] &= ~(1 << i);
                }
            }
            else {
                for (let i = start, n = startWord + 32; i < n; ++i) {
                    words[i >>> 5] &= ~(1 << i);
                }
                for (let i = endWord, n = end + 1; i < n; ++i) {
                    words[i >>> 5] &= ~(1 << i);
                }
            }
        }
        return this;
    }
    /**
     * Set bits of the given range
     * @param {Integer} start - start index
     * @param {Integer} end - end index
     * @return {BitArray} this object
     */
    setRange(start, end) {
        return this._assignRange(start, end, true);
    }
    /**
     * Clear bits of the given range
     * @param {Integer} start - start index
     * @param {Integer} end - end index
     * @return {BitArray} this object
     */
    clearRange(start, end) {
        return this._assignRange(start, end, false);
    }
    /**
     * Set bits at all given indices
     * @param {...Integer} arguments - indices
     * @return {Boolean} this object
     */
    setBits(...indices) {
        const words = this._words;
        const n = indices.length;
        for (let i = 0; i < n; ++i) {
            const index = indices[i];
            words[index >>> 5] |= 1 << index;
        }
        return this;
    }
    /**
     * Clear bits at all given indices
     * @param {...Integer} arguments - indices
     * @return {Boolean} this object
     */
    clearBits(...indices) {
        const words = this._words;
        const n = indices.length;
        for (let i = 0; i < n; ++i) {
            const index = indices[i];
            words[index >>> 5] &= ~(1 << index);
        }
        return this;
    }
    /**
     * Set all bits of the array
     * @return {BitArray} this object
     */
    setAll() {
        return this._assignRange(0, this.length - 1, true);
    }
    /**
     * Clear all bits of the array
     * @return {BitArray} this object
     */
    clearAll() {
        return this._assignRange(0, this.length - 1, false);
    }
    /**
     * Flip all the values in the array
     * @return {BitArray} this object
     */
    flipAll() {
        const count = this._words.length;
        const words = this._words;
        const bs = 32 - this.length % 32;
        for (let k = 0; k < count - 1; ++k) {
            words[k] = ~words[k];
        }
        words[count - 1] = (~(words[count - 1] << bs)) >>> bs;
        return this;
    }
    _isRangeValue(start, end, value) {
        if (end < start)
            return;
        const words = this._words;
        const wordValue = value === true ? 0xFFFFFFFF : 0;
        const wordStart = start >>> 5;
        const wordEnd = end >>> 5;
        // set complete words when applicable
        for (let k = wordStart + 1; k < wordEnd; ++k) {
            if (words[k] !== wordValue)
                return false;
        }
        // set parts of the range not spanning complete words
        if (end - start < 32) {
            for (let i = start, n = end + 1; i < n; ++i) {
                if (!!(words[i >>> 5] & (1 << i)) !== value)
                    return false;
            }
        }
        else {
            const startWord = wordStart << 5;
            const endWord = wordEnd << 5;
            for (let i = start, n = startWord + 32; i < n; ++i) {
                if (!!(words[i >>> 5] & (1 << i)) !== value)
                    return false;
            }
            for (let i = endWord, n = end + 1; i < n; ++i) {
                if (!!(words[i >>> 5] & (1 << i)) !== value)
                    return false;
            }
        }
        return true;
    }
    /**
     * Test if bits in given range are set
     * @param {Integer} start - start index
     * @param {Integer} end - end index
     * @return {BitArray} this object
     */
    isRangeSet(start, end) {
        return this._isRangeValue(start, end, true);
    }
    /**
     * Test if bits in given range are clear
     * @param {Integer} start - start index
     * @param {Integer} end - end index
     * @return {BitArray} this object
     */
    isRangeClear(start, end) {
        return this._isRangeValue(start, end, false);
    }
    /**
     * Test if all bits in the array are set
     * @return {Boolean} test result
     */
    isAllSet() {
        return this._isRangeValue(0, this.length - 1, true);
    }
    /**
     * Test if all bits in the array are clear
     * @return {Boolean} test result
     */
    isAllClear() {
        return this._isRangeValue(0, this.length - 1, false);
    }
    /**
     * Test if bits at all given indices are set
     * @param {...Integer} arguments - indices
     * @return {Boolean} test result
     */
    isSet(...indices) {
        const words = this._words;
        const n = indices.length;
        for (let i = 0; i < n; ++i) {
            const index = indices[i];
            if ((words[index >>> 5] & (1 << index)) === 0)
                return false;
        }
        return true;
    }
    /**
     * Test if bits at all given indices are clear
     * @param {...Integer} arguments - indices
     * @return {Boolean} test result
     */
    isClear(...indices) {
        const words = this._words;
        const n = indices.length;
        for (let i = 0; i < n; ++i) {
            const index = indices[i];
            if ((words[index >>> 5] & (1 << index)) !== 0)
                return false;
        }
        return true;
    }
    /**
     * Test if two BitArrays are identical in all their values
     * @param {BitArray} otherBitarray - the other BitArray
     * @return {Boolean} test result
     */
    isEqualTo(otherBitarray) {
        const words1 = this._words;
        const words2 = otherBitarray._words;
        const count = Math.min(words1.length, words2.length);
        for (let k = 0; k < count; ++k) {
            if (words1[k] !== words2[k]) {
                return false;
            }
        }
        return true;
    }
    /**
     * How many set bits?
     * @return {Integer} number of set bits
     */
    getSize() {
        const count = this._words.length;
        const words = this._words;
        let size = 0;
        for (let i = 0; i < count; ++i) {
            size += hammingWeight(words[i]);
        }
        return size;
    }
    /**
     * Calculate difference betwen this and another bit array.
     * Store result in this object.
     * @param  {BitArray} otherBitarray - the other bit array
     * @return {BitArray} this object
     */
    difference(otherBitarray) {
        const words1 = this._words;
        const words2 = otherBitarray._words;
        const count = Math.min(words1.length, words2.length);
        for (let k = 0; k < count; ++k) {
            words1[k] = words1[k] & ~words2[k];
        }
        for (let k = words1.length; k < count; ++k) {
            words1[k] = 0;
        }
        return this;
    }
    /**
     * Calculate union betwen this and another bit array.
     * Store result in this object.
     * @param  {BitArray} otherBitarray - the other bit array
     * @return {BitArray} this object
     */
    union(otherBitarray) {
        const words1 = this._words;
        const words2 = otherBitarray._words;
        const count = Math.min(words1.length, words2.length);
        for (let k = 0; k < count; ++k) {
            words1[k] |= words2[k];
        }
        for (let k = words1.length; k < count; ++k) {
            words1[k] = 0;
        }
        return this;
    }
    /**
     * Calculate intersection betwen this and another bit array.
     * Store result in this object.
     * @param  {BitArray} otherBitarray - the other bit array
     * @return {BitArray} this object
     */
    intersection(otherBitarray) {
        const words1 = this._words;
        const words2 = otherBitarray._words;
        const count = Math.min(words1.length, words2.length);
        for (let k = 0; k < count; ++k) {
            words1[k] &= words2[k];
        }
        for (let k = words1.length; k < count; ++k) {
            words1[k] = 0;
        }
        return this;
    }
    /**
     * Test if there is any intersection betwen this and another bit array.
     * @param  {BitArray} otherBitarray - the other bit array
     * @return {Boolean} test result
     */
    intersects(otherBitarray) {
        const words1 = this._words;
        const words2 = otherBitarray._words;
        const count = Math.min(words1.length, words2.length);
        for (let k = 0; k < count; ++k) {
            if ((words1[k] & words2[k]) !== 0) {
                return true;
            }
        }
        return false;
    }
    /**
     * Calculate the number of bits in common betwen this and another bit array.
     * @param  {BitArray} otherBitarray - the other bit array
     * @return {Integer} size
     */
    getIntersectionSize(otherBitarray) {
        const words1 = this._words;
        const words2 = otherBitarray._words;
        const count = Math.min(words1.length, words2.length);
        let size = 0;
        for (let k = 0; k < count; ++k) {
            size += hammingWeight(words1[k] & words2[k]);
        }
        return size;
    }
    /**
     * Calculate intersection betwen this and another bit array.
     * Store result in a new bit array.
     * @param  {BitArray} otherBitarray - the other bit array
     * @return {BitArray} the new bit array
     */
    makeIntersection(otherBitarray) {
        const words1 = this._words;
        const words2 = otherBitarray._words;
        const count = Math.min(words1.length, words2.length);
        const wordsA = new Uint32Array(count);
        const intersection = Object.create(BitArray.prototype);
        intersection._words = wordsA;
        intersection.length = Math.min(this.length, otherBitarray.length);
        for (let k = 0; k < count; ++k) {
            wordsA[k] = words1[k] & words2[k];
        }
        return intersection;
    }
    /**
     * Iterate over all set bits in the array
     * @param  {function( index: Integer, i: Integer )} callback - the callback
     * @return {undefined}
     */
    forEach(callback) {
        const count = this._words.length;
        const words = this._words;
        let i = 0;
        for (let k = 0; k < count; ++k) {
            let w = words[k];
            while (w !== 0) {
                const t = w & -w;
                const index = (k << 5) + hammingWeight(t - 1);
                callback(index, i);
                w ^= t;
                ++i;
            }
        }
    }
    /**
     * Get an array with the set bits
     * @return {Array} bit indices
     */
    toArray() {
        const words = this._words;
        const answer = new Array(this.getSize());
        const count = this._words.length;
        let pos = 0;
        for (let k = 0; k < count; ++k) {
            let w = words[k];
            while (w !== 0) {
                const t = w & -w;
                answer[pos++] = (k << 5) + hammingWeight(t - 1);
                w ^= t;
            }
        }
        return answer;
    }
    toString() {
        return '{' + this.toArray().join(',') + '}';
    }
    toSeleString() {
        const sele = this.toArray().join(',');
        return sele ? '@' + sele : 'NONE';
    }
    /**
     * Clone this object
     * @return {BitArray} the cloned object
     */
    clone() {
        const clone = Object.create(BitArray.prototype);
        clone.length = this.length;
        clone._words = new Uint32Array(this._words);
        return clone;
    }
}

/**
 * @file Adjacency List
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function createAdjacencyList(edges) {
    const { edgeCount, nodeCount, nodeArray1, nodeArray2 } = edges;
    const countArray = new Uint8Array(nodeCount);
    const offsetArray = new Int32Array(nodeCount);
    // count edges per node
    for (let i = 0; i < edgeCount; ++i) {
        countArray[nodeArray1[i]] += 1;
        countArray[nodeArray2[i]] += 1;
    }
    // get offsets to node edges
    for (let i = 1; i < nodeCount; ++i) {
        offsetArray[i] += offsetArray[i - 1] + countArray[i - 1];
    }
    // prepare index array
    const bondCount2 = edgeCount * 2;
    const indexArray = new Int32Array(bondCount2);
    for (let j = 0; j < bondCount2; ++j) {
        indexArray[j] = -1;
    }
    // build index array
    for (let i = 0; i < edgeCount; ++i) {
        const idx1 = nodeArray1[i];
        const idx2 = nodeArray2[i];
        let j1 = offsetArray[idx1];
        while (indexArray[j1] !== -1 && j1 < bondCount2) {
            j1 += 1;
        }
        indexArray[j1] = i;
        let j2 = offsetArray[idx2];
        while (indexArray[j2] !== -1 && j2 < bondCount2) {
            j2 += 1;
        }
        indexArray[j2] = i;
    }
    return { countArray, offsetArray, indexArray };
}

/**
 * @file Features
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function createFeatures() {
    return {
        types: [],
        groups: [],
        centers: { x: [], y: [], z: [] },
        atomSets: []
    };
}
function createFeatureState(type = 0 /* FeatureType.Unknown */, group = 0 /* FeatureGroup.Unknown */) {
    return { type, group, x: 0, y: 0, z: 0, atomSet: [] };
}
function addAtom(state, atom) {
    state.x += atom.x;
    state.y += atom.y;
    state.z += atom.z;
    state.atomSet.push(atom.index);
}
function addFeature(features, state) {
    const n = state.atomSet.length;
    if (n > 0) {
        const { types, groups, centers, atomSets } = features;
        types.push(state.type);
        groups.push(state.group);
        centers.x.push(state.x / n);
        centers.y.push(state.y / n);
        centers.z.push(state.z / n);
        atomSets.push(state.atomSet);
    }
}

/**
 * @file Structure Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// entity types
const UnknownEntity = 0;
const PolymerEntity = 1;
const NonPolymerEntity = 2;
const MacrolideEntity = 3;
const WaterEntity = 4;
// molecule types
const UnknownType = 0;
const WaterType = 1;
const IonType = 2;
const ProteinType = 3;
const RnaType = 4;
const DnaType = 5;
const SaccharideType = 6;
// backbone types
const UnknownBackboneType = 0;
const ProteinBackboneType = 1;
const RnaBackboneType = 2;
const DnaBackboneType = 3;
const CgProteinBackboneType = 4;
const CgRnaBackboneType = 5;
const CgDnaBackboneType = 6;
// chemical component types
const ChemCompProtein = [
    'D-BETA-PEPTIDE, C-GAMMA LINKING', 'D-GAMMA-PEPTIDE, C-DELTA LINKING',
    'D-PEPTIDE COOH CARBOXY TERMINUS', 'D-PEPTIDE NH3 AMINO TERMINUS', 'D-PEPTIDE LINKING',
    'L-BETA-PEPTIDE, C-GAMMA LINKING', 'L-GAMMA-PEPTIDE, C-DELTA LINKING',
    'L-PEPTIDE COOH CARBOXY TERMINUS', 'L-PEPTIDE NH3 AMINO TERMINUS', 'L-PEPTIDE LINKING',
    'PEPTIDE LINKING', 'PEPTIDE-LIKE'
];
const ChemCompRna = [
    'RNA OH 3 PRIME TERMINUS', 'RNA OH 5 PRIME TERMINUS', 'RNA LINKING'
];
const ChemCompDna = [
    'DNA OH 3 PRIME TERMINUS', 'DNA OH 5 PRIME TERMINUS', 'DNA LINKING',
    'L-DNA LINKING', 'L-RNA LINKING'
];
const ChemCompSaccharide = [
    'D-SACCHARIDE', 'D-SACCHARIDE 1,4 AND 1,4 LINKING', 'D-SACCHARIDE 1,4 AND 1,6 LINKING',
    'L-SACCHARIDE', 'L-SACCHARIDE 1,4 AND 1,4 LINKING', 'L-SACCHARIDE 1,4 AND 1,6 LINKING',
    'SACCHARIDE'
];
const ChemCompOther = [
    'OTHER'
];
const ChemCompNonPolymer = [
    'NON-POLYMER'
];
const ChemCompHetero = ChemCompNonPolymer.concat(ChemCompOther, ChemCompSaccharide);
// secondary structure
const SecStrucHelix = ['h', 'g', 'i'];
const SecStrucSheet = ['e', 'b'];
const SecStrucTurn = ['s', 't', 'l', ''];
const AtomicNumbers = {
    'H': 1, 'D': 1, 'T': 1, 'HE': 2, 'LI': 3, 'BE': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9, 'NE': 10, 'NA': 11, 'MG': 12, 'AL': 13, 'SI': 14, 'P': 15, 'S': 16, 'CL': 17, 'AR': 18, 'K': 19, 'CA': 20, 'SC': 21, 'TI': 22, 'V': 23, 'CR': 24, 'MN': 25, 'FE': 26, 'CO': 27, 'NI': 28, 'CU': 29, 'ZN': 30, 'GA': 31, 'GE': 32, 'AS': 33, 'SE': 34, 'BR': 35, 'KR': 36, 'RB': 37, 'SR': 38, 'Y': 39, 'ZR': 40, 'NB': 41, 'MO': 42, 'TC': 43, 'RU': 44, 'RH': 45, 'PD': 46, 'AG': 47, 'CD': 48, 'IN': 49, 'SN': 50, 'SB': 51, 'TE': 52, 'I': 53, 'XE': 54, 'CS': 55, 'BA': 56, 'LA': 57, 'CE': 58, 'PR': 59, 'ND': 60, 'PM': 61, 'SM': 62, 'EU': 63, 'GD': 64, 'TB': 65, 'DY': 66, 'HO': 67, 'ER': 68, 'TM': 69, 'YB': 70, 'LU': 71, 'HF': 72, 'TA': 73, 'W': 74, 'RE': 75, 'OS': 76, 'IR': 77, 'PT': 78, 'AU': 79, 'HG': 80, 'TL': 81, 'PB': 82, 'BI': 83, 'PO': 84, 'AT': 85, 'RN': 86, 'FR': 87, 'RA': 88, 'AC': 89, 'TH': 90, 'PA': 91, 'U': 92, 'NP': 93, 'PU': 94, 'AM': 95, 'CM': 96, 'BK': 97, 'CF': 98, 'ES': 99, 'FM': 100, 'MD': 101, 'NO': 102, 'LR': 103, 'RF': 104, 'DB': 105, 'SG': 106, 'BH': 107, 'HS': 108, 'MT': 109, 'DS': 110, 'RG': 111, 'CN': 112, 'NH': 113, 'FL': 114, 'MC': 115, 'LV': 116, 'TS': 117, 'OG': 118
};
const DefaultAtomicNumber = 0;
// http://dx.doi.org/10.1021/jp8111556 (or 2.0)
const VdwRadii = {
    1: 1.1, 2: 1.4, 3: 1.81, 4: 1.53, 5: 1.92, 6: 1.7, 7: 1.55, 8: 1.52, 9: 1.47, 10: 1.54, 11: 2.27, 12: 1.73, 13: 1.84, 14: 2.1, 15: 1.8, 16: 1.8, 17: 1.75, 18: 1.88, 19: 2.75, 20: 2.31, 21: 2.3, 22: 2.15, 23: 2.05, 24: 2.05, 25: 2.05, 26: 2.05, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.1, 31: 1.87, 32: 2.11, 33: 1.85, 34: 1.9, 35: 1.83, 36: 2.02, 37: 3.03, 38: 2.49, 39: 2.4, 40: 2.3, 41: 2.15, 42: 2.1, 43: 2.05, 44: 2.05, 45: 2.0, 46: 2.05, 47: 2.1, 48: 2.2, 49: 2.2, 50: 1.93, 51: 2.17, 52: 2.06, 53: 1.98, 54: 2.16, 55: 3.43, 56: 2.68, 57: 2.5, 58: 2.48, 59: 2.47, 60: 2.45, 61: 2.43, 62: 2.42, 63: 2.4, 64: 2.38, 65: 2.37, 66: 2.35, 67: 2.33, 68: 2.32, 69: 2.3, 70: 2.28, 71: 2.27, 72: 2.25, 73: 2.2, 74: 2.1, 75: 2.05, 76: 2.0, 77: 2.0, 78: 2.05, 79: 2.1, 80: 2.05, 81: 1.96, 82: 2.02, 83: 2.07, 84: 1.97, 85: 2.02, 86: 2.2, 87: 3.48, 88: 2.83, 89: 2.0, 90: 2.4, 91: 2.0, 92: 2.3, 93: 2.0, 94: 2.0, 95: 2.0, 96: 2.0, 97: 2.0, 98: 2.0, 99: 2.0, 100: 2.0, 101: 2.0, 102: 2.0, 103: 2.0, 104: 2.0, 105: 2.0, 106: 2.0, 107: 2.0, 108: 2.0, 109: 2.0, 110: 2.0, 111: 2.0, 112: 2.0, 113: 2.0, 114: 2.0, 115: 2.0, 116: 2.0, 117: 2.0, 118: 2.0
};
const DefaultVdwRadius = 2.0; // C
// http://dx.doi.org/10.1039/b801115j (or 1.6)
const CovalentRadii = {
    1: 0.31, 2: 0.28, 3: 1.28, 4: 0.96, 5: 0.84, 6: 0.76, 7: 0.71, 8: 0.66, 9: 0.57, 10: 0.58, 11: 1.66, 12: 1.41, 13: 1.21, 14: 1.11, 15: 1.07, 16: 1.05, 17: 1.02, 18: 1.06, 19: 2.03, 20: 1.76, 21: 1.7, 22: 1.6, 23: 1.53, 24: 1.39, 25: 1.39, 26: 1.32, 27: 1.26, 28: 1.24, 29: 1.32, 30: 1.22, 31: 1.22, 32: 1.2, 33: 1.19, 34: 1.2, 35: 1.2, 36: 1.16, 37: 2.2, 38: 1.95, 39: 1.9, 40: 1.75, 41: 1.64, 42: 1.54, 43: 1.47, 44: 1.46, 45: 1.42, 46: 1.39, 47: 1.45, 48: 1.44, 49: 1.42, 50: 1.39, 51: 1.39, 52: 1.38, 53: 1.39, 54: 1.4, 55: 2.44, 56: 2.15, 57: 2.07, 58: 2.04, 59: 2.03, 60: 2.01, 61: 1.99, 62: 1.98, 63: 1.98, 64: 1.96, 65: 1.94, 66: 1.92, 67: 1.92, 68: 1.89, 69: 1.9, 70: 1.87, 71: 1.87, 72: 1.75, 73: 1.7, 74: 1.62, 75: 1.51, 76: 1.44, 77: 1.41, 78: 1.36, 79: 1.36, 80: 1.32, 81: 1.45, 82: 1.46, 83: 1.48, 84: 1.4, 85: 1.5, 86: 1.5, 87: 2.6, 88: 2.21, 89: 2.15, 90: 2.06, 91: 2.0, 92: 1.96, 93: 1.9, 94: 1.87, 95: 1.8, 96: 1.69, 97: 1.6, 98: 1.6, 99: 1.6, 100: 1.6, 101: 1.6, 102: 1.6, 103: 1.6, 104: 1.6, 105: 1.6, 106: 1.6, 107: 1.6, 108: 1.6, 109: 1.6, 110: 1.6, 111: 1.6, 112: 1.6, 113: 1.6, 114: 1.6, 115: 1.6, 116: 1.6, 117: 1.6, 118: 1.6
};
const DefaultCovalentRadius = 1.6;
const Valences = {
    1: [1],
    2: [0],
    3: [1],
    4: [2],
    5: [3],
    6: [4],
    7: [3],
    8: [2],
    9: [1],
    10: [0],
    11: [1],
    12: [2],
    13: [6],
    14: [6],
    15: [3, 5, 7],
    16: [2, 4, 6],
    17: [1],
    18: [0],
    19: [1],
    20: [2],
    31: [3],
    32: [4],
    33: [3, 5],
    34: [2, 4, 6],
    35: [1],
    36: [0],
    37: [1],
    38: [2],
    49: [3],
    50: [4],
    51: [3, 5],
    52: [2],
    53: [1, 2, 5],
    54: [0, 2],
    55: [1],
    56: [2],
    81: [3],
    82: [4],
    83: [3],
    84: [2],
    85: [1],
    86: [0],
    87: [1],
    88: [2]
};
const DefaultValence = -1;
const OuterShellElectronCounts = {
    1: 1, 2: 2, 3: 1, 4: 2, 5: 3, 6: 4, 7: 5, 8: 6, 9: 7, 10: 8, 11: 1, 12: 2, 13: 3, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 1, 20: 2, 21: 3, 22: 4, 23: 5, 24: 6, 25: 7, 26: 8, 27: 9, 28: 10, 29: 11, 30: 2, 31: 3, 32: 4, 33: 5, 34: 6, 35: 7, 36: 8, 37: 1, 38: 2, 39: 3, 40: 4, 41: 5, 42: 6, 43: 7, 44: 8, 45: 9, 46: 10, 47: 11, 48: 2, 49: 3, 50: 4, 51: 5, 52: 6, 53: 7, 54: 8, 55: 1, 56: 2, 57: 3, 58: 4, 59: 3, 60: 4, 61: 5, 62: 6, 63: 7, 64: 8, 65: 9, 66: 10, 67: 11, 68: 12, 69: 13, 70: 14, 71: 15, 72: 4, 73: 5, 74: 6, 75: 7, 76: 8, 77: 9, 78: 10, 79: 11, 80: 2, 81: 3, 82: 4, 83: 5, 84: 6, 85: 7, 86: 8, 87: 1, 88: 2, 89: 3, 90: 4, 91: 3, 92: 4, 93: 5, 94: 6, 95: 7, 96: 8, 97: 9, 98: 10, 99: 11, 100: 12, 101: 13, 102: 14, 103: 15, 104: 2, 105: 2, 106: 2, 107: 2, 108: 2, 109: 2, 110: 2, 111: 2, 112: 2, 113: 3, 114: 4, 115: 5, 116: 6, 117: 7, 118: 8
};
const DefaultOuterShellElectronCount = 2;
// http://blanco.biomol.uci.edu/Whole_residue_HFscales.txt
// https://www.nature.com/articles/nsb1096-842
const ResidueHydrophobicity = {
    // AA  DGwif   DGwoct  Oct-IF
    'ALA': [0.17, 0.50, 0.33],
    'ARG': [0.81, 1.81, 1.00],
    'ASN': [0.42, 0.85, 0.43],
    'ASP': [1.23, 3.64, 2.41],
    'ASH': [-0.07, 0.43, 0.50],
    'CYS': [-0.24, -0.02, 0.22],
    'GLN': [0.58, 0.77, 0.19],
    'GLU': [2.02, 3.63, 1.61],
    'GLH': [-0.01, 0.11, 0.12],
    'GLY': [0.01, 1.15, 1.14],
    // "His+": [  0.96,  2.33,  1.37 ],
    'HIS': [0.17, 0.11, -0.06],
    'ILE': [-0.31, -1.12, -0.81],
    'LEU': [-0.56, -1.25, -0.69],
    'LYS': [0.99, 2.80, 1.81],
    'MET': [-0.23, -0.67, -0.44],
    'PHE': [-1.13, -1.71, -0.58],
    'PRO': [0.45, 0.14, -0.31],
    'SER': [0.13, 0.46, 0.33],
    'THR': [0.14, 0.25, 0.11],
    'TRP': [-1.85, -2.09, -0.24],
    'TYR': [-0.94, -0.71, 0.23],
    'VAL': [0.07, -0.46, -0.53]
};
const DefaultResidueHydrophobicity = [0.00, 0.00, 0.00];
const AA1 = {
    'HIS': 'H',
    'ARG': 'R',
    'LYS': 'K',
    'ILE': 'I',
    'PHE': 'F',
    'LEU': 'L',
    'TRP': 'W',
    'ALA': 'A',
    'MET': 'M',
    'PRO': 'P',
    'CYS': 'C',
    'ASN': 'N',
    'VAL': 'V',
    'GLY': 'G',
    'SER': 'S',
    'GLN': 'Q',
    'TYR': 'Y',
    'ASP': 'D',
    'GLU': 'E',
    'THR': 'T',
    'SEC': 'U',
    'PYL': 'O', // as per IUPAC definition
};
const AA3 = Object.keys(AA1);
const RnaBases = ['A', 'C', 'T', 'G', 'U', 'I'];
const DnaBases = ['DA', 'DC', 'DT', 'DG', 'DU', 'DI'];
const PurinBases = ['A', 'G', 'I', 'DA', 'DG', 'DI'];
const Bases = RnaBases.concat(DnaBases);
const WaterNames = [
    'SOL', 'WAT', 'HOH', 'H2O', 'W', 'DOD', 'D3O', 'TIP3', 'TIP4', 'SPC'
];
// all chemical components with the word "ion" in their name, Sep 2016
//
// SET SESSION group_concat_max_len = 1000000;
// SELECT GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
// (
//     SELECT count(obj_id) as c, id_
//     FROM pdb.chem_comp WHERE name LIKE "% ION%"
//     GROUP BY id_
// ) AS t1;
const IonNames = [
    '118', '119', '1AL', '1CU', '2FK', '2HP', '2OF', '3CO',
    '3MT', '3NI', '3OF', '3P8', '4MO', '4PU', '543', '6MO', 'ACT', 'AG', 'AL',
    'ALF', 'AM', 'ATH', 'AU', 'AU3', 'AUC', 'AZI', 'BA', 'BCT', 'BEF', 'BF4', 'BO4',
    'BR', 'BS3', 'BSY', 'CA', 'CAC', 'CD', 'CD1', 'CD3', 'CD5', 'CE', 'CHT', 'CL',
    'CO', 'CO3', 'CO5', 'CON', 'CR', 'CS', 'CSB', 'CU', 'CU1', 'CU3', 'CUA', 'CUZ',
    'CYN', 'DME', 'DMI', 'DSC', 'DTI', 'DY', 'E4N', 'EDR', 'EMC', 'ER3', 'EU',
    'EU3', 'F', 'FE', 'FE2', 'FPO', 'GA', 'GD3', 'GEP', 'HAI', 'HG', 'HGC', 'IN',
    'IOD', 'IR', 'IR3', 'IRI', 'IUM', 'K', 'KO4', 'LA', 'LCO', 'LCP', 'LI', 'LU',
    'MAC', 'MG', 'MH2', 'MH3', 'MLI', 'MLT', 'MMC', 'MN', 'MN3', 'MN5', 'MN6',
    'MO1', 'MO2', 'MO3', 'MO4', 'MO5', 'MO6', 'MOO', 'MOS', 'MOW', 'MW1', 'MW2',
    'MW3', 'NA', 'NA2', 'NA5', 'NA6', 'NAO', 'NAW', 'NCO', 'NET', 'NH4', 'NI',
    'NI1', 'NI2', 'NI3', 'NO2', 'NO3', 'NRU', 'O4M', 'OAA', 'OC1', 'OC2', 'OC3',
    'OC4', 'OC5', 'OC6', 'OC7', 'OC8', 'OCL', 'OCM', 'OCN', 'OCO', 'OF1', 'OF2',
    'OF3', 'OH', 'OS', 'OS4', 'OXL', 'PB', 'PBM', 'PD', 'PDV', 'PER', 'PI', 'PO3',
    'PO4', 'PR', 'PT', 'PT4', 'PTN', 'RB', 'RH3', 'RHD', 'RU', 'SB', 'SCN', 'SE4',
    'SEK', 'SM', 'SMO', 'SO3', 'SO4', 'SR', 'T1A', 'TB', 'TBA', 'TCN', 'TEA', 'TH',
    'THE', 'TL', 'TMA', 'TRA', 'UNX', 'V', 'VN3', 'VO4', 'W', 'WO5', 'Y1', 'YB',
    'YB2', 'YH', 'YT3', 'ZCM', 'ZN', 'ZN2', 'ZN3', 'ZNO', 'ZO3',
    // additional ion names
    'OHX'
];
// all chemical components with the word "%saccharide%" in their type, Sep 2016
//
// SET SESSION group_concat_max_len = 1000000;
// select GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
// (
//     SELECT count(obj_id), id_
//     FROM pdb.chem_comp WHERE type like "%SACCHARIDE%"
//     GROUP BY id_
// ) AS t1;
const SaccharideNames = [
    '045', '0AT', '0BD', '0MK', '0NZ', '0TS', '0V4', '0XY', '0YT', '10M',
    '147', '149', '14T', '15L', '16G', '18T', '18Y', '1AR', '1BW', '1GL', '1GN',
    '1JB', '1LL', '1NA', '1S3', '26M', '26Q', '26R', '26V', '26W', '26Y', '27C',
    '289', '291', '293', '2DG', '2F8', '2FG', '2FL', '2FP', '2GL', '2M4', '2M5',
    '32O', '34V', '3CM', '3DO', '3DY', '3FM', '3LR', '3MF', '3MG', '3SA', '3ZW',
    '46D', '46M', '46Z', '48Z', '4CQ', '4GC', '4NN', '50A', '5DI', '5GF', '5MM',
    '5RP', '5SA', '5SP', '64K', '6PG', '6SA', '7JZ', '7SA', 'A1Q', 'A2G', 'AAB',
    'AAL', 'AAO', 'ABC', 'ABD', 'ABE', 'ABF', 'ABL', 'ACG', 'ACI', 'ACR', 'ACX',
    'ADA', 'ADG', 'ADR', 'AF1', 'AFD', 'AFL', 'AFO', 'AFP', 'AFR', 'AGC', 'AGH',
    'AGL', 'AHR', 'AIG', 'ALL', 'ALX', 'AMU', 'AOG', 'AOS', 'ARA', 'ARB', 'ARE',
    'ARI', 'ASG', 'ASO', 'AXP', 'AXR', 'B0D', 'B16', 'B2G', 'B4G', 'B6D', 'B8D',
    'B9D', 'BBK', 'BCD', 'BDG', 'BDP', 'BDR', 'BEM', 'BFP', 'BGC', 'BGL', 'BGP',
    'BGS', 'BHG', 'BMA', 'BMX', 'BNG', 'BNX', 'BOG', 'BRI', 'BXF', 'BXP', 'BXX',
    'BXY', 'C3X', 'C4X', 'C5X', 'CAP', 'CBI', 'CBK', 'CBS', 'CDR', 'CEG', 'CGF',
    'CHO', 'CR1', 'CR6', 'CRA', 'CT3', 'CTO', 'CTR', 'CTT', 'D6G', 'DAF', 'DAG',
    'DDA', 'DDB', 'DDL', 'DEL', 'DFR', 'DFX', 'DG0', 'DGC', 'DGD', 'DGM', 'DGS',
    'DIG', 'DLF', 'DLG', 'DMU', 'DNO', 'DOM', 'DP5', 'DQQ', 'DQR', 'DR2', 'DR3',
    'DR4', 'DRI', 'DSR', 'DT6', 'DVC', 'E4P', 'E5G', 'EAG', 'EBG', 'EBQ', 'EGA',
    'EJT', 'EPG', 'ERE', 'ERI', 'F1P', 'F1X', 'F6P', 'FBP', 'FCA', 'FCB', 'FCT',
    'FDP', 'FDQ', 'FFC', 'FIX', 'FMO', 'FRU', 'FSI', 'FU4', 'FUB', 'FUC', 'FUD',
    'FUL', 'FXP', 'G16', 'G1P', 'G2F', 'G3I', 'G4D', 'G4S', 'G6D', 'G6P', 'G6S',
    'GAC', 'GAD', 'GAL', 'GC1', 'GC4', 'GCD', 'GCN', 'GCO', 'GCS', 'GCT', 'GCU',
    'GCV', 'GCW', 'GCX', 'GE1', 'GFG', 'GFP', 'GIV', 'GL0', 'GL2', 'GL5', 'GL6',
    'GL7', 'GL9', 'GLA', 'GLB', 'GLC', 'GLD', 'GLF', 'GLG', 'GLO', 'GLP', 'GLS',
    'GLT', 'GLW', 'GMH', 'GN1', 'GNX', 'GP1', 'GP4', 'GPH', 'GPM', 'GQ1', 'GQ2',
    'GQ4', 'GS1', 'GS4', 'GSA', 'GSD', 'GTE', 'GTH', 'GTK', 'GTR', 'GTZ', 'GU0',
    'GU1', 'GU2', 'GU3', 'GU4', 'GU5', 'GU6', 'GU8', 'GU9', 'GUF', 'GUP', 'GUZ',
    'GYP', 'GYV', 'H2P', 'HDL', 'HMS', 'HS2', 'HSD', 'HSG', 'HSH', 'HSJ', 'HSQ',
    'HSR', 'HSU', 'HSX', 'HSY', 'HSZ', 'IAB', 'IDG', 'IDR', 'IDS', 'IDT', 'IDU',
    'IDX', 'IDY', 'IMK', 'IN1', 'IPT', 'ISL', 'KBG', 'KD2', 'KDA', 'KDM', 'KDO',
    'KFN', 'KO1', 'KO2', 'KTU', 'L6S', 'LAG', 'LAI', 'LAK', 'LAO', 'LAT', 'LB2',
    'LBT', 'LCN', 'LDY', 'LGC', 'LGU', 'LM2', 'LMT', 'LMU', 'LOG', 'LOX', 'LPK',
    'LSM', 'LTM', 'LVZ', 'LXB', 'LXZ', 'M1F', 'M3M', 'M6P', 'M8C', 'MA1', 'MA2',
    'MA3', 'MAB', 'MAG', 'MAL', 'MAN', 'MAT', 'MAV', 'MAW', 'MBG', 'MCU', 'MDA',
    'MDM', 'MDP', 'MFA', 'MFB', 'MFU', 'MG5', 'MGA', 'MGL', 'MLB', 'MMA', 'MMN',
    'MN0', 'MRP', 'MTT', 'MUG', 'MVP', 'MXY', 'N1L', 'N9S', 'NAA', 'NAG', 'NBG',
    'NDG', 'NED', 'NG1', 'NG6', 'NGA', 'NGB', 'NGC', 'NGE', 'NGF', 'NGL', 'NGS',
    'NGY', 'NHF', 'NM6', 'NM9', 'NTF', 'NTO', 'NTP', 'NXD', 'NYT', 'OPG', 'OPM',
    'ORP', 'OX2', 'P3M', 'P53', 'P6P', 'PA5', 'PNA', 'PNG', 'PNW', 'PRP', 'PSJ',
    'PSV', 'PTQ', 'QDK', 'QPS', 'QV4', 'R1P', 'R1X', 'R2B', 'R5P', 'RAA', 'RAE',
    'RAF', 'RAM', 'RAO', 'RAT', 'RB5', 'RBL', 'RCD', 'RDP', 'REL', 'RER', 'RF5',
    'RG1', 'RGG', 'RHA', 'RIB', 'RIP', 'RNS', 'RNT', 'ROB', 'ROR', 'RPA', 'RST',
    'RUB', 'RUU', 'RZM', 'S6P', 'S7P', 'SA0', 'SCR', 'SDD', 'SF6', 'SF9', 'SG4',
    'SG5', 'SG6', 'SG7', 'SGA', 'SGC', 'SGD', 'SGN', 'SGS', 'SHB', 'SHG', 'SI3',
    'SIO', 'SOE', 'SOL', 'SSG', 'SUC', 'SUP', 'SUS', 'T6P', 'T6T', 'TAG', 'TCB',
    'TDG', 'TGK', 'TGY', 'TH1', 'TIA', 'TM5', 'TM6', 'TM9', 'TMR', 'TMX', 'TOA',
    'TOC', 'TRE', 'TYV', 'UCD', 'UDC', 'VG1', 'X0X', 'X1X', 'X2F', 'X4S', 'X5S',
    'X6X', 'XBP', 'XDN', 'XDP', 'XIF', 'XIM', 'XLF', 'XLS', 'XMM', 'XUL', 'XXR',
    'XYP', 'XYS', 'YO5', 'Z3Q', 'Z6J', 'Z9M', 'ZDC', 'ZDM'
];
const ProteinBackboneAtoms = [
    'CA', 'C', 'N', 'O',
    'O1', 'O2', 'OC1', 'OC2', 'OX1', 'OXT', 'OT1', 'OT2',
    'H', 'H1', 'H2', 'H3', 'HA', 'HN',
    'BB'
];
const NucleicBackboneAtoms = [
    'P', 'OP1', 'OP2', 'HOP2', 'HOP3',
    "O2'", "O3'", "O4'", "O5'", "C1'", "C2'", "C3'", "C4'", "C5'",
    "H1'", "H2'", "H2''", "HO2'", "H3'", "H4'", "H5'", "H5''", "HO3'", "HO5'",
    'O2*', 'O3*', 'O4*', 'O5*', 'C1*', 'C2*', 'C3*', 'C4*', 'C5*'
];
const ResidueTypeAtoms = {};
ResidueTypeAtoms[ProteinBackboneType] = {
    trace: 'CA',
    direction1: 'C',
    direction2: ['O', 'OC1', 'O1', 'OX1', 'OXT', 'OT1', 'OT2'],
    backboneStart: 'N',
    backboneEnd: 'C'
};
ResidueTypeAtoms[RnaBackboneType] = {
    trace: ["C4'", 'C4*'],
    direction1: ["C1'", 'C1*'],
    direction2: ["C3'", 'C3*'],
    backboneStart: 'P',
    backboneEnd: ["O3'", 'O3*']
};
ResidueTypeAtoms[DnaBackboneType] = {
    trace: ["C3'", 'C3*'],
    direction1: ["C2'", 'C2*'],
    direction2: ["O4'", 'O4*'],
    backboneStart: 'P',
    backboneEnd: ["O3'", 'O3*']
};
ResidueTypeAtoms[CgProteinBackboneType] = {
    trace: ['CA', 'BB'],
    backboneStart: ['CA', 'BB'],
    backboneEnd: ['CA', 'BB']
};
ResidueTypeAtoms[CgRnaBackboneType] = {
    trace: ["C4'", 'C4*', 'P'],
    backboneStart: ["C4'", 'C4*', 'P'],
    backboneEnd: ["C4'", 'C4*', 'P']
};
ResidueTypeAtoms[CgDnaBackboneType] = {
    trace: ["C3'", 'C3*', "C2'", 'P'],
    backboneStart: ["C3'", 'C3*', "C2'", 'P'],
    backboneEnd: ["C3'", 'C3*', "C2'", 'P']
};
ResidueTypeAtoms[UnknownBackboneType] = {};
// Mappings taken from Meeko: https://github.com/forlilab/Meeko/blob/develop/meeko/utils/autodock4_atom_types_elements.py
const PDBQTSpecialElements = {
    'HD': 'H',
    'HS': 'H',
    'A': 'C',
    'NA': 'N',
    'NS': 'N',
    'OA': 'O',
    'OS': 'O',
    'SA': 'S',
    'G0': 'C',
    'G1': 'C',
    'G2': 'C',
    'G3': 'C',
    'CG0': 'C',
    'CG1': 'C',
    'CG2': 'C',
    'CG3': 'C',
    'W': 'O'
};

/**
 * @file Geometry
 * @author Fred Ludlow <Fred.Ludlow@astx.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function assignGeometry(totalCoordination) {
    switch (totalCoordination) {
        case 0:
            return 0 /* AtomGeometry.Spherical */;
        case 1:
            return 1 /* AtomGeometry.Terminal */;
        case 2:
            return 2 /* AtomGeometry.Linear */;
        case 3:
            return 3 /* AtomGeometry.Trigonal */;
        case 4:
            return 4 /* AtomGeometry.Tetrahedral */;
        default:
            return 8 /* AtomGeometry.Unknown */;
    }
}
const Angles = new Map([
    [2 /* AtomGeometry.Linear */, degToRad$1(180)],
    [3 /* AtomGeometry.Trigonal */, degToRad$1(120)],
    [4 /* AtomGeometry.Tetrahedral */, degToRad$1(109.4721)],
    [6 /* AtomGeometry.Octahedral */, degToRad$1(90)]
]);
/**
 * Calculate the angles x-1-2 for all x where x is a heavy atom bonded to ap1.
 * @param  {AtomProxy} ap1 First atom (angle centre)
 * @param  {AtomProxy} ap2 Second atom
 * @return {number[]}        Angles in radians
 */
function calcAngles(ap1, ap2) {
    let angles = [];
    const d1 = new Vector3();
    const d2 = new Vector3();
    d1.subVectors(ap2, ap1);
    ap1.eachBondedAtom(x => {
        if (x.number !== 1 /* Elements.H */) {
            d2.subVectors(x, ap1);
            angles.push(d1.angleTo(d2));
        }
    });
    return angles;
}
/**
 * Find two neighbours of ap1 to define a plane (if possible) and
 * measure angle out of plane to ap2
 * @param  {AtomProxy} ap1 First atom (angle centre)
 * @param  {AtomProxy} ap2 Second atom (out-of-plane)
 * @return {number}        Angle from plane to second atom
 */
function calcPlaneAngle(ap1, ap2) {
    const x1 = ap1.clone();
    const v12 = new Vector3();
    v12.subVectors(ap2, ap1);
    const neighbours = [new Vector3(), new Vector3()];
    let ni = 0;
    ap1.eachBondedAtom(x => {
        if (ni > 1) {
            return;
        }
        if (x.number !== 1 /* Elements.H */) {
            x1.index = x.index;
            neighbours[ni++].subVectors(x, ap1);
        }
    });
    if (ni === 1) {
        x1.eachBondedAtom(x => {
            if (ni > 1) {
                return;
            }
            if (x.number !== 1 /* Elements.H */ && x.index !== ap1.index) {
                neighbours[ni++].subVectors(x, ap1);
            }
        });
    }
    if (ni !== 2) {
        return;
    }
    const cp = neighbours[0].cross(neighbours[1]);
    return Math.abs((Math.PI / 2) - cp.angleTo(v12));
}

/**
 * @file Valence Model
 * @author Fred Ludlow <Fred.Ludlow@astx.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/**
 * Are we involved in some kind of pi system. Either explicitly forming
 * double bond or N, O next to a double bond, except:
 *
 *   N,O with degree 4 cannot be conjugated.
 *   N,O adjacent to P=O or S=O do not qualify (keeps sulfonamide N sp3 geom)
 */
function isConjugated(a) {
    const _bp = a.structure.getBondProxy();
    const atomicNumber = a.number;
    const hetero = atomicNumber === 8 /* Elements.O */ || atomicNumber === 7 /* Elements.N */;
    if (hetero && a.bondCount === 4) {
        return false;
    }
    let flag = false;
    a.eachBond(b => {
        if (b.bondOrder > 1) {
            flag = true;
            return;
        }
        if (hetero) {
            const a2 = b.getOtherAtom(a);
            a2.eachBond(b2 => {
                if (b2.bondOrder > 1) {
                    const atomicNumber2 = a2.number;
                    if ((atomicNumber2 === 15 /* Elements.P */ || atomicNumber2 === 16 /* Elements.S */) &&
                        b2.getOtherAtom(a2).number === 8 /* Elements.O */) {
                        return;
                    }
                    flag = true;
                }
            }, _bp); // Avoid reuse of structure._bp
        }
    });
    return flag;
}
/* function hasExplicitCharge(r: ResidueProxy) {
  let flag = false
  r.eachAtom(a => {
    if (a.formalCharge != null && a.formalCharge !== 0) flag = true
  })
  return flag
}

function hasExplicitHydrogen(r: ResidueProxy) {
  let flag = false
  r.eachAtom(a => {
    if (a.number === Elements.H) flag = true
  })
  return flag
} */
function explicitValence(a) {
    let v = 0;
    a.eachBond(b => v += b.bondOrder);
    return v;
}
/**
 * Attempts to produce a consistent charge and implicit
 * H-count for an atom.
 *
 * If both params.assignCharge and params.assignH, this
 * approximately followsthe rules described in
 * https://docs.eyesopen.com/toolkits/python/oechemtk/valence.html#openeye-hydrogen-count-model
 *
 * If only charge or hydrogens are to be assigned it takes
 * a much simpler view and deduces one from the other
 *
 * @param {AtomProxy}           a      Atom to analyze
 * @param {assignChargeHParams} params What to assign
 */
function calculateHydrogensCharge(a, params) {
    const hydrogenCount = a.bondToElementCount(1 /* Elements.H */);
    let charge = a.formalCharge || 0;
    const assignCharge = (params.assignCharge === 'always' ||
        (params.assignCharge === 'auto' && charge === 0));
    const assignH = (params.assignH === 'always' ||
        (params.assignH === 'auto' && hydrogenCount === 0));
    const degree = a.bondCount;
    const valence = explicitValence(a);
    const conjugated = isConjugated(a);
    const multiBond = (valence - degree > 0);
    let implicitHCount = 0;
    let geom = 8 /* AtomGeometry.Unknown */;
    switch (a.number) {
        case 1 /* Elements.H */:
            if (assignCharge) {
                if (degree === 0) {
                    charge = 1;
                    geom = 0 /* AtomGeometry.Spherical */;
                }
                else if (degree === 1) {
                    charge = 0;
                    geom = 1 /* AtomGeometry.Terminal */;
                }
            }
            break;
        case 6 /* Elements.C */:
            // TODO: Isocyanide?
            if (assignCharge) {
                charge = 0; // Assume carbon always neutral
            }
            if (assignH) {
                // Carbocation/carbanion are 3-valent
                implicitHCount = Math.max(0, 4 - valence - Math.abs(charge));
            }
            // Carbocation is planar, carbanion is tetrahedral
            geom = assignGeometry(degree + implicitHCount + Math.max(0, -charge));
            break;
        case 7 /* Elements.N */:
            if (assignCharge) {
                if (!assignH) { // Trust input H explicitly:
                    charge = valence - 3;
                }
                else if (conjugated && valence < 4) {
                    // Neutral unless amidine/guanidine double-bonded N:
                    if (degree - hydrogenCount === 1 && valence - hydrogenCount === 2) {
                        charge = 1;
                    }
                    else {
                        charge = 0;
                    }
                }
                else {
                    // Sulfonamide nitrogen and classed as sp3 in conjugation model but
                    // they won't be charged
                    // Don't assign charge to nitrogens bound to metals
                    let flag = false;
                    a.eachBondedAtom(ba => {
                        if (ba.number === 16 /* Elements.S */ || ba.isMetal())
                            flag = true;
                    });
                    if (flag)
                        charge = 0;
                    else
                        charge = 1;
                    // TODO: Planarity sanity check?
                }
            }
            if (assignH) {
                // NH4+ -> 4, 1' amide -> 2, nitro N/N+ depiction -> 0
                implicitHCount = Math.max(0, 3 - valence + charge);
            }
            if (conjugated && !multiBond) {
                // Amide, anilinic N etc. cannot consider lone-pair for geometry purposes
                // Anilinic N geometry is depenent on ring electronics, for our purposes we
                // assume it's trigonal!
                geom = assignGeometry(degree + implicitHCount - charge);
            }
            else {
                // Everything else, pyridine, amine, nitrile, lp plays normal role:
                geom = assignGeometry(degree + implicitHCount + 1 - charge);
            }
            break;
        case 8 /* Elements.O */:
            if (assignCharge) {
                if (!assignH) {
                    charge = valence - 2; //
                }
                if (valence === 1) {
                    a.eachBondedAtom(ba => {
                        ba.eachBond(b => {
                            const oa = b.getOtherAtom(ba);
                            if (oa.index !== a.index && oa.number === 8 /* Elements.O */ && b.bondOrder === 2) {
                                charge = -1;
                            }
                        });
                    });
                }
            }
            if (assignH) {
                // ethanol -> 1, carboxylate -> -1
                implicitHCount = Math.max(0, 2 - valence + charge);
            }
            if (conjugated && !multiBond) {
                // carboxylate OH, phenol OH, one lone-pair taken up with conjugation
                geom = assignGeometry(degree + implicitHCount - charge + 1);
            }
            else {
                // Carbonyl (trigonal)
                geom = assignGeometry(degree + implicitHCount - charge + 2);
            }
            break;
        // Only handles thiols/thiolates/thioether/sulfonium. Sulfoxides and higher
        // oxidiation states are assumed neutral S (charge carried on O if required)
        case 16 /* Elements.S */:
            if (assignCharge) {
                if (!assignH) {
                    if (valence <= 3 && !a.bondToElementCount(8 /* Elements.O */)) {
                        charge = valence - 2; // e.g. explicitly deprotonated thiol
                    }
                    else {
                        charge = 0;
                    }
                }
            }
            if (assignH) {
                if (valence < 2) {
                    implicitHCount = Math.max(0, 2 - valence + charge);
                }
            }
            if (valence <= 3) {
                // Thiol, thiolate, tioether -> tetrahedral
                geom = assignGeometry(degree + implicitHCount - charge + 2);
            }
            break;
        case 9 /* Elements.F */:
        case 17 /* Elements.CL */:
        case 35 /* Elements.BR */:
        case 53 /* Elements.I */:
        case 85 /* Elements.AT */:
            // Never implicitly protonate halides
            if (assignCharge) {
                charge = valence - 1;
            }
            break;
        case 3 /* Elements.LI */:
        case 11 /* Elements.NA */:
        case 19 /* Elements.K */:
        case 37 /* Elements.RB */:
        case 55 /* Elements.CS */:
        case 87 /* Elements.FR */:
            if (assignCharge) {
                charge = 1 - valence;
            }
            break;
        case 4 /* Elements.BE */:
        case 12 /* Elements.MG */:
        case 20 /* Elements.CA */:
        case 38 /* Elements.SR */:
        case 56 /* Elements.BA */:
        case 88 /* Elements.RA */:
            if (assignCharge) {
                charge = 2 - valence;
            }
            break;
        default:
            console.warn('Requested charge, protonation for an unhandled element', a.element);
    }
    return [charge, implicitHCount, implicitHCount + hydrogenCount, geom];
}
function ValenceModel(data, params) {
    const structure = data.structure;
    const n = structure.atomCount;
    const charge = new Int8Array(n);
    const implicitH = new Int8Array(n);
    const totalH = new Int8Array(n);
    const idealGeometry = new Int8Array(n);
    structure.eachAtom(a => {
        const i = a.index;
        const [chg, implH, totH, geom] = calculateHydrogensCharge(a, params);
        charge[i] = chg;
        implicitH[i] = implH;
        totalH[i] = totH;
        idealGeometry[i] = geom;
    });
    return { charge, implicitH, totalH, idealGeometry };
}

function createData(structure) {
    return {
        structure,
        '@spatialLookup': undefined,
        '@valenceModel': undefined
    };
}
function valenceModel(data) {
    if (data['@valenceModel'])
        return data['@valenceModel'];
    const valenceModel = ValenceModel(data, { assignCharge: 'auto', assignH: 'auto' });
    data['@valenceModel'] = valenceModel;
    return valenceModel;
}

/**
 * @file Functional Groups
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/**
 * Sulfur in a sulfonic acid or sulfonate group
 */
function isSulfonicAcid(a) {
    return (a.number === 16 &&
        a.bondToElementCount(8 /* Elements.O */) === 3);
}
/**
 * Sulfur in a sulfate group
 */
function isSulfate(a) {
    return (a.number === 16 &&
        a.bondToElementCount(8 /* Elements.O */) === 4);
}
/**
 * Phosphor in a phosphate group
 */
function isPhosphate(a) {
    return (a.number === 15 &&
        a.bondToElementCount(8 /* Elements.O */) === a.bondCount);
}
/**
 * Carbon in a carboxylate group
 */
function isCarboxylate(a) {
    let terminalOxygenCount = 0;
    if (a.number === 6 &&
        a.bondToElementCount(8 /* Elements.O */) === 2 &&
        a.bondToElementCount(6 /* Elements.C */) === 1) {
        a.eachBondedAtom(ba => {
            if (ba.number === 8 && ba.bondCount - ba.bondToElementCount(1 /* Elements.H */) === 1) {
                ++terminalOxygenCount;
            }
        });
    }
    return terminalOxygenCount === 2;
}
/**
 * Carbon in a guanidine group
 */
function isGuanidine(a) {
    let terminalNitrogenCount = 0;
    if (a.number === 6 &&
        a.bondCount === 3 &&
        a.bondToElementCount(7 /* Elements.N */) === 3) {
        a.eachBondedAtom(ba => {
            if (ba.bondCount - ba.bondToElementCount(1 /* Elements.H */) === 1) {
                ++terminalNitrogenCount;
            }
        });
    }
    return terminalNitrogenCount === 2;
}
/**
 * Carbon in a acetamidine group
 */
function isAcetamidine(a) {
    let terminalNitrogenCount = 0;
    if (a.number === 6 &&
        a.bondCount === 3 &&
        a.bondToElementCount(7 /* Elements.N */) === 2 &&
        a.bondToElementCount(6 /* Elements.C */) === 1) {
        a.eachBondedAtom(ba => {
            if (ba.bondCount - ba.bondToElementCount(1 /* Elements.H */) === 1) {
                ++terminalNitrogenCount;
            }
        });
    }
    return terminalNitrogenCount === 2;
}

/**
 * @file Charged
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Fred Ludlow <Fred.Ludlow@astx.com>
 */
const PositvelyCharged = ['ARG', 'HIS', 'LYS'];
const NegativelyCharged = ['GLU', 'ASP'];
function addPositiveCharges(structure, features) {
    const { charge } = valenceModel(structure.data);
    const atomInGroupDict = {};
    structure.eachResidue(r => {
        if (PositvelyCharged.includes(r.resname)) {
            const state = createFeatureState(1 /* FeatureType.PositiveCharge */);
            r.eachAtom(a => {
                if (a.number === 7 /* Elements.N */ && a.isSidechain()) {
                    addAtom(state, a);
                }
            });
            addFeature(features, state);
        }
        else if (!AA3.includes(r.resname) && !r.isNucleic()) {
            r.eachAtom(a => {
                let addGroup = false;
                const state = createFeatureState(1 /* FeatureType.PositiveCharge */);
                if (isGuanidine(a)) {
                    state.group = 8 /* FeatureGroup.Guanidine */;
                    addGroup = true;
                }
                else if (isAcetamidine(a)) {
                    state.group = 9 /* FeatureGroup.Acetamidine */;
                    addGroup = true;
                }
                if (addGroup) {
                    a.eachBondedAtom(a => {
                        if (a.number === 7 /* Elements.N */) {
                            atomInGroupDict[a.index] = true;
                            addAtom(state, a);
                        }
                    });
                    addFeature(features, state);
                }
            });
            r.eachAtom(a => {
                const state = createFeatureState(1 /* FeatureType.PositiveCharge */);
                if (charge[a.index] > 0) {
                    if (!atomInGroupDict[a.index]) {
                        addAtom(state, a);
                        addFeature(features, state);
                    }
                }
            });
        }
    });
}
function addNegativeCharges(structure, features) {
    const { charge } = valenceModel(structure.data);
    const atomInGroupDict = {};
    structure.eachResidue(r => {
        if (NegativelyCharged.includes(r.resname)) {
            const state = createFeatureState(2 /* FeatureType.NegativeCharge */);
            r.eachAtom(a => {
                if (a.number === 8 /* Elements.O */ && a.isSidechain()) {
                    addAtom(state, a);
                }
            });
            addFeature(features, state);
        }
        else if (Bases.includes(r.resname)) {
            const state = createFeatureState(2 /* FeatureType.NegativeCharge */);
            r.eachAtom(a => {
                if (isPhosphate(a)) {
                    state.group = 6 /* FeatureGroup.Phosphate */;
                    a.eachBondedAtom(a => {
                        if (a.number === 8 /* Elements.O */)
                            addAtom(state, a);
                    });
                    addFeature(features, state);
                }
            });
        }
        else if (!AA3.includes(r.resname) && !Bases.includes(r.resname)) {
            r.eachAtom(a => {
                let addGroup = false;
                const state = createFeatureState(2 /* FeatureType.NegativeCharge */);
                if (isSulfonicAcid(a)) {
                    state.group = 4 /* FeatureGroup.SulfonicAcid */;
                    addGroup = true;
                }
                else if (isPhosphate(a)) {
                    state.group = 6 /* FeatureGroup.Phosphate */;
                    addGroup = true;
                }
                else if (isSulfate(a)) {
                    state.group = 5 /* FeatureGroup.Sulfate */;
                    addGroup = true;
                }
                else if (isCarboxylate(a)) {
                    state.group = 10 /* FeatureGroup.Carboxylate */;
                    addGroup = true;
                }
                if (addGroup) {
                    a.eachBondedAtom(a => {
                        if (a.number === 8 /* Elements.O */) {
                            atomInGroupDict[a.index] = true;
                            addAtom(state, a);
                        }
                    });
                    addFeature(features, state);
                }
            });
            r.eachAtom(a => {
                const state = createFeatureState(2 /* FeatureType.NegativeCharge */);
                if (charge[a.index] < 0) {
                    if (!atomInGroupDict[a.index]) {
                        addAtom(state, a);
                        addFeature(features, state);
                    }
                }
            });
        }
    });
}
function addAromaticRings(structure, features) {
    const a = structure.getAtomProxy();
    structure.eachResidue(r => {
        const rings = r.getAromaticRings();
        if (rings) {
            const offset = r.atomOffset;
            rings.forEach(ring => {
                const state = createFeatureState(3 /* FeatureType.AromaticRing */);
                ring.forEach(i => {
                    a.index = i + offset;
                    addAtom(state, a);
                });
                addFeature(features, state);
            });
        }
    });
}
function isIonicInteraction(ti, tj) {
    return ((ti === 2 /* FeatureType.NegativeCharge */ && tj === 1 /* FeatureType.PositiveCharge */) ||
        (ti === 1 /* FeatureType.PositiveCharge */ && tj === 2 /* FeatureType.NegativeCharge */));
}
function isPiStacking(ti, tj) {
    return ti === 3 /* FeatureType.AromaticRing */ && tj === 3 /* FeatureType.AromaticRing */;
}
function isCationPi(ti, tj) {
    return ((ti === 3 /* FeatureType.AromaticRing */ && tj === 1 /* FeatureType.PositiveCharge */) ||
        (ti === 1 /* FeatureType.PositiveCharge */ && tj === 3 /* FeatureType.AromaticRing */));
}
function addChargedContacts(structure, contacts, params = {}) {
    const maxIonicDist = defaults(params.maxIonicDist, ContactDefaultParams.maxIonicDist);
    const maxPiStackingDist = defaults(params.maxPiStackingDist, ContactDefaultParams.maxPiStackingDist);
    const maxPiStackingOffset = defaults(params.maxPiStackingOffset, ContactDefaultParams.maxPiStackingOffset);
    const maxPiStackingAngle = defaults(params.maxPiStackingAngle, ContactDefaultParams.maxPiStackingAngle);
    const maxCationPiDist = defaults(params.maxCationPiDist, ContactDefaultParams.maxCationPiDist);
    const maxCationPiOffset = defaults(params.maxCationPiOffset, ContactDefaultParams.maxCationPiOffset);
    const masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
    const maxDistance = Math.max(maxIonicDist + 2, maxPiStackingDist, maxCationPiDist);
    // const maxSaltBridgeDistSq = maxSaltBridgeDist * maxSaltBridgeDist
    const maxPiStackingDistSq = maxPiStackingDist * maxPiStackingDist;
    const maxCationPiDistSq = maxCationPiDist * maxCationPiDist;
    const { features, spatialHash, contactStore, featureSet } = contacts;
    const { types, centers, atomSets } = features;
    const { x, y, z } = centers;
    const n = types.length;
    const ax = structure.atomStore.x;
    const ay = structure.atomStore.y;
    const az = structure.atomStore.z;
    const ap1 = structure.getAtomProxy();
    const ap2 = structure.getAtomProxy();
    const areAtomSetsWithinDist = function (atomSet1, atomSet2, maxDist) {
        const sn = atomSet1.length;
        const sm = atomSet2.length;
        for (let si = 0; si < sn; ++si) {
            ap1.index = atomSet1[si];
            for (let sj = 0; sj < sm; ++sj) {
                ap2.index = atomSet2[sj];
                if (ap1.distanceTo(ap2) <= maxDist) {
                    return true;
                }
            }
        }
        return false;
    };
    const v1 = new Vector3();
    const v2 = new Vector3();
    const v3 = new Vector3();
    const d1 = new Vector3();
    const d2 = new Vector3();
    const n1 = new Vector3();
    const n2 = new Vector3();
    const getNormal = function (atoms, normal) {
        v1.set(ax[atoms[0]], ay[atoms[0]], az[atoms[0]]);
        v2.set(ax[atoms[1]], ay[atoms[1]], az[atoms[1]]);
        v3.set(ax[atoms[2]], ay[atoms[2]], az[atoms[2]]);
        d1.subVectors(v1, v2);
        d2.subVectors(v1, v3);
        normal.crossVectors(d1, d2);
    };
    const getOffset = function (i, j, normal) {
        v1.set(x[i], y[i], z[i]);
        v2.set(x[j], y[j], z[j]);
        return v1.sub(v2).projectOnPlane(normal).add(v2).distanceTo(v2);
    };
    const add = function (i, j, ct) {
        featureSet.setBits(i, j);
        contactStore.addContact(i, j, ct);
    };
    for (let i = 0; i < n; ++i) {
        spatialHash.eachWithin(x[i], y[i], z[i], maxDistance, (j, dSq) => {
            if (j <= i)
                return;
            ap1.index = atomSets[i][0];
            ap2.index = atomSets[j][0];
            if (invalidAtomContact(ap1, ap2, masterIdx))
                return;
            const ti = types[i];
            const tj = types[j];
            if (isIonicInteraction(ti, tj)) {
                if (areAtomSetsWithinDist(atomSets[i], atomSets[j], maxIonicDist)) {
                    add(i, j, 1 /* ContactType.IonicInteraction */);
                }
            }
            else if (isPiStacking(ti, tj)) {
                if (dSq <= maxPiStackingDistSq) {
                    getNormal(atomSets[i], n1);
                    getNormal(atomSets[j], n2);
                    const angle = radToDeg(n1.angleTo(n2));
                    const offset = Math.min(getOffset(i, j, n2), getOffset(j, i, n1));
                    if (offset <= maxPiStackingOffset) {
                        if (angle <= maxPiStackingAngle || angle >= 180 - maxPiStackingAngle) {
                            add(i, j, 3 /* ContactType.PiStacking */); // parallel
                        }
                        else if (angle <= maxPiStackingAngle + 90 && angle >= 90 - maxPiStackingAngle) {
                            add(i, j, 3 /* ContactType.PiStacking */); // t-shaped
                        }
                    }
                }
            }
            else if (isCationPi(ti, tj)) {
                if (dSq <= maxCationPiDistSq) {
                    const [l, k] = ti === 3 /* FeatureType.AromaticRing */ ? [i, j] : [j, i];
                    getNormal(atomSets[l], n1);
                    const offset = getOffset(k, l, n1);
                    if (offset <= maxCationPiOffset) {
                        add(l, k, 2 /* ContactType.CationPi */);
                    }
                }
            }
        });
    }
}

/**
 * @file Hydrogen Bonds
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Fred Ludlow <Fred.Ludlow@astx.com>
 */
// Geometric characteristics of hydrogen bonds involving sulfur atoms in proteins
// https://doi.org/10.1002/prot.22327
// Satisfying Hydrogen Bonding Potential in Proteins (HBPLUS)
// https://doi.org/10.1006/jmbi.1994.1334
// http://www.csb.yale.edu/userguides/datamanip/hbplus/hbplus_descrip.html
/**
 * Potential hydrogen donor
 */
function addHydrogenDonors(structure, features) {
    const { totalH } = valenceModel(structure.data);
    structure.eachAtom(a => {
        const state = createFeatureState(4 /* FeatureType.HydrogenDonor */);
        const an = a.number;
        if (isHistidineNitrogen(a)) {
            // include both nitrogen atoms in histidine due to
            // their often ambiguous protonation assignment
            addAtom(state, a);
            addFeature(features, state);
        }
        else if (totalH[a.index] > 0 &&
            (an === 7 /* Elements.N */ || an === 8 /* Elements.O */ || an === 16 /* Elements.S */)) {
            addAtom(state, a);
            addFeature(features, state);
        }
    });
}
/**
 * Weak hydrogen donor.
 */
function addWeakHydrogenDonors(structure, features) {
    const { totalH } = valenceModel(structure.data);
    structure.eachAtom(a => {
        if (a.number === 6 /* Elements.C */ &&
            totalH[a.index] > 0 &&
            (a.bondToElementCount(7 /* Elements.N */) > 0 ||
                a.bondToElementCount(8 /* Elements.O */) > 0 ||
                inAromaticRingWithElectronNegativeElement(a))) {
            const state = createFeatureState(9 /* FeatureType.WeakHydrogenDonor */);
            addAtom(state, a);
            addFeature(features, state);
        }
    });
}
function inAromaticRingWithElectronNegativeElement(a) {
    if (!a.isAromatic())
        return false;
    const ringData = a.residueType.getRings();
    if (!ringData)
        return false;
    let hasElement = false;
    const rings = ringData.rings;
    rings.forEach(ring => {
        if (hasElement)
            return; // already found one
        if (ring.some(idx => (a.index - a.residueAtomOffset) === idx)) { // in ring
            hasElement = ring.some(idx => {
                const atomTypeId = a.residueType.atomTypeIdList[idx];
                const number = a.atomMap.get(atomTypeId).number;
                return number === 7 /* Elements.N */ || number === 8 /* Elements.O */;
            });
        }
    });
    return hasElement;
}
/**
 * Potential hydrogen acceptor
 */
function addHydrogenAcceptors(structure, features) {
    const { charge, implicitH, idealGeometry } = valenceModel(structure.data);
    structure.eachAtom(a => {
        const state = createFeatureState(5 /* FeatureType.HydrogenAcceptor */);
        const an = a.number;
        if (an === 8 /* Elements.O */) {
            // Basically assume all oxygen atoms are acceptors!
            addAtom(state, a);
            addFeature(features, state);
        }
        else if (an === 7 /* Elements.N */) {
            if (isHistidineNitrogen(a)) {
                // include both nitrogen atoms in histidine due to
                // their often ambiguous protonation assignment
                addAtom(state, a);
                addFeature(features, state);
            }
            else if (charge[a.index] < 1) {
                // Neutral nitrogen might be an acceptor
                // It must have at least one lone pair not conjugated
                const totalBonds = a.bondCount + implicitH[a.index];
                const ig = idealGeometry[a.index];
                if ((ig === 4 /* AtomGeometry.Tetrahedral */ && totalBonds < 4) ||
                    (ig === 3 /* AtomGeometry.Trigonal */ && totalBonds < 3) ||
                    (ig === 2 /* AtomGeometry.Linear */ && totalBonds < 2)) {
                    addAtom(state, a);
                    addFeature(features, state);
                }
            }
        }
        else if (an === 16) { // S
            if (a.resname === 'CYS' || a.resname === 'MET' || a.formalCharge === -1) {
                addAtom(state, a);
                addFeature(features, state);
            }
        }
    });
}
/**
 * Atom that is only bound to carbon or hydrogen
 */
// function isHydrocarbon (atom: AtomProxy) {
//   let flag = true
//   atom.eachBondedAtom(ap => {
//     const e = ap.element
//     if (e !== 'C' && e !== 'H') flag = false
//   })
//   return flag
// }
function isHistidineNitrogen(ap) {
    return ap.resname === 'HIS' && ap.number == 7 /* Elements.N */ && ap.isRing();
}
function isBackboneHydrogenBond(ap1, ap2) {
    return ap1.isBackbone() && ap2.isBackbone();
}
function isWaterHydrogenBond(ap1, ap2) {
    return ap1.isWater() && ap2.isWater();
}
function isHydrogenBond(ti, tj) {
    return ((ti === 5 /* FeatureType.HydrogenAcceptor */ && tj === 4 /* FeatureType.HydrogenDonor */) ||
        (ti === 4 /* FeatureType.HydrogenDonor */ && tj === 5 /* FeatureType.HydrogenAcceptor */));
}
function isWeakHydrogenBond(ti, tj) {
    return ((ti === 9 /* FeatureType.WeakHydrogenDonor */ && tj === 5 /* FeatureType.HydrogenAcceptor */) ||
        (ti === 5 /* FeatureType.HydrogenAcceptor */ && tj === 9 /* FeatureType.WeakHydrogenDonor */));
}
function getHydrogenBondType(ap1, ap2) {
    if (isWaterHydrogenBond(ap1, ap2)) {
        return 9 /* ContactType.WaterHydrogenBond */;
    }
    else if (isBackboneHydrogenBond(ap1, ap2)) {
        return 10 /* ContactType.BackboneHydrogenBond */;
    }
    else {
        return 4 /* ContactType.HydrogenBond */;
    }
}
/**
 * All pairs of hydrogen donor and acceptor atoms
 */
function addHydrogenBonds(structure, contacts, params = {}) {
    const maxHbondDist = defaults(params.maxHbondDist, ContactDefaultParams.maxHbondDist);
    const maxHbondSulfurDist = defaults(params.maxHbondSulfurDist, ContactDefaultParams.maxHbondSulfurDist);
    const maxHbondAccAngle = degToRad$1(defaults(params.maxHbondAccAngle, ContactDefaultParams.maxHbondAccAngle));
    const maxHbondDonAngle = degToRad$1(defaults(params.maxHbondDonAngle, ContactDefaultParams.maxHbondDonAngle));
    const maxHbondAccPlaneAngle = degToRad$1(defaults(params.maxHbondAccPlaneAngle, ContactDefaultParams.maxHbondAccPlaneAngle));
    const maxHbondDonPlaneAngle = degToRad$1(defaults(params.maxHbondDonPlaneAngle, ContactDefaultParams.maxHbondDonPlaneAngle));
    const masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
    const maxDist = Math.max(maxHbondDist, maxHbondSulfurDist);
    const maxHbondDistSq = maxHbondDist * maxHbondDist;
    const { features, spatialHash, contactStore, featureSet } = contacts;
    const { types, centers, atomSets } = features;
    const { x, y, z } = centers;
    const n = types.length;
    const { idealGeometry } = valenceModel(structure.data);
    const donor = structure.getAtomProxy();
    const acceptor = structure.getAtomProxy();
    for (let i = 0; i < n; ++i) {
        spatialHash.eachWithin(x[i], y[i], z[i], maxDist, (j, dSq) => {
            if (j <= i)
                return;
            const ti = types[i];
            const tj = types[j];
            const isWeak = isWeakHydrogenBond(ti, tj);
            if (!isWeak && !isHydrogenBond(ti, tj))
                return;
            const [l, k] = tj === 5 /* FeatureType.HydrogenAcceptor */ ? [i, j] : [j, i];
            donor.index = atomSets[l][0];
            acceptor.index = atomSets[k][0];
            if (acceptor.index === donor.index)
                return; // DA to self
            if (invalidAtomContact(donor, acceptor, masterIdx))
                return;
            if (donor.number !== 16 /* Elements.S */ && acceptor.number !== 16 /* Elements.S */ && dSq > maxHbondDistSq)
                return;
            if (donor.connectedTo(acceptor))
                return;
            const donorAngles = calcAngles(donor, acceptor);
            const idealDonorAngle = Angles.get(idealGeometry[donor.index]) || degToRad$1(120);
            if (donorAngles.some(donorAngle => {
                return Math.abs(idealDonorAngle - donorAngle) > maxHbondDonAngle;
            }))
                return;
            if (idealGeometry[donor.index] === 3 /* AtomGeometry.Trigonal */) {
                const outOfPlane = calcPlaneAngle(donor, acceptor);
                if (outOfPlane !== undefined && outOfPlane > maxHbondDonPlaneAngle)
                    return;
            }
            const acceptorAngles = calcAngles(acceptor, donor);
            const idealAcceptorAngle = Angles.get(idealGeometry[acceptor.index]) || degToRad$1(120);
            if (acceptorAngles.some(acceptorAngle => {
                // Do not limit large acceptor angles
                return idealAcceptorAngle - acceptorAngle > maxHbondAccAngle;
            }))
                return;
            if (idealGeometry[acceptor.index] === 3 /* AtomGeometry.Trigonal */) {
                const outOfPlane = calcPlaneAngle(acceptor, donor);
                if (outOfPlane !== undefined && outOfPlane > maxHbondAccPlaneAngle)
                    return;
            }
            featureSet.setBits(l, k);
            const bondType = isWeak ? 8 /* ContactType.WeakHydrogenBond */ : getHydrogenBondType(donor, acceptor);
            contactStore.addContact(l, k, bondType);
        });
    }
}

/**
 * @file Metal Binding
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
const IonicTypeMetals = [
    3 /* Elements.LI */, 11 /* Elements.NA */, 19 /* Elements.K */, 37 /* Elements.RB */, 55 /* Elements.CS */,
    12 /* Elements.MG */, 20 /* Elements.CA */, 38 /* Elements.SR */, 56 /* Elements.BA */, 13 /* Elements.AL */,
    31 /* Elements.GA */, 49 /* Elements.IN */, 81 /* Elements.TL */, 21 /* Elements.SC */, 50 /* Elements.SN */,
    82 /* Elements.PB */, 83 /* Elements.BI */, 51 /* Elements.SB */, 80 /* Elements.HG */
];
/**
 * Metal binding partners (dative bond or ionic-type interaction)
 */
function addMetalBinding(structure, features) {
    structure.eachAtom(a => {
        let dative = false;
        let ionic = false;
        const isStandardAminoacid = AA3.includes(a.resname);
        const isStandardBase = Bases.includes(a.resname);
        if (!isStandardAminoacid && !isStandardBase) {
            if (a.isHalogen() || a.number === 8 /* Elements.O */ || a.number === 16 /* Elements.S */) {
                dative = true;
                ionic = true;
            }
            else if (a.number === 7 /* Elements.N */) {
                dative = true;
            }
        }
        else if (isStandardAminoacid) {
            // main chain oxygen atom or oxygen, nitrogen and sulfur from specific amino acids
            if (a.number === 8 /* Elements.O */) {
                if (['ASP', 'GLU', 'SER', 'THR', 'TYR', 'ASN', 'GLN'].includes(a.resname) && a.isSidechain()) {
                    dative = true;
                    ionic = true;
                }
                else if (a.isBackbone()) {
                    dative = true;
                    ionic = true;
                }
            }
            else if (a.number === 16 /* Elements.S */ && 'CYS' === a.resname) {
                dative = true;
                ionic = true;
            }
            else if (a.number === 7 /* Elements.N */) {
                if (a.resname === 'HIS' && a.isSidechain()) {
                    dative = true;
                }
            }
        }
        else if (isStandardBase) {
            // http://pubs.acs.org/doi/pdf/10.1021/acs.accounts.6b00253
            // http://onlinelibrary.wiley.com/doi/10.1002/anie.200900399/full
            if (a.number === 8 /* Elements.O */ && a.isBackbone()) {
                dative = true;
                ionic = true;
            }
            else if (['N3', 'N4', 'N7'].includes(a.atomname)) {
                dative = true;
            }
            else if (['O2', 'O4', 'O6'].includes(a.atomname)) {
                dative = true;
                ionic = true;
            }
        }
        if (dative) {
            const state = createFeatureState(11 /* FeatureType.DativeBondPartner */);
            addAtom(state, a);
            addFeature(features, state);
        }
        if (ionic) {
            const state = createFeatureState(10 /* FeatureType.IonicTypePartner */);
            addAtom(state, a);
            addFeature(features, state);
        }
    });
}
/**
 * Metal Pi complexation partner
 */
// export function addMetalPiPartners (structure: Structure, features: Features) {
//   const { charge } = valenceModel(structure.data)
//   structure.eachAtom(a => {
//     const state = createFeatureState(FeatureType.MetalPiPartner)
//     const resname = a.resname
//     const element = a.element
//     const atomname = a.atomname
//     if (!a.isPolymer()) {
//       // water oxygen, as well as oxygen from carboxylate, phosphoryl, phenolate, alcohol;
//       // nitrogen from imidazole; sulfur from thiolate
//       if (element === 'O') {
//         // Water oxygen
//         if (a.bondCount === 0 || a.isWater()) {
//           addAtom(state, a)
//           addFeature(features, state)
//           return
//         }
//         // Oxygen in alcohol (R-[O]-H)
//         if (a.bondCount === 2 && charge[ a.index ] || a.hasBondToElement('H')) {
//           addAtom(state, a)
//           addFeature(features, state)
//           return
//         }
//         // Phenolate oxygen
//         if (hasAromaticNeighbour(a) && !a.aromatic) {
//           addAtom(state, a)
//           addFeature(features, state)
//           return
//         }
//         // Carboxylic acid oxygen
//         if (a.bondToElementCount('C') === 1) {
//           let flag = false
//           a.eachBondedAtom(ba => {
//             if (ba.element === 'C' && ba.bondToElementCount('O') === 2 && ba.bondToElementCount('C') === 1) {
//               flag = true
//             }
//           })
//           if (flag) {
//             addAtom(state, a)
//             addFeature(features, state)
//             return
//           }
//         }
//         // Phosphoryl oxygen
//         if (a.bondToElementCount('P') === 1) {
//           let flag = false
//           a.eachBondedAtom(ba => {
//             if (ba.element === 'P' && ba.bondToElementCount('O') >= 3) {
//               flag = true
//             }
//           })
//           if (flag) {
//             addAtom(state, a)
//             addFeature(features, state)
//             return
//           }
//         }
//       } else if (element === 'N') {
//         // Imidazole/pyrrole or similar
//         if (a.bondToElementCount('C') === 2) {
//           addAtom(state, a)
//           addFeature(features, state)
//           return
//         }
//       } else if (element === 'S') {
//         // Thiolate
//         if (hasAromaticNeighbour(a) && !a.aromatic) {
//           addAtom(state, a)
//           addFeature(features, state)
//           return
//         }
//         // Sulfur in Iron sulfur cluster
//         const ironCount = a.bondToElementCount('FE')
//         if (ironCount > 0 && ironCount === a.bondCount) {
//           addAtom(state, a)
//           addFeature(features, state)
//           return
//         }
//       }
//     }
//   })
// }
function addMetals(structure, features) {
    structure.eachAtom(a => {
        if (a.isTransitionMetal() || a.number === 30 /* Elements.ZN */ || a.number === 48 /* Elements.CD */) {
            const state = createFeatureState(12 /* FeatureType.TransitionMetal */);
            addAtom(state, a);
            addFeature(features, state);
        }
        else if (IonicTypeMetals.includes(a.number)) {
            const state = createFeatureState(13 /* FeatureType.IonicTypeMetal */);
            addAtom(state, a);
            addFeature(features, state);
        }
    });
}
function isMetalComplex(ti, tj) {
    if (ti === 12 /* FeatureType.TransitionMetal */) {
        return (tj === 11 /* FeatureType.DativeBondPartner */ ||
            tj === 12 /* FeatureType.TransitionMetal */);
    }
    else if (ti === 13 /* FeatureType.IonicTypeMetal */) {
        return (tj === 10 /* FeatureType.IonicTypePartner */);
    }
}
/**
 * Metal complexes of metals and appropriate groups in protein and ligand, including water
 */
function addMetalComplexation(structure, contacts, params = {}) {
    const maxMetalDist = defaults(params.maxMetalDist, ContactDefaultParams.maxMetalDist);
    const masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
    const { features, spatialHash, contactStore, featureSet } = contacts;
    const { types, centers, atomSets } = features;
    const { x, y, z } = centers;
    const n = types.length;
    const ap1 = structure.getAtomProxy();
    const ap2 = structure.getAtomProxy();
    for (let i = 0; i < n; ++i) {
        spatialHash.eachWithin(x[i], y[i], z[i], maxMetalDist, (j, dSq) => {
            if (j <= i)
                return;
            ap1.index = atomSets[i][0];
            ap2.index = atomSets[j][0];
            if (invalidAtomContact(ap1, ap2, masterIdx))
                return;
            const m1 = ap1.isMetal();
            const m2 = ap2.isMetal();
            if (!m1 && !m2)
                return;
            const [ti, tj] = m1 ? [types[i], types[j]] : [types[j], types[i]];
            if (isMetalComplex(ti, tj)) {
                featureSet.setBits(i, j);
                contactStore.addContact(i, j, 7 /* ContactType.MetalCoordination */);
            }
        });
    }
}

/**
 * @file Hydrophobic
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/**
 * Hydrophobic carbon (only bonded to carbon or hydrogen); fluorine
 */
function addHydrophobic(structure, features) {
    structure.eachAtom(a => {
        const state = createFeatureState(8 /* FeatureType.Hydrophobic */);
        let flag = false;
        if (a.number === 6 /* Elements.C */) {
            flag = true;
            a.eachBondedAtom(ap => {
                const an = ap.number;
                if (an !== 6 /* Elements.C */ && an !== 1 /* Elements.H */)
                    flag = false;
            });
        }
        else if (a.number === 9 /* Elements.F */) {
            flag = true;
        }
        if (flag) {
            addAtom(state, a);
            addFeature(features, state);
        }
    });
}
function isHydrophobicContact(ti, tj) {
    return ti === 8 /* FeatureType.Hydrophobic */ && tj === 8 /* FeatureType.Hydrophobic */;
}
/**
 * All hydrophobic contacts
 */
function addHydrophobicContacts(structure, contacts, params = {}) {
    const maxHydrophobicDist = defaults(params.maxHydrophobicDist, ContactDefaultParams.maxHydrophobicDist);
    const masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
    const { features, spatialHash, contactStore, featureSet } = contacts;
    const { types, centers, atomSets } = features;
    const { x, y, z } = centers;
    const n = types.length;
    const ap1 = structure.getAtomProxy();
    const ap2 = structure.getAtomProxy();
    for (let i = 0; i < n; ++i) {
        spatialHash.eachWithin(x[i], y[i], z[i], maxHydrophobicDist, (j, dSq) => {
            if (j <= i)
                return;
            ap1.index = atomSets[i][0];
            ap2.index = atomSets[j][0];
            if (invalidAtomContact(ap1, ap2, masterIdx))
                return;
            if (ap1.number === 9 /* Elements.F */ && ap2.number === 9 /* Elements.F */)
                return;
            if (ap1.connectedTo(ap2))
                return;
            if (isHydrophobicContact(types[i], types[j])) {
                featureSet.setBits(i, j);
                contactStore.addContact(i, j, 6 /* ContactType.Hydrophobic */);
            }
        });
    }
}

/**
 * @file Halogen Bonds
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Fred Ludlow <Fred.Ludlow@astx.com>
 */
const halBondElements = [17, 35, 53, 85];
/**
 * Halogen bond donors (X-C, with X one of Cl, Br, I or At) not F!
 */
function addHalogenDonors(structure, features) {
    structure.eachAtom(a => {
        if (halBondElements.includes(a.number) && a.bondToElementCount(6 /* Elements.C */) === 1) {
            const state = createFeatureState(6 /* FeatureType.HalogenDonor */);
            addAtom(state, a);
            addFeature(features, state);
        }
    });
}
const X = [7 /* Elements.N */, 8 /* Elements.O */, 16 /* Elements.S */];
const Y = [6 /* Elements.C */, 7 /* Elements.N */, 15 /* Elements.P */, 16 /* Elements.S */];
/**
 * Halogen bond acceptors (Y-{O|N|S}, with Y=C,P,N,S)
 */
function addHalogenAcceptors(structure, features) {
    structure.eachAtom(a => {
        if (X.includes(a.number)) {
            let flag = false;
            a.eachBondedAtom(ba => {
                if (Y.includes(ba.number)) {
                    flag = true;
                }
            });
            if (flag) {
                const state = createFeatureState(7 /* FeatureType.HalogenAcceptor */);
                addAtom(state, a);
                addFeature(features, state);
            }
        }
    });
}
function isHalogenBond(ti, tj) {
    return ((ti === 7 /* FeatureType.HalogenAcceptor */ && tj === 6 /* FeatureType.HalogenDonor */) ||
        (ti === 6 /* FeatureType.HalogenDonor */ && tj === 7 /* FeatureType.HalogenAcceptor */));
}
// http://www.pnas.org/content/101/48/16789.full
const OptimalHalogenAngle = degToRad$1(180); // adjusted from 165 to account for spherical statistics
const OptimalAcceptorAngle = degToRad$1(120);
/**
 * All pairs of halogen donor and acceptor atoms
 */
function addHalogenBonds(structure, contacts, params = {}) {
    const maxHalogenBondDist = defaults(params.maxHalogenBondDist, ContactDefaultParams.maxHalogenBondDist);
    const maxHalogenBondAngle = degToRad$1(defaults(params.maxHalogenBondAngle, ContactDefaultParams.maxHalogenBondAngle));
    const masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
    const { features, spatialHash, contactStore, featureSet } = contacts;
    const { types, centers, atomSets } = features;
    const { x, y, z } = centers;
    const n = types.length;
    const ap1 = structure.getAtomProxy();
    const ap2 = structure.getAtomProxy();
    for (let i = 0; i < n; ++i) {
        spatialHash.eachWithin(x[i], y[i], z[i], maxHalogenBondDist, (j, dSq) => {
            if (j <= i)
                return;
            ap1.index = atomSets[i][0];
            ap2.index = atomSets[j][0];
            if (invalidAtomContact(ap1, ap2, masterIdx))
                return;
            if (!isHalogenBond(types[i], types[j]))
                return;
            const [halogen, acceptor] = types[i] === 6 /* FeatureType.HalogenDonor */ ? [ap1, ap2] : [ap2, ap1];
            const halogenAngles = calcAngles(halogen, acceptor);
            // Singly bonded halogen only (not bromide ion for example)
            if (halogenAngles.length !== 1)
                return;
            if (OptimalHalogenAngle - halogenAngles[0] > maxHalogenBondAngle)
                return;
            const acceptorAngles = calcAngles(acceptor, halogen);
            // Angle must be defined. Excludes water as acceptor. Debatable
            if (acceptorAngles.length === 0)
                return;
            if (acceptorAngles.some(acceptorAngle => {
                return (OptimalAcceptorAngle - acceptorAngle > maxHalogenBondAngle);
            }))
                return;
            featureSet.setBits(i, j);
            contactStore.addContact(i, j, 5 /* ContactType.HalogenBond */);
        });
    }
}

/**
 * @file Refine Contacts
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// also allows intra-residue contacts
function invalidAtomContact$1(ap1, ap2, masterIdx) {
    return !isMasterContact(ap1, ap2, masterIdx) && (ap1.modelIndex !== ap2.modelIndex ||
        (ap1.altloc && ap2.altloc && ap1.altloc !== ap2.altloc));
}
function refineLineOfSight(structure, contacts, params = {}) {
    if (Debug)
        Log.time('refineLineOfSight');
    const lineOfSightDistFactor = defaults(params.lineOfSightDistFactor, ContactDefaultParams.lineOfSightDistFactor);
    const masterIdx = defaults(params.masterModelIndex, ContactDefaultParams.masterModelIndex);
    const spatialHash = structure.spatialHash;
    const { contactSet, contactStore, features } = contacts;
    const { index1, index2 } = contactStore;
    const { centers, atomSets } = features;
    const { x, y, z } = centers;
    const ac1 = structure.getAtomProxy();
    const ac2 = structure.getAtomProxy();
    const aw = structure.getAtomProxy();
    const c1 = new Vector3();
    const c2 = new Vector3();
    const lineOfSightDist = 3 * lineOfSightDistFactor;
    const lineOfSightDistFactorSq = lineOfSightDistFactor * lineOfSightDistFactor;
    contactSet.forEach(i => {
        c1.set(x[index1[i]], y[index1[i]], z[index1[i]]);
        c2.set(x[index2[i]], y[index2[i]], z[index2[i]]);
        const cx = (c1.x + c2.x) / 2;
        const cy = (c1.y + c2.y) / 2;
        const cz = (c1.z + c2.z) / 2;
        const as1 = atomSets[index1[i]];
        const as2 = atomSets[index2[i]];
        ac1.index = as1[0];
        ac2.index = as2[0];
        spatialHash.eachWithin(cx, cy, cz, lineOfSightDist, (j, dSq) => {
            aw.index = j;
            if (aw.number !== 1 /* Elements.H */ &&
                (aw.vdw * aw.vdw * lineOfSightDistFactorSq) > dSq &&
                !invalidAtomContact$1(ac1, aw, masterIdx) &&
                !invalidAtomContact$1(ac2, aw, masterIdx) &&
                !as1.includes(j) &&
                !as2.includes(j) &&
                // to ignore atoms in the center of functional groups
                c1.distanceToSquared(aw) > 1 &&
                c2.distanceToSquared(aw) > 1) {
                contactSet.clear(i);
                if (Debug)
                    Log.log('removing', ac1.qualifiedName(), ac2.qualifiedName(), 'because', aw.qualifiedName());
            }
        });
    });
    if (Debug)
        Log.timeEnd('refineLineOfSight');
}
/**
 * For atoms interacting with several atoms in the same residue
 * only the one with the closest distance is kept.
 */
function refineHydrophobicContacts(structure, contacts) {
    const { contactSet, contactStore, features } = contacts;
    const { type, index1, index2 } = contactStore;
    const { atomSets } = features;
    const ap1 = structure.getAtomProxy();
    const ap2 = structure.getAtomProxy();
    const residueContactDict = {};
    /* keep only closest contact between residues */
    const handleResidueContact = function (dist, i, key) {
        const [minDist, minIndex] = residueContactDict[key] || [Infinity, -1];
        if (dist < minDist) {
            if (minIndex !== -1)
                contactSet.clear(minIndex);
            residueContactDict[key] = [dist, i];
        }
        else {
            contactSet.clear(i);
        }
    };
    contactSet.forEach(i => {
        if (type[i] !== 6 /* ContactType.Hydrophobic */)
            return;
        ap1.index = atomSets[index1[i]][0];
        ap2.index = atomSets[index2[i]][0];
        const dist = ap1.distanceTo(ap2);
        handleResidueContact(dist, i, `${ap1.index}|${ap2.residueIndex}`);
        handleResidueContact(dist, i, `${ap2.index}|${ap1.residueIndex}`);
    });
}
function isHydrogenBondType(type) {
    return (type === 4 /* ContactType.HydrogenBond */ ||
        type === 9 /* ContactType.WaterHydrogenBond */ ||
        type === 10 /* ContactType.BackboneHydrogenBond */);
}
/**
 * Remove hydrogen bonds between groups that also form
 * a salt bridge between each other
 */
function refineSaltBridges(structure, contacts) {
    const { contactSet, contactStore, features } = contacts;
    const { type, index1, index2 } = contactStore;
    const { atomSets } = features;
    const ionicInteractionDict = {};
    const add = function (idx, i) {
        if (!ionicInteractionDict[idx])
            ionicInteractionDict[idx] = [];
        ionicInteractionDict[idx].push(i);
    };
    contactSet.forEach(i => {
        if (type[i] !== 1 /* ContactType.IonicInteraction */)
            return;
        atomSets[index1[i]].forEach(idx => add(idx, i));
        atomSets[index2[i]].forEach(idx => add(idx, i));
    });
    contactSet.forEach(i => {
        if (!isHydrogenBondType(type[i]))
            return;
        const iil1 = ionicInteractionDict[atomSets[index1[i]][0]];
        const iil2 = ionicInteractionDict[atomSets[index2[i]][0]];
        if (!iil1 || !iil2)
            return;
        const n = iil1.length;
        for (let j = 0; j < n; ++j) {
            if (iil2.includes(iil1[j])) {
                contactSet.clear(i);
                return;
            }
        }
    });
}
/**
 * Remove hydrophobic and cation-pi interactions between groups that also form
 * a pi-stacking interaction between each other
 */
function refinePiStacking(structure, contacts) {
    const { contactSet, contactStore, features } = contacts;
    const { type, index1, index2 } = contactStore;
    const { atomSets } = features;
    const piStackingDict = {};
    const add = function (idx, i) {
        if (!piStackingDict[idx])
            piStackingDict[idx] = [];
        piStackingDict[idx].push(i);
    };
    contactSet.forEach(i => {
        if (type[i] !== 3 /* ContactType.PiStacking */)
            return;
        atomSets[index1[i]].forEach(idx => add(idx, i));
        atomSets[index2[i]].forEach(idx => add(idx, i));
    });
    contactSet.forEach(i => {
        if (type[i] !== 6 /* ContactType.Hydrophobic */ &&
            type[i] !== 2 /* ContactType.CationPi */)
            return;
        const pil1 = piStackingDict[atomSets[index1[i]][0]];
        const pil2 = piStackingDict[atomSets[index2[i]][0]];
        if (!pil1 || !pil2)
            return;
        const n = pil1.length;
        for (let j = 0; j < n; ++j) {
            if (pil2.includes(pil1[j])) {
                contactSet.clear(i);
                return;
            }
        }
    });
}
/**
 * Remove ionic interactions between groups that also form
 * a metal coordination between each other
 */
function refineMetalCoordination(structure, contacts) {
    const { contactSet, contactStore, features } = contacts;
    const { type, index1, index2 } = contactStore;
    const { atomSets } = features;
    const ionicInteractionDict = {};
    const add = function (idx, i) {
        if (!ionicInteractionDict[idx])
            ionicInteractionDict[idx] = [];
        ionicInteractionDict[idx].push(i);
    };
    contactSet.forEach(i => {
        if (type[i] !== 1 /* ContactType.IonicInteraction */)
            return;
        atomSets[index1[i]].forEach(idx => add(idx, i));
        atomSets[index2[i]].forEach(idx => add(idx, i));
    });
    contactSet.forEach(i => {
        if (type[i] !== 7 /* ContactType.MetalCoordination */)
            return;
        const iil1 = ionicInteractionDict[atomSets[index1[i]][0]];
        const iil2 = ionicInteractionDict[atomSets[index2[i]][0]];
        if (!iil1 || !iil2)
            return;
        const n = iil1.length;
        for (let j = 0; j < n; ++j) {
            if (iil2.includes(iil1[j])) {
                contactSet.clear(iil1[j]);
                return;
            }
        }
    });
}
// TODO: refactor refineSaltBridges, refinePiStacking and refineMetalCoordination to be DRY

/**
 * @file Contact
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
const ContactDefaultParams = {
    maxHydrophobicDist: 4.0,
    maxHbondDist: 3.5,
    maxHbondSulfurDist: 4.1,
    maxHbondAccAngle: 45,
    maxHbondDonAngle: 45,
    maxHbondAccPlaneAngle: 90,
    maxHbondDonPlaneAngle: 30,
    maxPiStackingDist: 5.5,
    maxPiStackingOffset: 2.0,
    maxPiStackingAngle: 30,
    maxCationPiDist: 6.0,
    maxCationPiOffset: 2.0,
    maxIonicDist: 5.0,
    maxHalogenBondDist: 4.0,
    maxHalogenBondAngle: 30,
    maxMetalDist: 3.0,
    refineSaltBridges: true,
    masterModelIndex: -1,
    lineOfSightDistFactor: 1.0
};
function isMasterContact(ap1, ap2, masterIdx) {
    return ((ap1.modelIndex === masterIdx && ap2.modelIndex !== masterIdx) ||
        (ap2.modelIndex === masterIdx && ap1.modelIndex !== masterIdx));
}
function invalidAtomContact(ap1, ap2, masterIdx) {
    return !isMasterContact(ap1, ap2, masterIdx) && (ap1.modelIndex !== ap2.modelIndex ||
        ap1.residueIndex === ap2.residueIndex ||
        (ap1.altloc && ap2.altloc && ap1.altloc !== ap2.altloc));
}
function createContacts(features) {
    const { types, centers } = features;
    const spatialHash = new SpatialHash(centers);
    const contactStore = new ContactStore();
    const featureSet = new BitArray(types.length, false);
    return { features, spatialHash, contactStore, featureSet };
}
function createFrozenContacts(contacts) {
    const { index1, index2, count } = contacts.contactStore;
    const adjacencyList = createAdjacencyList({
        nodeArray1: index1,
        nodeArray2: index2,
        edgeCount: count,
        nodeCount: contacts.featureSet.length
    });
    const contactSet = new BitArray(contacts.contactStore.count, true);
    return Object.assign({ adjacencyList, contactSet }, contacts);
}
function calculateFeatures(structure) {
    const features = createFeatures();
    if (Debug)
        Log.time('calculateFeatures');
    addPositiveCharges(structure, features);
    addNegativeCharges(structure, features);
    addAromaticRings(structure, features);
    addHydrogenAcceptors(structure, features);
    addHydrogenDonors(structure, features);
    addWeakHydrogenDonors(structure, features);
    addMetalBinding(structure, features);
    addMetals(structure, features);
    addHydrophobic(structure, features);
    addHalogenAcceptors(structure, features);
    addHalogenDonors(structure, features);
    if (Debug)
        Log.timeEnd('calculateFeatures');
    return features;
}
function calculateContacts(structure, params = ContactDefaultParams) {
    const features = calculateFeatures(structure);
    const contacts = createContacts(features);
    if (Debug)
        Log.time('calculateContacts');
    addChargedContacts(structure, contacts, params);
    addHydrogenBonds(structure, contacts, params);
    addMetalComplexation(structure, contacts, params);
    addHydrophobicContacts(structure, contacts, params);
    addHalogenBonds(structure, contacts, params);
    const frozenContacts = createFrozenContacts(contacts);
    refineLineOfSight(structure, frozenContacts, params);
    refineHydrophobicContacts(structure, frozenContacts);
    if (params.refineSaltBridges)
        refineSaltBridges(structure, frozenContacts);
    refinePiStacking(structure, frozenContacts);
    refineMetalCoordination(structure, frozenContacts);
    if (Debug)
        Log.timeEnd('calculateContacts');
    return frozenContacts;
}
function contactTypeName(type) {
    switch (type) {
        case 4 /* ContactType.HydrogenBond */:
        case 9 /* ContactType.WaterHydrogenBond */:
        case 10 /* ContactType.BackboneHydrogenBond */:
            return 'hydrogen bond';
        case 6 /* ContactType.Hydrophobic */:
            return 'hydrophobic contact';
        case 5 /* ContactType.HalogenBond */:
            return 'halogen bond';
        case 1 /* ContactType.IonicInteraction */:
            return 'ionic interaction';
        case 7 /* ContactType.MetalCoordination */:
            return 'metal coordination';
        case 2 /* ContactType.CationPi */:
            return 'cation-pi interaction';
        case 3 /* ContactType.PiStacking */:
            return 'pi-pi stacking';
        case 8 /* ContactType.WeakHydrogenBond */:
            return 'weak hydrogen bond';
        default:
            return 'unknown contact';
    }
}
const ContactDataDefaultParams = {
    hydrogenBond: true,
    hydrophobic: true,
    halogenBond: true,
    ionicInteraction: true,
    metalCoordination: true,
    cationPi: true,
    piStacking: true,
    weakHydrogenBond: true,
    waterHydrogenBond: true,
    backboneHydrogenBond: true,
    radius: 1,
    filterSele: ''
};
const tmpColor = new Color();
function contactColor(type) {
    switch (type) {
        case 4 /* ContactType.HydrogenBond */:
        case 9 /* ContactType.WaterHydrogenBond */:
        case 10 /* ContactType.BackboneHydrogenBond */:
            return tmpColor.setHex(0x2B83BA).toArray();
        case 6 /* ContactType.Hydrophobic */:
            return tmpColor.setHex(0x808080).toArray();
        case 5 /* ContactType.HalogenBond */:
            return tmpColor.setHex(0x40FFBF).toArray();
        case 1 /* ContactType.IonicInteraction */:
            return tmpColor.setHex(0xF0C814).toArray();
        case 7 /* ContactType.MetalCoordination */:
            return tmpColor.setHex(0x8C4099).toArray();
        case 2 /* ContactType.CationPi */:
            return tmpColor.setHex(0xFF8000).toArray();
        case 3 /* ContactType.PiStacking */:
            return tmpColor.setHex(0x8CB366).toArray();
        case 8 /* ContactType.WeakHydrogenBond */:
            return tmpColor.setHex(0xC5DDEC).toArray();
        default:
            return tmpColor.setHex(0xCCCCCC).toArray();
    }
}
function getContactData(contacts, structure, params) {
    const p = createParams(params, ContactDataDefaultParams);
    const types = [];
    if (p.hydrogenBond)
        types.push(4 /* ContactType.HydrogenBond */);
    if (p.hydrophobic)
        types.push(6 /* ContactType.Hydrophobic */);
    if (p.halogenBond)
        types.push(5 /* ContactType.HalogenBond */);
    if (p.ionicInteraction)
        types.push(1 /* ContactType.IonicInteraction */);
    if (p.metalCoordination)
        types.push(7 /* ContactType.MetalCoordination */);
    if (p.cationPi)
        types.push(2 /* ContactType.CationPi */);
    if (p.piStacking)
        types.push(3 /* ContactType.PiStacking */);
    if (p.weakHydrogenBond)
        types.push(8 /* ContactType.WeakHydrogenBond */);
    if (p.waterHydrogenBond)
        types.push(9 /* ContactType.WaterHydrogenBond */);
    if (p.backboneHydrogenBond)
        types.push(10 /* ContactType.BackboneHydrogenBond */);
    const { features, contactSet, contactStore } = contacts;
    const { centers, atomSets } = features;
    const { x, y, z } = centers;
    const { index1, index2, type } = contactStore;
    const position1 = [];
    const position2 = [];
    const color = [];
    const radius = [];
    const picking = [];
    let filterSet;
    if (p.filterSele) {
        if (Array.isArray(p.filterSele)) {
            filterSet = p.filterSele.map(sele => {
                return structure.getAtomSet(new Selection(sele));
            });
        }
        else {
            filterSet = structure.getAtomSet(new Selection(p.filterSele));
        }
    }
    contactSet.forEach(i => {
        const ti = type[i];
        if (!types.includes(ti))
            return;
        if (filterSet) {
            const idx1 = atomSets[index1[i]][0];
            const idx2 = atomSets[index2[i]][0];
            if (Array.isArray(filterSet)) {
                if (!(filterSet[0].isSet(idx1) && filterSet[1].isSet(idx2) || (filterSet[1].isSet(idx1) && filterSet[0].isSet(idx2))))
                    return;
            }
            else {
                if (!filterSet.isSet(idx1) && !filterSet.isSet(idx2))
                    return;
            }
        }
        const k = index1[i];
        const l = index2[i];
        position1.push(x[k], y[k], z[k]);
        position2.push(x[l], y[l], z[l]);
        color.push(...contactColor(ti));
        radius.push(p.radius);
        picking.push(i);
    });
    return {
        position1: new Float32Array(position1),
        position2: new Float32Array(position2),
        color: new Float32Array(color),
        color2: new Float32Array(color),
        radius: new Float32Array(radius),
        picking: new ContactPicker(picking, contacts, structure)
    };
}
function getLabelData(contactData, params) {
    const position = calculateCenterArray(contactData.position1, contactData.position2);
    const text = [];
    const direction = calculateDirectionArray(contactData.position1, contactData.position2);
    const n = direction.length / 3;
    for (let i = 0; i < n; i++) {
        const j = 3 * i;
        const d = Math.sqrt(Math.pow(direction[j], 2) + Math.pow(direction[j + 1], 2) + Math.pow(direction[j + 2], 2));
        switch (params.unit) {
            case 'angstrom':
                text[i] = d.toFixed(2) + ' ' + String.fromCharCode(0x212B);
                break;
            case 'nm':
                text[i] = (d / 10).toFixed(2) + ' nm';
                break;
            default:
                text[i] = d.toFixed(2);
                break;
        }
    }
    return {
        position,
        size: uniformArray(position.length / 3, params.size),
        color: contactData.color,
        text
    };
}

/**
 * @file Picker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Picker class
 * @interface
 */
class Picker {
    /**
     * @param  {Array|TypedArray} [array] - mapping
     */
    constructor(array) {
        this.array = array;
    }
    get type() { return ''; }
    get data() { return {}; }
    /**
     * Get the index for the given picking id
     * @param  {Integer} pid - the picking id
     * @return {Integer} the index
     */
    getIndex(pid) {
        return this.array ? this.array[pid] : pid;
    }
    /**
     * Get object data
     * @abstract
     * @param  {Integer} pid - the picking id
     * @return {Object} the object data
     */
    getObject(pid) {
        return {};
    }
    _applyTransformations(vector, instance, component) {
        if (instance) {
            vector.applyMatrix4(instance.matrix);
        }
        if (component) {
            vector.applyMatrix4(component.matrix);
        }
        return vector;
    }
    /**
     * Get object position
     * @abstract
     * @param  {Integer} pid - the picking id
     * @return {Vector3} the object position
     */
    _getPosition(pid) {
        return new Vector3();
    }
    /**
     * Get position for the given picking id
     * @param  {Integer} pid - the picking id
     * @param  {Object} instance - the instance that should be applied
     * @param  {Component} component - the component of the picked object
     * @return {Vector3} the position
     */
    getPosition(pid, instance, component) {
        return this._applyTransformations(this._getPosition(pid), instance, component);
    }
}
/**
 * Shape picker class
 * @interface
 */
class ShapePicker extends Picker {
    /**
     * @param  {Shape} shape - shape object
     */
    constructor(shape) {
        super();
        this.shape = shape;
    }
    get primitive() { return; }
    get data() { return this.shape; }
    get type() { return this.primitive.type; }
    getObject(pid) {
        return this.primitive.objectFromShape(this.shape, this.getIndex(pid));
    }
    _getPosition(pid) {
        return this.primitive.positionFromShape(this.shape, this.getIndex(pid));
    }
}
//
class CylinderPicker extends ShapePicker {
    get primitive() { return CylinderPrimitive; }
}
class ArrowPicker extends ShapePicker {
    get primitive() { return ArrowPrimitive; }
}
class AtomPicker extends Picker {
    constructor(array, structure) {
        super(array);
        this.structure = structure;
    }
    get type() { return 'atom'; }
    get data() { return this.structure; }
    getObject(pid) {
        return this.structure.getAtomProxy(this.getIndex(pid));
    }
    _getPosition(pid) {
        return new Vector3().copy(this.getObject(pid));
    }
}
class AxesPicker extends Picker {
    constructor(axes) {
        super();
        this.axes = axes;
    }
    get type() { return 'axes'; }
    get data() { return this.axes; }
    getObject( /* pid */) {
        return {
            axes: this.axes
        };
    }
    _getPosition( /* pid */) {
        return this.axes.center.clone();
    }
}
class BondPicker extends Picker {
    constructor(array, structure, bondStore) {
        super(array);
        this.structure = structure;
        this.bondStore = bondStore || structure.bondStore;
    }
    get type() { return 'bond'; }
    get data() { return this.structure; }
    getObject(pid) {
        const bp = this.structure.getBondProxy(this.getIndex(pid));
        bp.bondStore = this.bondStore;
        return bp;
    }
    _getPosition(pid) {
        const b = this.getObject(pid);
        return new Vector3()
            .copy(b.atom1)
            .add(b.atom2)
            .multiplyScalar(0.5);
    }
}
class ContactPicker extends Picker {
    constructor(array, contacts, structure) {
        super(array);
        this.contacts = contacts;
        this.structure = structure;
    }
    get type() { return 'contact'; }
    get data() { return this.contacts; }
    getObject(pid) {
        const idx = this.getIndex(pid);
        const { features, contactStore } = this.contacts;
        const { centers, atomSets } = features;
        const { x, y, z } = centers;
        const { index1, index2, type } = contactStore;
        const k = index1[idx];
        const l = index2[idx];
        return {
            center1: new Vector3(x[k], y[k], z[k]),
            center2: new Vector3(x[l], y[l], z[l]),
            atom1: this.structure.getAtomProxy(atomSets[k][0]),
            atom2: this.structure.getAtomProxy(atomSets[l][0]),
            type: contactTypeName(type[idx])
        };
    }
    _getPosition(pid) {
        const { center1, center2 } = this.getObject(pid);
        return new Vector3().addVectors(center1, center2).multiplyScalar(0.5);
    }
}
class ConePicker extends ShapePicker {
    get primitive() { return ConePrimitive; }
}
class ClashPicker extends Picker {
    constructor(array, validation, structure) {
        super(array);
        this.validation = validation;
        this.structure = structure;
    }
    get type() { return 'clash'; }
    get data() { return this.validation; }
    getObject(pid) {
        const val = this.validation;
        const idx = this.getIndex(pid);
        return {
            validation: val,
            index: idx,
            clash: val.clashArray[idx]
        };
    }
    _getAtomProxyFromSele(sele) {
        const selection = new Selection(sele);
        const idx = this.structure.getAtomIndices(selection)[0];
        return this.structure.getAtomProxy(idx);
    }
    _getPosition(pid) {
        const clash = this.getObject(pid).clash;
        const ap1 = this._getAtomProxyFromSele(clash.sele1);
        const ap2 = this._getAtomProxyFromSele(clash.sele2);
        return new Vector3().copy(ap1).add(ap2).multiplyScalar(0.5);
    }
}
class DistancePicker extends BondPicker {
    get type() { return 'distance'; }
}
class EllipsoidPicker extends ShapePicker {
    get primitive() { return EllipsoidPrimitive; }
}
class OctahedronPicker extends ShapePicker {
    get primitive() { return OctahedronPrimitive; }
}
class BoxPicker extends ShapePicker {
    get primitive() { return BoxPrimitive; }
}
class IgnorePicker extends Picker {
    get type() { return 'ignore'; }
}
class MeshPicker extends ShapePicker {
    constructor(shape, mesh) {
        super(shape);
        this.mesh = mesh;
    }
    get type() { return 'mesh'; }
    getObject( /* pid */) {
        const m = this.mesh;
        return {
            shape: this.shape,
            name: m.name,
            serial: m.serial
        };
    }
    _getPosition( /* pid */) {
        if (!this.__position) {
            this.__position = calculateMeanVector3(this.mesh.position);
        }
        return this.__position;
    }
}
class SpherePicker extends ShapePicker {
    get primitive() { return SpherePrimitive; }
}
class SurfacePicker extends Picker {
    constructor(array, surface) {
        super(array);
        this.surface = surface;
    }
    get type() { return 'surface'; }
    get data() { return this.surface; }
    getObject(pid) {
        return {
            surface: this.surface,
            index: this.getIndex(pid)
        };
    }
    _getPosition( /* pid */) {
        return this.surface.center.clone();
    }
}
class TetrahedronPicker extends ShapePicker {
    get primitive() { return TetrahedronPrimitive; }
}
class TorusPicker extends ShapePicker {
    get primitive() { return TorusPrimitive; }
}
class UnitcellPicker extends Picker {
    constructor(unitcell, structure) {
        super();
        this.unitcell = unitcell;
        this.structure = structure;
    }
    get type() { return 'unitcell'; }
    get data() { return this.unitcell; }
    getObject( /* pid */) {
        return {
            unitcell: this.unitcell,
            structure: this.structure
        };
    }
    _getPosition( /* pid */) {
        return this.unitcell.getCenter(this.structure);
    }
}
class VolumePicker extends Picker {
    constructor(array, volume) {
        super(array);
        this.volume = volume;
    }
    get type() { return 'volume'; }
    get data() { return this.volume; }
    getObject(pid) {
        const vol = this.volume;
        const idx = this.getIndex(pid);
        return {
            volume: vol,
            index: idx,
            value: vol.data[idx]
        };
    }
    _getPosition(pid) {
        const dp = this.volume.position;
        const idx = this.getIndex(pid);
        return new Vector3(dp[idx * 3], dp[idx * 3 + 1], dp[idx * 3 + 2]);
    }
}
class SlicePicker extends VolumePicker {
    get type() { return 'slice'; }
}
class PointPicker extends ShapePicker {
    get primitive() { return PointPrimitive; }
}
class WidelinePicker extends ShapePicker {
    get primitive() { return WidelinePrimitive; }
}
PickerRegistry.add('arrow', ArrowPicker);
PickerRegistry.add('box', BoxPicker);
PickerRegistry.add('cone', ConePicker);
PickerRegistry.add('cylinder', CylinderPicker);
PickerRegistry.add('ellipsoid', EllipsoidPicker);
PickerRegistry.add('octahedron', OctahedronPicker);
PickerRegistry.add('sphere', SpherePicker);
PickerRegistry.add('tetrahedron', TetrahedronPicker);
PickerRegistry.add('torus', TorusPicker);
PickerRegistry.add('point', PointPicker);
PickerRegistry.add('wideline', WidelinePicker);

/**
 * @file Marching Cubes
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getEdgeTable() {
    return new Uint32Array([
        0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
        0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
        0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
        0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
        0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
        0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
        0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
        0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
        0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
        0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
        0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
        0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
        0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
        0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
        0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
        0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
        0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
        0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
        0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
        0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
        0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
    ]);
}
function getTriTable() {
    return new Int32Array([
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
        3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
        3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
        3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
        9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1,
        9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
        2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1,
        8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
        9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
        4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1,
        3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1,
        1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1,
        4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1,
        4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
        5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
        2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
        9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
        0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
        2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1,
        10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1,
        5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1,
        5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1,
        9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
        0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
        1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1,
        10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1,
        8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1,
        2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1,
        7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1,
        2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1,
        11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1,
        5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1,
        11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1,
        11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
        1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
        9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
        5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1,
        2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
        5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1,
        6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1,
        3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1,
        6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1,
        5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1,
        1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
        10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1,
        6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1,
        8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1,
        7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1,
        3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
        5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1,
        0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1,
        9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1,
        8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1,
        5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1,
        0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1,
        6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1,
        10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
        10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
        8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1,
        1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1,
        0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1,
        10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1,
        3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1,
        6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1,
        9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1,
        8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1,
        3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
        6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
        0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1,
        10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
        10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1,
        2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1,
        7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1,
        7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1,
        2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1,
        1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1,
        11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
        8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1,
        0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1,
        7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
        10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
        2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
        6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1,
        7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
        2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1,
        1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1,
        10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
        10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1,
        0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1,
        7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1,
        6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
        8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1,
        9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1,
        6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1,
        4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1,
        10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1,
        8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
        0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1,
        1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1,
        8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1,
        10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1,
        4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1,
        10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
        5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
        11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1,
        9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
        6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1,
        7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1,
        3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1,
        7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1,
        3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1,
        6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1,
        9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1,
        1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1,
        4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1,
        7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1,
        6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
        3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1,
        0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1,
        6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1,
        0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1,
        11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1,
        6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1,
        5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1,
        9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1,
        1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1,
        1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1,
        10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1,
        0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1,
        5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1,
        10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1,
        11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1,
        9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1,
        7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1,
        2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
        8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1,
        9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1,
        9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1,
        1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1,
        9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1,
        9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
        5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1,
        0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1,
        10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1,
        2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1,
        0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1,
        0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1,
        9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1,
        5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1,
        3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1,
        5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1,
        8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1,
        0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1,
        9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1,
        1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1,
        3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1,
        4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1,
        9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1,
        11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1,
        11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1,
        2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1,
        9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1,
        3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1,
        1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1,
        4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1,
        3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1,
        0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1,
        9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1,
        1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    ]);
}
function MarchingCubes(field, nx, ny, nz, atomindex) {
    // Based on alteredq / http://alteredqualia.com/
    // port of greggman's ThreeD version of marching cubes to Three.js
    // http://webglsamples.googlecode.com/hg/blob/blob.html
    //
    // Adapted for NGL by Alexander Rose
    // Triangles are constructed between points on cube edges.
    // allowedContours[edge1][edge1] indicates which lines from a given
    // triangle should be shown in line mode.
    // Values are bitmasks:
    // In loop over cubes we keep another bitmask indicating whether our current
    // cell is the first x-value (1),
    // first y-value (2) or first z-value (4) of the current loop.
    // We draw all lines on leading faces but only draw trailing face lines the first
    // time through the loop
    // A value of 8 below means the edge is always drawn (leading face)
    // E.g. the first row, lines between edge0 and other edges in the bottom
    // x-y plane are only drawn for the first value of z, edges in the
    // x-z plane are only drawn for the first value of y. No other lines
    // are drawn as they're redundant
    // The line between edge 1 and 5 is always drawn as it's on the leading edge
    var allowedContours = [
        [0, 4, 4, 4, 2, 0, 0, 0, 2, 2, 0, 0],
        [4, 0, 4, 4, 0, 8, 0, 0, 0, 8, 8, 0],
        [4, 4, 0, 4, 0, 0, 8, 0, 0, 0, 8, 8],
        [4, 4, 4, 0, 0, 0, 0, 1, 1, 0, 0, 1],
        [2, 0, 0, 0, 0, 8, 8, 8, 2, 2, 0, 0],
        [0, 8, 0, 0, 8, 0, 8, 8, 0, 8, 8, 0],
        [0, 0, 8, 0, 8, 8, 0, 8, 0, 0, 8, 8],
        [0, 0, 0, 1, 8, 8, 8, 0, 1, 0, 0, 1],
        [2, 0, 0, 1, 2, 0, 0, 1, 0, 2, 0, 1],
        [2, 8, 0, 0, 2, 8, 0, 0, 2, 0, 8, 0],
        [0, 8, 8, 0, 0, 8, 8, 0, 0, 8, 0, 8],
        [0, 0, 8, 1, 0, 0, 8, 1, 1, 0, 8, 0]
    ];
    var isolevel = 0;
    var noNormals = false;
    var contour = false;
    var wrap = false;
    var isNegativeIso = false;
    var normalFactor = -1;
    var n = nx * ny * nz;
    // deltas
    var yd = nx;
    var zd = nx * ny;
    var normalCache, vertexIndex;
    var count, icount;
    var ilist = new Int32Array(12);
    var positionArray = [];
    var normalArray = [];
    var indexArray = [];
    var atomindexArray = [];
    var edgeTable = getEdgeTable();
    var triTable = getTriTable();
    var mx, my, mz;
    //
    this.triangulate = function (_isolevel, _noNormals, _box, _contour, _wrap) {
        isolevel = _isolevel;
        isNegativeIso = isolevel < 0.0;
        contour = _contour;
        wrap = _wrap;
        // Normals currently disabled in contour mode for performance (unused)
        noNormals = _noNormals || contour;
        if (!noNormals) {
            normalFactor = isolevel > 0 ? -1.0 : 1.0;
            if (!normalCache) {
                normalCache = new Float32Array(n * 3);
            }
        }
        var vIndexLength = n * 3;
        if (!vertexIndex || vertexIndex.length !== vIndexLength) {
            vertexIndex = new Int32Array(vIndexLength);
        }
        count = 0;
        icount = 0;
        if (_box !== undefined) {
            var min = _box[0].map(Math.round);
            var max = _box[1].map(Math.round);
            mx = nx * Math.ceil(Math.abs(min[0]) / nx);
            my = ny * Math.ceil(Math.abs(min[1]) / ny);
            mz = nz * Math.ceil(Math.abs(min[2]) / nz);
            triangulate(min[0], min[1], min[2], max[0], max[1], max[2]);
        }
        else {
            mx = my = mz = 0;
            triangulate();
        }
        positionArray.length = count * 3;
        if (!noNormals)
            normalArray.length = count * 3;
        indexArray.length = icount;
        if (atomindex)
            atomindexArray.length = count;
        return {
            position: new Float32Array(positionArray),
            normal: noNormals ? undefined : new Float32Array(normalArray),
            index: getUintArray(indexArray, positionArray.length / 3),
            atomindex: atomindex ? new Int32Array(atomindexArray) : undefined,
            contour: contour
        };
    };
    // polygonization
    function lerp(a, b, t) { return a + (b - a) * t; }
    function index(x, y, z) {
        x = (x + mx) % nx;
        y = (y + my) % ny;
        z = (z + mz) % nz;
        return ((zd * z) + yd * y) + x;
    }
    function VIntX(q, offset, x, y, z, valp1, valp2) {
        var _q = 3 * q;
        if (vertexIndex[_q] < 0) {
            var mu = (isolevel - valp1) / (valp2 - valp1);
            var nc = normalCache;
            var c = count * 3;
            positionArray[c] = x + mu;
            positionArray[c + 1] = y;
            positionArray[c + 2] = z;
            if (!noNormals) {
                var q3 = q * 3;
                normalArray[c] = normalFactor * lerp(nc[q3], nc[q3 + 3], mu);
                normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q3 + 4], mu);
                normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q3 + 5], mu);
            }
            if (atomindex)
                atomindexArray[count] = atomindex[q + Math.round(mu)];
            vertexIndex[_q] = count;
            ilist[offset] = count;
            count += 1;
        }
        else {
            ilist[offset] = vertexIndex[_q];
        }
    }
    function VIntY(q, offset, x, y, z, valp1, valp2) {
        var _q = 3 * q + 1;
        if (vertexIndex[_q] < 0) {
            var mu = (isolevel - valp1) / (valp2 - valp1);
            var nc = normalCache;
            var c = count * 3;
            positionArray[c] = x;
            positionArray[c + 1] = y + mu;
            positionArray[c + 2] = z;
            if (!noNormals) {
                var q3 = q * 3;
                var q6 = q3 + yd * 3;
                normalArray[c] = normalFactor * lerp(nc[q3], nc[q6], mu);
                normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q6 + 1], mu);
                normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q6 + 2], mu);
            }
            if (atomindex)
                atomindexArray[count] = atomindex[q + Math.round(mu) * yd];
            vertexIndex[_q] = count;
            ilist[offset] = count;
            count += 1;
        }
        else {
            ilist[offset] = vertexIndex[_q];
        }
    }
    function VIntZ(q, offset, x, y, z, valp1, valp2) {
        var _q = 3 * q + 2;
        if (vertexIndex[_q] < 0) {
            var mu = (isolevel - valp1) / (valp2 - valp1);
            var nc = normalCache;
            var c = count * 3;
            positionArray[c] = x;
            positionArray[c + 1] = y;
            positionArray[c + 2] = z + mu;
            if (!noNormals) {
                var q3 = q * 3;
                var q6 = q3 + zd * 3;
                normalArray[c] = normalFactor * lerp(nc[q3], nc[q6], mu);
                normalArray[c + 1] = normalFactor * lerp(nc[q3 + 1], nc[q6 + 1], mu);
                normalArray[c + 2] = normalFactor * lerp(nc[q3 + 2], nc[q6 + 2], mu);
            }
            if (atomindex)
                atomindexArray[count] = atomindex[q + Math.round(mu) * zd];
            vertexIndex[_q] = count;
            ilist[offset] = count;
            count += 1;
        }
        else {
            ilist[offset] = vertexIndex[_q];
        }
    }
    function compNorm(q) {
        var q3 = q * 3;
        if (normalCache[q3] === 0.0) {
            normalCache[q3] = field[(q - 1 + n) % n] - field[(q + 1) % n];
            normalCache[q3 + 1] = field[(q - yd + n) % n] - field[(q + yd) % n];
            normalCache[q3 + 2] = field[(q - zd + n) % n] - field[(q + zd) % n];
        }
    }
    function polygonize(fx, fy, fz, q, edgeFilter) {
        // cache indices
        var q1;
        var qy;
        var qz;
        var q1y;
        var q1z;
        var qyz;
        var q1yz;
        if (wrap) {
            q = index(fx, fy, fz);
            q1 = index(fx + 1, fy, fz);
            qy = index(fx, fy + 1, fz);
            qz = index(fx, fy, fz + 1);
            q1y = index(fx + 1, fy + 1, fz);
            q1z = index(fx + 1, fy, fz + 1);
            qyz = index(fx, fy + 1, fz + 1);
            q1yz = index(fx + 1, fy + 1, fz + 1);
        }
        else {
            q1 = q + 1;
            qy = q + yd;
            qz = q + zd;
            q1y = qy + 1;
            q1z = qz + 1;
            qyz = qy + zd;
            q1yz = qyz + 1;
        }
        var cubeindex = 0;
        var field0 = field[q];
        var field1 = field[q1];
        var field2 = field[qy];
        var field3 = field[q1y];
        var field4 = field[qz];
        var field5 = field[q1z];
        var field6 = field[qyz];
        var field7 = field[q1yz];
        if (field0 < isolevel)
            cubeindex |= 1;
        if (field1 < isolevel)
            cubeindex |= 2;
        if (field2 < isolevel)
            cubeindex |= 8;
        if (field3 < isolevel)
            cubeindex |= 4;
        if (field4 < isolevel)
            cubeindex |= 16;
        if (field5 < isolevel)
            cubeindex |= 32;
        if (field6 < isolevel)
            cubeindex |= 128;
        if (field7 < isolevel)
            cubeindex |= 64;
        // if cube is entirely in/out of the surface - bail, nothing to draw
        var bits = edgeTable[cubeindex];
        if (bits === 0)
            return 0;
        var fx2 = fx + 1;
        var fy2 = fy + 1;
        var fz2 = fz + 1;
        // top of the cube
        if (bits & 1) {
            if (!noNormals) {
                compNorm(q);
                compNorm(q1);
            }
            VIntX(q, 0, fx, fy, fz, field0, field1);
        }
        if (bits & 2) {
            if (!noNormals) {
                compNorm(q1);
                compNorm(q1y);
            }
            VIntY(q1, 1, fx2, fy, fz, field1, field3);
        }
        if (bits & 4) {
            if (!noNormals) {
                compNorm(qy);
                compNorm(q1y);
            }
            VIntX(qy, 2, fx, fy2, fz, field2, field3);
        }
        if (bits & 8) {
            if (!noNormals) {
                compNorm(q);
                compNorm(qy);
            }
            VIntY(q, 3, fx, fy, fz, field0, field2);
        }
        // bottom of the cube
        if (bits & 16) {
            if (!noNormals) {
                compNorm(qz);
                compNorm(q1z);
            }
            VIntX(qz, 4, fx, fy, fz2, field4, field5);
        }
        if (bits & 32) {
            if (!noNormals) {
                compNorm(q1z);
                compNorm(q1yz);
            }
            VIntY(q1z, 5, fx2, fy, fz2, field5, field7);
        }
        if (bits & 64) {
            if (!noNormals) {
                compNorm(qyz);
                compNorm(q1yz);
            }
            VIntX(qyz, 6, fx, fy2, fz2, field6, field7);
        }
        if (bits & 128) {
            if (!noNormals) {
                compNorm(qz);
                compNorm(qyz);
            }
            VIntY(qz, 7, fx, fy, fz2, field4, field6);
        }
        // vertical lines of the cube
        if (bits & 256) {
            if (!noNormals) {
                compNorm(q);
                compNorm(qz);
            }
            VIntZ(q, 8, fx, fy, fz, field0, field4);
        }
        if (bits & 512) {
            if (!noNormals) {
                compNorm(q1);
                compNorm(q1z);
            }
            VIntZ(q1, 9, fx2, fy, fz, field1, field5);
        }
        if (bits & 1024) {
            if (!noNormals) {
                compNorm(q1y);
                compNorm(q1yz);
            }
            VIntZ(q1y, 10, fx2, fy2, fz, field3, field7);
        }
        if (bits & 2048) {
            if (!noNormals) {
                compNorm(qy);
                compNorm(qyz);
            }
            VIntZ(qy, 11, fx, fy2, fz, field2, field6);
        }
        var triIndex = cubeindex << 4; // re-purpose cubeindex into an offset into triTable
        var e1;
        var e2;
        var e3;
        var i = 0;
        // here is where triangles are created
        while (triTable[triIndex + i] !== -1) {
            e1 = triTable[triIndex + i];
            e2 = triTable[triIndex + i + 1];
            e3 = triTable[triIndex + i + 2];
            if (contour) {
                if (allowedContours[e1][e2] & edgeFilter) {
                    indexArray[icount++] = ilist[e1];
                    indexArray[icount++] = ilist[e2];
                }
                if (allowedContours[e2][e3] & edgeFilter) {
                    indexArray[icount++] = ilist[e2];
                    indexArray[icount++] = ilist[e3];
                }
                if (allowedContours[e1][e3] & edgeFilter) {
                    indexArray[icount++] = ilist[e1];
                    indexArray[icount++] = ilist[e3];
                }
            }
            else {
                indexArray[icount++] = ilist[isNegativeIso ? e1 : e2];
                indexArray[icount++] = ilist[isNegativeIso ? e2 : e1];
                indexArray[icount++] = ilist[e3];
            }
            i += 3;
        }
    }
    function triangulate(xBeg, yBeg, zBeg, xEnd, yEnd, zEnd) {
        let q;
        let q3;
        let x;
        let y;
        let z;
        let yOffset;
        let zOffset;
        xBeg = xBeg !== undefined ? xBeg : 0;
        yBeg = yBeg !== undefined ? yBeg : 0;
        zBeg = zBeg !== undefined ? zBeg : 0;
        xEnd = xEnd !== undefined ? xEnd : nx - 1;
        yEnd = yEnd !== undefined ? yEnd : ny - 1;
        zEnd = zEnd !== undefined ? zEnd : nz - 1;
        if (!wrap) {
            if (noNormals) {
                xBeg = Math.max(0, xBeg);
                yBeg = Math.max(0, yBeg);
                zBeg = Math.max(0, zBeg);
                xEnd = Math.min(nx - 1, xEnd);
                yEnd = Math.min(ny - 1, yEnd);
                zEnd = Math.min(nz - 1, zEnd);
            }
            else {
                xBeg = Math.max(1, xBeg);
                yBeg = Math.max(1, yBeg);
                zBeg = Math.max(1, zBeg);
                xEnd = Math.min(nx - 2, xEnd);
                yEnd = Math.min(ny - 2, yEnd);
                zEnd = Math.min(nz - 2, zEnd);
            }
        }
        let xBeg2, yBeg2, zBeg2, xEnd2, yEnd2, zEnd2;
        if (!wrap) {
            // init part of the vertexIndex
            // (takes a significant amount of time to do for all)
            xBeg2 = Math.max(0, xBeg - 2);
            yBeg2 = Math.max(0, yBeg - 2);
            zBeg2 = Math.max(0, zBeg - 2);
            xEnd2 = Math.min(nx, xEnd + 2);
            yEnd2 = Math.min(ny, yEnd + 2);
            zEnd2 = Math.min(nz, zEnd + 2);
            for (z = zBeg2; z < zEnd2; ++z) {
                zOffset = zd * z;
                for (y = yBeg2; y < yEnd2; ++y) {
                    yOffset = zOffset + yd * y;
                    for (x = xBeg2; x < xEnd2; ++x) {
                        q = 3 * (yOffset + x);
                        vertexIndex[q] = -1;
                        vertexIndex[q + 1] = -1;
                        vertexIndex[q + 2] = -1;
                    }
                }
            }
        }
        else {
            xBeg2 = xBeg - 2;
            yBeg2 = yBeg - 2;
            zBeg2 = zBeg - 2;
            xEnd2 = xEnd + 2;
            yEnd2 = yEnd + 2;
            zEnd2 = zEnd + 2;
            for (z = zBeg2; z < zEnd2; ++z) {
                for (y = yBeg2; y < yEnd2; ++y) {
                    for (x = xBeg2; x < xEnd2; ++x) {
                        q3 = index(x, y, z) * 3;
                        vertexIndex[q3] = -1;
                        vertexIndex[q3 + 1] = -1;
                        vertexIndex[q3 + 2] = -1;
                    }
                }
            }
        }
        if (!wrap) {
            // clip space where the isovalue is too low
            var __break;
            var __xBeg = xBeg;
            var __yBeg = yBeg;
            var __zBeg = zBeg;
            var __xEnd = xEnd;
            var __yEnd = yEnd;
            var __zEnd = zEnd;
            __break = false;
            for (z = zBeg; z < zEnd; ++z) {
                for (y = yBeg; y < yEnd; ++y) {
                    for (x = xBeg; x < xEnd; ++x) {
                        q = ((nx * ny) * z) + (nx * y) + x;
                        if (field[q] >= isolevel) {
                            __zBeg = z;
                            __break = true;
                            break;
                        }
                    }
                    if (__break)
                        break;
                }
                if (__break)
                    break;
            }
            __break = false;
            for (y = yBeg; y < yEnd; ++y) {
                for (z = __zBeg; z < zEnd; ++z) {
                    for (x = xBeg; x < xEnd; ++x) {
                        q = ((nx * ny) * z) + (nx * y) + x;
                        if (field[q] >= isolevel) {
                            __yBeg = y;
                            __break = true;
                            break;
                        }
                    }
                    if (__break)
                        break;
                }
                if (__break)
                    break;
            }
            __break = false;
            for (x = xBeg; x < xEnd; ++x) {
                for (y = __yBeg; y < yEnd; ++y) {
                    for (z = __zBeg; z < zEnd; ++z) {
                        q = ((nx * ny) * z) + (nx * y) + x;
                        if (field[q] >= isolevel) {
                            __xBeg = x;
                            __break = true;
                            break;
                        }
                    }
                    if (__break)
                        break;
                }
                if (__break)
                    break;
            }
            __break = false;
            for (z = zEnd; z >= zBeg; --z) {
                for (y = yEnd; y >= yBeg; --y) {
                    for (x = xEnd; x >= xBeg; --x) {
                        q = ((nx * ny) * z) + (nx * y) + x;
                        if (field[q] >= isolevel) {
                            __zEnd = z;
                            __break = true;
                            break;
                        }
                    }
                    if (__break)
                        break;
                }
                if (__break)
                    break;
            }
            __break = false;
            for (y = yEnd; y >= yBeg; --y) {
                for (z = __zEnd; z >= zBeg; --z) {
                    for (x = xEnd; x >= xBeg; --x) {
                        q = ((nx * ny) * z) + (nx * y) + x;
                        if (field[q] >= isolevel) {
                            __yEnd = y;
                            __break = true;
                            break;
                        }
                    }
                    if (__break)
                        break;
                }
                if (__break)
                    break;
            }
            __break = false;
            for (x = xEnd; x >= xBeg; --x) {
                for (y = __yEnd; y >= yBeg; --y) {
                    for (z = __zEnd; z >= zBeg; --z) {
                        q = ((nx * ny) * z) + (nx * y) + x;
                        if (field[q] >= isolevel) {
                            __xEnd = x;
                            __break = true;
                            break;
                        }
                    }
                    if (__break)
                        break;
                }
                if (__break)
                    break;
            }
            //
            if (noNormals) {
                xBeg = Math.max(0, __xBeg - 1);
                yBeg = Math.max(0, __yBeg - 1);
                zBeg = Math.max(0, __zBeg - 1);
                xEnd = Math.min(nx - 1, __xEnd + 1);
                yEnd = Math.min(ny - 1, __yEnd + 1);
                zEnd = Math.min(nz - 1, __zEnd + 1);
            }
            else {
                xBeg = Math.max(1, __xBeg - 1);
                yBeg = Math.max(1, __yBeg - 1);
                zBeg = Math.max(1, __zBeg - 1);
                xEnd = Math.min(nx - 2, __xEnd + 1);
                yEnd = Math.min(ny - 2, __yEnd + 1);
                zEnd = Math.min(nz - 2, __zEnd + 1);
            }
        }
        // polygonize part of the grid
        var edgeFilter = 15;
        for (z = zBeg; z < zEnd; ++z, edgeFilter &= ~4) {
            zOffset = zd * z;
            edgeFilter |= 2;
            for (y = yBeg; y < yEnd; ++y, edgeFilter &= ~2) {
                yOffset = zOffset + yd * y;
                edgeFilter |= 1;
                for (x = xBeg; x < xEnd; ++x, edgeFilter &= ~1) {
                    q = yOffset + x;
                    polygonize(x, y, z, q, edgeFilter);
                }
            }
        }
    }
}
Object.assign(MarchingCubes, { __deps: [getEdgeTable, getTriTable, getUintArray] });

/**
 * @file Matrix Utils
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 *
 * svd methods from Eugene Zatepyakin / http://inspirit.github.io/jsfeat/
 */
class Matrix$2 {
    constructor(cols, rows) {
        this.cols = cols;
        this.rows = rows;
        this.size = this.cols * this.rows;
        this.data = new Float32Array(this.size);
    }
    copyTo(matrix) {
        matrix.data.set(this.data);
    }
}
function transpose(At, A) {
    let i = 0;
    let j = 0;
    const nrows = A.rows;
    const ncols = A.cols;
    let Ai = 0;
    let Ati = 0;
    let pAt = 0;
    const ad = A.data;
    const atd = At.data;
    for (; i < nrows; Ati += 1, Ai += ncols, i++) {
        pAt = Ati;
        for (j = 0; j < ncols; pAt += nrows, j++)
            atd[pAt] = ad[Ai + j];
    }
}
// C = A * B
function multiply(C, A, B) {
    let i = 0;
    let j = 0;
    let k = 0;
    let Ap = 0;
    let pA = 0;
    let pB = 0;
    let _pB = 0;
    let Cp = 0;
    const ncols = A.cols;
    const nrows = A.rows;
    const mcols = B.cols;
    const ad = A.data;
    const bd = B.data;
    const cd = C.data;
    let sum = 0.0;
    for (; i < nrows; Ap += ncols, i++) {
        for (_pB = 0, j = 0; j < mcols; Cp++, _pB++, j++) {
            pB = _pB;
            pA = Ap;
            sum = 0.0;
            for (k = 0; k < ncols; pA++, pB += mcols, k++) {
                sum += ad[pA] * bd[pB];
            }
            cd[Cp] = sum;
        }
    }
}
// C = A * B'
function multiplyABt(C, A, B) {
    let i = 0;
    let j = 0;
    let k = 0;
    let Ap = 0;
    let pA = 0;
    let pB = 0;
    let Cp = 0;
    const ncols = A.cols;
    const nrows = A.rows;
    const mrows = B.rows;
    const ad = A.data;
    const bd = B.data;
    const cd = C.data;
    let sum = 0.0;
    for (; i < nrows; Ap += ncols, i++) {
        for (pB = 0, j = 0; j < mrows; Cp++, j++) {
            pA = Ap;
            sum = 0.0;
            for (k = 0; k < ncols; pA++, pB++, k++) {
                sum += ad[pA] * bd[pB];
            }
            cd[Cp] = sum;
        }
    }
}
function invert3x3(from, to) {
    const A = from.data;
    const invA = to.data;
    const t1 = A[4];
    const t2 = A[8];
    const t4 = A[5];
    const t5 = A[7];
    const t8 = A[0];
    const t9 = t8 * t1;
    const t11 = t8 * t4;
    const t13 = A[3];
    const t14 = A[1];
    const t15 = t13 * t14;
    const t17 = A[2];
    const t18 = t13 * t17;
    const t20 = A[6];
    const t21 = t20 * t14;
    const t23 = t20 * t17;
    const t26 = 1.0 / (t9 * t2 - t11 * t5 - t15 * t2 + t18 * t5 + t21 * t4 - t23 * t1);
    invA[0] = (t1 * t2 - t4 * t5) * t26;
    invA[1] = -(t14 * t2 - t17 * t5) * t26;
    invA[2] = -(-t14 * t4 + t17 * t1) * t26;
    invA[3] = -(t13 * t2 - t4 * t20) * t26;
    invA[4] = (t8 * t2 - t23) * t26;
    invA[5] = -(t11 - t18) * t26;
    invA[6] = -(-t13 * t5 + t1 * t20) * t26;
    invA[7] = -(t8 * t5 - t21) * t26;
    invA[8] = (t9 - t15) * t26;
}
function mat3x3determinant(M) {
    const md = M.data;
    return md[0] * md[4] * md[8] -
        md[0] * md[5] * md[7] -
        md[3] * md[1] * md[8] +
        md[3] * md[2] * md[7] +
        md[6] * md[1] * md[5] -
        md[6] * md[2] * md[4];
}
// C = A * B
function multiply3x3(C, A, B) {
    const Cd = C.data;
    const Ad = A.data;
    const Bd = B.data;
    const m10 = Ad[0];
    const m11 = Ad[1];
    const m12 = Ad[2];
    const m13 = Ad[3];
    const m14 = Ad[4];
    const m15 = Ad[5];
    const m16 = Ad[6];
    const m17 = Ad[7];
    const m18 = Ad[8];
    const m20 = Bd[0];
    const m21 = Bd[1];
    const m22 = Bd[2];
    const m23 = Bd[3];
    const m24 = Bd[4];
    const m25 = Bd[5];
    const m26 = Bd[6];
    const m27 = Bd[7];
    const m28 = Bd[8];
    Cd[0] = m10 * m20 + m11 * m23 + m12 * m26;
    Cd[1] = m10 * m21 + m11 * m24 + m12 * m27;
    Cd[2] = m10 * m22 + m11 * m25 + m12 * m28;
    Cd[3] = m13 * m20 + m14 * m23 + m15 * m26;
    Cd[4] = m13 * m21 + m14 * m24 + m15 * m27;
    Cd[5] = m13 * m22 + m14 * m25 + m15 * m28;
    Cd[6] = m16 * m20 + m17 * m23 + m18 * m26;
    Cd[7] = m16 * m21 + m17 * m24 + m18 * m27;
    Cd[8] = m16 * m22 + m17 * m25 + m18 * m28;
}
function meanRows(A) {
    const nrows = A.rows;
    const ncols = A.cols;
    const Ad = A.data;
    const mean = new Array(ncols);
    for (let j = 0; j < ncols; ++j) {
        mean[j] = 0.0;
    }
    for (let i = 0, p = 0; i < nrows; ++i) {
        for (let j = 0; j < ncols; ++j, ++p) {
            mean[j] += Ad[p];
        }
    }
    for (let j = 0; j < ncols; ++j) {
        mean[j] /= nrows;
    }
    return mean;
}
function subRows(A, row) {
    const nrows = A.rows;
    const ncols = A.cols;
    const Ad = A.data;
    for (let i = 0, p = 0; i < nrows; ++i) {
        for (let j = 0; j < ncols; ++j, ++p) {
            Ad[p] -= row[j];
        }
    }
}
function swap(A, i0, i1, t) {
    t = A[i0];
    A[i0] = A[i1];
    A[i1] = t;
}
function hypot(a, b) {
    a = Math.abs(a);
    b = Math.abs(b);
    if (a > b) {
        b /= a;
        return a * Math.sqrt(1.0 + b * b);
    }
    if (b > 0) {
        a /= b;
        return b * Math.sqrt(1.0 + a * a);
    }
    return 0.0;
}
const EPSILON$1 = 0.0000001192092896;
const FLT_MIN = 1E-37;
function JacobiSVDImpl(At, astep, _W, Vt, vstep, m, n, n1) {
    const eps = EPSILON$1 * 2.0;
    const minval = FLT_MIN;
    let i = 0;
    let j = 0;
    let k = 0;
    let iter = 0;
    const maxIter = Math.max(m, 30);
    let Ai = 0;
    let Aj = 0;
    let Vi = 0;
    let Vj = 0;
    let changed = 0;
    let c = 0.0;
    let s = 0.0;
    let t = 0.0;
    let t0 = 0.0;
    let t1 = 0.0;
    let sd = 0.0;
    let beta = 0.0;
    let gamma = 0.0;
    let delta = 0.0;
    let a = 0.0;
    let p = 0.0;
    let b = 0.0;
    let seed = 0x1234;
    let val = 0.0;
    let val0 = 0.0;
    let asum = 0.0;
    const W = new Float64Array(n << 3);
    for (; i < n; i++) {
        for (k = 0, sd = 0; k < m; k++) {
            t = At[i * astep + k];
            sd += t * t;
        }
        W[i] = sd;
        if (Vt) {
            for (k = 0; k < n; k++) {
                Vt[i * vstep + k] = 0;
            }
            Vt[i * vstep + i] = 1;
        }
    }
    for (; iter < maxIter; iter++) {
        changed = 0;
        for (i = 0; i < n - 1; i++) {
            for (j = i + 1; j < n; j++) {
                Ai = (i * astep) | 0;
                Aj = (j * astep) | 0;
                a = W[i];
                p = 0;
                b = W[j];
                k = 2;
                p += At[Ai] * At[Aj];
                p += At[Ai + 1] * At[Aj + 1];
                for (; k < m; k++) {
                    p += At[Ai + k] * At[Aj + k];
                }
                if (Math.abs(p) <= eps * Math.sqrt(a * b))
                    continue;
                p *= 2.0;
                beta = a - b;
                gamma = hypot(p, beta);
                if (beta < 0) {
                    delta = (gamma - beta) * 0.5;
                    s = Math.sqrt(delta / gamma);
                    c = (p / (gamma * s * 2.0));
                }
                else {
                    c = Math.sqrt((gamma + beta) / (gamma * 2.0));
                    s = (p / (gamma * c * 2.0));
                }
                a = 0.0;
                b = 0.0;
                k = 2; // unroll
                t0 = c * At[Ai] + s * At[Aj];
                t1 = -s * At[Ai] + c * At[Aj];
                At[Ai] = t0;
                At[Aj] = t1;
                a += t0 * t0;
                b += t1 * t1;
                t0 = c * At[Ai + 1] + s * At[Aj + 1];
                t1 = -s * At[Ai + 1] + c * At[Aj + 1];
                At[Ai + 1] = t0;
                At[Aj + 1] = t1;
                a += t0 * t0;
                b += t1 * t1;
                for (; k < m; k++) {
                    t0 = c * At[Ai + k] + s * At[Aj + k];
                    t1 = -s * At[Ai + k] + c * At[Aj + k];
                    At[Ai + k] = t0;
                    At[Aj + k] = t1;
                    a += t0 * t0;
                    b += t1 * t1;
                }
                W[i] = a;
                W[j] = b;
                changed = 1;
                if (Vt) {
                    Vi = (i * vstep) | 0;
                    Vj = (j * vstep) | 0;
                    k = 2;
                    t0 = c * Vt[Vi] + s * Vt[Vj];
                    t1 = -s * Vt[Vi] + c * Vt[Vj];
                    Vt[Vi] = t0;
                    Vt[Vj] = t1;
                    t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];
                    t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];
                    Vt[Vi + 1] = t0;
                    Vt[Vj + 1] = t1;
                    for (; k < n; k++) {
                        t0 = c * Vt[Vi + k] + s * Vt[Vj + k];
                        t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];
                        Vt[Vi + k] = t0;
                        Vt[Vj + k] = t1;
                    }
                }
            }
        }
        if (changed === 0)
            break;
    }
    for (i = 0; i < n; i++) {
        for (k = 0, sd = 0; k < m; k++) {
            t = At[i * astep + k];
            sd += t * t;
        }
        W[i] = Math.sqrt(sd);
    }
    for (i = 0; i < n - 1; i++) {
        j = i;
        for (k = i + 1; k < n; k++) {
            if (W[j] < W[k]) {
                j = k;
            }
        }
        if (i !== j) {
            swap(W, i, j, sd);
            if (Vt) {
                for (k = 0; k < m; k++) {
                    swap(At, i * astep + k, j * astep + k, t);
                }
                for (k = 0; k < n; k++) {
                    swap(Vt, i * vstep + k, j * vstep + k, t);
                }
            }
        }
    }
    for (i = 0; i < n; i++) {
        _W[i] = W[i];
    }
    if (!Vt) {
        return;
    }
    for (i = 0; i < n1; i++) {
        sd = i < n ? W[i] : 0;
        while (sd <= minval) {
            // if we got a zero singular value, then in order to get the corresponding left singular vector
            // we generate a random vector, project it to the previously computed left singular vectors,
            // subtract the projection and normalize the difference.
            val0 = (1.0 / m);
            for (k = 0; k < m; k++) {
                seed = (seed * 214013 + 2531011);
                val = (((seed >> 16) & 0x7fff) & 256) !== 0 ? val0 : -val0;
                At[i * astep + k] = val;
            }
            for (iter = 0; iter < 2; iter++) {
                for (j = 0; j < i; j++) {
                    sd = 0;
                    for (k = 0; k < m; k++) {
                        sd += At[i * astep + k] * At[j * astep + k];
                    }
                    asum = 0.0;
                    for (k = 0; k < m; k++) {
                        t = (At[i * astep + k] - sd * At[j * astep + k]);
                        At[i * astep + k] = t;
                        asum += Math.abs(t);
                    }
                    asum = asum ? 1.0 / asum : 0;
                    for (k = 0; k < m; k++) {
                        At[i * astep + k] *= asum;
                    }
                }
            }
            sd = 0;
            for (k = 0; k < m; k++) {
                t = At[i * astep + k];
                sd += t * t;
            }
            sd = Math.sqrt(sd);
        }
        s = (1.0 / sd);
        for (k = 0; k < m; k++) {
            At[i * astep + k] *= s;
        }
    }
}
function svd(A, W, U, V) {
    let at = 0;
    let i = 0;
    const _m = A.rows;
    const _n = A.cols;
    let m = _m;
    let n = _n;
    if (m < n) {
        at = 1;
        i = m;
        m = n;
        n = i;
    }
    const amt = new Matrix$2(m, m);
    const wmt = new Matrix$2(1, n);
    const vmt = new Matrix$2(n, n);
    if (at === 0) {
        transpose(amt, A);
    }
    else {
        for (i = 0; i < _n * _m; i++) {
            amt.data[i] = A.data[i];
        }
        for (; i < n * m; i++) {
            amt.data[i] = 0;
        }
    }
    JacobiSVDImpl(amt.data, m, wmt.data, vmt.data, n, m, n, m);
    if (W) {
        for (i = 0; i < n; i++) {
            W.data[i] = wmt.data[i];
        }
        for (; i < _n; i++) {
            W.data[i] = 0;
        }
    }
    if (at === 0) {
        if (U)
            transpose(U, amt);
        if (V)
            transpose(V, vmt);
    }
    else {
        if (U)
            transpose(U, vmt);
        if (V)
            transpose(V, amt);
    }
}
//
function m4new() {
    return new Float32Array([
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    ]);
}
function m4set(out, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    out[0] = n11;
    out[4] = n12;
    out[8] = n13;
    out[12] = n14;
    out[1] = n21;
    out[5] = n22;
    out[9] = n23;
    out[13] = n24;
    out[2] = n31;
    out[6] = n32;
    out[10] = n33;
    out[14] = n34;
    out[3] = n41;
    out[7] = n42;
    out[11] = n43;
    out[15] = n44;
}
function m4multiply(out, a, b) {
    const a11 = a[0];
    const a12 = a[4];
    const a13 = a[8];
    const a14 = a[12];
    const a21 = a[1];
    const a22 = a[5];
    const a23 = a[9];
    const a24 = a[13];
    const a31 = a[2];
    const a32 = a[6];
    const a33 = a[10];
    const a34 = a[14];
    const a41 = a[3];
    const a42 = a[7];
    const a43 = a[11];
    const a44 = a[15];
    const b11 = b[0];
    const b12 = b[4];
    const b13 = b[8];
    const b14 = b[12];
    const b21 = b[1];
    const b22 = b[5];
    const b23 = b[9];
    const b24 = b[13];
    const b31 = b[2];
    const b32 = b[6];
    const b33 = b[10];
    const b34 = b[14];
    const b41 = b[3];
    const b42 = b[7];
    const b43 = b[11];
    const b44 = b[15];
    out[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    out[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    out[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    out[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    out[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    out[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    out[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    out[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    out[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    out[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    out[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    out[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    out[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    out[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    out[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    out[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
}
function m4makeScale(out, x, y, z) {
    m4set(out, x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
}
m4makeScale.__deps = [m4set];
function m4makeTranslation(out, x, y, z) {
    m4set(out, 1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
}
m4makeTranslation.__deps = [m4set];
function m4makeRotationY(out, theta) {
    const c = Math.cos(theta);
    const s = Math.sin(theta);
    m4set(out, c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
}
m4makeRotationY.__deps = [m4set];
//
function m3new() {
    return new Float32Array([
        1, 0, 0,
        0, 1, 0,
        0, 0, 1
    ]);
}
function m3makeNormal(out, m4) {
    const r0 = v3new([m4[0], m4[1], m4[2]]);
    const r1 = v3new([m4[4], m4[5], m4[6]]);
    const r2 = v3new([m4[8], m4[9], m4[10]]);
    const cp = v3new();
    //        [ r0 ]       [ r1 x r2 ]
    // M3x3 = [ r1 ]   N = [ r2 x r0 ]
    //        [ r2 ]       [ r0 x r1 ]
    v3cross(cp, r1, r2);
    out[0] = cp[0];
    out[1] = cp[1];
    out[2] = cp[2];
    v3cross(cp, r2, r0);
    out[3] = cp[0];
    out[4] = cp[1];
    out[5] = cp[2];
    v3cross(cp, r0, r1);
    out[6] = cp[0];
    out[7] = cp[1];
    out[8] = cp[2];
}
m3makeNormal.__deps = [v3new, v3cross];

/**
 * @file Surface Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function laplacianSmooth(verts, faces, numiter, inflate) {
    // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
    // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
    //
    // Permission to use, copy, modify, and distribute this program for
    // any purpose, with or without fee, is hereby granted, provided that
    // the notices on the head, the reference information, and this
    // copyright notice appear in all copies or substantial portions of
    // the Software. It is provided "as is" without express or implied
    // warranty.
    //
    // ported to JavaScript and adapted to NGL by Alexander Rose
    numiter = numiter || 1;
    inflate = inflate || true;
    const nv = verts.length / 3;
    const nf = faces.length / 3;
    let norms = undefined;
    if (inflate) {
        norms = new Float32Array(nv * 3);
    }
    const tps = new Float32Array(nv * 3);
    let i;
    const ndeg = 20;
    const vertdeg = new Array(ndeg);
    for (i = 0; i < ndeg; ++i) {
        vertdeg[i] = new Uint32Array(nv);
    }
    for (i = 0; i < nv; ++i) {
        vertdeg[0][i] = 0;
    }
    let j, jl;
    let flagvert;
    // for each face
    for (i = 0; i < nf; ++i) {
        var ao = i * 3;
        var bo = i * 3 + 1;
        var co = i * 3 + 2;
        // vertex a
        flagvert = true;
        for (j = 0, jl = vertdeg[0][faces[ao]]; j < jl; ++j) {
            if (faces[bo] === vertdeg[j + 1][faces[ao]]) {
                flagvert = false;
                break;
            }
        }
        if (flagvert) {
            vertdeg[0][faces[ao]]++;
            vertdeg[vertdeg[0][faces[ao]]][faces[ao]] = faces[bo];
        }
        flagvert = true;
        for (j = 0, jl = vertdeg[0][faces[ao]]; j < jl; ++j) {
            if (faces[co] === vertdeg[j + 1][faces[ao]]) {
                flagvert = false;
                break;
            }
        }
        if (flagvert) {
            vertdeg[0][faces[ao]]++;
            vertdeg[vertdeg[0][faces[ao]]][faces[ao]] = faces[co];
        }
        // vertex b
        flagvert = true;
        for (j = 0, jl = vertdeg[0][faces[bo]]; j < jl; ++j) {
            if (faces[ao] === vertdeg[j + 1][faces[bo]]) {
                flagvert = false;
                break;
            }
        }
        if (flagvert) {
            vertdeg[0][faces[bo]]++;
            vertdeg[vertdeg[0][faces[bo]]][faces[bo]] = faces[ao];
        }
        flagvert = true;
        for (j = 0, jl = vertdeg[0][faces[bo]]; j < jl; ++j) {
            if (faces[co] === vertdeg[j + 1][faces[bo]]) {
                flagvert = false;
                break;
            }
        }
        if (flagvert) {
            vertdeg[0][faces[bo]]++;
            vertdeg[vertdeg[0][faces[bo]]][faces[bo]] = faces[co];
        }
        // vertex c
        flagvert = true;
        for (j = 0; j < vertdeg[0][faces[co]]; ++j) {
            if (faces[ao] === vertdeg[j + 1][faces[co]]) {
                flagvert = false;
                break;
            }
        }
        if (flagvert) {
            vertdeg[0][faces[co]]++;
            vertdeg[vertdeg[0][faces[co]]][faces[co]] = faces[ao];
        }
        flagvert = true;
        for (j = 0, jl = vertdeg[0][faces[co]]; j < jl; ++j) {
            if (faces[bo] === vertdeg[j + 1][faces[co]]) {
                flagvert = false;
                break;
            }
        }
        if (flagvert) {
            vertdeg[0][faces[co]]++;
            vertdeg[vertdeg[0][faces[co]]][faces[co]] = faces[bo];
        }
    }
    var wt = 1.0;
    var wt2 = 0.5;
    var i3, vi3, vdi, wtvi, wt2vi;
    var ssign = -1;
    var scaleFactor = 1;
    var outwt = 0.75 / (scaleFactor + 3.5); // area-preserving
    // smoothing iterations
    for (var k = 0; k < numiter; ++k) {
        // for each vertex
        for (i = 0; i < nv; ++i) {
            i3 = i * 3;
            vdi = vertdeg[0][i];
            if (vdi < 3) {
                tps[i3] = verts[i3];
                tps[i3 + 1] = verts[i3 + 1];
                tps[i3 + 2] = verts[i3 + 2];
            }
            else if (vdi === 3 || vdi === 4) {
                tps[i3] = 0;
                tps[i3 + 1] = 0;
                tps[i3 + 2] = 0;
                for (j = 0; j < vdi; ++j) {
                    vi3 = vertdeg[j + 1][i] * 3;
                    tps[i3] += verts[vi3];
                    tps[i3 + 1] += verts[vi3 + 1];
                    tps[i3 + 2] += verts[vi3 + 2];
                }
                tps[i3] += wt2 * verts[i3];
                tps[i3 + 1] += wt2 * verts[i3 + 1];
                tps[i3 + 2] += wt2 * verts[i3 + 2];
                wt2vi = wt2 + vdi;
                tps[i3] /= wt2vi;
                tps[i3 + 1] /= wt2vi;
                tps[i3 + 2] /= wt2vi;
            }
            else {
                tps[i3] = 0;
                tps[i3 + 1] = 0;
                tps[i3 + 2] = 0;
                for (j = 0; j < vdi; ++j) {
                    vi3 = vertdeg[j + 1][i] * 3;
                    tps[i3] += verts[vi3];
                    tps[i3 + 1] += verts[vi3 + 1];
                    tps[i3 + 2] += verts[vi3 + 2];
                }
                tps[i3] += wt * verts[i3];
                tps[i3 + 1] += wt * verts[i3 + 1];
                tps[i3 + 2] += wt * verts[i3 + 2];
                wtvi = wt + vdi;
                tps[i3] /= wtvi;
                tps[i3 + 1] /= wtvi;
                tps[i3 + 2] /= wtvi;
            }
        }
        verts.set(tps); // copy smoothed positions
        if (inflate) {
            computeVertexNormals(verts, faces, norms);
            var nv3 = nv * 3;
            for (i3 = 0; i3 < nv3; i3 += 3) {
                // if(verts[i].inout) ssign=1;
                // else ssign=-1;
                verts[i3] += ssign * outwt * norms[i3];
                verts[i3 + 1] += ssign * outwt * norms[i3 + 1];
                verts[i3 + 2] += ssign * outwt * norms[i3 + 2];
            }
        }
    }
}
Object.assign(laplacianSmooth, { __deps: [computeVertexNormals] });
function computeVertexNormals(position, index, normal) {
    var i, il;
    if (normal === undefined) {
        normal = new Float32Array(position.length);
    }
    else {
        // reset existing normals to zero
        for (i = 0, il = normal.length; i < il; i++) {
            normal[i] = 0;
        }
    }
    var a = new Float32Array(3);
    var b = new Float32Array(3);
    var c = new Float32Array(3);
    var cb = new Float32Array(3);
    var ab = new Float32Array(3);
    if (index) {
        // indexed elements
        for (i = 0, il = index.length; i < il; i += 3) {
            var ai = index[i] * 3;
            var bi = index[i + 1] * 3;
            var ci = index[i + 2] * 3;
            v3fromArray(a, position, ai);
            v3fromArray(b, position, bi);
            v3fromArray(c, position, ci);
            v3sub(cb, c, b);
            v3sub(ab, a, b);
            v3cross(cb, cb, ab);
            normal[ai] += cb[0];
            normal[ai + 1] += cb[1];
            normal[ai + 2] += cb[2];
            normal[bi] += cb[0];
            normal[bi + 1] += cb[1];
            normal[bi + 2] += cb[2];
            normal[ci] += cb[0];
            normal[ci + 1] += cb[1];
            normal[ci + 2] += cb[2];
        }
    }
    else {
        // non-indexed elements (unconnected triangle soup)
        for (i = 0, il = position.length; i < il; i += 9) {
            v3fromArray(a, position, i);
            v3fromArray(b, position, i + 3);
            v3fromArray(c, position, i + 6);
            v3sub(cb, c, b);
            v3sub(ab, a, b);
            v3cross(cb, cb, ab);
            normal[i] = cb[0];
            normal[i + 1] = cb[1];
            normal[i + 2] = cb[2];
            normal[i + 3] = cb[0];
            normal[i + 4] = cb[1];
            normal[i + 5] = cb[2];
            normal[i + 6] = cb[0];
            normal[i + 7] = cb[1];
            normal[i + 8] = cb[2];
        }
    }
    normalizeVector3array(normal);
    return normal;
}
Object.assign(computeVertexNormals, { __deps: [
        v3sub, v3cross, v3fromArray, normalizeVector3array
    ] });
function getRadiusDict(radiusList) {
    var radiusDict = {};
    for (var i = 0, il = radiusList.length; i < il; ++i) {
        radiusDict[radiusList[i]] = true;
    }
    return radiusDict;
}
function getSurfaceGrid(min, max, maxRadius, scaleFactor, extraMargin) {
    // need margin to avoid boundary/round off effects
    var margin = (1 / scaleFactor) * 3;
    margin += maxRadius;
    v3subScalar(min, min, extraMargin + margin);
    v3addScalar(max, max, extraMargin + margin);
    v3multiplyScalar(min, min, scaleFactor);
    v3floor(min, min);
    v3divideScalar(min, min, scaleFactor);
    v3multiplyScalar(max, max, scaleFactor);
    v3ceil(max, max);
    v3divideScalar(max, max, scaleFactor);
    var dim = new Float32Array(3);
    v3sub(dim, max, min);
    v3multiplyScalar(dim, dim, scaleFactor);
    v3ceil(dim, dim);
    v3addScalar(dim, dim, 1);
    var maxSize = Math.pow(10, 6) * 256;
    var tmpSize = dim[0] * dim[1] * dim[2] * 3;
    if (maxSize <= tmpSize) {
        scaleFactor *= Math.pow(maxSize / tmpSize, 1 / 3);
        v3multiplyScalar(min, min, scaleFactor);
        v3floor(min, min);
        v3divideScalar(min, min, scaleFactor);
        v3multiplyScalar(max, max, scaleFactor);
        v3ceil(max, max);
        v3divideScalar(max, max, scaleFactor);
        v3sub(dim, max, min);
        v3multiplyScalar(dim, dim, scaleFactor);
        v3ceil(dim, dim);
        v3addScalar(dim, dim, 1);
    }
    var tran = new Float32Array(min);
    v3negate(tran, tran);
    // coordinate transformation matrix
    var matrix = m4new();
    var mroty = m4new();
    m4makeRotationY(mroty, degToRad$1(90));
    m4multiply(matrix, matrix, mroty);
    var mscale = m4new();
    m4makeScale(mscale, -1 / scaleFactor, 1 / scaleFactor, 1 / scaleFactor);
    m4multiply(matrix, matrix, mscale);
    var mtrans = m4new();
    m4makeTranslation(mtrans, -scaleFactor * tran[2], -scaleFactor * tran[1], -scaleFactor * tran[0]);
    m4multiply(matrix, matrix, mtrans);
    return {
        dim: dim,
        tran: tran,
        matrix: matrix,
        scaleFactor: scaleFactor
    };
}
Object.assign(getSurfaceGrid, { __deps: [
        degToRad$1,
        v3subScalar, v3addScalar, v3divideScalar, v3multiplyScalar,
        v3floor, v3ceil, v3sub, v3negate,
        m4new, m4multiply, m4makeTranslation, m4makeScale, m4makeRotationY
    ] });

/**
 * @file Surface
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Surface
 */
class Surface {
    /**
     * @param {String} name - surface name
     * @param {String} path - source path
     * @param {Object} data - surface data
     * @param {Float32Array} data.position - surface positions
     * @param {Int32Array} data.index - surface indices
     * @param {Float32Array} data.normal - surface normals
     * @param {Float32Array} data.color - surface colors
     * @param {Int32Array} data.atomindex - atom indices
     * @param {boolean} data.contour - contour mode flag
     */
    constructor(name, path, data) {
        this.name = name || '';
        this.path = path || '';
        this.info = {};
        this.center = new Vector3();
        this.boundingBox = new Box3();
        if (data instanceof BufferGeometry ||
            data instanceof Group) {
            // to be removed
            this.fromGeometry(data);
        }
        else if (data) {
            this.set(data.position, data.index, data.normal, data.color, data.atomindex, data.contour);
            this.boundingBox.setFromArray(data.position);
            this.boundingBox.getCenter(this.center);
        }
    }
    get type() { return 'Surface'; }
    /**
     * set surface data
     * @param {Float32Array} position - surface positions
     * @param {Int32Array} index - surface indices
     * @param {Float32Array} normal - surface normals
     * @param {Float32Array} color - surface colors
     * @param {Int32Array} atomindex - atom indices
     * @param {boolean} contour - contour mode flag
     * @return {undefined}
     */
    set(position, index, normal, color, atomindex, contour = false) {
        /**
         * @type {Float32Array}
         */
        this.position = position;
        /**
         * @type {Uint32Array|Uint16Array|undefined}
         */
        this.index = index;
        /**
         * @type {Float32Array|undefined}
         */
        this.normal = normal;
        /**
         * @type {Float32Array|undefined}
         */
        this.color = color;
        /**
         * @type {Int32Array|undefined}
         */
        this.atomindex = atomindex;
        this.size = position.length / 3;
        this.contour = contour;
    }
    fromGeometry(geometry) {
        if (Debug)
            Log.time('GeometrySurface.fromGeometry');
        let geo;
        if (geometry instanceof BufferGeometry) {
            geo = geometry;
        }
        else {
            geo = geometry[0];
        }
        if (!geo.boundingBox)
            geo.computeBoundingBox();
        this.boundingBox.copy(geo.boundingBox);
        this.boundingBox.getCenter(this.center);
        let position, color, index, normal;
        if (geo instanceof BufferGeometry) {
            const attr = geo.attributes;
            const an = attr.normal ? attr.normal.array : false;
            // assume there are no normals if the first is zero
            if (!an || (an[0] === 0 && an[1] === 0 && an[2] === 0)) {
                geo.computeVertexNormals();
            }
            position = attr.position.array;
            index = attr.index ? attr.index.array : null;
            normal = attr.normal.array;
        }
        this.set(position, index, normal, color, undefined);
        if (Debug)
            Log.timeEnd('GeometrySurface.setGeometry');
    }
    getPosition() {
        return this.position;
    }
    getColor(params) {
        const p = params || {};
        p.surface = this;
        const n = this.size;
        const array = new Float32Array(n * 3);
        const colormaker = ColormakerRegistry.getScheme(p);
        if (colormaker.volumeColor || p.scheme === 'random') {
            for (let i = 0; i < n; ++i) {
                colormaker.volumeColorToArray(i, array, i * 3);
            }
        }
        else if (colormaker.positionColor) {
            const v = new Vector3();
            const pos = this.position;
            for (let i = 0; i < n; ++i) {
                var i3 = i * 3;
                v.set(pos[i3], pos[i3 + 1], pos[i3 + 2]);
                colormaker.positionColorToArray(v, array, i3);
            }
        }
        else if (colormaker.atomColor && this.atomindex) {
            const atomProxy = p.structure.getAtomProxy();
            const atomindex = this.atomindex;
            for (let i = 0; i < n; ++i) {
                atomProxy.index = atomindex[i];
                colormaker.atomColorToArray(atomProxy, array, i * 3);
            }
        }
        else {
            const tc = new Color(p.value);
            uniformArray3(n, tc.r, tc.g, tc.b, array);
        }
        return array;
    }
    getPicking(structure) {
        if (this.atomindex && structure) {
            return new AtomPicker(this.atomindex, structure);
        }
        else {
            return new SurfacePicker(serialArray(this.size), this);
        }
    }
    getNormal() {
        return this.normal;
    }
    getSize(size, scale) {
        return uniformArray(this.size, size * scale);
    }
    getIndex() {
        return this.index;
    }
    getFilteredIndex(sele, structure) {
        if (sele && this.atomindex) {
            const selection = new Selection(sele);
            const atomSet = structure.getAtomSet(selection);
            const filteredIndex = [];
            const atomindex = this.atomindex;
            const index = this.index;
            const n = index.length;
            const elementSize = this.contour ? 2 : 3;
            let j = 0;
            for (let i = 0; i < n; i += elementSize) {
                let include = true;
                for (let a = 0; a < elementSize; a++) {
                    const idx = index[i + a];
                    const ai = atomindex[idx];
                    if (!atomSet.get(ai)) {
                        include = false;
                        break;
                    }
                }
                if (!include) {
                    continue;
                }
                for (let a = 0; a < elementSize; a++, j++) {
                    filteredIndex[j] = index[i + a];
                }
            }
            return getUintArray(filteredIndex, this.position.length / 3);
        }
        else {
            return this.index;
        }
    }
    getAtomindex() {
        return this.atomindex;
    }
    dispose() {
        //
    }
}

/**
 * @file Volume
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function VolumeSurface(data, nx, ny, nz, atomindex) {
    var mc = new MarchingCubes(data, nx, ny, nz, atomindex);
    function getSurface(isolevel, smooth, box, matrix, contour, wrap = false) {
        const sd = mc.triangulate(isolevel, smooth, box, contour, wrap);
        if (smooth && !contour) {
            laplacianSmooth(sd.position, sd.index, smooth, true);
            sd.normal = computeVertexNormals(sd.position, sd.index);
        }
        if (matrix) {
            applyMatrix4toVector3array(matrix, sd.position);
            if (sd.normal) {
                const normalMatrix = m3new();
                m3makeNormal(normalMatrix, matrix);
                applyMatrix3toVector3array(normalMatrix, sd.normal);
            }
        }
        return sd;
    }
    this.getSurface = getSurface;
}
Object.assign(VolumeSurface, { __deps: [
        laplacianSmooth, computeVertexNormals, MarchingCubes,
        applyMatrix4toVector3array, applyMatrix3toVector3array,
        m3new, m3makeNormal
    ] });
WorkerRegistry.add('surf', function func(e, callback) {
    const a = e.data.args;
    const p = e.data.params;
    if (a) {
        /* global self */
        self.volsurf = new VolumeSurface(a[0], a[1], a[2], a[3], a[4]);
    }
    if (p) {
        const sd = self.volsurf.getSurface(p.isolevel, p.smooth, p.box, p.matrix, p.contour, p.wrap);
        const transferList = [sd.position.buffer, sd.index.buffer];
        if (sd.normal)
            transferList.push(sd.normal.buffer);
        if (sd.atomindex)
            transferList.push(sd.atomindex.buffer);
        const data = {
            sd: sd,
            p: p
        };
        callback(data, transferList);
    }
}, [VolumeSurface]);
/**
 * Volume
 */
class Volume {
    /**
     * Make Volume instance
     * @param {String} name - volume name
     * @param {String} path - source path
     * @param {Float32array} data - volume 3d grid
     * @param {Integer} nx - x dimension of the 3d volume
     * @param {Integer} ny - y dimension of the 3d volume
     * @param {Integer} nz - z dimension of the 3d volume
     * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
     */
    constructor(name, path, data, nx, ny, nz, atomindex) {
        this.name = name;
        this.path = path;
        this.matrix = new Matrix4();
        this.normalMatrix = new Matrix3();
        this.inverseMatrix = new Matrix4();
        this.center = new Vector3();
        this.boundingBox = new Box3();
        this.setData(data, nx, ny, nz, atomindex);
    }
    get type() { return 'Volume'; }
    /**
     * set volume data
     * @param {Float32array} data - volume 3d grid
     * @param {Integer} nx - x dimension of the 3d volume
     * @param {Integer} ny - y dimension of the 3d volume
     * @param {Integer} nz - z dimension of the 3d volume
     * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
     * @return {undefined}
     */
    setData(data, nx, ny, nz, atomindex) {
        this.nx = nx || 1;
        this.ny = ny || 1;
        this.nz = nz || 1;
        this.data = data || new Float32Array(1);
        this.setAtomindex(atomindex);
        delete this._position;
        delete this._min;
        delete this._max;
        delete this._mean;
        delete this._rms;
        if (this.worker)
            this.worker.terminate();
    }
    /**
     * Set statistics, which can be different from the data in this volume,
     * if this volume is a slice of a bigger volume
     * @param {Number|undefined} min - minimum value of the whole data set
     * @param {Number|undefined} max - maximum value of the whole data set
     * @param {Number|undefined} mean - average value of the whole data set
     * @param {Number|undefined} rms - sigma value of the whole data set
     */
    setStats(min, max, mean, rms) {
        this._min = min;
        this._max = max;
        this._mean = mean;
        this._rms = rms;
    }
    /**
     * set transformation matrix
     * @param {Matrix4} matrix - 4x4 transformation matrix
     * @return {undefined}
     */
    setMatrix(matrix) {
        this.matrix.copy(matrix);
        const bb = this.boundingBox;
        const v = this.center; // temporary re-purposing
        const x = this.nx - 1;
        const y = this.ny - 1;
        const z = this.nz - 1;
        bb.makeEmpty();
        bb.expandByPoint(v.set(x, y, z));
        bb.expandByPoint(v.set(x, y, 0));
        bb.expandByPoint(v.set(x, 0, z));
        bb.expandByPoint(v.set(x, 0, 0));
        bb.expandByPoint(v.set(0, y, z));
        bb.expandByPoint(v.set(0, 0, z));
        bb.expandByPoint(v.set(0, y, 0));
        bb.expandByPoint(v.set(0, 0, 0));
        bb.applyMatrix4(this.matrix);
        bb.getCenter(this.center);
        // make normal matrix
        const me = this.matrix.elements;
        const r0 = new Vector3(me[0], me[1], me[2]);
        const r1 = new Vector3(me[4], me[5], me[6]);
        const r2 = new Vector3(me[8], me[9], me[10]);
        const cp = new Vector3();
        //        [ r0 ]       [ r1 x r2 ]
        // M3x3 = [ r1 ]   N = [ r2 x r0 ]
        //        [ r2 ]       [ r0 x r1 ]
        const ne = this.normalMatrix.elements;
        cp.crossVectors(r1, r2);
        ne[0] = cp.x;
        ne[1] = cp.y;
        ne[2] = cp.z;
        cp.crossVectors(r2, r0);
        ne[3] = cp.x;
        ne[4] = cp.y;
        ne[5] = cp.z;
        cp.crossVectors(r0, r1);
        ne[6] = cp.x;
        ne[7] = cp.y;
        ne[8] = cp.z;
        this.inverseMatrix.copy(this.matrix).invert();
    }
    /**
     * set atom indices
     * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
     * @return {undefined}
       */
    setAtomindex(atomindex) {
        this.atomindex = atomindex;
    }
    getBox(center, size, target) {
        if (!target)
            target = new Box3();
        target.set(center, center);
        target.expandByScalar(size);
        target.applyMatrix4(this.inverseMatrix);
        target.min.round();
        target.max.round();
        return target;
    }
    _getBox(center, size) {
        if (!center || !size)
            return;
        if (!this.__box)
            this.__box = new Box3();
        const box = this.getBox(center, size, this.__box);
        return [box.min.toArray(), box.max.toArray()];
    }
    _makeSurface(sd, isolevel, smooth) {
        const name = this.name + '@' + isolevel.toPrecision(2);
        const surface = new Surface(name, '', sd);
        surface.info.isolevel = isolevel;
        surface.info.smooth = smooth;
        surface.info.volume = this;
        return surface;
    }
    getSurface(isolevel, smooth, center, size, contour, wrap = false) {
        isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
        smooth = defaults(smooth, 0);
        //
        if (this.volsurf === undefined) {
            this.volsurf = new VolumeSurface(this.data, this.nx, this.ny, this.nz, this.atomindex);
        }
        const box = this._getBox(center, size);
        const sd = this.volsurf.getSurface(isolevel, smooth, box, this.matrix.elements, contour, wrap);
        return this._makeSurface(sd, isolevel, smooth);
    }
    getSurfaceWorker(isolevel, smooth, center, size, contour, wrap, callback) {
        isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
        smooth = smooth || 0;
        //
        if (window.hasOwnProperty('Worker')) {
            if (this.workerPool === undefined) {
                this.workerPool = new WorkerPool('surf', 2);
            }
            const msg = {};
            const worker = this.workerPool.getNextWorker();
            if (worker.postCount === 0) {
                Object.assign(msg, {
                    args: [
                        this.data, this.nx, this.ny, this.nz, this.atomindex
                    ]
                });
            }
            Object.assign(msg, {
                params: {
                    isolevel: isolevel,
                    smooth: smooth,
                    box: this._getBox(center, size),
                    matrix: this.matrix.elements,
                    contour: contour,
                    wrap: wrap
                }
            });
            worker.post(msg, undefined, (e) => {
                const sd = e.data.sd;
                const p = e.data.p;
                callback(this._makeSurface(sd, p.isolevel, p.smooth));
            }, (e) => {
                console.warn('Volume.getSurfaceWorker error - trying without worker', e);
                const surface = this.getSurface(isolevel, smooth, center, size, contour, wrap);
                callback(surface);
            });
        }
        else {
            const surface = this.getSurface(isolevel, smooth, center, size, contour, wrap);
            callback(surface);
        }
    }
    getValueForSigma(sigma) {
        return this.mean + defaults(sigma, 2) * this.rms;
    }
    getSigmaForValue(value) {
        return (defaults(value, 0) - this.mean) / this.rms;
    }
    get position() {
        if (!this._position) {
            const nz = this.nz;
            const ny = this.ny;
            const nx = this.nx;
            const position = new Float32Array(nx * ny * nz * 3);
            let p = 0;
            for (let z = 0; z < nz; ++z) {
                for (let y = 0; y < ny; ++y) {
                    for (let x = 0; x < nx; ++x) {
                        position[p + 0] = x;
                        position[p + 1] = y;
                        position[p + 2] = z;
                        p += 3;
                    }
                }
            }
            applyMatrix4toVector3array(this.matrix.elements, position);
            this._position = position;
        }
        return this._position;
    }
    getDataAtomindex() {
        return this.atomindex;
    }
    getDataPosition() {
        return this.position;
    }
    getDataColor(params) {
        const p = params || {};
        p.volume = this;
        p.scale = p.scale || 'Spectral';
        p.domain = p.domain || [this.min, this.max];
        const colormaker = ColormakerRegistry.getScheme(p);
        const n = this.position.length / 3;
        const array = new Float32Array(n * 3);
        // var atoms = p.structure.atoms;
        // var atomindex = this.atomindex;
        for (let i = 0; i < n; ++i) {
            colormaker.volumeColorToArray(i, array, i * 3);
            // a = atoms[ atomindex[ i ] ];
            // if( a ) colormaker.atomColorToArray( a, array, i * 3 );
        }
        return array;
    }
    getDataPicking() {
        const picking = serialArray(this.position.length / 3);
        return new VolumePicker(picking, this);
    }
    getDataSize(size, scale) {
        const data = this.data;
        const n = this.position.length / 3;
        let array;
        switch (size) {
            case 'value':
                array = new Float32Array(data);
                break;
            case 'abs-value':
                array = new Float32Array(data);
                for (let i = 0; i < n; ++i) {
                    array[i] = Math.abs(array[i]);
                }
                break;
            case 'value-min': {
                array = new Float32Array(data);
                const min = this.min;
                for (let i = 0; i < n; ++i) {
                    array[i] -= min;
                }
                break;
            }
            case 'deviation':
                array = new Float32Array(data);
                break;
            default:
                array = uniformArray(n, size);
                break;
        }
        if (scale !== 1.0) {
            for (let i = 0; i < n; ++i) {
                array[i] *= scale;
            }
        }
        return array;
    }
    get min() {
        if (this._min === undefined) {
            this._min = arrayMin(this.data);
        }
        return this._min;
    }
    get max() {
        if (this._max === undefined) {
            this._max = arrayMax(this.data);
        }
        return this._max;
    }
    get sum() {
        if (this._sum === undefined) {
            this._sum = arraySum(this.data);
        }
        return this._sum;
    }
    get mean() {
        if (this._mean === undefined) {
            this._mean = arrayMean(this.data);
        }
        return this._mean;
    }
    get rms() {
        if (this._rms === undefined) {
            this._rms = arrayRms(this.data);
        }
        return this._rms;
    }
    clone() {
        const vol = new Volume(this.name, this.path, this.data, this.nx, this.ny, this.nz, this.atomindex);
        vol.matrix.copy(this.matrix);
        vol.header = Object.assign({}, this.header);
        return vol;
    }
    dispose() {
        if (this.workerPool)
            this.workerPool.terminate();
    }
}

ShaderRegistry.add('shader/Mesh.vert', "#define STANDARD\nuniform float clipNear;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#elif defined( NOLIGHT )\nvColor = color;\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

ShaderRegistry.add('shader/Mesh.frag', "#define STANDARD\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#elif defined( NOLIGHT )\ngl_FragColor = vec4( vColor, opacity );\n#else\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_fragment_begin\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\n#include interior_fragment\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n#include opaque_back_fragment\n#endif\n}");

/**
 * @file Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getThreeSide(side) {
    if (side === 'front') {
        return FrontSide;
    }
    else if (side === 'back') {
        return BackSide;
    }
    else if (side === 'double') {
        return DoubleSide;
    }
    else {
        return DoubleSide;
    }
}
const itemSize = {
    'f': 1, 'v2': 2, 'v3': 3, 'c': 3
};
function setObjectMatrix(object, matrix) {
    object.matrix.copy(matrix);
    object.matrix.decompose(object.position, object.quaternion, object.scale);
    object.matrixWorldNeedsUpdate = true;
}
const BufferDefaultParameters = {
    opaqueBack: false,
    side: 'double',
    opacity: 1.0,
    depthWrite: true,
    clipNear: 0,
    clipRadius: 0,
    clipCenter: new Vector3(),
    flatShaded: false,
    wireframe: false,
    roughness: 0.4,
    metalness: 0.0,
    diffuse: 0xffffff,
    diffuseInterior: false,
    useInteriorColor: false,
    interiorColor: 0xdddddd,
    interiorDarkening: 0,
    forceTransparent: false,
    matrix: new Matrix4(),
    disablePicking: false,
    sortParticles: false,
    background: false
};
const BufferParameterTypes = {
    opaqueBack: { updateShader: true },
    side: { updateShader: true, property: true },
    opacity: { uniform: true },
    depthWrite: { property: true },
    clipNear: { updateShader: true, property: true },
    clipRadius: { updateShader: true, uniform: true },
    clipCenter: { uniform: true },
    flatShaded: { updateShader: true },
    background: { updateShader: true },
    wireframe: { updateVisibility: true },
    roughness: { uniform: true },
    metalness: { uniform: true },
    diffuse: { uniform: true },
    diffuseInterior: { updateShader: true },
    useInteriorColor: { updateShader: true },
    interiorColor: { uniform: true },
    interiorDarkening: { uniform: true },
    matrix: {}
};
/**
 * Buffer class. Base class for buffers.
 * @interface
 */
class Buffer$1 {
    /**
     * @param {Object} data - attribute object
     * @param {Float32Array} data.position - positions
     * @param {Float32Array} data.color - colors
     * @param {Uint32Array|Uint16Array} data.index - triangle indices
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} params - parameters object
     */
    constructor(data, params = {}) {
        this.parameterTypes = BufferParameterTypes;
        this.geometry = new BufferGeometry();
        this.indexVersion = 0;
        this.wireframeIndexVersion = -1;
        this.group = new Group();
        this.wireframeGroup = new Group();
        this.pickingGroup = new Group();
        this.vertexShader = '';
        this.fragmentShader = '';
        this.isImpostor = false;
        this.isText = false;
        this.isSurface = false;
        this.isPoint = false;
        this.isLine = false;
        this.dynamic = true;
        this.visible = true;
        this.wireframeIndexCount = 0;
        this.parameters = createParams(params, this.defaultParameters);
        this.uniforms = UniformsUtils.merge([
            UniformsLib.common,
            {
                fogColor: { value: new Color(0x000000) },
                fogNear: { value: 0.0 },
                fogFar: { value: 0.0 },
                opacity: { value: this.parameters.opacity },
                clipNear: { value: 0.0 },
                clipRadius: { value: this.parameters.clipRadius },
                clipCenter: { value: this.parameters.clipCenter }
            },
            {
                emissive: { value: new Color(0x000000) },
                roughness: { value: this.parameters.roughness },
                metalness: { value: this.parameters.metalness },
                interiorColor: { value: new Color(this.parameters.interiorColor) },
                interiorDarkening: { value: this.parameters.interiorDarkening },
            },
            UniformsLib.lights
        ]);
        this.uniforms.diffuse.value.set(this.parameters.diffuse);
        this.pickingUniforms = {
            clipNear: { value: 0.0 },
            objectId: { value: 0 },
            opacity: { value: this.parameters.opacity }
        };
        //
        const position = data.position || data.position1;
        this._positionDataSize = position ? position.length / 3 : 0;
        if (!data.primitiveId) {
            data.primitiveId = serialArray(this._positionDataSize);
        }
        this.addAttributes({
            position: { type: 'v3', value: data.position },
            color: { type: 'c', value: data.color },
            primitiveId: { type: 'f', value: data.primitiveId }
        });
        if (params.matrix) {
            this.matrix = params.matrix;
        }
        if (data.index) {
            this.initIndex(data.index);
        }
        this.picking = data.picking;
        this.makeWireframeGeometry();
    }
    get defaultParameters() { return BufferDefaultParameters; }
    set matrix(m) {
        this.setMatrix(m);
    }
    get matrix() {
        return this.group.matrix.clone();
    }
    get transparent() {
        return this.parameters.opacity < 1 || this.parameters.forceTransparent;
    }
    get size() {
        return this._positionDataSize;
    }
    get attributeSize() {
        return this.size;
    }
    get pickable() {
        return !!this.picking && !this.parameters.disablePicking;
    }
    setMatrix(m) {
        setObjectMatrix(this.group, m);
        setObjectMatrix(this.wireframeGroup, m);
        setObjectMatrix(this.pickingGroup, m);
    }
    initIndex(index) {
        this.geometry.setIndex(new BufferAttribute(index, 1));
        const nindex = this.geometry.getIndex();
        if (!nindex) {
            Log.error('Index is null');
            return;
        }
        nindex.setUsage(this.dynamic ? DynamicDrawUsage : StaticDrawUsage);
    }
    makeMaterial() {
        const side = getThreeSide(this.parameters.side);
        const m = new ShaderMaterial({
            uniforms: this.uniforms,
            vertexShader: '',
            fragmentShader: '',
            depthTest: true,
            transparent: this.transparent,
            depthWrite: this.parameters.depthWrite,
            lights: true,
            fog: true,
            side: side
        });
        m.vertexColors = true;
        m.extensions.derivatives = true;
        m.extensions.fragDepth = this.isImpostor;
        const wm = new ShaderMaterial({
            uniforms: this.uniforms,
            vertexShader: '',
            fragmentShader: '',
            depthTest: true,
            transparent: this.transparent,
            depthWrite: this.parameters.depthWrite,
            lights: false,
            fog: true,
            side: side
        });
        wm.vertexColors = true;
        const pm = new ShaderMaterial({
            uniforms: this.pickingUniforms,
            vertexShader: '',
            fragmentShader: '',
            depthTest: true,
            transparent: false,
            depthWrite: this.parameters.depthWrite,
            lights: false,
            fog: false,
            side: side,
            blending: NoBlending
        });
        pm.vertexColors = true;
        pm.extensions.fragDepth = this.isImpostor;
        m.clipNear = this.parameters.clipNear;
        wm.clipNear = this.parameters.clipNear;
        pm.clipNear = this.parameters.clipNear;
        this.material = m;
        this.wireframeMaterial = wm;
        this.pickingMaterial = pm;
        // also sets vertexShader/fragmentShader
        this.updateShader();
    }
    makeWireframeGeometry() {
        this.makeWireframeIndex();
        const geometry = this.geometry;
        const wireframeIndex = this.wireframeIndex;
        const wireframeGeometry = new BufferGeometry();
        wireframeGeometry.attributes = geometry.attributes;
        if (wireframeIndex) {
            wireframeGeometry.setIndex(new BufferAttribute(wireframeIndex, 1).setUsage(this.dynamic ? DynamicDrawUsage : StaticDrawUsage));
            wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
        }
        this.wireframeGeometry = wireframeGeometry;
    }
    makeWireframeIndex() {
        const edges = [];
        function checkEdge(a, b) {
            if (a > b) {
                const tmp = a;
                a = b;
                b = tmp;
            }
            const list = edges[a];
            if (list === undefined) {
                edges[a] = [b];
                return true;
            }
            else if (!list.includes(b)) {
                list.push(b);
                return true;
            }
            return false;
        }
        const geometry = this.geometry;
        const index = geometry.index;
        if (!this.parameters.wireframe) {
            this.wireframeIndex = new Uint16Array(0);
            this.wireframeIndexCount = 0;
        }
        else if (index) {
            const array = index.array;
            let n = array.length;
            if (geometry.drawRange.count !== Infinity) {
                n = geometry.drawRange.count;
            }
            let wireframeIndex;
            if (this.wireframeIndex && this.wireframeIndex.length > n * 2) {
                wireframeIndex = this.wireframeIndex;
            }
            else {
                const count = geometry.attributes.position.count; // TODO
                wireframeIndex = getUintArray(n * 2, count);
            }
            let j = 0;
            edges.length = 0;
            for (let i = 0; i < n; i += 3) {
                const a = array[i + 0];
                const b = array[i + 1];
                const c = array[i + 2];
                if (checkEdge(a, b)) {
                    wireframeIndex[j + 0] = a;
                    wireframeIndex[j + 1] = b;
                    j += 2;
                }
                if (checkEdge(b, c)) {
                    wireframeIndex[j + 0] = b;
                    wireframeIndex[j + 1] = c;
                    j += 2;
                }
                if (checkEdge(c, a)) {
                    wireframeIndex[j + 0] = c;
                    wireframeIndex[j + 1] = a;
                    j += 2;
                }
            }
            this.wireframeIndex = wireframeIndex;
            this.wireframeIndexCount = j;
            this.wireframeIndexVersion = this.indexVersion;
        }
        else {
            const n = geometry.attributes.position.count; // TODO
            let wireframeIndex;
            if (this.wireframeIndex && this.wireframeIndex.length > n * 2) {
                wireframeIndex = this.wireframeIndex;
            }
            else {
                wireframeIndex = getUintArray(n * 2, n);
            }
            for (let i = 0, j = 0; i < n; i += 3) {
                wireframeIndex[j + 0] = i;
                wireframeIndex[j + 1] = i + 1;
                wireframeIndex[j + 2] = i + 1;
                wireframeIndex[j + 3] = i + 2;
                wireframeIndex[j + 4] = i + 2;
                wireframeIndex[j + 5] = i;
                j += 6;
            }
            this.wireframeIndex = wireframeIndex;
            this.wireframeIndexCount = n * 2;
            this.wireframeIndexVersion = this.indexVersion;
        }
    }
    updateWireframeIndex() {
        if (!this.wireframeGeometry || !this.wireframeIndex)
            return;
        this.wireframeGeometry.setDrawRange(0, Infinity);
        if (this.wireframeIndexVersion < this.indexVersion)
            this.makeWireframeIndex();
        if (this.wireframeGeometry.index &&
            this.wireframeIndex.length > this.wireframeGeometry.index.array.length) {
            this.wireframeGeometry.setIndex(new BufferAttribute(this.wireframeIndex, 1).setUsage(this.dynamic ? DynamicDrawUsage : StaticDrawUsage));
        }
        else {
            const index = this.wireframeGeometry.getIndex();
            if (!index) {
                Log.error('Index is null');
                return;
            }
            index.set(this.wireframeIndex);
            index.needsUpdate = this.wireframeIndexCount > 0;
            index.updateRange.count = this.wireframeIndexCount;
        }
        this.wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
    }
    getRenderOrder() {
        let renderOrder = 0;
        if (this.isText) {
            renderOrder = 1;
        }
        else if (this.transparent) {
            if (this.isSurface) {
                renderOrder = 3;
            }
            else {
                renderOrder = 2;
            }
        }
        return renderOrder;
    }
    _getMesh(materialName) {
        if (!this.material)
            this.makeMaterial();
        const g = this.geometry;
        const m = this[materialName];
        let mesh;
        if (this.isLine) {
            mesh = new LineSegments(g, m);
        }
        else if (this.isPoint) {
            mesh = new Points(g, m);
        }
        else {
            mesh = new Mesh(g, m);
        }
        mesh.frustumCulled = false;
        mesh.renderOrder = this.getRenderOrder();
        return mesh;
    }
    getMesh() {
        return this._getMesh('material');
    }
    getWireframeMesh() {
        let mesh;
        if (!this.material)
            this.makeMaterial();
        if (!this.wireframeGeometry)
            this.makeWireframeGeometry();
        mesh = new LineSegments(this.wireframeGeometry, this.wireframeMaterial);
        mesh.frustumCulled = false;
        mesh.renderOrder = this.getRenderOrder();
        return mesh;
    }
    getPickingMesh() {
        return this._getMesh('pickingMaterial');
    }
    getShader(name, type) {
        return getShader(name, this.getDefines(type));
    }
    getVertexShader(type) {
        return this.getShader(this.vertexShader, type);
    }
    getFragmentShader(type) {
        return this.getShader(this.fragmentShader, type);
    }
    getDefines(type) {
        const defines = {};
        if (this.parameters.clipNear) {
            defines.NEAR_CLIP = 1;
        }
        if (this.parameters.clipRadius) {
            defines.RADIUS_CLIP = 1;
        }
        if (type === 'picking') {
            defines.PICKING = 1;
        }
        else {
            if (type === 'background' || this.parameters.background) {
                defines.NOLIGHT = 1;
            }
            if (this.parameters.flatShaded) {
                defines.FLAT_SHADED = 1;
            }
            if (this.parameters.opaqueBack) {
                defines.OPAQUE_BACK = 1;
            }
            if (this.parameters.diffuseInterior) {
                defines.DIFFUSE_INTERIOR = 1;
            }
            if (this.parameters.useInteriorColor) {
                defines.USE_INTERIOR_COLOR = 1;
            }
        }
        return defines;
    }
    getParameters() {
        return this.parameters;
    }
    addUniforms(uniforms) {
        this.uniforms = UniformsUtils.merge([this.uniforms, uniforms]);
        this.pickingUniforms = UniformsUtils.merge([this.pickingUniforms, uniforms]);
    }
    addAttributes(attributes) {
        for (let name in attributes) {
            let buf;
            const a = attributes[name];
            const arraySize = this.attributeSize * itemSize[a.type];
            if (a.value) {
                if (arraySize !== a.value.length) {
                    Log.error('attribute value has wrong length', name);
                }
                buf = a.value;
            }
            else {
                buf = getTypedArray('float32', arraySize);
            }
            this.geometry.setAttribute(name, new BufferAttribute(buf, itemSize[a.type]).setUsage(this.dynamic ? DynamicDrawUsage : StaticDrawUsage));
        }
    }
    updateRenderOrder() {
        const renderOrder = this.getRenderOrder();
        function setRenderOrder(mesh) {
            mesh.renderOrder = renderOrder;
        }
        this.group.children.forEach(setRenderOrder);
        if (this.pickingGroup) {
            this.pickingGroup.children.forEach(setRenderOrder);
        }
    }
    updateShader() {
        const m = this.material;
        const wm = this.wireframeMaterial;
        const pm = this.pickingMaterial;
        m.vertexShader = this.getVertexShader();
        m.fragmentShader = this.getFragmentShader();
        m.needsUpdate = true;
        wm.vertexShader = this.getShader('Line.vert');
        wm.fragmentShader = this.getShader('Line.frag');
        wm.needsUpdate = true;
        pm.vertexShader = this.getVertexShader('picking');
        pm.fragmentShader = this.getFragmentShader('picking');
        pm.needsUpdate = true;
    }
    /**
     * Set buffer parameters
     * @param {BufferParameters} params - buffer parameters object
     * @return {undefined}
     */
    setParameters(params) {
        const p = params;
        const pt = this.parameterTypes;
        const pv = this.parameters;
        const propertyData = {};
        const uniformData = {};
        let doShaderUpdate = false;
        let doVisibilityUpdate = false;
        for (const name in p) {
            const value = p[name];
            if (value === undefined)
                continue;
            pv[name] = value;
            if (pt[name] === undefined)
                continue;
            if (pt[name].property) {
                if (pt[name].property !== true) {
                    propertyData[pt[name].property] = value;
                }
                else {
                    propertyData[name] = value;
                }
            }
            if (pt[name].uniform) {
                if (pt[name].uniform !== true) {
                    uniformData[pt[name].uniform] = value;
                }
                else {
                    uniformData[name] = value;
                }
            }
            if (pt[name].updateShader) {
                doShaderUpdate = true;
            }
            if (pt[name].updateVisibility) {
                doVisibilityUpdate = true;
            }
            if (this.dynamic && name === 'wireframe' && value === true) {
                this.updateWireframeIndex();
            }
            if (name === 'forceTransparent') {
                propertyData.transparent = this.transparent;
            }
            if (name === 'matrix') {
                this.matrix = value;
            }
        }
        this.setProperties(propertyData);
        this.setUniforms(uniformData);
        if (doShaderUpdate)
            this.updateShader();
        if (doVisibilityUpdate)
            this.setVisibility(this.visible);
    }
    /**
     * Sets buffer attributes
     * @param {Object} data - An object where the keys are the attribute names
     *      and the values are the attribute data.
     * @example
     * var buffer = new Buffer();
     * buffer.setAttributes({ attrName: attrData });
     */
    setAttributes(data) {
        const geometry = this.geometry;
        const attributes = geometry.attributes; // TODO
        for (const name in data) {
            if (name === 'picking')
                continue;
            const array = data[name];
            const length = array.length;
            if (name === 'index') {
                const index = geometry.getIndex();
                if (!index) {
                    Log.error('Index is null');
                    continue;
                }
                geometry.setDrawRange(0, Infinity);
                if (length > index.array.length) {
                    geometry.setIndex(new BufferAttribute(array, 1)
                        .setUsage(this.dynamic ? DynamicDrawUsage : StaticDrawUsage));
                }
                else {
                    index.set(array);
                    index.needsUpdate = length > 0;
                    index.updateRange.count = length;
                    geometry.setDrawRange(0, length);
                }
                this.indexVersion++;
                if (this.parameters.wireframe)
                    this.updateWireframeIndex();
            }
            else {
                const attribute = attributes[name];
                if (length > attribute.array.length) {
                    geometry.setAttribute(name, new BufferAttribute(array, attribute.itemSize)
                        .setUsage(this.dynamic ? DynamicDrawUsage : StaticDrawUsage));
                }
                else {
                    attributes[name].set(array);
                    attributes[name].needsUpdate = length > 0;
                    attributes[name].updateRange.count = length;
                }
            }
        }
    }
    setUniforms(data) {
        if (!data)
            return;
        const u = this.material.uniforms;
        const wu = this.wireframeMaterial.uniforms;
        const pu = this.pickingMaterial.uniforms;
        for (let name in data) {
            if (name === 'opacity') {
                this.setProperties({ transparent: this.transparent });
            }
            if (u[name] !== undefined) {
                if (u[name].value.isVector3) {
                    u[name].value.copy(data[name]);
                }
                else if (u[name].value.set) {
                    u[name].value.set(data[name]);
                }
                else {
                    u[name].value = data[name];
                }
            }
            if (wu[name] !== undefined) {
                if (wu[name].value.isVector3) {
                    wu[name].value.copy(data[name]);
                }
                else if (wu[name].value.set) {
                    wu[name].value.set(data[name]);
                }
                else {
                    wu[name].value = data[name];
                }
            }
            if (pu[name] !== undefined) {
                if (pu[name].value.isVector3) {
                    pu[name].value.copy(data[name]);
                }
                else if (pu[name].value.set) {
                    pu[name].value.set(data[name]);
                }
                else {
                    pu[name].value = data[name];
                }
            }
        }
    }
    setProperties(data) {
        if (!data)
            return;
        const m = this.material;
        const wm = this.wireframeMaterial;
        const pm = this.pickingMaterial;
        for (const _name in data) {
            const name = _name; // TODO
            let value = data[name];
            if (name === 'transparent') {
                this.updateRenderOrder();
            }
            else if (name === 'side') {
                value = getThreeSide(value);
            }
            m[name] = value;
            wm[name] = value;
            pm[name] = value;
        }
        m.needsUpdate = true;
        wm.needsUpdate = true;
        pm.needsUpdate = true;
    }
    /**
     * Set buffer visibility
     * @param {Boolean} value - visibility value
     * @return {undefined}
     */
    setVisibility(value) {
        this.visible = value;
        if (this.parameters.wireframe) {
            this.group.visible = false;
            this.wireframeGroup.visible = value;
            if (this.pickable) {
                this.pickingGroup.visible = false;
            }
        }
        else {
            this.group.visible = value;
            this.wireframeGroup.visible = false;
            if (this.pickable) {
                this.pickingGroup.visible = value;
            }
        }
    }
    /**
     * Free buffer resources
     * @return {undefined}
     */
    dispose() {
        if (this.material)
            this.material.dispose();
        if (this.wireframeMaterial)
            this.wireframeMaterial.dispose();
        if (this.pickingMaterial)
            this.pickingMaterial.dispose();
        this.geometry.dispose();
        if (this.wireframeGeometry)
            this.wireframeGeometry.dispose();
    }
    /**
     * Customize JSON serialization to avoid circular references
     */
    toJSON() {
        var result = {};
        for (var x in this) {
            if (x !== "group" && x !== "wireframeGroup" && x != "pickingGroup"
                && x !== "picking") {
                result[x] = this[x];
            }
        }
        return result;
    }
}

/**
 * @file Mesh Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Mesh buffer. Draws a triangle mesh.
 *
 * @example
 * var meshBuffer = new MeshBuffer({
 *   position: new Float32Array(
 *     [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ]
 *   ),
 *   color: new Float32Array(
 *     [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
 *   )
 * });
 */
class MeshBuffer extends Buffer$1 {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.color - colors
     * @param  {Float32Array} [data.index] - triangle indices
     * @param  {Float32Array} [data.normal] - radii
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super(data, params);
        this.vertexShader = 'Mesh.vert';
        this.fragmentShader = 'Mesh.frag';
        this.addAttributes({
            'normal': { type: 'v3', value: data.normal }
        });
        if (data.normal === undefined) {
            this.geometry.computeVertexNormals();
        }
    }
}

/**
 * @file Surface Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Surface buffer. Like a {@link MeshBuffer}, but with `.isSurface` set to `true`.
 */
class SurfaceBuffer extends MeshBuffer {
    constructor() {
        super(...arguments);
        this.isSurface = true;
    }
}

/**
 * @file Double Sided Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function setVisibilityTrue(m) { m.visible = true; }
function setVisibilityFalse(m) { m.visible = false; }
/**
 * A double-sided mesh buffer. Takes a buffer and renders the front and
 * the back as seperate objects to avoid some artifacts when rendering
 * transparent meshes. Also allows to render the back of a mesh opaque
 * while the front is transparent.
 * @implements {Buffer}
 *
 * @example
 * var sphereGeometryBuffer = new SphereGeometryBuffer({
 *   position: new Float32Array([ 0, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   radius: new Float32Array([ 1 ])
 * });
 * var doubleSidedBuffer = new DoubleSidedBuffer(sphereGeometryBuffer);
 */
class DoubleSidedBuffer {
    /**
     * Create a double sided buffer
     * @param  {Buffer} buffer - the buffer to be rendered double-sided
     */
    constructor(buffer) {
        this.group = new Group();
        this.wireframeGroup = new Group();
        this.pickingGroup = new Group();
        this.frontMeshes = [];
        this.backMeshes = [];
        this.size = buffer.size;
        this.side = buffer.parameters.side;
        this.visible = buffer.visible;
        this.geometry = buffer.geometry;
        this.picking = buffer.picking;
        this.group = new Group();
        this.wireframeGroup = new Group();
        this.pickingGroup = new Group();
        // requires Group objects to be present
        this.matrix = buffer.matrix;
        const frontBuffer = buffer;
        const backBuffer = new buffer.constructor({
            position: new Float32Array(0)
        });
        frontBuffer.makeMaterial();
        backBuffer.makeMaterial();
        backBuffer.picking = buffer.picking;
        backBuffer.geometry = buffer.geometry;
        backBuffer.wireframeGeometry = buffer.wireframeGeometry;
        backBuffer.setParameters(buffer.getParameters());
        backBuffer.updateShader();
        frontBuffer.setParameters({
            side: 'front'
        });
        backBuffer.setParameters({
            side: 'back',
            opacity: backBuffer.parameters.opacity
        });
        this.buffer = buffer;
        this.frontBuffer = frontBuffer;
        this.backBuffer = backBuffer;
    }
    set matrix(m) {
        Buffer$1.prototype.setMatrix.call(this, m);
    }
    get matrix() {
        return this.group.matrix.clone();
    }
    get pickable() {
        return !!this.picking && !this.parameters.disablePicking;
    }
    get parameters() {
        return this.buffer.parameters;
    }
    getParameters() {
        const p = Object.assign({}, this.buffer.parameters);
        p.side = this.side;
        return p;
    }
    getMesh(picking) {
        let front, back;
        if (picking) {
            back = this.backBuffer.getPickingMesh();
            front = this.frontBuffer.getPickingMesh();
        }
        else {
            back = this.backBuffer.getMesh();
            front = this.frontBuffer.getMesh();
        }
        this.frontMeshes.push(front);
        this.backMeshes.push(back);
        this.setParameters({ side: this.side });
        return new Group().add(back, front);
    }
    getWireframeMesh() {
        return this.buffer.getWireframeMesh();
    }
    getPickingMesh() {
        return this.getMesh(true);
    }
    setAttributes(data) {
        this.buffer.setAttributes(data);
    }
    setParameters(data) {
        data = Object.assign({}, data);
        if (data.side === 'front') {
            this.frontMeshes.forEach(setVisibilityTrue);
            this.backMeshes.forEach(setVisibilityFalse);
        }
        else if (data.side === 'back') {
            this.frontMeshes.forEach(setVisibilityFalse);
            this.backMeshes.forEach(setVisibilityTrue);
        }
        else if (data.side === 'double') {
            this.frontMeshes.forEach(setVisibilityTrue);
            this.backMeshes.forEach(setVisibilityTrue);
        }
        if (data.side !== undefined) {
            this.side = data.side;
        }
        delete data.side;
        if (data.matrix !== undefined) {
            this.matrix = data.matrix;
        }
        delete data.matrix;
        this.frontBuffer.setParameters(data);
        if (data.wireframe !== undefined) {
            this.wireframe = data.wireframe;
            this.setVisibility(this.visible);
        }
        delete data.wireframe;
        this.backBuffer.setParameters(data);
    }
    setVisibility(value) {
        this.visible = value;
        if (this.parameters.wireframe) {
            this.group.visible = false;
            this.wireframeGroup.visible = value;
            if (this.pickable) {
                this.pickingGroup.visible = false;
            }
        }
        else {
            this.group.visible = value;
            this.wireframeGroup.visible = false;
            if (this.pickable) {
                this.pickingGroup.visible = value;
            }
        }
    }
    dispose() {
        this.frontBuffer.dispose();
        this.backBuffer.dispose();
    }
    /**
     * Customize JSON serialization to avoid circular references.
     * Only export simple params which could be useful.
     */
    toJSON() {
        var result = {};
        for (var x in this) {
            if (['side', 'size', 'visible', 'matrix', 'parameters'].includes(x)) {
                result[x] = this[x];
            }
        }
        return result;
    }
}

ShaderRegistry.add('shader/Line.vert', "uniform float clipNear;\nuniform vec3 clipCenter;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include color_pars_vertex\nvoid main(){\n#include color_vertex\n#include begin_vertex\n#include project_vertex\nvViewPosition = -mvPosition.xyz;\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

ShaderRegistry.add('shader/Line.frag', "uniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\ngl_FragColor = vec4( vColor, opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n}");

/**
 * @file Contour Buffer
 * @author Fred ludlow <fred.ludlow@gmail.com>
 * @private
 */
/**
 * Contour buffer. A buffer that draws lines (instead of triangle meshes).
 */
class ContourBuffer extends Buffer$1 {
    constructor() {
        super(...arguments);
        this.isLine = true;
        this.vertexShader = 'Line.vert';
        this.fragmentShader = 'Line.frag';
    }
}

/**
 * @file Surface Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Surface representation
 */
/**
   * Create Surface representation object
   * @param {Surface|Volume} surface - the surface or volume to be represented
   * @param {Viewer} viewer - a viewer object
   * @param {SurfaceRepresentationParameters} params - surface representation parameters
   */
class SurfaceRepresentation extends Representation {
    constructor(surface, viewer, params) {
        super(surface, viewer, params);
        this.type = 'surface';
        this.parameters = Object.assign({
            isolevelType: {
                type: 'select',
                options: {
                    'value': 'value', 'sigma': 'sigma'
                }
            },
            isolevel: {
                type: 'number', precision: 2, max: 1000, min: -1000
            },
            negateIsolevel: {
                type: 'boolean'
            },
            isolevelScroll: {
                type: 'boolean'
            },
            smooth: {
                type: 'integer', precision: 1, max: 10, min: 0
            },
            background: {
                type: 'boolean', rebuild: true // FIXME
            },
            opaqueBack: {
                type: 'boolean', buffer: true
            },
            boxSize: {
                type: 'integer', precision: 1, max: 100, min: 0
            },
            colorVolume: {
                type: 'hidden'
            },
            contour: {
                type: 'boolean', rebuild: true
            },
            useWorker: {
                type: 'boolean', rebuild: true
            },
            wrap: {
                type: 'boolean', rebuild: true
            }
        }, this.parameters);
        if (surface instanceof Volume) {
            this.surface = undefined;
            this.volume = surface;
        }
        else {
            this.surface = surface;
            this.volume = undefined;
        }
        this.boxCenter = new Vector3();
        this.__boxCenter = new Vector3();
        this.box = new Box3();
        this.__box = new Box3();
        this._position = new Vector3();
        this.inverseMatrix = new Matrix4();
        this.setBox = function setBox() {
            this._position.copy(viewer.translationGroup.position).negate();
            this._position.applyMatrix4(this.inverseMatrix);
            if (!this._position.equals(this.boxCenter)) {
                this.setParameters({ 'boxCenter': this._position });
            }
        };
        this.toBePrepared = true;
        this.viewer.signals.ticked.add(this.setBox, this);
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'uniform');
        p.colorValue = defaults(p.colorValue, 0xDDDDDD);
        this.isolevelType = defaults(p.isolevelType, 'sigma');
        this.isolevel = defaults(p.isolevel, 2.0);
        this.negateIsolevel = defaults(p.negateIsolevel, false);
        this.isolevelScroll = defaults(p.isolevelScroll, false);
        this.smooth = defaults(p.smooth, 0);
        this.background = defaults(p.background, false);
        this.opaqueBack = defaults(p.opaqueBack, true);
        this.boxSize = defaults(p.boxSize, 0);
        this.colorVolume = defaults(p.colorVolume, undefined);
        this.contour = defaults(p.contour, false);
        this.useWorker = defaults(p.useWorker, true);
        this.wrap = defaults(p.wrap, false);
        super.init(p);
        this.inverseMatrix.copy(this.matrix).invert();
        this.build();
    }
    attach(callback) {
        this.bufferList.forEach(buffer => {
            this.viewer.add(buffer);
        });
        this.setVisibility(this.visible);
        callback();
    }
    prepare(callback) {
        if (this.volume) {
            let isolevel;
            if (this.isolevelType === 'sigma') {
                isolevel = this.volume.getValueForSigma(this.isolevel);
            }
            else {
                isolevel = this.isolevel;
            }
            if (this.negateIsolevel)
                isolevel *= -1;
            if (!this.surface ||
                this.__isolevel !== isolevel ||
                this.__smooth !== this.smooth ||
                this.__contour !== this.contour ||
                this.__wrap !== this.wrap ||
                this.__boxSize !== this.boxSize ||
                (this.boxSize > 0 &&
                    !this.__boxCenter.equals(this.boxCenter))) {
                this.__isolevel = isolevel;
                this.__smooth = this.smooth;
                this.__contour = this.contour;
                this.__wrap = this.wrap;
                this.__boxSize = this.boxSize;
                this.__boxCenter.copy(this.boxCenter);
                this.__box.copy(this.box);
                const onSurfaceFinish = (surface) => {
                    this.surface = surface;
                    callback();
                };
                if (this.useWorker) {
                    this.volume.getSurfaceWorker(isolevel, this.smooth, this.boxCenter, this.boxSize, this.contour, this.wrap, onSurfaceFinish);
                }
                else {
                    onSurfaceFinish(this.volume.getSurface(isolevel, this.smooth, this.boxCenter, this.boxSize, this.contour, this.wrap));
                }
            }
            else {
                callback();
            }
        }
        else {
            callback();
        }
    }
    create() {
        const sd = {
            position: this.surface.getPosition(),
            color: this.surface.getColor(this.getColorParams()),
            index: this.surface.getIndex()
        };
        let buffer;
        if (this.contour) {
            buffer = new ContourBuffer(sd, this.getBufferParams({ wireframe: false }));
        }
        else {
            Object.assign(sd, {
                normal: this.surface.getNormal(),
                picking: this.surface.getPicking()
            });
            const surfaceBuffer = new SurfaceBuffer(sd, this.getBufferParams({
                background: this.background,
                opaqueBack: this.opaqueBack,
                dullInterior: false
            }));
            buffer = new DoubleSidedBuffer(surfaceBuffer);
        }
        this.bufferList.push(buffer);
    }
    update(what) {
        if (this.bufferList.length === 0)
            return;
        what = what || {};
        const surfaceData = {};
        if (what.position) {
            surfaceData.position = this.surface.getPosition();
        }
        if (what.color) {
            surfaceData.color = this.surface.getColor(this.getColorParams());
        }
        if (what.index) {
            surfaceData.index = this.surface.getIndex();
        }
        if (what.normal) {
            surfaceData.normal = this.surface.getNormal();
        }
        this.bufferList.forEach(function (buffer) {
            buffer.setAttributes(surfaceData);
        });
    }
    /**
     * Set representation parameters
     * @alias SurfaceRepresentation#setParameters
     * @param {SurfaceRepresentationParameters} params - surface parameter object
     * @param {Object} [what] - buffer data attributes to be updated,
     *                        note that this needs to be implemented in the
     *                        derived classes. Generally it allows more
     *                        fine-grained control over updating than
     *                        forcing a rebuild.
     * @param {Boolean} what.position - update position data
     * @param {Boolean} what.color - update color data
     * @param {Boolean} [rebuild] - whether or not to rebuild the representation
     * @return {SurfaceRepresentation} this object
     */
    setParameters(params, what, rebuild) {
        if (params && params.isolevelType !== undefined &&
            this.volume) {
            if (this.isolevelType === 'value' &&
                params.isolevelType === 'sigma') {
                this.isolevel = this.volume.getSigmaForValue(this.isolevel);
            }
            else if (this.isolevelType === 'sigma' &&
                params.isolevelType === 'value') {
                this.isolevel = this.volume.getValueForSigma(this.isolevel);
            }
            this.isolevelType = params.isolevelType;
        }
        if (params && params.boxCenter) {
            this.boxCenter.copy(params.boxCenter);
            delete params.boxCenter;
        }
        // Forbid wireframe && contour as in molsurface
        if (params && params.wireframe && (params.contour || (params.contour === undefined && this.contour))) {
            params.wireframe = false;
        }
        super.setParameters(params, what, rebuild);
        if (params.matrix) {
            this.inverseMatrix.copy(params.matrix).invert();
        }
        if (this.volume) {
            this.volume.getBox(this.boxCenter, this.boxSize, this.box);
        }
        if (params && params.colorVolume !== undefined) {
            if (what)
                what.color = true;
        }
        if (this.surface && (params.isolevel !== undefined ||
            params.negateIsolevel !== undefined ||
            params.smooth !== undefined ||
            params.wrap !== undefined ||
            params.boxSize !== undefined ||
            (this.boxSize > 0 &&
                !this.__box.equals(this.box)))) {
            this.build({
                'position': true,
                'color': true,
                'index': true,
                'normal': !this.contour
            });
        }
        return this;
    }
    getColorParams() {
        const p = super.getColorParams();
        p.volume = this.colorVolume;
        return p;
    }
    dispose() {
        this.viewer.signals.ticked.remove(this.setBox, this);
        super.dispose();
    }
}

/**
 * @file Mouse Actions
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Mouse actions provided as static methods
 */
class MouseActions {
    /**
     * Zoom scene based on scroll-delta
     * @param {Stage} stage - the stage
     * @param {Number} delta - amount to zoom
     * @return {undefined}
     */
    static zoomScroll(stage, delta) {
        stage.trackballControls.zoom(delta);
    }
    /**
     * Move near clipping plane based on scroll-delta
     * @param {Stage} stage - the stage
     * @param {Number} delta - amount to move clipping plane
     * @return {undefined}
     */
    static clipNearScroll(stage, delta) {
        const sp = stage.getParameters();
        stage.setParameters({ clipNear: sp.clipNear + delta / 10 });
    }
    /**
     * Move clipping planes based on scroll-delta.
     * @param {Stage} stage - the stage
     * @param {Number} delta - direction to move planes
     * @return {undefined}
     */
    static focusScroll(stage, delta) {
        const focus = stage.getFocus();
        const sign = Math.sign(delta);
        const step = sign * almostIdentity((100 - focus) / 10, 5, 0.2);
        stage.setFocus(focus + step);
    }
    /**
     * Zoom scene based on scroll-delta and
     * move focus planes based on camera position (zoom)
     * @param {Stage} stage - the stage
     * @param {Number} delta - amount to move focus planes and zoom
     * @return {undefined}
     */
    static zoomFocusScroll(stage, delta) {
        stage.trackballControls.zoom(delta);
        const z = stage.viewer.camera.position.z;
        stage.setFocus(100 - Math.abs(z / 8));
    }
    /**
     * Change isolevel of volume surfaces based on scroll-delta
     * @param {Stage} stage - the stage
     * @param {Number} delta - amount to change isolevel
     * @return {undefined}
     */
    static isolevelScroll(stage, delta) {
        const d = Math.sign(delta) / 10;
        stage.eachRepresentation((reprElem, comp) => {
            if (reprElem.repr instanceof SurfaceRepresentation) {
                const p = reprElem.getParameters(); // TODO
                if (p.isolevelScroll) {
                    reprElem.setParameters({ isolevel: p.isolevel + d });
                }
            }
        });
    }
    /**
     * Pan scene based on mouse coordinate changes
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to pan in x direction
     * @param {Number} dy - amount to pan in y direction
     * @return {undefined}
     */
    static panDrag(stage, dx, dy) {
        stage.trackballControls.pan(dx, dy);
    }
    /**
     * Rotate scene based on mouse coordinate changes
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to rotate in x direction
     * @param {Number} dy - amount to rotate in y direction
     * @return {undefined}
     */
    static rotateDrag(stage, dx, dy) {
        stage.trackballControls.rotate(dx, dy);
    }
    /**
     * Rotate scene around z axis based on mouse coordinate changes
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to rotate in x direction
     * @param {Number} dy - amount to rotate in y direction
     * @return {undefined}
     */
    static zRotateDrag(stage, dx, dy) {
        stage.trackballControls.zRotate(dx, dy);
    }
    /**
     * Zoom scene based on mouse coordinate changes
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to zoom
     * @param {Number} dy - amount to zoom
     * @return {undefined}
     */
    static zoomDrag(stage, dx, dy) {
        stage.trackballControls.zoom((dx + dy) / -2);
    }
    /**
     * Zoom scene based on mouse coordinate changes and
     * move focus planes based on camera position (zoom)
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to zoom and focus
     * @param {Number} dy - amount to zoom and focus
     * @return {undefined}
     */
    static zoomFocusDrag(stage, dx, dy) {
        stage.trackballControls.zoom((dx + dy) / -2);
        const z = stage.viewer.camera.position.z;
        stage.setFocus(100 - Math.abs(z / 8));
    }
    /**
     * Pan picked component based on mouse coordinate changes
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to pan in x direction
     * @param {Number} dy - amount to pan in y direction
     * @return {undefined}
     */
    static panComponentDrag(stage, dx, dy) {
        stage.trackballControls.panComponent(dx, dy);
    }
    /**
     * Pan picked atom based on mouse coordinate changes
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to pan in x direction
     * @param {Number} dy - amount to pan in y direction
     * @return {undefined}
     */
    static panAtomDrag(stage, dx, dy) {
        stage.trackballControls.panAtom(dx, dy);
    }
    /**
     * Rotate picked component based on mouse coordinate changes
     * @param {Stage} stage - the stage
     * @param {Number} dx - amount to rotate in x direction
     * @param {Number} dy - amount to rotate in y direction
     * @return {undefined}
     */
    static rotateComponentDrag(stage, dx, dy) {
        stage.trackballControls.rotateComponent(dx, dy);
    }
    /**
     * Move picked element to the center of the screen
     * @param {Stage} stage - the stage
     * @param {PickingProxy} pickingProxy - the picking data object
     * @return {undefined}
     */
    static movePick(stage, pickingProxy) {
        if (pickingProxy) {
            stage.animationControls.move(pickingProxy.position.clone());
        }
    }
    /**
     * Show tooltip with information of picked element
     * @param {Stage} stage - the stage
     * @param {PickingProxy} pickingProxy - the picking data object
     * @return {undefined}
     */
    static tooltipPick(stage, pickingProxy) {
        const tt = stage.tooltip;
        const sp = stage.getParameters();
        if (sp.tooltip && pickingProxy) {
            const mp = pickingProxy.mouse.position;
            tt.innerText = pickingProxy.getLabel();
            tt.style.bottom = (window.innerHeight - mp.y + 3) + 'px';
            tt.style.left = (mp.x + 3) + 'px';
            tt.style.display = 'block';
        }
        else {
            tt.style.display = 'none';
        }
    }
    static measurePick(stage, pickingProxy) {
        if (pickingProxy && (pickingProxy.atom || pickingProxy.bond)) {
            const atom = pickingProxy.atom || pickingProxy.closestBondAtom;
            const sc = pickingProxy.component;
            sc.measurePick(atom);
        }
        else {
            stage.measureClear();
        }
    }
}
const MouseActionPresets = {
    default: [
        ['scroll', MouseActions.zoomScroll],
        ['scroll-shift', MouseActions.focusScroll],
        ['scroll-ctrl', MouseActions.isolevelScroll],
        ['scroll-shift-ctrl', MouseActions.zoomFocusScroll],
        ['drag-left', MouseActions.rotateDrag],
        ['drag-right', MouseActions.panDrag],
        ['drag-ctrl-left', MouseActions.panDrag],
        ['drag-ctrl-right', MouseActions.zRotateDrag],
        ['drag-shift-left', MouseActions.zoomDrag],
        ['drag-middle', MouseActions.zoomFocusDrag],
        ['drag-ctrl-shift-right', MouseActions.panComponentDrag],
        ['drag-ctrl-shift-left', MouseActions.rotateComponentDrag],
        ['clickPick-right', MouseActions.measurePick],
        ['clickPick-ctrl-left', MouseActions.measurePick],
        ['clickPick-middle', MouseActions.movePick],
        ['clickPick-left', MouseActions.movePick],
        ['hoverPick', MouseActions.tooltipPick]
    ],
    pymol: [
        ['drag-left', MouseActions.rotateDrag],
        ['drag-middle', MouseActions.panDrag],
        ['drag-right', MouseActions.zoomDrag],
        ['scroll', MouseActions.focusScroll],
        ['drag-shift-right', MouseActions.focusScroll],
        ['clickPick-ctrl+shift-middle', MouseActions.movePick],
        ['hoverPick', MouseActions.tooltipPick]
    ],
    coot: [
        ['scroll', MouseActions.isolevelScroll],
        ['drag-left', MouseActions.rotateDrag],
        ['drag-middle', MouseActions.panDrag],
        ['drag-ctrl-left', MouseActions.panDrag],
        ['drag-right', MouseActions.zoomFocusDrag],
        ['drag-ctrl-right', MouseActions.focusScroll],
        ['clickPick-middle', MouseActions.movePick],
        ['hoverPick', MouseActions.tooltipPick]
    ],
    astexviewer: [
        ['drag-left', MouseActions.rotateDrag],
        ['drag-ctrl-left', MouseActions.panDrag],
        ['drag-shift-left', MouseActions.zoomDrag],
        ['scroll', MouseActions.focusScroll],
        ['clickPick-middle', MouseActions.movePick],
        ['hoverPick', MouseActions.tooltipPick]
    ]
};

/**
 * @file Mouse Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Strings to describe mouse events (including optional keyboard modifiers).
 * Must contain an event type: "scroll", "drag", "click", "doubleClick",
 * "hover", "clickPick" or "hoverPick". Optionally contain one or more
 * (seperated by plus signs) keyboard modifiers: "alt", "ctrl", "meta" or
 * "shift". Can contain the mouse button performing the event: "left",
 * "middle" or "right". The type, key and button parts must be seperated by
 * dashes.
 *
 * @example
 * // triggered on scroll event (no key or button)
 * "scroll"
 *
 * @example
 * // triggered on scroll event while shift key is pressed
 * "scroll-shift"
 *
 * @example
 * // triggered on drag event with left mouse button
 * "drag-left"
 *
 * @example
 * // triggered on drag event with right mouse button
 * // while ctrl and shift keys are pressed
 * "drag-right-ctrl+shift"
 *
 * @typedef {String} TriggerString
 */
/**
 * Get event type, key and button
 * @param  {TriggerString} str - input trigger string
 * @return {Array} event type, key and button
 */
function triggerFromString(str) {
    const tokens = str.split(/[-+]/);
    let type = '';
    if (tokens.includes('scroll'))
        type = 'scroll';
    if (tokens.includes('drag'))
        type = 'drag';
    if (tokens.includes('click'))
        type = 'click';
    if (tokens.includes('doubleClick'))
        type = 'doubleClick';
    if (tokens.includes('hover'))
        type = 'hover';
    if (tokens.includes('clickPick'))
        type = 'clickPick';
    if (tokens.includes('hoverPick'))
        type = 'hoverPick';
    let key = 0;
    if (tokens.includes('alt'))
        key += 1;
    if (tokens.includes('ctrl'))
        key += 2;
    if (tokens.includes('meta'))
        key += 4;
    if (tokens.includes('shift'))
        key += 8;
    let button = 0;
    if (tokens.includes('left'))
        button += 1;
    if (tokens.includes('right'))
        button += 2;
    if (tokens.includes('middle'))
        button += 4;
    return [type, key, button];
}
/**
 * Mouse controls
 */
class MouseControls {
    /**
     * @param {Stage} stage - the stage object
     * @param {Object} [params] - the parameters
     * @param {String} params.preset - one of "default", "pymol", "coot"
     * @param {String} params.disabled - flag to disable all actions
     */
    constructor(stage, params = {}) {
        this.stage = stage;
        this.actionList = [];
        this.mouse = stage.mouseObserver;
        this.disabled = params.disabled || false;
        this.preset(params.preset || 'default');
    }
    run(type, ...args) {
        if (this.disabled)
            return;
        const key = this.mouse.key || 0;
        const button = this.mouse.buttons || 0;
        this.actionList.forEach(a => {
            if (a.type === type && a.key === key && a.button === button) {
                a.callback(this.stage, ...args); // TODO
            }
        });
    }
    /**
     * Add a new mouse action triggered by an event, key and button combination.
     * The {@link MouseActions} class provides a number of static methods for
     * use as callback functions.
     *
     * @example
     * // change ambient light intensity on mouse scroll
     * // while the ctrl and shift keys are pressed
     * stage.mouseControls.add( "scroll-ctrl+shift", function( stage, delta ){
     *     var ai = stage.getParameters().ambientIntensity;
     *     stage.setParameters( { ambientIntensity: Math.max( 0, ai + delta / 50 ) } );
     * } );
     *
     * @example
     * // Call the MouseActions.zoomDrag method on mouse drag events
     * // with left and right mouse buttons simultaneous
     * stage.mouseControls.add( "drag-left+right", MouseActions.zoomDrag );
     *
     * @param {TriggerString} triggerStr - the trigger for the action
     * @param {function(stage: Stage, ...args: Any)} callback - the callback function for the action
     * @return {undefined}
     */
    add(triggerStr, callback) {
        const [type, key, button] = triggerFromString(triggerStr);
        this.actionList.push({ type, key, button, callback });
    }
    /**
     * Remove a mouse action. The trigger string can contain an asterix (*)
     * as a wildcard for any key or mouse button. When the callback function
     * is given, only actions that call that function are removed.
     *
     * @example
     * // remove actions triggered solely by a scroll event
     * stage.mouseControls.remove( "scroll" );
     *
     * @example
     * // remove actions triggered by a scroll event, including
     * // those requiring a key pressed or mouse button used
     * stage.mouseControls.remove( "scroll-*" );
     *
     * @example
     * // remove actions triggered by a scroll event
     * // while the shift key is pressed
     * stage.mouseControls.remove( "scroll-shift" );
     *
     * @param {TriggerString} triggerStr - the trigger for the action
     * @param {Function} [callback] - the callback function for the action
     * @return {undefined}
     */
    remove(triggerStr, callback) {
        const wildcard = triggerStr.includes('*');
        const [type, key, button] = triggerFromString(triggerStr);
        const actionList = this.actionList.filter(function (a) {
            return !((a.type === type || (wildcard && type === '')) &&
                (a.key === key || (wildcard && key === 0)) &&
                (a.button === button || (wildcard && button === 0)) &&
                (a.callback === callback || callback === undefined));
        });
        this.actionList = actionList;
    }
    /**
     * Set mouse action preset
     * @param  {String} name - one of "default", "pymol", "coot"
     * @return {undefined}
     */
    preset(name) {
        this.clear();
        const list = MouseActionPresets[name] || [];
        list.forEach(action => this.add(action[0], action[1]));
    }
    /**
     * Remove all mouse actions
     * @return {undefined}
     */
    clear() {
        this.actionList.length = 0;
    }
}

/**
 * @file Key Actions
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Key actions provided as static methods
 */
class KeyActions {
    /**
     * Stage auto view
     */
    static autoView(stage) {
        stage.autoView(1000);
    }
    /**
     * Toggle stage animations
     */
    static toggleAnimations(stage) {
        stage.animationControls.toggle();
    }
    /**
     * Toggle stage rocking
     */
    static toggleRock(stage) {
        stage.toggleRock();
    }
    /**
     * Toggle stage spinning
     */
    static toggleSpin(stage) {
        stage.toggleSpin();
    }
    /**
     * Toggle anti-aliasing
     */
    static toggleAntialiasing(stage) {
        const p = stage.getParameters();
        stage.setParameters({ sampleLevel: p.sampleLevel === -1 ? 0 : -1 });
    }
}
const KeyActionPresets = {
    default: [
        ['i', KeyActions.toggleSpin],
        ['k', KeyActions.toggleRock],
        ['p', KeyActions.toggleAnimations],
        ['a', KeyActions.toggleAntialiasing],
        ['r', KeyActions.autoView]
    ]
};

/**
 * @file Key Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Mouse controls
 */
class KeyControls {
    /**
     * @param {Stage} stage - the stage object
     * @param {Object} [params] - the parameters
     * @param {String} params.preset - one of "default"
     * @param {String} params.disabled - flag to disable all actions
     */
    constructor(stage, params = {}) {
        this.stage = stage;
        this.actionList = [];
        this.disabled = params.disabled || false;
        this.preset(params.preset || 'default');
    }
    run(key) {
        if (this.disabled)
            return;
        this.actionList.forEach(a => {
            if (a.key === key) {
                a.callback(this.stage);
            }
        });
    }
    /**
     * Add a key action triggered by pressing the given character.
     * The {@link KeyActions} class provides a number of static methods for
     * use as callback functions.
     *
     * @example
     * // call KeyActions.toggleRock when "k" is pressed
     * stage.keyControls.remove( "k", KeyActions.toggleRock );
     *
     * @param {Char} char - the key/character
     * @param {Function} callback - the callback function for the action
     * @return {undefined}
     */
    add(char, callback) {
        this.actionList.push({ key: char, callback });
    }
    /**
     * Remove a key action. When the callback function
     * is given, only actions that call that function are removed.
     *
     * @example
     * // remove all actions triggered by pressing "k"
     * stage.keyControls.remove( "k" );
     *
     * @example
     * // remove action `toggleRock` triggered by pressing "k"
     * stage.keyControls.remove( "k", toggleRock );
     *
     * @param {Char} char - the key/character
     * @param {Function} [callback] - the callback function for the action
     * @return {undefined}
     */
    remove(char, callback) {
        const actionList = this.actionList.filter(function (a) {
            return !((a.key === char) &&
                (a.callback === callback || callback === undefined));
        });
        this.actionList = actionList;
    }
    /**
     * Set key action preset
     * @param  {String} name - one of "default"
     * @return {undefined}
     */
    preset(name) {
        this.clear();
        const list = KeyActionPresets[name] || [];
        list.forEach(action => this.add(action[0], action[1]));
    }
    /**
     * Remove all key actions
     * @return {undefined}
     */
    clear() {
        this.actionList.length = 0;
    }
}

/**
 * @file Picking Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class PickingBehavior {
    constructor(stage) {
        this.stage = stage;
        this.stage = stage;
        this.mouse = stage.mouseObserver;
        this.controls = stage.mouseControls;
        this.mouse.signals.clicked.add(this._onClick, this);
        this.mouse.signals.hovered.add(this._onHover, this);
    }
    _onClick(x, y) {
        const pickingProxy = this.stage.pickingControls.pick(x, y);
        this.stage.signals.clicked.dispatch(pickingProxy);
        this.controls.run('clickPick', pickingProxy);
    }
    _onHover(x, y) {
        const pickingProxy = this.stage.pickingControls.pick(x, y);
        if (pickingProxy && this.mouse.down.equals(this.mouse.position)) {
            this.stage.transformComponent = pickingProxy.component;
            this.stage.transformAtom = pickingProxy.atom;
        }
        this.stage.signals.hovered.dispatch(pickingProxy);
        this.controls.run('hoverPick', pickingProxy);
    }
    dispose() {
        this.mouse.signals.clicked.remove(this._onClick, this);
        this.mouse.signals.hovered.remove(this._onHover, this);
    }
}

/**
 * @file Mouse Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class MouseBehavior {
    constructor(stage) {
        this.stage = stage;
        this.stage = stage;
        this.mouse = stage.mouseObserver;
        this.controls = stage.mouseControls;
        this.mouse.signals.moved.add(this._onMove, this);
        this.mouse.signals.scrolled.add(this._onScroll, this);
        this.mouse.signals.dragged.add(this._onDrag, this);
        this.mouse.signals.clicked.add(this._onClick, this);
        this.mouse.signals.hovered.add(this._onHover, this);
        this.mouse.signals.doubleClicked.add(this._onDblclick, this);
    }
    _onMove( /* x, y */) {
        this.stage.tooltip.style.display = 'none';
    }
    _onScroll(delta) {
        this.controls.run('scroll', delta);
    }
    _onDrag(dx, dy) {
        this.controls.run('drag', dx, dy);
    }
    _onClick(x, y) {
        this.controls.run('click', x, y);
    }
    _onDblclick(x, y) {
        this.controls.run('doubleClick', x, y);
    }
    _onHover(x, y) {
        this.controls.run('hover', x, y);
    }
    dispose() {
        this.mouse.signals.moved.remove(this._onMove, this);
        this.mouse.signals.scrolled.remove(this._onScroll, this);
        this.mouse.signals.dragged.remove(this._onDrag, this);
        this.mouse.signals.clicked.remove(this._onClick, this);
        this.mouse.signals.hovered.remove(this._onHover, this);
    }
}

/**
 * @file Animation Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class AnimationBehavior {
    constructor(stage) {
        this.stage = stage;
        this.viewer = stage.viewer;
        this.animationControls = stage.animationControls;
        this.viewer.signals.ticked.add(this._onTick, this);
    }
    _onTick(stats) {
        this.animationControls.run(stats);
    }
    dispose() {
        this.viewer.signals.ticked.remove(this._onTick, this);
    }
}

/**
 * @file Key Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const passive = SupportsPassiveEventHandler ? { passive: true } : false;
class KeyBehavior {
    /**
     * @param {Stage} stage - the stage object
     */
    constructor(stage) {
        this.stage = stage;
        this.stage = stage;
        this.controls = stage.keyControls;
        this.domElement = stage.viewer.renderer.domElement;
        // ensure the domElement is focusable
        this.domElement.setAttribute('tabIndex', '-1');
        this.domElement.style.outline = 'none';
        this._focusDomElement = this._focusDomElement.bind(this);
        this._onKeydown = this._onKeydown.bind(this);
        this._onKeyup = this._onKeyup.bind(this);
        this._onKeypress = this._onKeypress.bind(this);
        this.domElement.addEventListener('mousedown', this._focusDomElement);
        this.domElement.addEventListener('touchstart', this._focusDomElement, passive); // TODO
        this.domElement.addEventListener('keydown', this._onKeydown);
        this.domElement.addEventListener('keyup', this._onKeyup);
        this.domElement.addEventListener('keypress', this._onKeypress);
    }
    /**
     * handle key down
     * @param  {Event} event - key event
     * @return {undefined}
     */
    _onKeydown( /* event */) {
        // console.log( "down", event.keyCode, String.fromCharCode( event.keyCode ) );
    }
    /**
     * handle key up
     * @param  {Event} event - key event
     * @return {undefined}
     */
    _onKeyup( /* event */) {
        // console.log( "up", event.keyCode, String.fromCharCode( event.keyCode ) );
    }
    /**
     * handle key press
     * @param  {Event} event - key event
     * @return {undefined}
     */
    _onKeypress(event) {
        // console.log( "press", event.keyCode, String.fromCharCode( event.keyCode ) );
        let pressedKey;
        if ("key" in KeyboardEvent.prototype) {
            pressedKey = event.key;
            // some mobile browsers don't support this attribute
        }
        else {
            pressedKey = String.fromCharCode(event.which || event.keyCode);
        }
        this.controls.run(pressedKey);
    }
    _focusDomElement() {
        this.domElement.focus();
    }
    dispose() {
        this.domElement.removeEventListener('mousedown', this._focusDomElement);
        this.domElement.removeEventListener('touchstart', this._focusDomElement, passive); // TODO
        this.domElement.removeEventListener('keydown', this._onKeypress);
        this.domElement.removeEventListener('keyup', this._onKeypress);
        this.domElement.removeEventListener('keypress', this._onKeypress);
    }
}

/**
 * @file Annotation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Annotation HTML element floating on top of a position rendered in 3d
 */
class Annotation {
    /**
     * @param {Component} component - the associated component
     * @param {Vector3} position - position in 3d
     * @param {String|Element} content - HTML content
     * @param {Object} [params] - parameters
     * @param {Integer} params.offsetX - 2d offset in x direction
     * @param {Integer} params.offsetY - 2d offset in y direction
     * @param {Boolean} params.visible - visibility flag
     */
    constructor(component, position, content, params = {}) {
        this.component = component;
        this.position = position;
        this.offsetX = defaults(params.offsetX, 0);
        this.offsetY = defaults(params.offsetY, 0);
        this.visible = defaults(params.visible, true);
        this.stage = component.stage;
        this.viewer = component.stage.viewer;
        this._viewerPosition = new Vector3();
        this._updateViewerPosition();
        this._canvasPosition = new Vector2();
        this._cameraPosition = new Vector3();
        this.element = document.createElement('div');
        Object.assign(this.element.style, {
            display: 'block',
            position: 'absolute',
            pointerEvents: 'none',
            whiteSpace: 'nowrap',
            left: '-10000px'
        });
        this.viewer.wrapper.appendChild(this.element);
        this.setContent(content);
        this.updateVisibility();
        this.viewer.signals.rendered.add(this._update, this);
        this.component.signals.matrixChanged.add(this._updateViewerPosition, this);
    }
    /**
     * Set HTML content of the annotation
     * @param {String|Element} value - HTML content
     * @return {undefined}
     */
    setContent(value) {
        const displayValue = this.element.style.display;
        if (displayValue === 'none') {
            this.element.style.left = '-10000px';
            this.element.style.display = 'block';
        }
        if (value instanceof HTMLElement) {
            this.element.appendChild(value);
        }
        else {
            const content = document.createElement('div');
            content.innerText = value;
            Object.assign(content.style, {
                backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
                color: 'lightgrey',
                padding: '8px',
                fontFamily: 'sans-serif',
            });
            this.element.appendChild(content);
        }
        this._clientRect = this.element.getBoundingClientRect();
        if (displayValue === 'none') {
            this.element.style.display = displayValue;
        }
    }
    /**
     * Set visibility of the annotation
     * @param {Boolean} value - visibility flag
     * @return {undefined}
     */
    setVisibility(value) {
        this.visible = value;
        this.updateVisibility();
    }
    getVisibility() {
        return this.visible && this.component.parameters.visible;
    }
    updateVisibility() {
        this.element.style.display = this.getVisibility() ? 'block' : 'none';
    }
    _updateViewerPosition() {
        this._viewerPosition
            .copy(this.position)
            .applyMatrix4(this.component.matrix);
    }
    _update() {
        if (!this.getVisibility())
            return;
        const s = this.element.style;
        const cp = this._canvasPosition;
        const vp = this._viewerPosition;
        const cr = this._clientRect;
        this._cameraPosition.copy(vp)
            .add(this.viewer.translationGroup.position)
            .applyMatrix4(this.viewer.rotationGroup.matrix)
            .sub(this.viewer.camera.position);
        if (this._cameraPosition.z < 0) {
            s.display = 'none';
            return;
        }
        else {
            s.display = 'block';
        }
        const depth = this._cameraPosition.length();
        const fog = this.viewer.scene.fog; // TODO
        s.opacity = (1 - smoothstep(fog.near, fog.far, depth)).toString();
        s.zIndex = (Math.round((fog.far - depth) * 100)).toString();
        this.stage.viewerControls.getPositionOnCanvas(vp, cp);
        s.bottom = (this.offsetX + cp.y + cr.height / 2) + 'px';
        s.left = (this.offsetY + cp.x - cr.width / 2) + 'px';
    }
    /**
     * Safely remove the annotation
     * @return {undefined}
     */
    dispose() {
        this.viewer.wrapper.removeChild(this.element);
        this.viewer.signals.ticked.remove(this._update, this);
        this.component.signals.matrixChanged.remove(this._updateViewerPosition, this);
    }
}

/**
 * @file Component Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const tmpRotateMatrix = new Matrix4();
const tmpRotateVector = new Vector3();
const tmpRotateQuaternion = new Quaternion();
/**
 * Component controls
 */
class ComponentControls {
    /**
     * @param  {Component} component - the component object
     */
    constructor(component) {
        this.component = component;
        this.signals = {
            changed: new signalsWrapper.Signal()
        };
        this.stage = component.stage;
        this.viewer = component.stage.viewer;
    }
    /**
     * component center position
     * @type {Vector3}
     */
    get position() {
        return this.component.position;
    }
    /**
     * component rotation
     * @type {Quaternion}
     */
    get rotation() {
        return this.component.quaternion;
    }
    /**
     * Trigger render and emit changed event
     * @emits {ComponentControls.signals.changed}
     * @return {undefined}
     */
    changed() {
        this.component.updateMatrix();
        this.viewer.requestRender();
        this.signals.changed.dispatch();
    }
    /**
     * spin component on axis
     * @param  {Vector3|Array} axis - rotation axis
     * @param  {Number} angle - amount to spin
     * @return {undefined}
     */
    spin(axis, angle) {
        tmpRotateMatrix.copy(this.viewer.rotationGroup.matrix).invert();
        tmpRotateVector
            .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix);
        tmpRotateMatrix.extractRotation(this.component.transform);
        tmpRotateMatrix.premultiply(this.viewer.rotationGroup.matrix);
        tmpRotateMatrix.invert();
        tmpRotateVector.copy(ensureVector3(axis));
        tmpRotateVector.applyMatrix4(tmpRotateMatrix);
        tmpRotateMatrix.makeRotationAxis(tmpRotateVector, angle);
        tmpRotateQuaternion.setFromRotationMatrix(tmpRotateMatrix);
        this.component.quaternion.premultiply(tmpRotateQuaternion);
        this.changed();
    }
}

/**
 * @file Radius Factory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const RadiusFactoryTypes = {
    '': '',
    'vdw': 'by vdW radius',
    'covalent': 'by covalent radius',
    'sstruc': 'by secondary structure',
    'bfactor': 'by bfactor',
    'size': 'size',
    'data': 'data',
    'explicit': 'explicit'
};
class RadiusFactory {
    constructor(params = {}) {
        this.max = 10;
        this.type = defaults(params.type, 'size');
        this.scale = defaults(params.scale, 1);
        this.size = defaults(params.size, 1);
        this.data = defaults(params.data, {});
    }
    atomRadius(a) {
        let r;
        switch (this.type) {
            case 'vdw':
                r = a.vdw;
                break;
            case 'covalent':
                r = a.covalent;
                break;
            case 'bfactor':
                r = a.bfactor || 1.0;
                break;
            case 'sstruc':
                const sstruc = a.sstruc;
                if (sstruc === 'h') {
                    r = 0.25;
                }
                else if (sstruc === 'g') {
                    r = 0.25;
                }
                else if (sstruc === 'i') {
                    r = 0.25;
                }
                else if (sstruc === 'e') {
                    r = 0.25;
                }
                else if (sstruc === 'b') {
                    r = 0.25;
                }
                else if (NucleicBackboneAtoms.includes(a.atomname)) {
                    r = 0.4;
                }
                else {
                    r = 0.1;
                }
                break;
            case 'data':
                r = defaults(this.data[a.index], 1.0);
                break;
            case 'explicit':
                // defaults is inappropriate as AtomProxy.radius returns
                // null for missing radii
                r = a.radius;
                if (r === null)
                    r = this.size;
                break;
            default:
                r = this.size;
                break;
        }
        return Math.min(r * this.scale, this.max);
    }
}
RadiusFactory.types = RadiusFactoryTypes;

/**
 * @file Principal Axes
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const negateVector = new Vector3(-1, -1, -1);
const tmpMatrix = new Matrix4();
/**
 * Principal axes
 */
class PrincipalAxes {
    /**
     * @param  {Matrix} points - 3 by N matrix
     */
    constructor(points) {
        // console.time( "PrincipalAxes" );
        const n = points.rows;
        const n3 = n / 3;
        const pointsT = new Matrix$2(n, 3);
        const A = new Matrix$2(3, 3);
        const W = new Matrix$2(1, 3);
        const U = new Matrix$2(3, 3);
        const V = new Matrix$2(3, 3);
        // calculate
        const mean = meanRows(points);
        subRows(points, mean);
        transpose(pointsT, points);
        multiplyABt(A, pointsT, pointsT);
        svd(A, W, U, V);
        // console.log( points, pointsT, mean )
        // console.log( n, A, W, U, V );
        // center
        const vm = new Vector3(mean[0], mean[1], mean[2]);
        // normalized
        const van = new Vector3(U.data[0], U.data[3], U.data[6]);
        const vbn = new Vector3(U.data[1], U.data[4], U.data[7]);
        const vcn = new Vector3(U.data[2], U.data[5], U.data[8]);
        // scaled
        const va = van.clone().multiplyScalar(Math.sqrt(W.data[0] / n3));
        const vb = vbn.clone().multiplyScalar(Math.sqrt(W.data[1] / n3));
        const vc = vcn.clone().multiplyScalar(Math.sqrt(W.data[2] / n3));
        // points
        this.begA = vm.clone().sub(va);
        this.endA = vm.clone().add(va);
        this.begB = vm.clone().sub(vb);
        this.endB = vm.clone().add(vb);
        this.begC = vm.clone().sub(vc);
        this.endC = vm.clone().add(vc);
        //
        this.center = vm;
        this.vecA = va;
        this.vecB = vb;
        this.vecC = vc;
        this.normVecA = van;
        this.normVecB = vbn;
        this.normVecC = vcn;
        // console.timeEnd( "PrincipalAxes" );
    }
    /**
     * Get the basis matrix descriping the axes
     * @param  {Matrix4} [optionalTarget] - target object
     * @return {Matrix4} the basis
     */
    getBasisMatrix(optionalTarget = new Matrix4()) {
        const basis = optionalTarget;
        basis.makeBasis(this.normVecB, this.normVecA, this.normVecC);
        if (basis.determinant() < 0) {
            basis.scale(negateVector);
        }
        return basis;
    }
    /**
     * Get a quaternion descriping the axes rotation
     * @param  {Quaternion} [optionalTarget] - target object
     * @return {Quaternion} the rotation
     */
    getRotationQuaternion(optionalTarget = new Quaternion()) {
        const q = optionalTarget;
        q.setFromRotationMatrix(this.getBasisMatrix(tmpMatrix));
        return q.invert();
    }
    /**
     * Get the scale/length for each dimension for a box around the axes
     * to enclose the atoms of a structure
     * @param  {Structure|StructureView} structure - the structure
     * @return {{d1a: Number, d2a: Number, d3a: Number, d1b: Number, d2b: Number, d3b: Number}} scale
     */
    getProjectedScaleForAtoms(structure) {
        let d1a = -Infinity;
        let d1b = -Infinity;
        let d2a = -Infinity;
        let d2b = -Infinity;
        let d3a = -Infinity;
        let d3b = -Infinity;
        const p = new Vector3();
        const t = new Vector3();
        const center = this.center;
        const ax1 = this.normVecA;
        const ax2 = this.normVecB;
        const ax3 = this.normVecC;
        structure.eachAtom(function (ap) {
            projectPointOnVector(p.copy(ap), ax1, center); // TODO
            const dp1 = t.subVectors(p, center).normalize().dot(ax1);
            const dt1 = p.distanceTo(center);
            if (dp1 > 0) {
                if (dt1 > d1a)
                    d1a = dt1;
            }
            else {
                if (dt1 > d1b)
                    d1b = dt1;
            }
            projectPointOnVector(p.copy(ap), ax2, center);
            const dp2 = t.subVectors(p, center).normalize().dot(ax2);
            const dt2 = p.distanceTo(center);
            if (dp2 > 0) {
                if (dt2 > d2a)
                    d2a = dt2;
            }
            else {
                if (dt2 > d2b)
                    d2b = dt2;
            }
            projectPointOnVector(p.copy(ap), ax3, center);
            const dp3 = t.subVectors(p, center).normalize().dot(ax3);
            const dt3 = p.distanceTo(center);
            if (dp3 > 0) {
                if (dt3 > d3a)
                    d3a = dt3;
            }
            else {
                if (dt3 > d3b)
                    d3b = dt3;
            }
        });
        return {
            d1a: d1a,
            d2a: d2a,
            d3a: d3a,
            d1b: -d1b,
            d2b: -d2b,
            d3b: -d3b
        };
    }
}

/**
 * @file Filtered Volume
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class FilteredVolume {
    constructor(volume, minValue, maxValue, outside) {
        this.volume = volume;
        this.setFilter(minValue, maxValue, outside);
    }
    get header() { return this.volume.header; }
    get matrix() { return this.volume.matrix; }
    get normalMatrix() { return this.volume.normalMatrix; }
    get inverseMatrix() { return this.volume.inverseMatrix; }
    get center() { return this.volume.center; }
    get boundingBox() { return this.volume.boundingBox; }
    get min() { return this.volume.min; }
    get max() { return this.volume.max; }
    get mean() { return this.volume.mean; }
    get rms() { return this.volume.rms; }
    _getFilterHash(minValue, maxValue, outside) {
        return JSON.stringify([minValue, maxValue, outside]);
    }
    setFilter(minValue, maxValue, outside) {
        if (isNaN(minValue) && this.header) {
            minValue = this.header.DMEAN + 2.0 * this.header.ARMS;
        }
        minValue = (minValue !== undefined && !isNaN(minValue)) ? minValue : -Infinity;
        maxValue = defaults(maxValue, Infinity);
        outside = defaults(outside, false);
        const data = this.volume.data;
        const position = this.volume.position;
        const atomindex = this.volume.atomindex;
        const filterHash = this._getFilterHash(minValue, maxValue, outside);
        if (filterHash === this._filterHash) {
            // already filtered
            return;
        }
        else if (minValue === -Infinity && maxValue === Infinity) {
            this.data = data;
            this.position = position;
            this.atomindex = atomindex;
        }
        else {
            const n = data.length;
            if (!this._dataBuffer) {
                // ArrayBuffer for re-use as Float32Array backend
                this._dataBuffer = new ArrayBuffer(n * 4);
                this._positionBuffer = new ArrayBuffer(n * 3 * 4);
                if (atomindex)
                    this._atomindexBuffer = new ArrayBuffer(n * 4);
            }
            const filteredData = new Float32Array(this._dataBuffer);
            const filteredPosition = new Float32Array(this._positionBuffer);
            let filteredAtomindex;
            if (atomindex)
                filteredAtomindex = new Uint32Array(this._atomindexBuffer);
            let j = 0;
            for (let i = 0; i < n; ++i) {
                const i3 = i * 3;
                const v = data[i];
                if ((!outside && v >= minValue && v <= maxValue) ||
                    (outside && (v < minValue || v > maxValue))) {
                    const j3 = j * 3;
                    filteredData[j] = v;
                    filteredPosition[j3 + 0] = position[i3 + 0];
                    filteredPosition[j3 + 1] = position[i3 + 1];
                    filteredPosition[j3 + 2] = position[i3 + 2];
                    if (atomindex && filteredAtomindex)
                        filteredAtomindex[j] = atomindex[i];
                    j += 1;
                }
            }
            // set views
            this.data = new Float32Array(this._dataBuffer, 0, j);
            this.position = new Float32Array(this._positionBuffer, 0, j * 3);
            if (atomindex)
                this.atomindex = new Int32Array(this._atomindexBuffer, 0, j);
        }
        this._filterHash = filterHash;
    }
}
FilteredVolume.prototype.getValueForSigma = Volume.prototype.getValueForSigma;
FilteredVolume.prototype.getSigmaForValue = Volume.prototype.getSigmaForValue;
FilteredVolume.prototype.getDataAtomindex = Volume.prototype.getDataAtomindex;
FilteredVolume.prototype.getDataPosition = Volume.prototype.getDataPosition;
FilteredVolume.prototype.getDataColor = Volume.prototype.getDataColor;
FilteredVolume.prototype.getDataPicking = Volume.prototype.getDataPicking;
FilteredVolume.prototype.getDataSize = Volume.prototype.getDataSize;

/**
 * @file Bond Hash
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class BondHash {
    constructor(bondStore, atomCount) {
        const al = createAdjacencyList({
            nodeArray1: bondStore.atomIndex1,
            nodeArray2: bondStore.atomIndex2,
            edgeCount: bondStore.count,
            nodeCount: atomCount
        });
        this.countArray = al.countArray;
        this.offsetArray = al.offsetArray;
        this.indexArray = al.indexArray;
    }
}

/**
 * @file Bond Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Bond store
 */
class BondStore extends Store {
    get _defaultFields() {
        return [
            ['atomIndex1', 1, 'int32'],
            ['atomIndex2', 1, 'int32'],
            ['bondOrder', 1, 'int8']
        ];
    }
    addBond(atom1, atom2, bondOrder) {
        this.growIfFull();
        const i = this.count;
        const ai1 = atom1.index;
        const ai2 = atom2.index;
        if (ai1 < ai2) {
            this.atomIndex1[i] = ai1;
            this.atomIndex2[i] = ai2;
        }
        else {
            this.atomIndex2[i] = ai1;
            this.atomIndex1[i] = ai2;
        }
        if (bondOrder)
            this.bondOrder[i] = bondOrder;
        this.count += 1;
    }
    addBondIfConnected(atom1, atom2, bondOrder) {
        if (atom1.connectedTo(atom2)) {
            this.addBond(atom1, atom2, bondOrder);
            return true;
        }
        return false;
    }
}

/**
 * @file Atom Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Atom store
 */
class AtomStore extends Store {
    get _defaultFields() {
        return [
            ['residueIndex', 1, 'uint32'],
            ['atomTypeId', 1, 'uint16'],
            ['x', 1, 'float32'],
            ['y', 1, 'float32'],
            ['z', 1, 'float32'],
            ['serial', 1, 'int32'],
            ['bfactor', 1, 'float32'],
            ['altloc', 1, 'uint8'],
            ['occupancy', 1, 'float32']
        ];
    }
    setAltloc(i, str) {
        this.altloc[i] = str.charCodeAt(0);
    }
    getAltloc(i) {
        const code = this.altloc[i];
        return code ? String.fromCharCode(code) : '';
    }
}

/**
 * @file Residue Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Residue store
 */
class ResidueStore extends Store {
    get _defaultFields() {
        return [
            ['chainIndex', 1, 'uint32'],
            ['atomOffset', 1, 'uint32'],
            ['atomCount', 1, 'uint32'],
            ['residueTypeId', 1, 'uint16'],
            ['resno', 1, 'int32'],
            ['sstruc', 1, 'uint8'],
            ['inscode', 1, 'uint8']
        ];
    }
    setSstruc(i, str) {
        this.sstruc[i] = str.charCodeAt(0);
    }
    getSstruc(i) {
        const code = this.sstruc[i];
        return code ? String.fromCharCode(code) : '';
    }
    setInscode(i, str) {
        this.inscode[i] = str.charCodeAt(0);
    }
    getInscode(i) {
        const code = this.inscode[i];
        return code ? String.fromCharCode(code) : '';
    }
}

/**
 * @file Chain Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Chain store
 */
class ChainStore extends Store {
    get _defaultFields() {
        return [
            ['entityIndex', 1, 'uint16'],
            ['modelIndex', 1, 'uint16'],
            ['residueOffset', 1, 'uint32'],
            ['residueCount', 1, 'uint32'],
            ['chainname', 4, 'uint8'],
            ['chainid', 4, 'uint8']
        ];
    }
    setChainname(i, str) {
        const j = 4 * i;
        this.chainname[j] = str.charCodeAt(0);
        this.chainname[j + 1] = str.charCodeAt(1);
        this.chainname[j + 2] = str.charCodeAt(2);
        this.chainname[j + 3] = str.charCodeAt(3);
    }
    getChainname(i) {
        let chainname = '';
        for (let k = 0; k < 4; ++k) {
            const code = this.chainname[4 * i + k];
            if (code) {
                chainname += String.fromCharCode(code);
            }
            else {
                break;
            }
        }
        return chainname;
    }
    setChainid(i, str) {
        const j = 4 * i;
        this.chainid[j] = str.charCodeAt(0);
        this.chainid[j + 1] = str.charCodeAt(1);
        this.chainid[j + 2] = str.charCodeAt(2);
        this.chainid[j + 3] = str.charCodeAt(3);
    }
    getChainid(i) {
        let chainid = '';
        for (let k = 0; k < 4; ++k) {
            const code = this.chainid[4 * i + k];
            if (code) {
                chainid += String.fromCharCode(code);
            }
            else {
                break;
            }
        }
        return chainid;
    }
}

/**
 * @file Model Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Model store
 */
class ModelStore extends Store {
    get _defaultFields() {
        return [
            ['chainOffset', 1, 'uint32'],
            ['chainCount', 1, 'uint32']
        ];
    }
}

/**
 * @file Helixorient
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Helixorient {
    constructor(polymer) {
        this.polymer = polymer;
        this.size = polymer.residueCount;
    }
    getCenterIterator(smooth = 0) {
        const center = this.getPosition().center;
        const size = center.length / 3;
        let i = 0;
        let j = -1;
        const cache = [
            new Vector3(),
            new Vector3(),
            new Vector3(),
            new Vector3()
        ];
        function next() {
            const vector = this.get(j);
            j += 1;
            return vector;
        }
        function get(idx) {
            idx = Math.min(size - 1, Math.max(0, idx));
            const v = cache[i % 4];
            const idx3 = 3 * idx;
            v.fromArray(center, idx3); // TODO
            if (smooth) {
                const w = Math.min(smooth, idx, size - idx - 1);
                for (let k = 1; k <= w; ++k) {
                    const l = k * 3;
                    const t = (w + 1 - k) / (w + 1);
                    v.x += t * center[idx3 - l + 0] + t * center[idx3 + l + 0];
                    v.y += t * center[idx3 - l + 1] + t * center[idx3 + l + 1];
                    v.z += t * center[idx3 - l + 2] + t * center[idx3 + l + 2];
                }
                v.x /= w + 1;
                v.y /= w + 1;
                v.z /= w + 1;
            }
            i += 1;
            return v;
        }
        function reset() {
            i = 0;
            j = -1;
        }
        return { size, next, get, reset };
    }
    getColor(params) {
        const polymer = this.polymer;
        const structure = polymer.structure;
        const n = polymer.residueCount;
        const residueIndexStart = polymer.residueIndexStart;
        const col = new Float32Array(n * 3);
        const p = params || {};
        p.structure = structure;
        const colormaker = ColormakerRegistry.getScheme(p);
        const rp = structure.getResidueProxy();
        const ap = structure.getAtomProxy();
        for (let i = 0; i < n; ++i) {
            rp.index = residueIndexStart + i;
            ap.index = rp.traceAtomIndex;
            colormaker.atomColorToArray(ap, col, i * 3);
        }
        return {
            'color': col
        };
    }
    getPicking() {
        const polymer = this.polymer;
        const structure = polymer.structure;
        const n = polymer.residueCount;
        const residueIndexStart = polymer.residueIndexStart;
        const pick = new Float32Array(n);
        const rp = structure.getResidueProxy();
        for (let i = 0; i < n; ++i) {
            rp.index = residueIndexStart + i;
            pick[i] = rp.traceAtomIndex;
        }
        return {
            'picking': new AtomPicker(pick, structure)
        };
    }
    getSize(params) {
        const polymer = this.polymer;
        const structure = polymer.structure;
        const n = polymer.residueCount;
        const residueIndexStart = polymer.residueIndexStart;
        const size = new Float32Array(n);
        const radiusFactory = new RadiusFactory(params);
        const rp = structure.getResidueProxy();
        const ap = structure.getAtomProxy();
        for (let i = 0; i < n; ++i) {
            rp.index = residueIndexStart + i;
            ap.index = rp.traceAtomIndex;
            size[i] = radiusFactory.atomRadius(ap);
        }
        return { size };
    }
    getPosition() {
        const polymer = this.polymer;
        const structure = polymer.structure;
        const n = polymer.residueCount;
        const n3 = n - 3;
        const center = new Float32Array(3 * n);
        const axis = new Float32Array(3 * n);
        const diff = new Float32Array(n);
        const radius = new Float32Array(n);
        const rise = new Float32Array(n);
        const twist = new Float32Array(n);
        const resdir = new Float32Array(3 * n);
        const r12 = new Vector3();
        const r23 = new Vector3();
        const r34 = new Vector3();
        const diff13 = new Vector3();
        const diff24 = new Vector3();
        const v1 = new Vector3();
        const v2 = new Vector3();
        const vt = new Vector3();
        const _axis = new Vector3();
        const _prevAxis = new Vector3();
        const _resdir = new Vector3();
        const _center = new Vector3(0, 0, 0);
        const type = 'trace';
        const a1 = structure.getAtomProxy();
        const a2 = structure.getAtomProxy(polymer.getAtomIndexByType(0, type));
        const a3 = structure.getAtomProxy(polymer.getAtomIndexByType(1, type));
        const a4 = structure.getAtomProxy(polymer.getAtomIndexByType(2, type));
        for (let i = 0; i < n3; ++i) {
            a1.index = a2.index;
            a2.index = a3.index;
            a3.index = a4.index;
            a4.index = polymer.getAtomIndexByType(i + 3, type); // TODO
            const j = 3 * i;
            // ported from GROMACS src/tools/gmx_helixorient.c
            r12.subVectors(a2, a1); // TODO
            r23.subVectors(a3, a2); // TODO
            r34.subVectors(a4, a3); // TODO
            diff13.subVectors(r12, r23);
            diff24.subVectors(r23, r34);
            _axis.crossVectors(diff13, diff24).normalize();
            _axis.toArray(axis, j); // TODO
            if (i > 0) {
                diff[i] = _axis.angleTo(_prevAxis);
            }
            const tmp = Math.cos(diff13.angleTo(diff24));
            twist[i] = 180.0 / Math.PI * Math.acos(tmp);
            const diff13Length = diff13.length();
            const diff24Length = diff24.length();
            radius[i] = (Math.sqrt(diff24Length * diff13Length) /
                // clamp, to avoid instabilities for when
                // angle between diff13 and diff24 is near 0
                Math.max(2.0, 2.0 * (1.0 - tmp)));
            rise[i] = Math.abs(r23.dot(_axis));
            //
            v1.copy(diff13).multiplyScalar(radius[i] / diff13Length);
            v2.copy(diff24).multiplyScalar(radius[i] / diff24Length);
            v1.subVectors(a2, v1); // TODO
            v2.subVectors(a3, v2); // TODO
            v1.toArray(center, j + 3); // TODO
            v2.toArray(center, j + 6); // TODO
            //
            _resdir.subVectors(a1, _center); // TODO
            _resdir.toArray(resdir, j); // TODO
            _prevAxis.copy(_axis);
            _center.copy(v1);
        }
        //
        // calc axis as dir of second and third center pos
        // project first traceAtom onto axis to get first center pos
        v1.fromArray(center, 3); // TODO
        v2.fromArray(center, 6); // TODO
        _axis.subVectors(v1, v2).normalize();
        // _center.copy( res[ 0 ].getTraceAtom() );
        a1.index = polymer.getAtomIndexByType(0, type); // TODO
        _center.copy(a1); // TODO
        vt.copy(a1); // TODO
        projectPointOnVector(vt, _axis, v1);
        vt.toArray(center, 0); // TODO
        // calc first resdir
        _resdir.subVectors(_center, v1);
        _resdir.toArray(resdir, 0); // TODO
        // calc axis as dir of n-1 and n-2 center pos
        // project last traceAtom onto axis to get last center pos
        v1.fromArray(center, 3 * n - 6); // TODO
        v2.fromArray(center, 3 * n - 9); // TODO
        _axis.subVectors(v1, v2).normalize();
        // _center.copy( res[ n - 1 ].getTraceAtom() );
        a1.index = polymer.getAtomIndexByType(n - 1, type); // TODO
        _center.copy(a1); // TODO
        vt.copy(a1); // TODO
        projectPointOnVector(vt, _axis, v1);
        vt.toArray(center, 3 * n - 3); // TODO
        // calc last three resdir
        for (let i = n - 3; i < n; ++i) {
            v1.fromArray(center, 3 * i); // TODO
            // _center.copy( res[ i ].getTraceAtom() );
            a1.index = polymer.getAtomIndexByType(i, type); // TODO
            _center.copy(a1); // TODO
            _resdir.subVectors(_center, v1);
            _resdir.toArray(resdir, 3 * i); // TODO
        }
        // average measures to define them on the residues
        const resRadius = new Float32Array(n);
        const resTwist = new Float32Array(n);
        const resRise = new Float32Array(n);
        const resBending = new Float32Array(n);
        resRadius[1] = radius[0];
        resTwist[1] = twist[0];
        resRise[1] = radius[0];
        for (let i = 2; i < n - 2; ++i) {
            resRadius[i] = 0.5 * (radius[i - 2] + radius[i - 1]);
            resTwist[i] = 0.5 * (twist[i - 2] + twist[i - 1]);
            resRise[i] = 0.5 * (rise[i - 2] + rise[i - 1]);
            v1.fromArray(axis, 3 * (i - 2)); // TODO
            v2.fromArray(axis, 3 * (i - 1)); // TODO
            resBending[i] = 180.0 / Math.PI * Math.acos(Math.cos(v1.angleTo(v2)));
        }
        resRadius[n - 2] = radius[n - 4];
        resTwist[n - 2] = twist[n - 4];
        resRise[n - 2] = rise[n - 4];
        // average helix axes to define them on the residues
        const resAxis = new Float32Array(3 * n);
        copyArray(axis, resAxis, 0, 0, 3);
        copyArray(axis, resAxis, 0, 3, 3);
        for (let i = 2; i < n - 2; ++i) {
            v1.fromArray(axis, 3 * (i - 2)); // TODO
            v2.fromArray(axis, 3 * (i - 1)); // TODO
            _axis.addVectors(v2, v1).multiplyScalar(0.5).normalize();
            _axis.toArray(resAxis, 3 * i); // TODO
        }
        copyArray(axis, resAxis, 3 * n - 12, 3 * n - 6, 3);
        copyArray(axis, resAxis, 3 * n - 12, 3 * n - 3, 3);
        return {
            center,
            axis: resAxis,
            bending: resBending,
            radius: resRadius,
            rise: resRise,
            twist: resTwist,
            resdir: resdir
        };
    }
}

/**
 * @file Helixbundle
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Helixbundle {
    constructor(polymer) {
        this.polymer = polymer;
        this.helixorient = new Helixorient(polymer);
        this.position = this.helixorient.getPosition();
    }
    getAxis(localAngle, centerDist, ssBorder, colorParams, radiusParams) {
        localAngle = localAngle || 30;
        centerDist = centerDist || 2.5;
        ssBorder = ssBorder === undefined ? false : ssBorder;
        const polymer = this.polymer;
        const structure = polymer.structure;
        const n = polymer.residueCount;
        const residueIndexStart = polymer.residueIndexStart;
        const pos = this.position;
        const cp = colorParams || {};
        cp.structure = structure;
        const colormaker = ColormakerRegistry.getScheme(cp);
        const radiusFactory = new RadiusFactory(radiusParams);
        let j = 0;
        let k = 0;
        const axis = [];
        const center = [];
        const beg = [];
        const end = [];
        const col = [];
        const pick = [];
        const size = [];
        const residueOffset = [];
        const residueCount = [];
        let tmpAxis = new Float32Array(n * 3);
        let tmpCenter = new Float32Array(n * 3);
        let _axis, _center;
        const _beg = new Vector3();
        const _end = new Vector3();
        const rp1 = structure.getResidueProxy();
        const rp2 = structure.getResidueProxy();
        const ap = structure.getAtomProxy();
        const c1 = new Vector3();
        const c2 = new Vector3();
        let split = false;
        for (let i = 0; i < n; ++i) {
            rp1.index = residueIndexStart + i;
            c1.fromArray(pos.center, i * 3);
            if (i === n - 1) {
                split = true;
            }
            else {
                rp2.index = residueIndexStart + i + 1;
                c2.fromArray(pos.center, i * 3 + 3);
                if (ssBorder && rp1.sstruc !== rp2.sstruc) {
                    split = true;
                }
                else if (c1.distanceTo(c2) > centerDist) {
                    split = true;
                }
                else if (pos.bending[i] > localAngle) {
                    split = true;
                }
            }
            if (split) {
                if (i - j < 4) {
                    j = i;
                    split = false;
                    continue;
                }
                ap.index = rp1.traceAtomIndex;
                // ignore first and last axis
                tmpAxis = pos.axis.subarray(j * 3 + 3, i * 3);
                tmpCenter = pos.center.subarray(j * 3, i * 3 + 3);
                _axis = calculateMeanVector3(tmpAxis).normalize();
                _center = calculateMeanVector3(tmpCenter);
                _beg.fromArray(tmpCenter);
                projectPointOnVector(_beg, _axis, _center);
                _end.fromArray(tmpCenter, tmpCenter.length - 3);
                projectPointOnVector(_end, _axis, _center);
                _axis.subVectors(_end, _beg);
                _axis.toArray(axis, k);
                _center.toArray(center, k);
                _beg.toArray(beg, k);
                _end.toArray(end, k);
                colormaker.atomColorToArray(ap, col, k);
                pick.push(ap.index);
                size.push(radiusFactory.atomRadius(ap));
                residueOffset.push(residueIndexStart + j);
                residueCount.push(residueIndexStart + i + 1 - j);
                k += 3;
                j = i;
                split = false;
            }
        }
        const picking = new Float32Array(pick);
        return {
            axis: new Float32Array(axis),
            center: new Float32Array(center),
            begin: new Float32Array(beg),
            end: new Float32Array(end),
            color: new Float32Array(col),
            picking: new AtomPicker(picking, structure),
            size: new Float32Array(size),
            residueOffset: residueOffset,
            residueCount: residueCount
        };
    }
}

/**
 * @file Binary Heap
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Binary heap implementation
 * @class
 * @author http://eloquentjavascript.net/appendix2.htm
 * @param {Function} scoreFunction - the heap scoring function
 */
class BinaryHeap {
    constructor(scoreFunction) {
        this.scoreFunction = scoreFunction;
        this.content = [];
        this.scoreFunction = scoreFunction;
    }
    push(element) {
        // Add the new element to the end of the array.
        this.content.push(element);
        // Allow it to bubble up.
        this.bubbleUp(this.content.length - 1);
    }
    pop() {
        // Store the first element so we can return it later.
        const result = this.content[0];
        // Get the element at the end of the array.
        const end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it sink down.
        if (end && this.content.length > 0) {
            this.content[0] = end;
            this.sinkDown(0);
        }
        return result;
    }
    peek() {
        return this.content[0];
    }
    remove(element) {
        const len = this.content.length;
        // To remove a value, we must search through the array to find it.
        for (let i = 0; i < len; i++) {
            if (this.content[i] === element) {
                // When it is found, the process seen in 'pop' is repeated
                // to fill up the hole.
                const end = this.content.pop();
                if (end && i !== len - 1) {
                    this.content[i] = end;
                    if (this.scoreFunction(end) < this.scoreFunction(element)) {
                        this.bubbleUp(i);
                    }
                    else {
                        this.sinkDown(i);
                    }
                }
                return;
            }
        }
        throw new Error('Node not found.');
    }
    size() {
        return this.content.length;
    }
    bubbleUp(n) {
        // Fetch the element that has to be moved.
        const element = this.content[n];
        // When at 0, an element can not go up any further.
        while (n > 0) {
            // Compute the parent element's index, and fetch it.
            const parentN = Math.floor((n + 1) / 2) - 1;
            const parent = this.content[parentN];
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            }
            else {
                // Found a parent that is less, no need to move it further.
                break;
            }
        }
    }
    sinkDown(n) {
        // Look up the target element and its score.
        const length = this.content.length;
        const element = this.content[n];
        const elemScore = this.scoreFunction(element);
        let child1Score = 0;
        let child2Score = 0;
        while (true) {
            // Compute the indices of the child elements.
            const child2N = (n + 1) * 2;
            const child1N = child2N - 1;
            // This is used to store the new position of the element, if any.
            let swap = null;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                const child1 = this.content[child1N];
                child1Score = this.scoreFunction(child1);
                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore)
                    swap = child1N;
            }
            // Do the same checks for the other child.
            if (child2N < length) {
                const child2 = this.content[child2N];
                child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score))
                    swap = child2N;
            }
            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            }
            else {
                // Otherwise, we are done.
                break;
            }
        }
    }
}

/**
 * @file Kdtree
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Kdtree
 * @class
 * @author Alexander Rose <alexander.rose@weirdbyte.de>, 2016
 * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013
 * @author I4DS http://www.fhnw.ch/i4ds, 2013
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 * @description
 * k-d Tree for typed arrays of 3d points (e.g. for Float32Array), in-place
 * provides fast nearest neighbour search
 *
 * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs
 *
 * Further information (including mathematical properties)
 * http://en.wikipedia.org/wiki/Binary_tree
 * http://en.wikipedia.org/wiki/K-d_tree
 *
 * @example
 * points: [x, y, z, x, y, z, x, y, z, ...]
 * metric: function(a, b){
 *    return Math.pow(a[0]-b[0], 2) + Math.pow(a[1]-b[1], 2) + Math.pow(a[2]-b[2], 2);
 * }
 *
 * @param {Float32Array} points - points
 * @param {Function} metric - metric
 */
class Kdtree$1 {
    constructor(points, metric) {
        this.points = points;
        this.metric = metric;
        this.maxDepth = 0;
        this.currentNode = 0;
        const n = points.length / 3;
        const indices = new Uint32Array(n);
        for (let i = 0; i < n; ++i) {
            indices[i] = i;
        }
        this.indices = indices;
        this.nodes = new Int32Array(n * 4);
        this.rootIndex = this.buildTree(0, -1, 0, n);
    }
    buildTree(depth, parent, arrBegin, arrEnd) {
        if (depth > this.maxDepth)
            this.maxDepth = depth;
        const plength = arrEnd - arrBegin;
        if (plength === 0) {
            return -1;
        }
        const nodeIndex = this.currentNode * 4;
        const nodes = this.nodes;
        this.currentNode += 1;
        if (plength === 1) {
            nodes[nodeIndex] = arrBegin;
            nodes[nodeIndex + 1] = -1;
            nodes[nodeIndex + 2] = -1;
            nodes[nodeIndex + 3] = parent;
            return nodeIndex;
        }
        // if(plength <= 32){
        //   return nodeIndex;
        // }
        const indices = this.indices;
        const points = this.points;
        const arrMedian = arrBegin + Math.floor(plength / 2);
        const currentDim = depth % 3;
        // inlined quickselect function
        let j, tmp, pivotIndex, pivotValue, storeIndex;
        let left = arrBegin;
        let right = arrEnd - 1;
        while (right > left) {
            pivotIndex = (left + right) >> 1;
            pivotValue = points[indices[pivotIndex] * 3 + currentDim];
            // swap( pivotIndex, right );
            tmp = indices[pivotIndex];
            indices[pivotIndex] = indices[right];
            indices[right] = tmp;
            storeIndex = left;
            for (j = left; j < right; ++j) {
                if (points[indices[j] * 3 + currentDim] < pivotValue) {
                    // swap( storeIndex, j );
                    tmp = indices[storeIndex];
                    indices[storeIndex] = indices[j];
                    indices[j] = tmp;
                    ++storeIndex;
                }
            }
            // swap( right, storeIndex );
            tmp = indices[right];
            indices[right] = indices[storeIndex];
            indices[storeIndex] = tmp;
            pivotIndex = storeIndex;
            if (arrMedian === pivotIndex) {
                break;
            }
            else if (arrMedian < pivotIndex) {
                right = pivotIndex - 1;
            }
            else {
                left = pivotIndex + 1;
            }
        }
        nodes[nodeIndex] = arrMedian;
        nodes[nodeIndex + 1] = this.buildTree(depth + 1, nodeIndex, arrBegin, arrMedian);
        nodes[nodeIndex + 2] = this.buildTree(depth + 1, nodeIndex, arrMedian + 1, arrEnd);
        nodes[nodeIndex + 3] = parent;
        return nodeIndex;
    }
    getNodeDepth(nodeIndex) {
        const parentIndex = this.nodes[nodeIndex + 3];
        return (parentIndex === -1) ? 0 : this.getNodeDepth(parentIndex) + 1;
    }
    // TODO
    // function getNodePos (node) {}
    /**
     * find nearest points
     * @param {Array} point - array of size 3
     * @param {Integer} maxNodes - max amount of nodes to return
     * @param {Float} maxDistance - maximum distance of point to result nodes
     * @return {Array} array of point, distance pairs
     */
    nearest(point, maxNodes, maxDistance) {
        const bestNodes = new BinaryHeap(e => -e[1]);
        const nodes = this.nodes;
        const points = this.points;
        const indices = this.indices;
        const nearestSearch = (nodeIndex) => {
            let bestChild, otherChild;
            const dimension = this.getNodeDepth(nodeIndex) % 3;
            const pointIndex = indices[nodes[nodeIndex]] * 3;
            const ownPoint = [
                points[pointIndex + 0],
                points[pointIndex + 1],
                points[pointIndex + 2]
            ];
            const ownDistance = this.metric(point, ownPoint);
            function saveNode(nodeIndex, distance) {
                bestNodes.push([nodeIndex, distance]);
                if (bestNodes.size() > maxNodes) {
                    bestNodes.pop();
                }
            }
            const leftIndex = nodes[nodeIndex + 1];
            const rightIndex = nodes[nodeIndex + 2];
            // if it's a leaf
            if (rightIndex === -1 && leftIndex === -1) {
                if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&
                    ownDistance <= maxDistance) {
                    saveNode(nodeIndex, ownDistance);
                }
                return;
            }
            if (rightIndex === -1) {
                bestChild = leftIndex;
            }
            else if (leftIndex === -1) {
                bestChild = rightIndex;
            }
            else {
                if (point[dimension] <= points[pointIndex + dimension]) {
                    bestChild = leftIndex;
                }
                else {
                    bestChild = rightIndex;
                }
            }
            // recursive search
            nearestSearch(bestChild);
            if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) &&
                ownDistance <= maxDistance) {
                saveNode(nodeIndex, ownDistance);
            }
            // if there's still room or the current distance is nearer than the best distance
            const linearPoint = [];
            for (let i = 0; i < 3; i += 1) {
                if (i === dimension) {
                    linearPoint[i] = point[i];
                }
                else {
                    linearPoint[i] = points[pointIndex + i];
                }
            }
            const linearDistance = this.metric(linearPoint, ownPoint);
            if ((bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) &&
                Math.abs(linearDistance) <= maxDistance) {
                if (bestChild === leftIndex) {
                    otherChild = rightIndex;
                }
                else {
                    otherChild = leftIndex;
                }
                if (otherChild !== -1) {
                    nearestSearch(otherChild);
                }
            }
        };
        nearestSearch(this.rootIndex);
        const result = [];
        for (let i = 0, il = Math.min(bestNodes.size(), maxNodes); i < il; i += 1) {
            result.push(bestNodes.content[i]);
        }
        return result;
    }
    verify(nodeIndex, depth = 0) {
        let count = 1;
        if (nodeIndex === undefined) {
            nodeIndex = this.rootIndex;
        }
        if (nodeIndex === -1) {
            throw new Error('node is null');
        }
        const dim = depth % 3;
        const nodes = this.nodes;
        const points = this.points;
        const indices = this.indices;
        const leftIndex = nodes[nodeIndex + 1];
        const rightIndex = nodes[nodeIndex + 2];
        if (leftIndex !== -1) {
            if (points[indices[nodes[leftIndex]] * 3 + dim] >
                points[indices[nodes[nodeIndex]] * 3 + dim]) {
                throw new Error('left child is > parent!');
            }
            count += this.verify(leftIndex, depth + 1);
        }
        if (rightIndex !== -1) {
            if (points[indices[nodes[rightIndex]] * 3 + dim] <
                points[indices[nodes[nodeIndex]] * 3 + dim]) {
                throw new Error('right child is < parent!');
            }
            count += this.verify(rightIndex, depth + 1);
        }
        return count;
    }
}

/**
 * @file Atom Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Atom proxy
 */
class AtomProxy {
    /**
     * @param {Structure} structure - the structure
     * @param {Integer} index - the index
     */
    constructor(structure, index = 0) {
        this.structure = structure;
        this.index = index;
        this.chainStore = structure.chainStore;
        this.residueStore = structure.residueStore;
        this.atomStore = structure.atomStore;
        this.residueMap = structure.residueMap;
        this.atomMap = structure.atomMap;
    }
    /**
     * @type {BondHash}
     */
    get bondHash() { return this.structure.bondHash; }
    /**
     * Molecular enity
     * @type {Entity}
     */
    get entity() {
        return this.structure.entityList[this.entityIndex];
    }
    get entityIndex() {
        return this.chainStore.entityIndex[this.chainIndex];
    }
    get modelIndex() {
        return this.chainStore.modelIndex[this.chainIndex];
    }
    get chainIndex() {
        return this.residueStore.chainIndex[this.residueIndex];
    }
    /**
     * @type {ResidueProxy}
     */
    get residue() {
        console.warn('residue - might be expensive');
        return this.structure.getResidueProxy(this.residueIndex);
    }
    get residueIndex() {
        return this.atomStore.residueIndex[this.index];
    }
    set residueIndex(value) {
        this.atomStore.residueIndex[this.index] = value;
    }
    //
    /**
     * Secondary structure code
     * @type {String}
     */
    get sstruc() {
        return this.residueStore.getSstruc(this.residueIndex);
    }
    /**
     * Insertion code
     * @type {String}
     */
    get inscode() {
        return this.residueStore.getInscode(this.residueIndex);
    }
    /**
     * Residue number/label
     * @type {Integer}
     */
    get resno() {
        return this.residueStore.resno[this.residueIndex];
    }
    /**
     * Chain name
     * @type {String}
     */
    get chainname() {
        return this.chainStore.getChainname(this.chainIndex);
    }
    /**
     * Chain id
     * @type {String}
     */
    get chainid() {
        return this.chainStore.getChainid(this.chainIndex);
    }
    //
    /**
     * @type {ResidueType}
     */
    get residueType() {
        return this.residueMap.get(this.residueStore.residueTypeId[this.residueIndex]);
    }
    /**
     * @type {AtomType}
     */
    get atomType() {
        return this.atomMap.get(this.atomStore.atomTypeId[this.index]);
    }
    get residueAtomOffset() {
        return this.residueStore.atomOffset[this.residueIndex];
    }
    //
    /**
     * Residue name
     */
    get resname() {
        return this.residueType.resname;
    }
    /**
     * Hetero flag
     */
    get hetero() {
        return this.residueType.hetero;
    }
    //
    /**
     * Atom name
     */
    get atomname() {
        return this.atomType.atomname;
    }
    /**
     * Atomic number
     */
    get number() {
        return this.atomType.number;
    }
    /**
     * Element
     */
    get element() {
        return this.atomType.element;
    }
    /**
     * Van-der-Waals radius
     */
    get vdw() {
        return this.atomType.vdw;
    }
    /**
     * Covalent radius
     */
    get covalent() {
        return this.atomType.covalent;
    }
    //
    /**
     * X coordinate
     */
    get x() {
        return this.atomStore.x[this.index];
    }
    set x(value) {
        this.atomStore.x[this.index] = value;
    }
    /**
     * Y coordinate
     */
    get y() {
        return this.atomStore.y[this.index];
    }
    set y(value) {
        this.atomStore.y[this.index] = value;
    }
    /**
     * Z coordinate
     */
    get z() {
        return this.atomStore.z[this.index];
    }
    set z(value) {
        this.atomStore.z[this.index] = value;
    }
    /**
     * Serial number
     */
    get serial() {
        return this.atomStore.serial[this.index];
    }
    set serial(value) {
        this.atomStore.serial[this.index] = value;
    }
    /**
     * B-factor value
     */
    get bfactor() {
        return this.atomStore.bfactor[this.index];
    }
    set bfactor(value) {
        this.atomStore.bfactor[this.index] = value;
    }
    /**
     * Occupancy value
     */
    get occupancy() {
        return this.atomStore.occupancy[this.index];
    }
    set occupancy(value) {
        this.atomStore.occupancy[this.index] = value;
    }
    /**
     * Alternate location identifier
     */
    get altloc() {
        return this.atomStore.getAltloc(this.index);
    }
    set altloc(value) {
        this.atomStore.setAltloc(this.index, value);
    }
    /**
     * Partial charge
     */
    get partialCharge() {
        return this.atomStore.partialCharge ? this.atomStore.partialCharge[this.index] : null;
    }
    set partialCharge(value) {
        if (this.atomStore.partialCharge) {
            this.atomStore.partialCharge[this.index] = value;
        }
    }
    /**
     * Explicit radius
     */
    get radius() {
        return this.atomStore.radius ? this.atomStore.radius[this.index] : null;
    }
    set radius(value) {
        if (this.atomStore.radius) {
            this.atomStore.radius[this.index] = value;
        }
    }
    /**
     * Formal charge
     */
    get formalCharge() {
        return this.atomStore.formalCharge ? this.atomStore.formalCharge[this.index] : null;
    }
    set formalCharge(value) {
        if (this.atomStore.formalCharge) {
            this.atomStore.formalCharge[this.index] = value;
        }
    }
    /**
     * Aromaticity flag
     */
    get aromatic() {
        if (this.atomStore.aromatic) {
            return this.atomStore.aromatic[this.index];
        }
        else {
            return this.residueType.isAromatic(this) ? 1 : 0;
        }
    }
    set aromatic(value) {
        if (this.atomStore.aromatic) {
            this.atomStore.aromatic[this.index] = value;
        }
    }
    //
    get bondCount() {
        return this.bondHash.countArray[this.index]; // TODO
    }
    //
    /**
     * Iterate over each bond
     * @param  {function(bond: BondProxy)} callback - iterator callback function
     * @param  {BondProxy} [bp] - optional target bond proxy for use in the callback
     * @return {undefined}
     */
    eachBond(callback, bp) {
        bp = bp || this.structure._bp;
        const idx = this.index;
        const bondHash = this.bondHash; // TODO
        const indexArray = bondHash.indexArray;
        const n = bondHash.countArray[idx];
        const offset = bondHash.offsetArray[idx];
        for (let i = 0; i < n; ++i) {
            bp.index = indexArray[offset + i];
            callback(bp);
        }
    }
    /**
     * Iterate over each bonded atom
     * @param  {function(atom: AtomProxy)} callback - iterator callback function
     * @param  {AtomProxy} [ap] - optional target atom proxy for use in the callback
     * @return {undefined}
     */
    eachBondedAtom(callback, _ap) {
        const ap = _ap ? _ap : this.structure._ap;
        const idx = this.index;
        this.eachBond(function (bp) {
            ap.index = idx !== bp.atomIndex1 ? bp.atomIndex1 : bp.atomIndex2;
            callback(ap);
        });
        this.index = idx;
    }
    /**
     * Check if this atom is bonded to the given atom,
     * assumes both atoms are from the same structure
     * @param  {AtomProxy} ap - the given atom
     * @return {Boolean} whether a bond exists or not
     */
    hasBondTo(ap) {
        let flag = false;
        this.eachBondedAtom(function (bap) {
            if (ap.index === bap.index)
                flag = true;
        });
        return flag;
    }
    bondToElementCount(element) {
        let count = 0;
        const idx = this.index; // Avoid reentrancy problems
        this.eachBondedAtom(function (bap) {
            if (bap.number === element)
                count += 1;
        });
        this.index = idx;
        return count;
    }
    hasBondToElement(element) {
        return this.bondToElementCount(element) > 0;
    }
    //
    /**
     * If atom is part of a backbone
     * @return {Boolean} flag
     */
    isBackbone() {
        const backboneIndexList = this.residueType.backboneIndexList;
        if (backboneIndexList.length > 0) {
            return backboneIndexList.includes(this.index - this.residueAtomOffset);
        }
        else {
            return false;
        }
    }
    /**
     * If atom is part of a polymer
     * @return {Boolean} flag
     */
    isPolymer() {
        if (this.structure.entityList.length > 0) {
            return this.entity.isPolymer();
        }
        else {
            const moleculeType = this.residueType.moleculeType;
            return (moleculeType === ProteinType ||
                moleculeType === RnaType ||
                moleculeType === DnaType);
        }
    }
    /**
     * If atom is part of a sidechin
     * @return {Boolean} flag
     */
    isSidechain() {
        return this.isPolymer() && !this.isBackbone();
    }
    /**
     * If atom is part of a coarse-grain group
     * @return {Boolean} flag
     */
    isCg() {
        const backboneType = this.residueType.backboneType;
        return (backboneType === CgProteinBackboneType ||
            backboneType === CgRnaBackboneType ||
            backboneType === CgDnaBackboneType);
    }
    isTrace() {
        return this.index === (this.residueType.traceAtomIndex + this.residueAtomOffset);
    }
    /**
     * If atom is part of a hetero group
     * @return {Boolean} flag
     */
    isHetero() {
        return this.residueType.hetero === 1;
    }
    /**
     * If atom is part of a protein molecule
     * @return {Boolean} flag
     */
    isProtein() {
        return this.residueType.moleculeType === ProteinType;
    }
    /**
     * If atom is part of a nucleic molecule
     * @return {Boolean} flag
     */
    isNucleic() {
        const moleculeType = this.residueType.moleculeType;
        return moleculeType === RnaType || moleculeType === DnaType;
    }
    /**
     * If atom is part of a rna
     * @return {Boolean} flag
     */
    isRna() {
        return this.residueType.moleculeType === RnaType;
    }
    /**
     * If atom is part of a dna
     * @return {Boolean} flag
     */
    isDna() {
        return this.residueType.moleculeType === DnaType;
    }
    /**
     * If atom is part of a water molecule
     * @return {Boolean} flag
     */
    isWater() {
        return this.residueType.moleculeType === WaterType;
    }
    /**
     * If atom is part of an ion
     * @return {Boolean} flag
     */
    isIon() {
        return this.residueType.moleculeType === IonType;
    }
    /**
     * If atom is part of a saccharide
     * @return {Boolean} flag
     */
    isSaccharide() {
        return this.residueType.moleculeType === SaccharideType;
    }
    /**
     * If atom is part of a helix
     * @return {Boolean} flag
     */
    isHelix() {
        return SecStrucHelix.includes(this.sstruc);
    }
    /**
     * If atom is part of a sheet
     * @return {Boolean} flag
     */
    isSheet() {
        return SecStrucSheet.includes(this.sstruc);
    }
    /**
     * If atom is part of a turn
     * @return {Boolean} flag
     */
    isTurn() {
        return SecStrucTurn.includes(this.sstruc) && this.isProtein();
    }
    isBonded() {
        return this.bondHash.countArray[this.index] !== 0; // TODO
    }
    /**
     * If atom is part of a ring
     * @return {Boolean} flag
     */
    isRing() {
        const atomRings = this.residueType.getRings().atomRings; // TODO
        return atomRings[this.index - this.residueAtomOffset] !== undefined;
    }
    isAromatic() {
        return this.aromatic === 1;
    }
    isPolarHydrogen() {
        let result = false;
        if (this.number !== 1)
            return result;
        result = !this.hasBondToElement(6 /* Elements.C */);
        return result;
    }
    isMetal() { return this.atomType.isMetal(); }
    isNonmetal() { return this.atomType.isNonmetal(); }
    isMetalloid() { return this.atomType.isMetalloid(); }
    isHalogen() { return this.atomType.isHalogen(); }
    isDiatomicNonmetal() { return this.atomType.isDiatomicNonmetal(); }
    isPolyatomicNonmetal() { return this.atomType.isPolyatomicNonmetal(); }
    isAlkaliMetal() { return this.atomType.isAlkaliMetal(); }
    isAlkalineEarthMetal() { return this.atomType.isAlkalineEarthMetal(); }
    isNobleGas() { return this.atomType.isNobleGas(); }
    isTransitionMetal() { return this.atomType.isTransitionMetal(); }
    isPostTransitionMetal() { return this.atomType.isPostTransitionMetal(); }
    isLanthanide() { return this.atomType.isLanthanide(); }
    isActinide() { return this.atomType.isActinide(); }
    getDefaultValence() { return this.atomType.getDefaultValence(); }
    getValenceList() { return this.atomType.getValenceList(); }
    getOuterShellElectronCount() { return this.atomType.getOuterShellElectronCount(); }
    /**
     * Distance to another atom
     * @param  {AtomProxy} atom - the other atom
     * @return {Number} the distance
     */
    distanceTo(atom) {
        const taa = this.atomStore;
        const aaa = atom.atomStore;
        const ti = this.index;
        const ai = atom.index;
        const x = taa.x[ti] - aaa.x[ai];
        const y = taa.y[ti] - aaa.y[ai];
        const z = taa.z[ti] - aaa.z[ai];
        const distSquared = x * x + y * y + z * z;
        return Math.sqrt(distSquared);
    }
    /**
     * If connected to another atom
     * @param  {AtomProxy} atom - the other atom
     * @return {Boolean} flag
     */
    connectedTo(atom) {
        const taa = this.atomStore;
        const aaa = atom.atomStore;
        const ti = this.index;
        const ai = atom.index;
        if (taa.altloc && aaa.altloc) {
            const ta = taa.altloc[ti]; // use Uint8 value to compare
            const aa = aaa.altloc[ai]; // no need to convert to char
            // 0 is the Null character, 32 is the space character
            if (!(ta === 0 || aa === 0 || ta === 32 || aa === 32 || (ta === aa)))
                return false;
        }
        const x = taa.x[ti] - aaa.x[ai];
        const y = taa.y[ti] - aaa.y[ai];
        const z = taa.z[ti] - aaa.z[ai];
        const distSquared = x * x + y * y + z * z;
        // if( this.isCg() ) console.log( this.qualifiedName(), Math.sqrt( distSquared ), distSquared )
        if (distSquared < 48.0 && this.isCg())
            return true;
        if (isNaN(distSquared))
            return false;
        const d = this.covalent + atom.covalent;
        const d1 = d + 0.3;
        const d2 = d - 0.5;
        return distSquared < (d1 * d1) && distSquared > (d2 * d2);
    }
    /**
     * Set atom position from array
     * @param  {Array|TypedArray} array - input array
     * @param  {Integer} [offset] - the offset
     * @return {AtomProxy} this object
     */
    positionFromArray(array, offset = 0) {
        this.x = array[offset + 0];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        return this;
    }
    /**
     * Write atom position to array
     * @param  {Array|TypedArray} [array] - target array
     * @param  {Integer} [offset] - the offset
     * @return {Array|TypedArray} target array
     */
    positionToArray(array = [], offset = 0) {
        const index = this.index;
        const atomStore = this.atomStore;
        array[offset + 0] = atomStore.x[index];
        array[offset + 1] = atomStore.y[index];
        array[offset + 2] = atomStore.z[index];
        return array;
    }
    /**
     * Write atom position to vector
     * @param  {Vector3} [v] - target vector
     * @return {Vector3} target vector
     */
    positionToVector3(v) {
        if (v === undefined)
            v = new Vector3();
        v.x = this.x;
        v.y = this.y;
        v.z = this.z;
        return v;
    }
    /**
     * Set atom position from vector
     * @param  {Vector3} v - input vector
     * @return {AtomProxy} this object
     */
    positionFromVector3(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
    }
    /**
     * Add vector to atom position
     * @param  {Vector3} v - input vector
     * @return {AtomProxy} this object
     */
    positionAdd(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
    }
    /**
     * Subtract vector from atom position
     * @param  {Vector3} v - input vector
     * @return {AtomProxy} this object
     */
    positionSub(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
    }
    /**
     * Get intra group/residue bonds
     * @param  {Boolean} firstOnly - immediately return the first connected atomIndex
     * @return {Integer[]|Integer|undefined} connected atomIndices
     */
    getResidueBonds(firstOnly = false) {
        const residueAtomOffset = this.residueAtomOffset;
        const relativeIndex = this.index - this.residueAtomOffset;
        const bonds = this.residueType.getBonds(); // TODO
        const atomIndices1 = bonds.atomIndices1;
        const atomIndices2 = bonds.atomIndices2;
        let idx1, idx2, connectedAtomIndex;
        let connectedAtomIndices;
        if (!firstOnly)
            connectedAtomIndices = [];
        idx1 = atomIndices1.indexOf(relativeIndex);
        while (idx1 !== -1) {
            connectedAtomIndex = atomIndices2[idx1] + residueAtomOffset;
            if (connectedAtomIndices) {
                connectedAtomIndices.push(connectedAtomIndex);
                idx1 = atomIndices1.indexOf(relativeIndex, idx1 + 1);
            }
            else {
                return connectedAtomIndex;
            }
        }
        idx2 = atomIndices2.indexOf(relativeIndex);
        while (idx2 !== -1) {
            connectedAtomIndex = atomIndices1[idx2] + residueAtomOffset;
            if (connectedAtomIndices) {
                connectedAtomIndices.push(connectedAtomIndex);
                idx2 = atomIndices2.indexOf(relativeIndex, idx2 + 1);
            }
            else {
                return connectedAtomIndex;
            }
        }
        return connectedAtomIndices;
    }
    //
    qualifiedName(noResname = false) {
        var name = '';
        if (this.resname && !noResname)
            name += '[' + this.resname + ']';
        if (this.resno !== undefined)
            name += this.resno;
        if (this.inscode)
            name += '^' + this.inscode;
        if (this.chainname)
            name += ':' + this.chainname;
        if (this.atomname)
            name += '.' + this.atomname;
        if (this.altloc)
            name += '%' + this.altloc;
        if (this.structure.modelStore.count > 1)
            name += '/' + this.modelIndex;
        return name;
    }
    /**
     * Clone object
     * @return {AtomProxy} cloned atom
     */
    clone() {
        return new AtomProxy(this.structure, this.index);
    }
    toObject() {
        return {
            index: this.index,
            residueIndex: this.residueIndex,
            resname: this.resname,
            x: this.x,
            y: this.y,
            z: this.z,
            element: this.element,
            chainname: this.chainname,
            resno: this.resno,
            serial: this.serial,
            vdw: this.vdw,
            covalent: this.covalent,
            hetero: this.hetero,
            bfactor: this.bfactor,
            altloc: this.altloc,
            atomname: this.atomname,
            modelIndex: this.modelIndex
        };
    }
}

/**
 * @file Kdtree
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function euclideanDistSq(a, b) {
    const dx = a[0] - b[0];
    const dy = a[1] - b[1];
    const dz = a[2] - b[2];
    return dx * dx + dy * dy + dz * dz;
}
function euclideanDist(a, b) {
    return Math.sqrt(euclideanDistSq(a, b));
}
const pointArray = new Float32Array(3);
class Kdtree {
    constructor(structure, useSquaredDist = false) {
        if (Debug)
            Log.time('Kdtree build');
        const metric = useSquaredDist ? euclideanDistSq : euclideanDist;
        const points = new Float32Array(structure.atomCount * 3);
        const atomIndices = new Uint32Array(structure.atomCount);
        let i = 0;
        structure.eachAtom(function (ap) {
            points[i + 0] = ap.x;
            points[i + 1] = ap.y;
            points[i + 2] = ap.z;
            atomIndices[i / 3] = ap.index;
            i += 3;
        });
        this.atomIndices = atomIndices;
        this.points = points;
        this.kdtree = new Kdtree$1(points, metric);
        if (Debug)
            Log.timeEnd('Kdtree build');
        // console.log("this.kdtree.verify()", this.kdtree.verify())
    }
    nearest(point, maxNodes, maxDistance) {
        // Log.time( "Kdtree nearest" );
        if (point instanceof Vector3) {
            point.toArray(pointArray);
        }
        else if (point instanceof AtomProxy) {
            point.positionToArray(pointArray);
        }
        const nodeList = this.kdtree.nearest(pointArray, maxNodes, maxDistance);
        const indices = this.kdtree.indices;
        const nodes = this.kdtree.nodes;
        const atomIndices = this.atomIndices;
        const resultList = [];
        for (let i = 0, n = nodeList.length; i < n; ++i) {
            const d = nodeList[i];
            const nodeIndex = d[0];
            const dist = d[1];
            resultList.push({
                index: atomIndices[indices[nodes[nodeIndex]]],
                distance: dist
            });
        }
        // Log.timeEnd( "Kdtree nearest" );
        return resultList;
    }
}

/**
 * @file Symmetry Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const SymOpCode = {
    ' ': 'X',
    '!': 'Y',
    '#': 'Z',
    '$': '-X',
    '%': '-Y',
    '&': '-Z',
    "'": 'Y+1/2',
    '(': '1/2+X',
    ')': '1/2+Y',
    '*': '1/2-X',
    '+': '1/2+Z',
    ',': '1/2-Y',
    '-': '1/2-Z',
    '.': 'X+1/2',
    '/': 'Z+1/2',
    '0': '-X+1/2',
    '1': '-Y+1/2',
    '2': '-Z+1/2',
    '3': '1/4+X',
    '4': '1/4-Y',
    '5': '1/4+Z',
    '6': '1/4-X',
    '7': '1/4+Y',
    '8': '3/4-Y',
    '9': '3/4+Z',
    ':': '3/4+Y',
    ';': '3/4+X',
    '<': '3/4-X',
    '=': '1/4-Z',
    '>': '3/4-Z',
    '?': 'X-Y',
    '@': 'Y-X',
    'A': 'Z+1/3',
    'B': 'Z+2/3',
    'C': 'X+2/3',
    'D': 'Y+1/3',
    'E': '-Y+2/3',
    'F': 'X-Y+1/3',
    'G': 'Y-X+2/3',
    'H': '-X+1/3',
    'I': 'X+1/3',
    'J': 'Y+2/3',
    'K': '-Y+1/3',
    'L': 'X-Y+2/3',
    'M': 'Y-X+1/3',
    'N': '-X+2/3',
    'O': '2/3+X',
    'P': '1/3+Y',
    'Q': '1/3+Z',
    'R': '2/3-Y',
    'S': '1/3+X-Y',
    'T': '2/3+Y-X',
    'U': '1/3-X',
    'V': '2/3-X',
    'W': '1/3-Y',
    'X': '1/3-Z',
    'Y': '2/3+Y',
    'Z': '1/3+Y-X',
    '[': '2/3+X-Y',
    ']': '1/3+X',
    '^': '2/3+Z',
    '_': '2/3-Z',
    '`': '5/6+Z',
    'a': '1/6+Z',
    'b': '5/6-Z',
    'c': '1/6-Z',
    'd': 'Z+5/6',
    'e': 'Z+1/6',
    'f': 'Z+1/4',
    'g': '+Y'
};
// encoded, originally from CCP4 symop.lib
const EncodedSymOp = {
    'P 1': ' !#',
    'P -1': ' !#$%&',
    'P 1 2 1': ' !#$!&',
    'P 1 21 1': " !#$'&",
    'C 1 2 1': ' !#$!&()#*)&',
    'P 1 m 1': ' !# %#',
    'P 1 c 1': ' !# %+',
    'C 1 m 1': ' !# %#()#(,#',
    'C 1 c 1': ' !# %+()#(,+',
    'P 1 2/m 1': ' !# %#$!&$%&',
    'P 1 21/m 1': ' !#$)&$%& ,#',
    'C 1 2/m 1': ' !# %#$!&$%&()#(,#*)&*,&',
    'P 1 2/c 1': ' !#$!-$%& %+',
    'P 1 21/c 1': ' !#$%&$)- ,+',
    'C 1 2/c 1': ' !#$!-$%& %+()#*)-*,&(,+',
    'P 2 2 2': ' !#$%#$!& %&',
    'P 2 2 21': ' !#$%+$!- %&',
    'P 21 21 2': ' !#$%#*)&(,&',
    'P 21 21 21': ' !#*%+$)-(,&',
    'C 2 2 21': ' !#$%+$!- %&()#*,+*)-(,&',
    'C 2 2 2': ' !#$%#$!& %&()#*,#*)&(,&',
    'F 2 2 2': ' !#$%#$!& %& )+$,+$)- ,-(!+*%+*!-(%-()#*,#*)&(,&',
    'I 2 2 2': " !#$%# %&$!&.'/01/.120'2",
    'I 21 21 21': ' !#*%+$)-(,&()+$,#*!& %-',
    'P m m 2': ' !#$%# %#$!#',
    'P m c 21': ' !#$%+ %+$!#',
    'P c c 2': ' !#$%# %+$!+',
    'P m a 2': ' !#$%#(%#*!#',
    'P c a 21': ' !#$%+(%#*!+',
    'P n c 2': ' !#$%# ,+$)+',
    'P m n 21': ' !#*%+(%+$!#',
    'P b a 2': ' !#$%#(,#*)#',
    'P n a 21': ' !#$%+(,#*)+',
    'P n n 2': ' !#$%#(,+*)+',
    'C m m 2': ' !#$%# %#$!#()#*,#(,#*)#',
    'C m c 21': ' !#$%+ %+$!#()#*,+(,+*)#',
    'C c c 2': ' !#$%# %+$!+()#*,#(,+*)+',
    'A m m 2': ' !#$%# %#$!# )+$,+ ,+$)+',
    'A b m 2': ' !#$%# ,#$)# )+$,+ %+$!+',
    'A m a 2': ' !#$%#(%#*!# )+$,+(,+*)+',
    'A b a 2': ' !#$%#(,#*)# )+$,+(%+*!+',
    'F m m 2': ' !#$%# %#$!# )+$,+ ,+$)+(!+*%+(%+*!+()#*,#(,#*)#',
    'F d d 2': ' !#$%#345675 )+$,+3896:9(!+*%+;49<79()#*,#;85<:5',
    'I m m 2': ' !#$%# %#$!#()+*,+(,+*)+',
    'I b a 2': ' !#$%#(,#*)#()+*,+ %+$!+',
    'I m a 2': ' !#$%#(%#*!#()+*,+ ,+$)+',
    'P 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#',
    'P 2/n 2/n 2/n': ' !#$%#$!& %&*,-()-(,+*)+',
    'P 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+',
    'P 2/b 2/a 2/n': ' !#$%#$!& %&*,&()&(,#*)#',
    'P 21/m 2/m 2/a': ' !#*%#$!&(%&$%&(!& %#*!#',
    'P 2/n 21/n 2/a': ' !#*%#*)- ,-$%&(!&(,+$)+',
    'P 2/m 2/n 21/a': ' !#*%+*!- %&$%&(!-(%+$!#',
    'P 21/c 2/c 2/a': ' !#*%#$!-(%-$%&(!& %+*!+',
    'P 21/b 21/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#',
    'P 21/c 21/c 2/n': ' !#*,#$)-(%-$%&()& ,+*!+',
    'P 2/b 21/c 21/m': ' !#$%+$)- ,&$%& !- ,+$)#',
    'P 21/n 21/n 2/m': ' !#$%#*)-(,-$%& !&(,+*)+',
    'P 21/m 21/m 2/n': " !#$%#*'&.,&*,&.'& %#$!#",
    'P 21/b 2/c 21/n': ' !#*,+$!-(,&$%&()- %+*)#',
    'P 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#',
    'P 21/n 21/m 21/a': " !#0%/$'&.12$%&.!2 1#0'/",
    'C 2/m 2/c 21/m': ' !#$%+$!- %&$%& !- %+$!#()#*,+*)-(,&*,&()-(,+*)#',
    'C 2/m 2/c 21/a': ' !#$,+$)- %&$%& )- ,+$!#()#*%+*!-(,&*,&(!-(%+*)#',
    'C 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()#*,#*)&(,&*,&()&(,#*)#',
    'C 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+()#*,#*)-(,-*,&()&(,+*)+',
    'C 2/m 2/m 2/a': ' !#$,#$)& %&$%& )& ,#$!#()#*%#*!&(,&*,&(!&(%#*)#',
    'C 2/c 2/c 2/a': ' !#*,#$!&(,&$,-(!- ,+*!+()#$%#*)& %&*%- )-(%+$)+',
    'F 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!# )+$,+$)- ,-$,- )- ,+$)+(!+*%+*!-(%-*%-(!-(%+*!+()#*,#*)&(,&*,&()&(,#*)#',
    'F 2/d 2/d 2/d': ' !#$%#$!& %&64=37=345675 )+$,+$)- ,-68>3:>3896:9(!+*%+*!-(%-<4>;7>;49<79()#*,#*)&(,&<8=;:=;85<:5',
    'I 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()+*,+*)-(,-*,-()-(,+*)+',
    'I 2/b 2/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#()+*,+$!- %-*,-()- %+$!+',
    'I 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#()+$,#*!& %-*,- )&(%#$!+',
    'I 21/m 21/m 21/a': ' !#$,#$)& %&$%& )& ,#$!#()+*%+*!-(,-*,-(!-(%+*)+',
    'P 4': ' !#$%#% #!$#',
    'P 41': ' !#$%+% 5!$9',
    'P 42': ' !#$%#% +!$+',
    'P 43': ' !#$%+% 9!$5',
    'I 4': ' !#$%#% #!$#()+*,+,(+)*+',
    'I 41': ' !#*,+%(5)$9()+$%#, 9!*5',
    'P -4': ' !#$%#!$&% &',
    'I -4': ' !#$%#!$&% &()+*,+)*-,(-',
    'P 4/m': ' !#$%#% #!$#$%& !&!$&% &',
    'P 42/m': ' !#$%#% +!$+$%& !&!$-% -',
    'P 4/n': ' !#$%#,(#)*#*,&()&!$&% &',
    'P 42/n': ' !#$%#,(+)*+*,-()-!$&% &',
    'I 4/m': ' !#$%#% #!$#$%& !&!$&% &()+*,+,(+)*+*,-()-)*-,(-',
    'I 41/a': ' !#*,+%(5)$9$,=(!>!$&,(-()+$%#, 9!*5*%> )=)*-% &',
    'P 4 2 2': ' !#$%#% #!$#$!& %&! &%$&',
    'P 4 21 2': ' !#$%#,(#)*#*)&(,&! &%$&',
    'P 41 2 2': ' !#$%+% 5!$9$!& %-! >%$=',
    'P 41 21 2': ' !#$%+,(5)*9*)=(,>! &%$-',
    'P 42 2 2': ' !#$%#% +!$+$!& %&! -%$-',
    'P 42 21 2': ' !#$%#,(+)*+*)-(,-! &%$&',
    'P 43 2 2': ' !#$%+% 9!$5$!& %-! =%$>',
    'P 43 21 2': ' !#$%+,(9)*5*)>(,=! &%$-',
    'I 4 2 2': ' !#$%#% #!$#$!& %&! &%$&()+*,+,(+)*+*)-(,-)(-,*-',
    'I 41 2 2': ' !#*,+%(5)$9*!> ,=)(-%$&()+$%#, 9!*5$)=(%>! &,*-',
    'P 4 m m': ' !#$%#% #!$# %#$!#%$#! #',
    'P 4 b m': ' !#$%#% #!$#(,#*)#,*#)(#',
    'P 42 c m': ' !#$%#% +!$+ %+$!+%$#! #',
    'P 42 n m': ' !#$%#,(+)*+(,+*)+%$#! #',
    'P 4 c c': ' !#$%#% #!$# %+$!+%$+! +',
    'P 4 n c': ' !#$%#% #!$#(,+*)+,*+)(+',
    'P 42 m c': ' !#$%#% +!$+ %#$!#%$+! +',
    'P 42 b c': ' !#$%#% +!$+(,#*)#,*+)(+',
    'I 4 m m': ' !#$%#% #!$# %#$!#%$#! #()+*,+,(+)*+(,+*)+,*+)(+',
    'I 4 c m': ' !#$%#% #!$# %+$!+%$+! +()+*,+,(+)*+(,#*)#,*#)(#',
    'I 41 m d': ' !#*,+%(5)$9 %#*)+%*5) 9()+$%#, 9!*5(,+$!#,$9!(5',
    'I 41 c d': ' !#*,+%(5)$9 %+*)#%*9) 5()+$%#, 9!*5(,#$!+,$5!(9',
    'P -4 2 m': ' !#$%#% &!$&$!& %&%$#! #',
    'P -4 2 c': ' !#$%#% &!$&$!- %-%$+! +',
    'P -4 21 m': ' !#$%#% &!$&*)&(,&,*#)(#',
    'P -4 21 c': ' !#$%#% &!$&*)-(,-,*+)(+',
    'P -4 m 2': ' !#$%#!$&% & %#$!#! &%$&',
    'P -4 c 2': ' !#$%#% &!$& %+$!+! -%$-',
    'P -4 b 2': ' !#$%#% &!$&(,#*)#)(&,*&',
    'P -4 n 2': ' !#$%#% &!$&(,+*)+)(-,*-',
    'I -4 m 2': ' !#$%#% &!$& %#$!#! &%$&()+*,+,(-)*-(,+*)+)(-,*-',
    'I -4 c 2': ' !#$%#% &!$& %+$!+! -%$-()+*,+,(-)*-(,#*)#)(&,*&',
    'I -4 2 m': ' !#$%#% &!$&$!& %&%$#! #()+*,+,(-)*-*)-(,-,*+)(+',
    'I -4 2 d': ' !#$%#% &!$&*!>(%>,$9) 9()+*,+,(-)*-$)= ,=%*5!(5',
    'P 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #',
    'P 4/m 2/c 2/c': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +',
    'P 4/n 2/b 2/m': ' !#$%#% #!$#$!& %&! &%$&*,&()&)*&,(&(,#*)#,*#)(#',
    'P 4/n 2/n 2/c': ' !#$%#% #!$#$!& %&! &%$&*,-()-)*-,(-(,+*)+,*+)(+',
    'P 4/m 21/b 2/m': ' !#$%#% #!$#*)&(,&)(&,*&$%& !&!$&% &(,#*)#,*#)(#',
    'P 4/m 21/n 2/c': ' !#$%#% #!$#*)-(,-)(-,*-$%& !&!$&% &(,+*)+,*+)(+',
    'P 4/n 21/m 2/m': ' !#$%#,(#)*#*)&(,&! &%$&*,&()&!$&% & %#$!#,*#)(#',
    'P 4/n 2/c 2/c': ' !#$%#,(#)*#*)-(,-! -%$-*,&()&!$&% & %+$!+,*+)(+',
    'P 42/m 2/m 2/c': ' !#$%#% +!$+$!& %&! -%$-$%& !&!$-% - %#$!#%$+! +',
    'P 42/m 2/c 2/m': ' !#$%#% +!$+$!- %-! &%$&$%& !&!$-% - %+$!+%$#! #',
    'P 42/n 2/b 2/c': ' !#$%#,(+)*+$!- %-)(&,*&*,-()-!$&% &(,#*)#%$+! +',
    'P 42/n 2/n 2/m': ' !#$%#,(+)*+$!& %&)(-,*-*,-()-!$&% &(,+*)+%$#! #',
    'P 42/m 21/b 2/c': ' !#$%#% +!$+*)&(,&)(-,*-$%& !&!$-% -(,#*)#,*+)(+',
    'P 42/m 21/n 2/m': " !#$%#,./'*/*'-.,-! &%$&$%& !&'*-,.-.,/*'/%$#! #",
    'P 42/n 21/m 2/c': ' !#$%#,(+)*+*)-(,-! &%$&*,-()-!$&% & %#$!#,*+)(+',
    'P 42/n 21/c 2/m': ' !#$%#,(+)*+*)&(,&! -%$-*,-()-!$&% & %+$!+,*#)(#',
    'I 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #()+*,+,(+)*+*)-(,-)(-,*-*,-()-)*-,(-(,+*)+,*+)(+',
    'I 4/m 2/c 2/m': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +()+*,+,(+)*+*)&(,&)(&,*&*,-()-)*-,(-(,#*)#,*#)(#',
    'I 41/a 2/m 2/d': ' !#*,+%(5)$9*!> ,=)(-%$&$,=(!>!$&,(-(,+$!#,$9!(5()+$%#, 9!*5$)=(%>! &,*-*%> )=)*-% & %#*)+%*5) 9',
    'I 41/a 2/c 2/d': ' !#*,+%(5)$9*!= ,>)(&%$-$,=(!>!$&,(-(,#$!+,$5!(9()+$%#, 9!*5$)>(%=! -,*&*%> )=)*-% & %+*)#%*9) 5',
    'P 3': ' !#%?#@$#',
    'P 31': ' !#%?A@$B',
    'P 32': ' !#%?B@$A',
    'H 3': ' !#%?#@$#CDAEFAGHAIJBKLBMNB',
    'R 3': ' !## !!# ',
    'P -3': ' !#%?#@$#$%&!@&? &',
    'H -3': ' !#%?#@$#$%&!@&? &OPQRSQTUQVWXYZX[]X]Y^W[^ZV^UR_PT_SO_',
    'R -3': ' !## !!# $%&&$%%&$',
    'P 3 1 2': ' !#%?#@$#%$&@!& ?&',
    'P 3 2 1': ' !#%?#@$#! &?%&$@&',
    'P 31 1 2': ' !#%?Q@$^%$_@!X ?&',
    'P 31 2 1': ' !#%?A@$B! &?%_$@X',
    'P 32 1 2': ' !#%?^@$Q%$X@!_ ?&',
    'P 32 2 1': ' !#%?B@$A! &?%X$@_',
    'H 3 2': ' !#%?#@$#! &?%&$@&OPQRSQTUQY]X[WXVZX]Y^W[^ZV^PO_SR_UT_',
    'R 3 2': ' !## !!# %$&$&%&%$',
    'P 3 m 1': ' !#%?#@$#%$#@!# ?#',
    'P 3 1 m': ' !#%?#@$#! #?%#$@#',
    'P 3 c 1': ' !#%?#@$#%$+@!+ ?+',
    'P 3 1 c': ' !#%?#@$#! +?%+$@+',
    'H 3 m': ' !#%?#@$#%$#@!# ?#OPQRSQTUQRUQTPQOSQ]Y^W[^ZV^WV^ZY^][^',
    'R 3 m': ' !## !!# ! # #!#! ',
    'H 3 c': ' !#%?#@$#%$+@!+ ?+OPQRSQTUQRU`TP`OS`]Y^W[^ZV^WVaZYa][a',
    'R 3 c': " !## !!# '././'/'.",
    'P -3 1 2/m': ' !#%?#@$#%$&@!& ?&$%&!@&? &! #?%#$@#',
    'P -3 1 2/c': ' !#%?#@$#%$-@!- ?-$%&!@&? &! +?%+$@+',
    'P -3 2/m 1': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#',
    'P -3 2/c 1': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+',
    'H -3 2/m': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#OPQRSQTUQY]X[WXVZXVWXYZX[]XRUQTPQOSQ]Y^W[^ZV^PO_SR_UT_UR_PT_SO_WV^ZY^][^',
    'R -3 2/m': ' !## !!# %$&$&%&%$$%&&$%%&$! # #!#! ',
    'H -3 2/c': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+OPQRSQTUQY]b[WbVZbVWXYZX[]XRU`TP`OS`]Y^W[^ZV^POcSRcUTcUR_PT_SO_WVaZYa][a',
    'R -3 2/c': " !## !!# 102021210$%&&$%%&$'././'/'.",
    'P 6': ' !#%?#@$#$%#!@#? #',
    'P 61': ' !#%?A@$B$%/!@d? e',
    'P 65': ' !#%?B@$A$%/!@e? d',
    'P 62': ' !#%?^@$Q$%#!@^? Q',
    'P 64': ' !#%?Q@$^$%#!@Q? ^',
    'P 63': ' !#%?#@$#$%+!@+? +',
    'P -6': ' !#%?#@$# !&%?&@$&',
    'P 6/m': ' !#%?#@$#$%#!@#? #$%&!@&? & !&%?&@$&',
    'P 63/m': ' !#%?#@$#$%+!@+? +$%&!@&? & !-%?-@$-',
    'P 6 2 2': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&',
    'P 61 2 2': ' !#%?Q@$^$%+!@`? a! X?%&$@_%$b@!- ?c',
    'P 65 2 2': ' !#%?^@$Q$%+!@a? `! _?%&$@X%$c@!- ?b',
    'P 62 2 2': ' !#%?^@$Q$%#!@^? Q! _?%&$@X%$_@!& ?X',
    'P 64 2 2': ' !#%?Q@$^$%#!@Q? ^! X?%&$@_%$X@!& ?_',
    'P 63 2 2': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-',
    'P 6 m m': ' !#%?#@$#$%#!@#? #%$#@!# ?#! #?%#$@#',
    'P 6 c c': ' !#%?#@$#$%#!@#? #%$+@!+ ?+! +?%+$@+',
    'P 63 c m': ' !#%?#@$#$%+!@+? +%$+@!+ ?+! #?%#$@#',
    'P 63 m c': ' !#%?#@$#$%+!@+? +%$#@!# ?#! +?%+$@+',
    'P -6 m 2': ' !#%?#@$# !&%?&@$&%$#@!# ?#%$&@!& ?&',
    'P -6 c 2': ' !#%?#@$# !-%?-@$-%$+@!+ ?+%$&@!& ?&',
    'P -6 2 m': ' !#%?#@$# !&%?&@$&! &?%&$@&! #?%#$@#',
    'P -6 2 c': ' !#%?#@$# !-%?-@$-! &?%&$@&! +?%+$@+',
    'P 6/m 2/m 2/m': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&$%&!@&? & !&@$&%?&%$#@!# ?#! #?%#$@#',
    'P 6/m 2/c 2/c': ' !#%?#@$#$%#!@#? #! -?%-$@-%$-@!- ?-$%&!@&? & !&@$&%?&%$+@!+ ?+! +?%+$@+',
    'P 63/m 2/c 2/m': ' !#%?#@$#$%+!@+? +! -?%-$@-%$&@!& ?&$%&!@&? & !-@$-%?-%$+@!+ ?+! #?%#$@#',
    'P 63/m 2/m 2/c': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-$%&!@&? & !-@$-%?-%$#@!# ?#! +?%+$@+',
    'P 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ',
    'F 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%&  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ',
    'I 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(',
    'P 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(',
    'I 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- ',
    'P 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$',
    'P 2/n -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& *,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
    'F 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-($,- )- ,+$)+&*,&()#(,#*)%-*!-(%+(!+*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(*%-(!-(%+*!+-$,- )+ ,+$),&*)&(,#()#*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- *,&()&(,#*)#-*%-(!+(%+*!,-$)- ,+ )+$',
    'F 2/d -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& 64=37=345675=64=375345674=67=3453756 )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(68>3:>3896:9=<8=;:5;85<:4><7>;49;79<(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(<4>;7>;49<79>68>3:93896:8=<:=;85;:5<()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- <8=;:=;8f<:f><4>;79;49<78>6:>3893:96',
    'I 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
    'P 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*',
    'I 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*()+$,#*g& %-+()#$,&*!- %)+(,#$!&*%- *,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$',
    'P 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$',
    'P 42 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
    'F 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(-%*-!*+%(+ +,$+)$-, -)#)*#,(&)(&,*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() -,$-)$+, +(#,*#)*&,(&)+!*+%(-!(-%*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(&,*&)*#,(#(+%*+!*-%(-!+)$+, -) -,$',
    'F 41 3 2': ' !#$,+*)&(%-# !+$,&*)-(%!# ,+$)&*%-(:3>46=7<98;5;58<976=43>:97<58;>:3=46 )+$%#*!-(,&#()+*%&$!- ,!+(,#*)-$%& :;=4<>765839;94<5:6>83=79:6543>7;=8<(!+*,#$)- %&+ )#$%-*!&(,)#(%+*!&$,- 73=86>:<54;935469:<=8;>7576983=:;>4<()#*%+$!& ,-+(!#*,-$)& %)+ %#$!-*,&(7;>8<=:69435398657<>4;=:5:<94;=73>86',
    'I 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
    'P 43 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7;>46=:<5839398<5:6=4;>75:<983>7;=46',
    'P 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<',
    'I 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46',
    'P -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ',
    'F -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&%  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(+%*+!*-%(- +)$+,$-) -,#)(#,*&)*&,((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() +,$+)$-, -(#)*#,*&)(&,+!(+%*-!*-%(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(#,*#)*&,(&(+!*+%*-!(-%+) +,$-)$-, ',
    'I -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
    'P -4 3 n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
    'F -4 3 c': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,( )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-() #,$#)$&, &(#!*#%*&!(&%+! +%$-!$-% (!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(!(#%*#!*&%(& +!$+%$-! -%#) #,$&)$&, ()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ! +%$+!$-% - #)$#,$&) &,#!(#%*&!*&%(',
    'I -4 3 d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7354<9:6>8;=357<946>:;=857394<>:6=8;()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- :;98657<=43>;9:658<=73>49:;586=7<>43',
    'P 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
    'P 4/n -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
    'P 42/m -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
    'P 42/n -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
    'F 4/m -3 2/m
    'F 4/m -3 2/c
    'F 41/d -3 2/m
    'F 41/d -3 2/c
    'I 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
    'I 41/a -3 2/d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<$%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*4<97358;=:6>6>:;=8357<94=8;>:694<573()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46*,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$865:;943>7<=<=73>4;9:658>43=7<5869:;',
    'P 1 1 2': ' !#$%#',
    'P 1 1 21': ' !#$%+',
    'B 1 1 2': ' !#$%#(g+*%+',
    'A 1 2 1': ' !#$!& )+$)-',
    'C 1 21 1': ' !#$)&()#*!&',
    'I 1 2 1': " !#$!&.'/0'2",
    'I 1 21 1': " !#$)&.'/0!-",
    'P 1 1 m': ' !# !&',
    'P 1 1 b': ' !# )&',
    'B 1 1 m': ' !# !&(!+(!-',
    'B 1 1 b': ' !# )&(!+()-',
    'P 1 1 2/m': ' !# !&$%#$%&',
    'P 1 1 21/m': ' !#$%+$%& !-',
    'B 1 1 2/m': ' !# !&$%#$%&(!+(!-*%+*%-',
    'P 1 1 2/b': ' !#$,#$%& )&',
    'P 1 1 21/b': ' !#$%&$,+ )-',
    'B 1 1 2/b': ' !#$,#$%& )&(!+*,+*%-()-',
    'P 21 2 2': ' !#$!&(%&*%#',
    'P 2 21 2': ' !# ,&$)&$%#',
    'P 21 21 2 (a)': " !#*,#.%&$'&",
    'P 21 2 21': ' !#$!&(%-*%+',
    'P 2 21 21': ' !# %&$)-$,+',
    'C 2 2 21a)': ' !#*%+(,&$)-()#$,+ %&*!-',
    'C 2 2 2a': " !#*,#.%&$'&()#$%# ,&*!&",
    'F 2 2 2a': " !#*,#.%&$'& '/*%/.12$!2.!/$,/ %20'2.'#$%# 1&0!&",
    'I 2 2 2a': " !#*,#.%&$'&()+$%+*!- ,-",
    'P 21/m 21/m 2/n a': " !#*,#$)&(%&$%&.'& ,#*!#",
    'P 42 21 2a': " !#*,#%.+'$+$'&.%&! -,*-",
    'I 2 3a': " !#*,#.%&$'&!# ,- '&$%/$# !-*!/$%&.%()+$%+ ,-*!-)+(%&(!-*,#*+()&$)#*,- ,"
};

/**
 * @file Symmetry Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reInteger = /^[1-9]$/;
function getSymmetryOperations(spacegroup) {
    const encodedSymopList = EncodedSymOp[spacegroup];
    const matrixDict = {};
    if (encodedSymopList === undefined) {
        console.warn(`spacegroup '${spacegroup}' not found in symop library`);
        return matrixDict;
    }
    const symopList = [];
    for (let i = 0, il = encodedSymopList.length; i < il; i += 3) {
        const symop = [];
        for (let j = 0; j < 3; ++j) {
            symop.push(SymOpCode[encodedSymopList[i + j]]);
        }
        symopList.push(symop);
    }
    symopList.forEach(function (symop) {
        let row = 0;
        const matrix = new Matrix4().set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        const me = matrix.elements;
        matrixDict[symop.toString()] = matrix;
        symop.forEach(function (elm) {
            let negate = false;
            let denominator = false;
            for (let i = 0, n = elm.length; i < n; ++i) {
                const c = elm[i];
                if (c === '-') {
                    negate = true;
                }
                else if (c === '+') {
                    negate = false;
                }
                else if (c === '/') {
                    denominator = true;
                }
                else if (c === 'X') {
                    me[0 + row] = negate ? -1 : 1;
                }
                else if (c === 'Y') {
                    me[4 + row] = negate ? -1 : 1;
                }
                else if (c === 'Z') {
                    me[8 + row] = negate ? -1 : 1;
                }
                else if (reInteger.test(c)) {
                    const integer = parseInt(c);
                    if (denominator) {
                        me[12 + row] /= integer;
                    }
                    else {
                        me[12 + row] = integer;
                    }
                }
                else {
                    Log.warn(`getSymmetryOperations: unknown token '${c}'`);
                }
            }
            row += 1;
        });
    });
    return matrixDict;
}

/**
 * @file Assembly
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function selectionFromChains(chainList) {
    let sele = '';
    if (chainList.length > 0) {
        sele = ':' + uniqueArray(chainList).join(' OR :');
    }
    return new Selection(sele);
}
/**
 * Assembly of transformed parts of a {@link Structure}
 */
class Assembly {
    /**
     * @param {String} name - assembly name
     */
    constructor(name = '') {
        this.name = name;
        this.partList = [];
    }
    get type() { return 'Assembly'; }
    /**
     * Add transformed parts to the assembly
     * @example
     * var m1 = new NGL.Matrix4().set( ... );
     * var m2 = new NGL.Matrix4().set( ... );
     * var assembly = new NGL.Assembly( "myAssembly" );
     * // add part that transforms chain 'A' and 'B' using matrices `m1` and `m2`
     * assembly.addPart( [ m1, m2 ], [ "A", "B" ] )
     *
     * @param {Matrix4[]} matrixList - array of 4x4 transformation matrices
     * @param {String[]} chainList - array of chain names
     * @return {AssemblyPart} the added assembly part
     */
    addPart(matrixList, chainList) {
        const part = new AssemblyPart(matrixList, chainList);
        this.partList.push(part);
        return part;
    }
    /**
     * Get the number of atom for a given structure
     * @param  {Structure} structure - the given structure
     * @return {Integer} number of atoms in the assembly
     */
    getAtomCount(structure) {
        return this.partList.reduce((count, part) => count + part.getAtomCount(structure), 0);
    }
    /**
     * Get the number of residues for a given structure
     * @param  {Structure} structure - the given structure
     * @return {Integer} number of residues in the assembly
     */
    getResidueCount(structure) {
        return this.partList.reduce((count, part) => count + part.getResidueCount(structure), 0);
    }
    /**
     * Get number of instances the assembly will produce, i.e.
     * the number of transformations performed by the assembly
     * @return {Integer} number of instances
     */
    getInstanceCount() {
        let instanceCount = 0;
        this.partList.forEach(function (part) {
            instanceCount += part.matrixList.length;
        });
        return instanceCount;
    }
    /**
     * Determine if the assembly is the full and untransformed structure
     * @param  {Structure}  structure - the given structure
     * @return {Boolean} whether the assembly is identical to the structure
     */
    isIdentity(structure) {
        if (this.partList.length !== 1)
            return false;
        const part = this.partList[0];
        if (part.matrixList.length !== 1)
            return false;
        const identityMatrix = new Matrix4();
        if (!identityMatrix.equals(part.matrixList[0]))
            return false;
        let structureChainList = [];
        structure.eachChain(function (cp) {
            structureChainList.push(cp.chainname);
        });
        structureChainList = uniqueArray(structureChainList);
        if (part.chainList.length !== structureChainList.length)
            return false;
        return true;
    }
    getBoundingBox(structure) {
        const boundingBox = new Box3();
        this.partList.forEach(function (part) {
            const partBox = part.getBoundingBox(structure);
            boundingBox.expandByPoint(partBox.min);
            boundingBox.expandByPoint(partBox.max);
        });
        return boundingBox;
    }
    getCenter(structure) {
        return this.getBoundingBox(structure).getCenter(new Vector3());
    }
    getSelection() {
        let chainList = [];
        this.partList.forEach(function (part) {
            chainList = chainList.concat(part.chainList);
        });
        return selectionFromChains(chainList);
    }
}
class AssemblyPart {
    constructor(matrixList = [], chainList = []) {
        this.matrixList = matrixList;
        this.chainList = chainList;
    }
    get type() { return 'AssemblyPart'; }
    _getCount(structure, propertyName) {
        let count = 0;
        structure.eachChain(cp => {
            if (this.chainList.length === 0 || this.chainList.includes(cp.chainname)) {
                count += cp[propertyName];
            }
        });
        return this.matrixList.length * count;
    }
    getAtomCount(structure) {
        return this._getCount(structure, 'atomCount');
    }
    getResidueCount(structure) {
        return this._getCount(structure, 'residueCount');
    }
    getBoundingBox(structure) {
        const partBox = new Box3();
        const instanceBox = new Box3();
        const selection = this.getSelection();
        const structureBox = structure.getBoundingBox(selection);
        this.matrixList.forEach(function (matrix) {
            instanceBox.copy(structureBox).applyMatrix4(matrix);
            partBox.expandByPoint(instanceBox.min);
            partBox.expandByPoint(instanceBox.max);
        });
        return partBox;
    }
    getSelection() {
        return selectionFromChains(this.chainList);
    }
    getView(structure) {
        const selection = this.getSelection();
        if (selection) {
            return structure.getView(selection);
        }
        else {
            return structure;
        }
    }
    getInstanceList() {
        const instanceList = [];
        for (let j = 0, jl = this.matrixList.length; j < jl; ++j) {
            instanceList.push({
                id: j + 1,
                name: j,
                matrix: this.matrixList[j]
            });
        }
        return instanceList;
    }
}

/**
 * @file Structure Builder
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class StructureBuilder {
    constructor(structure) {
        this.structure = structure;
        this.currentModelindex = null;
        this.currentChainid = null;
        this.currentResname = null;
        this.currentResno = null;
        this.currentInscode = undefined;
        this.currentHetero = null;
        this.previousResname = '';
        this.previousHetero = null;
        this.ai = -1;
        this.ri = -1;
        this.ci = -1;
        this.mi = -1;
    }
    addResidueType(ri) {
        var _a, _b;
        const atomStore = this.structure.atomStore;
        const residueStore = this.structure.residueStore;
        const residueMap = this.structure.residueMap;
        const cc = (_a = this.structure.chemCompMap) === null || _a === void 0 ? void 0 : _a.dict[this.previousResname];
        const count = residueStore.atomCount[ri];
        const offset = residueStore.atomOffset[ri];
        const atomTypeIdList = new Array(count);
        for (let i = 0; i < count; ++i) {
            atomTypeIdList[i] = atomStore.atomTypeId[offset + i];
        }
        const chemCompType = cc === null || cc === void 0 ? void 0 : cc.chemCompType;
        const bonds = cc ? (_b = this.structure.chemCompMap) === null || _b === void 0 ? void 0 : _b.getBonds(this.previousResname, atomTypeIdList) : undefined;
        residueStore.residueTypeId[ri] = residueMap.add(this.previousResname, atomTypeIdList, this.previousHetero, chemCompType, bonds);
    }
    addAtom(modelindex, chainname, chainid, resname, resno, hetero, sstruc, inscode) {
        const atomStore = this.structure.atomStore;
        const residueStore = this.structure.residueStore;
        const chainStore = this.structure.chainStore;
        const modelStore = this.structure.modelStore;
        let addModel = false;
        let addChain = false;
        let addResidue = false;
        if (this.currentModelindex !== modelindex) {
            addModel = true;
            addChain = true;
            addResidue = true;
            this.mi += 1;
            this.ci += 1;
            this.ri += 1;
        }
        else if (this.currentChainid !== chainid) {
            addChain = true;
            addResidue = true;
            this.ci += 1;
            this.ri += 1;
        }
        else if (this.currentResno !== resno || this.currentResname !== resname || this.currentInscode !== inscode) {
            addResidue = true;
            this.ri += 1;
        }
        this.ai += 1;
        if (addModel) {
            modelStore.growIfFull();
            modelStore.chainOffset[this.mi] = this.ci;
            modelStore.chainCount[this.mi] = 0;
            modelStore.count += 1;
            chainStore.modelIndex[this.ci] = this.mi;
        }
        if (addChain) {
            chainStore.growIfFull();
            chainStore.setChainname(this.ci, chainname);
            chainStore.setChainid(this.ci, chainid);
            chainStore.residueOffset[this.ci] = this.ri;
            chainStore.residueCount[this.ci] = 0;
            chainStore.count += 1;
            chainStore.modelIndex[this.ci] = this.mi;
            modelStore.chainCount[this.mi] += 1;
            residueStore.chainIndex[this.ri] = this.ci;
        }
        if (addResidue) {
            this.previousResname = this.currentResname;
            this.previousHetero = this.currentHetero;
            if (this.ri > 0)
                this.addResidueType(this.ri - 1);
            residueStore.growIfFull();
            residueStore.resno[this.ri] = resno;
            if (sstruc !== undefined) {
                residueStore.sstruc[this.ri] = sstruc.charCodeAt(0);
            }
            if (inscode !== undefined) {
                residueStore.inscode[this.ri] = inscode.charCodeAt(0);
            }
            residueStore.atomOffset[this.ri] = this.ai;
            residueStore.atomCount[this.ri] = 0;
            residueStore.count += 1;
            residueStore.chainIndex[this.ri] = this.ci;
            chainStore.residueCount[this.ci] += 1;
        }
        atomStore.count += 1;
        atomStore.residueIndex[this.ai] = this.ri;
        residueStore.atomCount[this.ri] += 1;
        this.currentModelindex = modelindex;
        this.currentChainid = chainid;
        this.currentResname = resname;
        this.currentResno = resno;
        this.currentInscode = inscode;
        this.currentHetero = hetero;
    }
    finalize() {
        this.previousResname = this.currentResname;
        this.previousHetero = this.currentHetero;
        if (this.ri > -1)
            this.addResidueType(this.ri);
    }
}

/**
 * @file Structure Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function assignSecondaryStructure(structure, secStruct) {
    if (!secStruct)
        return;
    if (Debug)
        Log.time('assignSecondaryStructure');
    const chainnames = [];
    structure.eachModel(function (mp) {
        mp.eachChain(function (cp) {
            chainnames.push(cp.chainname);
        });
    });
    const chainnamesSorted = chainnames.slice().sort();
    const chainnamesIndex = [];
    chainnamesSorted.forEach(function (c) {
        chainnamesIndex.push(chainnames.indexOf(c));
    });
    // helix assignment
    const helices = secStruct.helices.filter(function (h) {
        return binarySearchIndexOf(chainnamesSorted, h[0]) >= 0;
    });
    helices.sort(function (h1, h2) {
        const c1 = h1[0];
        const c2 = h2[0];
        const r1 = h1[1];
        const r2 = h2[1];
        if (c1 === c2) {
            if (r1 === r2) {
                return 0;
            }
            else {
                return r1 < r2 ? -1 : 1;
            }
        }
        else {
            const idx1 = binarySearchIndexOf(chainnamesSorted, c1);
            const idx2 = binarySearchIndexOf(chainnamesSorted, c2);
            return chainnamesIndex[idx1] < chainnamesIndex[idx2] ? -1 : 1;
        }
    });
    const residueStore = structure.residueStore;
    structure.eachModel(function (mp) {
        let i = 0;
        const n = helices.length;
        if (n === 0)
            return;
        let helix = helices[i];
        let helixRun = false;
        let done = false;
        mp.eachChain(function (cp) {
            let chainChange = false;
            if (cp.chainname === helix[0]) {
                const count = cp.residueCount;
                const offset = cp.residueOffset;
                const end = offset + count;
                for (let j = offset; j < end; ++j) {
                    if (residueStore.resno[j] === helix[1] && // resnoBeg
                        residueStore.getInscode(j) === helix[2] // inscodeBeg
                    ) {
                        helixRun = true;
                    }
                    if (helixRun) {
                        residueStore.sstruc[j] = helix[6];
                        if (residueStore.resno[j] === helix[4] && // resnoEnd
                            residueStore.getInscode(j) === helix[5] // inscodeEnd
                        ) {
                            helixRun = false;
                            i += 1;
                            if (i < n) {
                                // must look at previous residues as
                                // residues may not be ordered by resno
                                j = offset - 1;
                                helix = helices[i];
                                chainChange = cp.chainname !== helix[0];
                            }
                            else {
                                done = true;
                            }
                        }
                    }
                    if (chainChange || done)
                        return;
                }
            }
        });
    });
    // sheet assignment
    const sheets = secStruct.sheets.filter(function (s) {
        return binarySearchIndexOf(chainnamesSorted, s[0]) >= 0;
    });
    sheets.sort(function (s1, s2) {
        const c1 = s1[0];
        const c2 = s2[0];
        if (c1 === c2)
            return 0;
        const idx1 = binarySearchIndexOf(chainnamesSorted, c1);
        const idx2 = binarySearchIndexOf(chainnamesSorted, c2);
        return chainnamesIndex[idx1] < chainnamesIndex[idx2] ? -1 : 1;
    });
    const strandCharCode = 'e'.charCodeAt(0);
    structure.eachModel(function (mp) {
        let i = 0;
        const n = sheets.length;
        if (n === 0)
            return;
        let sheet = sheets[i];
        let sheetRun = false;
        let done = false;
        mp.eachChain(function (cp) {
            let chainChange = false;
            if (cp.chainname === sheet[0]) {
                const count = cp.residueCount;
                const offset = cp.residueOffset;
                const end = offset + count;
                for (let j = offset; j < end; ++j) {
                    if (residueStore.resno[j] === sheet[1] && // resnoBeg
                        residueStore.getInscode(j) === sheet[2] // inscodeBeg
                    ) {
                        sheetRun = true;
                    }
                    if (sheetRun) {
                        residueStore.sstruc[j] = strandCharCode;
                        if (residueStore.resno[j] === sheet[4] && // resnoEnd
                            residueStore.getInscode(j) === sheet[5] // inscodeEnd
                        ) {
                            sheetRun = false;
                            i += 1;
                            if (i < n) {
                                // must look at previous residues as
                                // residues may not be ordered by resno
                                j = offset - 1;
                                sheet = sheets[i];
                                chainChange = cp.chainname !== sheet[0];
                            }
                            else {
                                done = true;
                            }
                        }
                    }
                    if (chainChange || done)
                        return;
                }
            }
        });
    });
    if (Debug)
        Log.timeEnd('assignSecondaryStructure');
}
const calculateSecondaryStructure = (function () {
    // Implementation for proteins based on "pv"
    //
    // assigns secondary structure information based on a simple and very fast
    // algorithm published by Zhang and Skolnick in their TM-align paper.
    // Reference:
    //
    // TM-align: a protein structure alignment algorithm based on the Tm-score
    // (2005) NAR, 33(7) 2302-2309
    const zhangSkolnickSS = function (polymer, i, distances, delta) {
        const structure = polymer.structure;
        const offset = polymer.residueIndexStart;
        const rp1 = structure.getResidueProxy();
        const rp2 = structure.getResidueProxy();
        const ap1 = structure.getAtomProxy();
        const ap2 = structure.getAtomProxy();
        for (let j = Math.max(0, i - 2); j <= i; ++j) {
            for (let k = 2; k < 5; ++k) {
                if (j + k >= polymer.residueCount) {
                    continue;
                }
                rp1.index = offset + j;
                rp2.index = offset + j + k;
                ap1.index = rp1.traceAtomIndex;
                ap2.index = rp2.traceAtomIndex;
                const d = ap1.distanceTo(ap2);
                if (Math.abs(d - distances[k - 2]) > delta) {
                    return false;
                }
            }
        }
        return true;
    };
    const isHelical = function (polymer, i) {
        const helixDistances = [5.45, 5.18, 6.37];
        const helixDelta = 2.1;
        return zhangSkolnickSS(polymer, i, helixDistances, helixDelta);
    };
    const isSheet = function (polymer, i) {
        const sheetDistances = [6.1, 10.4, 13.0];
        const sheetDelta = 1.42;
        return zhangSkolnickSS(polymer, i, sheetDistances, sheetDelta);
    };
    const proteinPolymer = function (p) {
        const residueStore = p.residueStore;
        const offset = p.residueIndexStart;
        for (let i = 0, il = p.residueCount; i < il; ++i) {
            let sstruc = 'c';
            if (isHelical(p, i)) {
                sstruc = 'h';
            }
            else if (isSheet(p, i)) {
                sstruc = 'e';
            }
            residueStore.sstruc[offset + i] = sstruc.charCodeAt(0);
        }
    };
    const cgPolymer = function (p) {
        const localAngle = 20;
        const centerDist = 2.0;
        const residueStore = p.residueStore;
        const offset = p.residueIndexStart;
        const helixbundle = new Helixbundle(p);
        const pos = helixbundle.position;
        const c1 = new Vector3();
        const c2 = new Vector3();
        for (let i = 0, il = p.residueCount; i < il; ++i) {
            c1.fromArray(pos.center, i * 3); // TODO
            c2.fromArray(pos.center, i * 3 + 3); // TODO
            const d = c1.distanceTo(c2);
            if (d < centerDist && d > 1.0 && pos.bending[i] < localAngle) {
                residueStore.sstruc[offset + i] = 'h'.charCodeAt(0);
                residueStore.sstruc[offset + i + 1] = 'h'.charCodeAt(0);
            }
        }
    };
    return function calculateSecondaryStructure(structure) {
        if (Debug)
            Log.time('calculateSecondaryStructure');
        structure.eachPolymer(function (p) {
            // assign secondary structure
            if (p.residueCount < 4)
                return;
            if (p.isCg()) {
                cgPolymer(p);
            }
            else if (p.isProtein()) {
                proteinPolymer(p);
            }
            else {
                return;
            }
            // set lone secondary structure assignments to "c"
            let prevSstruc;
            let sstrucCount = 0;
            p.eachResidue(function (r) {
                if (r.sstruc === prevSstruc) {
                    sstrucCount += 1;
                }
                else {
                    if (sstrucCount === 1) {
                        r.index -= 1;
                        r.sstruc = 'c';
                    }
                    sstrucCount = 1;
                    prevSstruc = r.sstruc;
                }
            });
        });
        if (Debug)
            Log.timeEnd('calculateSecondaryStructure');
    };
}());
// const ChainnameAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
//                           "abcdefghijklmnopqrstuvwxyz" +
//                           "0123456789";
const ChainnameAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
function getChainname(index) {
    const n = ChainnameAlphabet.length;
    let j = index;
    let k = 0;
    let chainname = ChainnameAlphabet[j % n];
    while (j >= n) {
        j = Math.floor(j / n);
        chainname += ChainnameAlphabet[j % n];
        k += 1;
    }
    if (k >= 5) {
        Log.warn('chainname overflow');
    }
    return chainname;
}
/**
 * When no chain names are set for the given structure, calculates
 * chains based on:
 * - polymer connectivity: when adjacent residues are not bonded, a new chain is created.
 * - non polymer chemical type: adjacent residues which are not polymers but are of the same
 * chemical type (e.g. water molecules) are grouped into the same chain.
 **/
function calculateChainnames(structure, useExistingBonds = false) {
    if (Debug)
        Log.time('calculateChainnames');
    let doAutoChainName = true;
    structure.eachChain(function (c) {
        if (c.chainname)
            doAutoChainName = false;
    });
    if (doAutoChainName) {
        const modelStore = structure.modelStore;
        const chainStore = structure.chainStore;
        const residueStore = structure.residueStore;
        const addChain = function (mIndex, chainname, rOffset, rCount) {
            const ci = chainStore.count;
            for (let i = 0; i < rCount; ++i) {
                residueStore.chainIndex[rOffset + i] = ci;
            }
            chainStore.growIfFull();
            chainStore.modelIndex[ci] = mIndex;
            chainStore.setChainname(ci, chainname);
            chainStore.setChainid(ci, chainname);
            chainStore.residueOffset[ci] = rOffset;
            chainStore.residueCount[ci] = rCount;
            chainStore.count += 1;
            modelStore.chainCount[mIndex] += 1;
        };
        const ap1 = structure.getAtomProxy();
        const ap2 = structure.getAtomProxy();
        let i = 0;
        let mi = 0;
        let rStart = 0;
        let rEnd = 0;
        const chainData = [];
        if (residueStore.count === 1) {
            chainData.push({
                mIndex: 0,
                chainname: 'A',
                rStart: 0,
                rCount: 1
            });
        }
        else {
            structure.eachResidueN(2, function (rp1, rp2) {
                let newChain = false;
                const bbType1 = rp1.backboneType;
                const bbType2 = rp2.backboneType;
                const bbTypeUnk = UnknownBackboneType;
                rEnd = rp1.index;
                if (rp1.modelIndex !== rp2.modelIndex) {
                    newChain = true;
                }
                else if (rp1.moleculeType !== rp2.moleculeType) {
                    newChain = true;
                }
                else if (bbType1 !== bbTypeUnk && bbType1 === bbType2) {
                    ap1.index = rp1.backboneEndAtomIndex;
                    ap2.index = rp2.backboneStartAtomIndex;
                    if (useExistingBonds) {
                        newChain = !ap1.hasBondTo(ap2);
                    }
                    else {
                        newChain = !ap1.connectedTo(ap2);
                    }
                }
                // current chain goes to end of the structure
                if (!newChain && rp2.index === residueStore.count - 1) {
                    newChain = true;
                    rEnd = rp2.index;
                }
                if (newChain) {
                    chainData.push({
                        mIndex: mi,
                        chainname: getChainname(i),
                        rStart: rStart,
                        rCount: rEnd - rStart + 1
                    });
                    i += 1;
                    if (rp1.modelIndex !== rp2.modelIndex) {
                        i = 0;
                        mi += 1;
                    }
                    // new chain for the last residue of the structure
                    if (rp2.index === residueStore.count - 1 && rEnd !== rp2.index) {
                        chainData.push({
                            mIndex: mi,
                            chainname: getChainname(i),
                            rStart: residueStore.count - 1,
                            rCount: 1
                        });
                    }
                    rStart = rp2.index;
                    rEnd = rp2.index;
                }
            });
        }
        //
        chainStore.count = 0;
        modelStore.chainCount.fill(0, 0, modelStore.count);
        modelStore.chainOffset.fill(0, 0, modelStore.count);
        chainData.forEach(function (d) {
            addChain(d.mIndex, d.chainname, d.rStart, d.rCount);
        });
        let chainOffset = 0;
        structure.eachModel(function (mp) {
            modelStore.chainOffset[mp.index] = chainOffset;
            chainOffset += modelStore.chainCount[mp.index];
        });
    }
    if (Debug)
        Log.timeEnd('calculateChainnames');
}
function calculateBonds(structure, inferBonds = 'all') {
    if (inferBonds === 'none')
        return;
    if (Debug)
        Log.time('calculateBonds');
    calculateBondsWithin(structure, false, inferBonds);
    calculateBondsBetween(structure);
    if (Debug)
        Log.timeEnd('calculateBonds');
}
const BondOrderTable = {
    'HIS|CD2|CG': 2,
    'HIS|CE1|ND1': 2,
    'ARG|CZ|NH2': 2,
    'PHE|CE1|CZ': 2,
    'PHE|CD2|CE2': 2,
    'PHE|CD1|CG': 2,
    'TRP|CD1|CG': 2,
    'TRP|CD2|CE2': 2,
    'TRP|CE3|CZ3': 2,
    'TRP|CH2|CZ2': 2,
    'ASN|CG|OD1': 2,
    'GLN|CD|OE1': 2,
    'TYR|CD1|CG': 2,
    'TYR|CD2|CE2': 2,
    'TYR|CE1|CZ': 2,
    'ASP|CG|OD1': 2,
    'GLU|CD|OE1': 2,
    'G|C8|N7': 2,
    'G|C4|C5': 2,
    'G|C2|N3': 2,
    'G|C6|O6': 2,
    'C|C4|N3': 2,
    'C|C5|C6': 2,
    'C|C2|O2': 2,
    'A|C2|N3': 2,
    'A|C6|N1': 2,
    'A|C4|C5': 2,
    'A|C8|N7': 2,
    'U|C5|C6': 2,
    'U|C2|O2': 2,
    'U|C4|O4': 2,
    'DG|C8|N7': 2,
    'DG|C4|C5': 2,
    'DG|C2|N3': 2,
    'DG|C6|O6': 2,
    'DC|C4|N3': 2,
    'DC|C5|C6': 2,
    'DC|C2|O2': 2,
    'DA|C2|N3': 2,
    'DA|C6|N1': 2,
    'DA|C4|C5': 2,
    'DA|C8|N7': 2,
    'DT|C5|C6': 2,
    'DT|C2|O2': 2,
    'DT|C4|O4': 2
};
function getBondOrderFromTable(resname, atomname1, atomname2) {
    [atomname1, atomname2] = atomname1 < atomname2 ? [atomname1, atomname2] : [atomname2, atomname1];
    if (AA3.includes(resname) && atomname1 === 'C' && atomname2 === 'O')
        return 2;
    if (Bases.includes(resname) && atomname1 === 'OP1' && atomname2 === 'P')
        return 2;
    return BondOrderTable[`${resname}|${atomname1}|${atomname2}`] || 1;
}
function calculateResidueBonds(r) {
    const structure = r.structure;
    const a1 = structure.getAtomProxy();
    const a2 = structure.getAtomProxy();
    const count = r.atomCount;
    const offset = r.atomOffset;
    const end = offset + count;
    const end1 = end - 1;
    const atomIndices1 = [];
    const atomIndices2 = [];
    const bondOrders = [];
    if (count > 500) {
        if (Debug)
            Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName());
    }
    else {
        if (count > 50) {
            const kdtree = new Kdtree(r, true);
            const radius = r.isCg() ? 1.2 : 2.3;
            for (let i = offset; i < end1; ++i) {
                a1.index = i;
                const maxd = a1.covalent + radius + 0.3;
                const nearestAtoms = kdtree.nearest(a1, Infinity, maxd * maxd); // TODO
                const m = nearestAtoms.length;
                for (let j = 0; j < m; ++j) {
                    a2.index = nearestAtoms[j].index;
                    if (a1.index < a2.index) {
                        if (a1.connectedTo(a2)) {
                            atomIndices1.push(a1.index - offset);
                            atomIndices2.push(a2.index - offset);
                            bondOrders.push(getBondOrderFromTable(a1.resname, a1.atomname, a2.atomname));
                        }
                    }
                }
            }
        }
        else {
            for (let i = offset; i < end1; ++i) {
                a1.index = i;
                for (let j = i + 1; j <= end1; ++j) {
                    a2.index = j;
                    if (a1.connectedTo(a2)) {
                        atomIndices1.push(i - offset);
                        atomIndices2.push(j - offset);
                        bondOrders.push(getBondOrderFromTable(a1.resname, a1.atomname, a2.atomname));
                    }
                }
            }
        }
    }
    return {
        atomIndices1: atomIndices1,
        atomIndices2: atomIndices2,
        bondOrders: bondOrders
    };
}
function calculateAtomBondMap(structure) {
    if (Debug)
        Log.time('calculateAtomBondMap');
    var atomBondMap = [];
    structure.eachBond(function (bp) {
        var ai1 = bp.atomIndex1;
        var ai2 = bp.atomIndex2;
        if (atomBondMap[ai1] === undefined)
            atomBondMap[ai1] = [];
        atomBondMap[ai1][ai2] = bp.index;
    });
    if (Debug)
        Log.timeEnd('calculateAtomBondMap');
    return atomBondMap;
}
function calculateBondsWithin(structure, onlyAddRung = false, inferBonds = 'all') {
    if (Debug)
        Log.time('calculateBondsWithin');
    const bondStore = structure.bondStore;
    const rungBondStore = structure.rungBondStore;
    const rungAtomSet = structure.getAtomSet(false);
    const a1 = structure.getAtomProxy();
    const a2 = structure.getAtomProxy();
    const bp = structure.getBondProxy();
    const atomBondMap = onlyAddRung ? null : calculateAtomBondMap(structure);
    let bondedAtoms;
    if (!onlyAddRung && inferBonds === 'auto') {
        bondedAtoms = new Set();
        atomBondMap.forEach((a, i) => {
            bondedAtoms.add(i);
            a.forEach(j => { bondedAtoms.add(j); });
        });
    }
    structure.eachResidue(function (r) {
        if (!onlyAddRung && atomBondMap) {
            const count = r.atomCount;
            const offset = r.atomOffset;
            if (count > 500) {
                Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName());
                return;
            }
            if (inferBonds === 'auto' && r.hetero) {
                // Are bonds present on this residue?
                for (let rai = r.atomOffset; rai < r.atomEnd; rai++) {
                    if (bondedAtoms.has(rai))
                        return;
                }
            }
            const bonds = r.getBonds();
            const atomIndices1 = bonds.atomIndices1;
            const atomIndices2 = bonds.atomIndices2;
            const bondOrders = bonds.bondOrders;
            const nn = atomIndices1.length;
            for (let i = 0; i < nn; ++i) {
                const rai1 = atomIndices1[i];
                const rai2 = atomIndices2[i];
                const ai1 = rai1 + offset;
                const ai2 = rai2 + offset;
                const tmp = atomBondMap[ai1];
                if (tmp !== undefined && tmp[ai2] !== undefined) {
                    bp.index = tmp[ai2];
                    const residueTypeBondIndex = r.residueType.getBondIndex(rai1, rai2); // TODO
                    // overwrite residueType bondOrder with value from existing bond
                    bondOrders[residueTypeBondIndex] = bp.bondOrder;
                }
                else {
                    a1.index = ai1;
                    a2.index = ai2;
                    // only add bond if not already in bondStore
                    bondStore.addBond(a1, a2, bondOrders[i]);
                }
            }
        }
        // get RNA/DNA rung pseudo bonds
        const traceAtomIndex = r.residueType.traceAtomIndex;
        const rungEndAtomIndex = r.residueType.rungEndAtomIndex;
        if (traceAtomIndex !== -1 && rungEndAtomIndex !== -1) {
            a1.index = r.traceAtomIndex;
            a2.index = r.rungEndAtomIndex;
            rungBondStore.addBond(a1, a2);
            rungAtomSet.set(a1.index);
            rungAtomSet.set(a2.index);
        }
    });
    structure.atomSetDict.rung = rungAtomSet;
    if (Debug)
        Log.timeEnd('calculateBondsWithin');
}
function calculateBondsBetween(structure, onlyAddBackbone = false, useExistingBonds = false) {
    if (Debug)
        Log.time('calculateBondsBetween');
    const bondStore = structure.bondStore;
    const backboneBondStore = structure.backboneBondStore;
    const backboneAtomSet = structure.getAtomSet(false);
    const ap1 = structure.getAtomProxy();
    const ap2 = structure.getAtomProxy();
    if (backboneBondStore.count === 0) {
        backboneBondStore.resize(structure.residueStore.count);
    }
    function addBondIfConnected(rp1, rp2) {
        const bbType1 = rp1.backboneType;
        const bbType2 = rp2.backboneType;
        if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
            ap1.index = rp1.backboneEndAtomIndex;
            ap2.index = rp2.backboneStartAtomIndex;
            let needsBond = false;
            let needsBackbone = false;
            if (useExistingBonds && ap1.hasBondTo(ap2)) {
                needsBond = false;
                needsBackbone = true;
            }
            else if (ap1.connectedTo(ap2)) {
                needsBond = !onlyAddBackbone;
                needsBackbone = true;
            }
            if (needsBond) {
                bondStore.addBond(ap1, ap2, 1);
            } // assume single bond
            if (needsBackbone) {
                ap1.index = rp1.traceAtomIndex;
                ap2.index = rp2.traceAtomIndex;
                backboneBondStore.addBond(ap1, ap2);
                backboneAtomSet.set(ap1.index);
                backboneAtomSet.set(ap2.index);
            }
        }
    }
    structure.eachResidueN(2, addBondIfConnected);
    const rp1 = structure.getResidueProxy();
    const rp2 = structure.getResidueProxy();
    // check for cyclic chains
    structure.eachChain(function (cp) {
        if (cp.residueCount === 0)
            return;
        rp1.index = cp.residueOffset;
        rp2.index = cp.residueOffset + cp.residueCount - 1;
        addBondIfConnected(rp2, rp1);
    });
    structure.atomSetDict.backbone = backboneAtomSet;
    if (!onlyAddBackbone) {
        if (Debug)
            Log.time('calculateBondsBetween inter');
        const spatialHash = structure.spatialHash;
        structure.eachResidue(function (rp) {
            if (rp.backboneType === UnknownBackboneType && !rp.isWater()) {
                rp.eachAtom(function (ap) {
                    if (ap.isMetal())
                        return;
                    spatialHash.eachWithin(ap.x, ap.y, ap.z, 4, function (idx) {
                        ap2.index = idx;
                        if (ap.modelIndex === ap2.modelIndex &&
                            ap.residueIndex !== ap2.residueIndex &&
                            !ap2.isMetal()) {
                            bondStore.addBondIfConnected(ap, ap2, 1); // assume single bond
                        }
                    });
                });
            }
        });
        if (Debug)
            Log.timeEnd('calculateBondsBetween inter');
    }
    if (Debug)
        Log.timeEnd('calculateBondsBetween');
}
function buildUnitcellAssembly(structure) {
    if (!structure.unitcell)
        return;
    if (Debug)
        Log.time('buildUnitcellAssembly');
    const uc = structure.unitcell;
    const structureCenterFrac = structure.center.clone().applyMatrix4(uc.cartToFrac);
    const centerFrac = structureCenterFrac.clone().floor();
    const symopDict = getSymmetryOperations(uc.spacegroup);
    const centerFracSymop = new Vector3();
    const positionFracSymop = new Vector3();
    function getMatrixList(shift) {
        const matrixList = [];
        Object.keys(symopDict).forEach(function (name) {
            const m = symopDict[name].clone();
            centerFracSymop.copy(structureCenterFrac).applyMatrix4(m).floor();
            positionFracSymop.setFromMatrixPosition(m);
            positionFracSymop.sub(centerFracSymop);
            positionFracSymop.add(centerFrac);
            if (shift)
                positionFracSymop.add(shift);
            m.setPosition(positionFracSymop);
            m.multiplyMatrices(uc.fracToCart, m);
            m.multiply(uc.cartToFrac);
            matrixList.push(m);
        });
        return matrixList;
    }
    const unitcellAssembly = new Assembly('UNITCELL');
    const unitcellMatrixList = getMatrixList();
    const ncsMatrixList = [];
    if (structure.biomolDict.NCS) {
        ncsMatrixList.push(new Matrix4(), ...structure.biomolDict.NCS.partList[0].matrixList);
        const ncsUnitcellMatrixList = [];
        unitcellMatrixList.forEach(sm => {
            ncsMatrixList.forEach(nm => {
                ncsUnitcellMatrixList.push(sm.clone().multiply(nm));
            });
        });
        unitcellAssembly.addPart(ncsUnitcellMatrixList);
    }
    else {
        unitcellAssembly.addPart(unitcellMatrixList);
    }
    const vec = new Vector3();
    const supercellAssembly = new Assembly('SUPERCELL');
    const supercellMatrixList = Array.prototype.concat.call(getMatrixList(vec.set(1, 0, 0)), // 655
    getMatrixList(vec.set(0, 1, 0)), // 565
    getMatrixList(vec.set(0, 0, 1)), // 556
    getMatrixList(vec.set(-1, 0, 0)), // 455
    getMatrixList(vec.set(0, -1, 0)), // 545
    getMatrixList(vec.set(0, 0, -1)), // 554
    getMatrixList(vec.set(1, 1, 0)), // 665
    getMatrixList(vec.set(1, 0, 1)), // 656
    getMatrixList(vec.set(0, 1, 1)), // 566
    getMatrixList(vec.set(-1, -1, 0)), // 445
    getMatrixList(vec.set(-1, 0, -1)), // 454
    getMatrixList(vec.set(0, -1, -1)), // 544
    getMatrixList(vec.set(1, -1, -1)), // 644
    getMatrixList(vec.set(1, 1, -1)), // 664
    getMatrixList(vec.set(1, -1, 1)), // 646
    getMatrixList(vec.set(-1, 1, 1)), // 466
    getMatrixList(vec.set(-1, -1, 1)), // 446
    getMatrixList(vec.set(-1, 1, -1)), // 464
    getMatrixList(vec.set(0, 1, -1)), // 564
    getMatrixList(vec.set(0, -1, 1)), // 546
    getMatrixList(vec.set(1, 0, -1)), // 654
    getMatrixList(vec.set(-1, 0, 1)), // 456
    getMatrixList(vec.set(1, -1, 0)), // 645
    getMatrixList(vec.set(-1, 1, 0)), // 465
    getMatrixList(), // 555
    getMatrixList(vec.set(1, 1, 1)), // 666
    getMatrixList(vec.set(-1, -1, -1)) // 444
    );
    if (structure.biomolDict.NCS) {
        const ncsSupercellMatrixList = [];
        supercellMatrixList.forEach(function (sm) {
            ncsMatrixList.forEach(function (nm) {
                ncsSupercellMatrixList.push(sm.clone().multiply(nm));
            });
        });
        supercellAssembly.addPart(ncsSupercellMatrixList);
    }
    else {
        supercellAssembly.addPart(supercellMatrixList);
    }
    structure.biomolDict.UNITCELL = unitcellAssembly;
    structure.biomolDict.SUPERCELL = supercellAssembly;
    if (Debug)
        Log.timeEnd('buildUnitcellAssembly');
}
const elm1 = ['H', 'C', 'O', 'N', 'S', 'P'];
const elm2 = ['NA', 'CL', 'FE'];
function guessElement(atomName) {
    // Retain first group of letters in atomName
    let at = atomName.toUpperCase();
    let begin = 0, end = 0;
    for (let i = 0; i < at.length; i++) {
        if (at.charCodeAt(i) < 65) {
            if (end > 0)
                break;
            ++begin;
        }
        else
            end = i + 1;
    }
    if (begin > 0 || end < at.length)
        at = at.substring(begin, end);
    const n = at.length;
    if (n === 0)
        return '';
    if (n === 1)
        return at;
    if (n === 2) {
        if (elm2.indexOf(at) !== -1)
            return at;
        if (elm1.indexOf(at[0]) !== -1)
            return at[0];
        if (at in AtomicNumbers)
            return at;
    }
    if (n >= 3) {
        if (elm1.indexOf(at[0]) !== -1)
            return at[0];
    }
    return '';
}
/**
 * Assigns ResidueType bonds.
 * @param {Structure} structure - the structure object
 * @return {undefined}
 */
function assignResidueTypeBonds(structure) {
    // if( Debug ) Log.time( "assignResidueTypeBonds" )
    const bondHash = structure.bondHash; // TODO
    const countArray = bondHash.countArray;
    const offsetArray = bondHash.offsetArray;
    const indexArray = bondHash.indexArray;
    const bp = structure.getBondProxy();
    structure.eachResidue(function (rp) {
        const residueType = rp.residueType;
        if (residueType.bonds !== undefined)
            return;
        var atomOffset = rp.atomOffset;
        var atomIndices1 = [];
        var atomIndices2 = [];
        var bondOrders = [];
        var bondDict = {};
        const nextAtomOffset = atomOffset + rp.atomCount;
        rp.eachAtom(function (ap) {
            const index = ap.index;
            const offset = offsetArray[index];
            const count = countArray[index];
            for (let i = 0, il = count; i < il; ++i) {
                bp.index = indexArray[offset + i];
                let idx1 = bp.atomIndex1;
                if (idx1 < atomOffset || idx1 >= nextAtomOffset) {
                    // Don't add bonds outside of this resiude
                    continue;
                }
                let idx2 = bp.atomIndex2;
                if (idx2 < atomOffset || idx2 >= nextAtomOffset) {
                    continue;
                }
                if (idx1 > idx2) {
                    const tmp = idx2;
                    idx2 = idx1;
                    idx1 = tmp;
                }
                const hash = idx1 + '|' + idx2;
                if (bondDict[hash] === undefined) {
                    bondDict[hash] = true;
                    atomIndices1.push(idx1 - atomOffset);
                    atomIndices2.push(idx2 - atomOffset);
                    bondOrders.push(bp.bondOrder);
                }
            }
        });
        residueType.bonds = {
            atomIndices1: atomIndices1,
            atomIndices2: atomIndices2,
            bondOrders: bondOrders
        };
    });
    // if( Debug ) Log.timeEnd( "assignResidueTypeBonds" )
}
function concatStructures(name, ...structures) {
    if (Debug)
        Log.time("concatStructures");
    const s = new Structure(name, '');
    const sb = new StructureBuilder(s);
    const atomStore = s.atomStore;
    const atomMap = s.atomMap;
    atomStore.addField('formalCharge', 1, 'int8');
    atomStore.addField('partialCharge', 1, 'float32');
    const atomIndexDict = {};
    let idx = 0;
    let atomCount = 0;
    let modelCount = 0;
    structures.forEach(structure => {
        structure.eachAtom(a => {
            atomStore.growIfFull();
            atomStore.atomTypeId[idx] = atomMap.add(a.atomname, a.element);
            atomStore.x[idx] = a.x;
            atomStore.y[idx] = a.y;
            atomStore.z[idx] = a.z;
            atomStore.serial[idx] = a.serial;
            atomStore.formalCharge[idx] = a.formalCharge;
            atomStore.partialCharge[idx] = a.partialCharge;
            atomStore.altloc[idx] = a.altloc;
            atomStore.occupancy[idx] = a.occupancy;
            atomStore.bfactor[idx] = a.bfactor;
            sb.addAtom(a.modelIndex + modelCount, a.chainname, a.chainid, a.resname, a.resno, a.hetero === 1, a.sstruc, a.inscode);
            atomIndexDict[a.index + atomCount] = idx;
            idx += 1;
        });
        atomCount += structure.atomStore.count;
        modelCount += structure.modelStore.count;
    });
    const bondStore = s.bondStore;
    const a1 = s.getAtomProxy();
    const a2 = s.getAtomProxy();
    atomCount = 0;
    structures.forEach(structure => {
        structure.eachBond(b => {
            a1.index = atomIndexDict[b.atomIndex1 + atomCount];
            a2.index = atomIndexDict[b.atomIndex2 + atomCount];
            bondStore.addBond(a1, a2, b.bondOrder);
        });
        atomCount += structure.atomStore.count;
    });
    sb.finalize();
    calculateBondsBetween(s, true); // calculate backbone bonds
    calculateBondsWithin(s, true); // calculate rung bonds
    s.finalizeAtoms();
    s.finalizeBonds();
    assignResidueTypeBonds(s);
    if (Debug)
        Log.timeEnd("concatStructures");
    return s;
}

/**
 * @file Atom Type
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// Li, Na, K, Rb, Cs Fr
const AlkaliMetals = [3, 11, 19, 37, 55, 87];
// Be, Mg, Ca, Sr, Ba, Ra
const AlkalineEarthMetals = [4, 12, 20, 38, 56, 88];
// C, P, S, Se
const PolyatomicNonmetals = [6, 15, 16, 34,];
// H, N, O, F, Cl, Br, I
const DiatomicNonmetals = [1, 7, 8, 9, 17, 35, 53];
// He, Ne, Ar, Kr, Xe, Rn
const NobleGases = [2, 10, 18, 36, 54, 86];
// Zn, Ga, Cd, In, Sn, Hg, Ti, Pb, Bi, Po, Cn
const PostTransitionMetals = [13, 30, 31, 48, 49, 50, 80, 81, 82, 83, 84, 85, 112];
// B, Si, Ge, As, Sb, Te, At
const Metalloids = [5, 14, 32, 33, 51, 52, 85];
// F, Cl, Br, I, At
const Halogens = [9, 17, 35, 53, 85];
/**
 * Atom type
 */
class AtomType {
    /**
     * @param {Structure} structure - the structure object
     * @param {String} atomname - the name of the atom
     * @param {String} element - the chemical element
     */
    constructor(structure, atomname, element) {
        this.structure = structure;
        this.atomname = atomname;
        element = element || guessElement(atomname);
        this.element = element;
        this.number = AtomicNumbers[element] || DefaultAtomicNumber;
        this.vdw = VdwRadii[this.number] || DefaultVdwRadius;
        this.covalent = CovalentRadii[this.number] || DefaultCovalentRadius;
    }
    getDefaultValence() {
        const vl = Valences[this.number];
        return vl ? vl[0] : DefaultValence;
    }
    getValenceList() {
        return Valences[this.number] || [];
    }
    getOuterShellElectronCount() {
        return OuterShellElectronCounts[this.number] || DefaultOuterShellElectronCount;
    }
    isMetal() {
        return (this.isAlkaliMetal() ||
            this.isAlkalineEarthMetal() ||
            this.isLanthanide() ||
            this.isActinide() ||
            this.isTransitionMetal() ||
            this.isPostTransitionMetal());
    }
    isNonmetal() {
        return (this.isDiatomicNonmetal() ||
            this.isPolyatomicNonmetal() ||
            this.isNobleGas());
    }
    isMetalloid() {
        return Metalloids.includes(this.number);
    }
    isHalogen() {
        return Halogens.includes(this.number);
    }
    isDiatomicNonmetal() {
        return DiatomicNonmetals.includes(this.number);
    }
    isPolyatomicNonmetal() {
        return PolyatomicNonmetals.includes(this.number);
    }
    isAlkaliMetal() {
        return AlkaliMetals.includes(this.number);
    }
    isAlkalineEarthMetal() {
        return AlkalineEarthMetals.includes(this.number);
    }
    isNobleGas() {
        return NobleGases.includes(this.number);
    }
    isTransitionMetal() {
        const no = this.number;
        return ((no >= 21 && no <= 29) ||
            (no >= 39 && no <= 47) ||
            (no >= 72 && no <= 79) ||
            (no >= 104 && no <= 108));
    }
    isPostTransitionMetal() {
        return PostTransitionMetals.includes(this.number);
    }
    isLanthanide() {
        return this.number >= 57 && this.number <= 71;
    }
    isActinide() {
        return this.number >= 89 && this.number <= 103;
    }
}

/**
 * @file Atom Map
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getHash$1(atomname, element) {
    return atomname + '|' + element;
}
class AtomMap {
    constructor(structure) {
        this.structure = structure;
        this.dict = {};
        this.list = [];
        this.structure = structure;
    }
    add(atomname, element) {
        atomname = atomname.toUpperCase();
        if (!element) {
            element = guessElement(atomname);
        }
        else {
            element = element.toUpperCase();
        }
        const hash = getHash$1(atomname, element);
        let id = this.dict[hash];
        if (id === undefined) {
            const atomType = new AtomType(this.structure, atomname, element);
            id = this.list.length;
            this.dict[hash] = id;
            this.list.push(atomType);
        }
        return id;
    }
    get(id) {
        return this.list[id];
    }
}

/**
 * @file Residue Type
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Fred Ludlow
 * @private
 */
/**
 * Residue type
 */
class ResidueType {
    /**
     * @param {Structure} structure - the structure object
     * @param {String} resname - name of the residue
     * @param {Array} atomTypeIdList - list of IDs of {@link AtomType}s corresponding
     *                                 to the atoms of the residue
     * @param {Boolean} hetero - hetero flag
     * @param {String} chemCompType - chemical component type
     * @param {Object} [bonds] - TODO
     */
    constructor(structure, resname, atomTypeIdList, hetero, chemCompType, bonds) {
        this.structure = structure;
        // Sparse array containing the reference atom index for each bond.
        this.bondReferenceAtomIndices = [];
        this.resname = resname;
        this.atomTypeIdList = atomTypeIdList;
        this.hetero = hetero ? 1 : 0;
        this.chemCompType = chemCompType;
        this.bonds = bonds;
        this.atomCount = atomTypeIdList.length;
        this.moleculeType = this.getMoleculeType();
        this.backboneType = this.getBackboneType(0);
        this.backboneEndType = this.getBackboneType(-1);
        this.backboneStartType = this.getBackboneType(1);
        this.backboneIndexList = this.getBackboneIndexList();
        const atomnames = ResidueTypeAtoms[this.backboneType];
        const atomnamesStart = ResidueTypeAtoms[this.backboneStartType];
        const atomnamesEnd = ResidueTypeAtoms[this.backboneEndType];
        const traceIndex = this.getAtomIndexByName(atomnames.trace);
        this.traceAtomIndex = defaults(traceIndex, -1);
        const dir1Index = this.getAtomIndexByName(atomnames.direction1);
        this.direction1AtomIndex = defaults(dir1Index, -1);
        const dir2Index = this.getAtomIndexByName(atomnames.direction2);
        this.direction2AtomIndex = defaults(dir2Index, -1);
        const bbStartIndex = this.getAtomIndexByName(atomnamesStart.backboneStart);
        this.backboneStartAtomIndex = defaults(bbStartIndex, -1);
        const bbEndIndex = this.getAtomIndexByName(atomnamesEnd.backboneEnd);
        this.backboneEndAtomIndex = defaults(bbEndIndex, -1);
        let rungEndIndex;
        if (PurinBases.includes(resname)) {
            rungEndIndex = this.getAtomIndexByName('N1');
        }
        else {
            rungEndIndex = this.getAtomIndexByName('N3');
        }
        this.rungEndAtomIndex = defaults(rungEndIndex, -1);
    }
    getBackboneIndexList() {
        const backboneIndexList = [];
        let atomnameList;
        switch (this.moleculeType) {
            case ProteinType:
                atomnameList = ProteinBackboneAtoms;
                break;
            case RnaType:
            case DnaType:
                atomnameList = NucleicBackboneAtoms;
                break;
            default:
                return backboneIndexList;
        }
        const atomMap = this.structure.atomMap;
        const atomTypeIdList = this.atomTypeIdList;
        for (let i = 0, il = this.atomCount; i < il; ++i) {
            const atomType = atomMap.get(atomTypeIdList[i]);
            if (atomnameList.includes(atomType.atomname)) {
                backboneIndexList.push(i);
            }
        }
        return backboneIndexList;
    }
    getMoleculeType() {
        if (this.isProtein()) {
            return ProteinType;
        }
        else if (this.isRna()) {
            return RnaType;
        }
        else if (this.isDna()) {
            return DnaType;
        }
        else if (this.isWater()) {
            return WaterType;
        }
        else if (this.isIon()) {
            return IonType;
        }
        else if (this.isSaccharide()) {
            return SaccharideType;
        }
        else {
            return UnknownType;
        }
    }
    getBackboneType(position) {
        if (this.hasProteinBackbone(position)) {
            return ProteinBackboneType;
        }
        else if (this.hasRnaBackbone(position)) {
            return RnaBackboneType;
        }
        else if (this.hasDnaBackbone(position)) {
            return DnaBackboneType;
        }
        else if (this.hasCgProteinBackbone(position)) {
            return CgProteinBackboneType;
        }
        else if (this.hasCgRnaBackbone(position)) {
            return CgRnaBackboneType;
        }
        else if (this.hasCgDnaBackbone(position)) {
            return CgDnaBackboneType;
        }
        else {
            return UnknownBackboneType;
        }
    }
    isProtein() {
        if (this.chemCompType) {
            return ChemCompProtein.includes(this.chemCompType);
        }
        else {
            return (this.hasAtomWithName('CA', 'C', 'N') ||
                AA3.includes(this.resname));
        }
    }
    isCg() {
        const backboneType = this.backboneType;
        return (backboneType === CgProteinBackboneType ||
            backboneType === CgRnaBackboneType ||
            backboneType === CgDnaBackboneType);
    }
    isNucleic() {
        return this.isRna() || this.isDna();
    }
    isRna() {
        if (this.chemCompType) {
            return ChemCompRna.includes(this.chemCompType);
        }
        else if (this.hetero === 1) {
            return false;
        }
        else {
            return (this.hasAtomWithName(['P', "O3'", 'O3*'], ["C4'", 'C4*'], ["O2'", 'O2*', "F2'", 'F2*']) ||
                (RnaBases.includes(this.resname) &&
                    (this.hasAtomWithName(["O2'", 'O2*', "F2'", 'F2*']))));
        }
    }
    isDna() {
        if (this.chemCompType) {
            return ChemCompDna.includes(this.chemCompType);
        }
        else if (this.hetero === 1) {
            return false;
        }
        else {
            return ((this.hasAtomWithName(['P', "O3'", 'O3*'], ["C3'", 'C3*']) &&
                !this.hasAtomWithName(["O2'", 'O2*', "F2'", 'F2*'])) ||
                DnaBases.includes(this.resname));
        }
    }
    isHetero() {
        return this.hetero === 1;
    }
    isIon() {
        return IonNames.includes(this.resname);
    }
    isWater() {
        return WaterNames.includes(this.resname);
    }
    isSaccharide() {
        if (this.chemCompType) {
            return ChemCompSaccharide.includes(this.chemCompType);
        }
        else {
            return SaccharideNames.includes(this.resname);
        }
    }
    isStandardAminoacid() {
        return AA3.includes(this.resname);
    }
    isStandardBase() {
        return Bases.includes(this.resname);
    }
    hasBackboneAtoms(position, type) {
        const atomnames = ResidueTypeAtoms[type];
        if (position === -1) {
            return this.hasAtomWithName(atomnames.trace, atomnames.backboneEnd, atomnames.direction1, atomnames.direction2);
        }
        else if (position === 0) {
            return this.hasAtomWithName(atomnames.trace, atomnames.direction1, atomnames.direction2);
        }
        else if (position === 1) {
            return this.hasAtomWithName(atomnames.trace, atomnames.backboneStart, atomnames.direction1, atomnames.direction2);
        }
        else {
            return this.hasAtomWithName(atomnames.trace, atomnames.backboneStart, atomnames.backboneEnd, atomnames.direction1, atomnames.direction2);
        }
    }
    hasProteinBackbone(position) {
        return (this.isProtein() &&
            this.hasBackboneAtoms(position, ProteinBackboneType));
    }
    hasRnaBackbone(position) {
        return (this.isRna() &&
            this.hasBackboneAtoms(position, RnaBackboneType));
    }
    hasDnaBackbone(position) {
        return (this.isDna() &&
            this.hasBackboneAtoms(position, DnaBackboneType));
    }
    hasCgProteinBackbone(position) {
        return (this.atomCount < 7 &&
            this.isProtein() &&
            this.hasBackboneAtoms(position, CgProteinBackboneType));
    }
    hasCgRnaBackbone(position) {
        return (this.atomCount < 11 &&
            this.isRna() &&
            this.hasBackboneAtoms(position, CgRnaBackboneType));
    }
    hasCgDnaBackbone(position) {
        return (this.atomCount < 11 &&
            this.isDna() &&
            this.hasBackboneAtoms(position, CgDnaBackboneType));
    }
    hasBackbone(position) {
        return (this.hasProteinBackbone(position) ||
            this.hasRnaBackbone(position) ||
            this.hasDnaBackbone(position) ||
            this.hasCgProteinBackbone(position) ||
            this.hasCgRnaBackbone(position) ||
            this.hasCgDnaBackbone(position));
    }
    getAtomIndexByName(atomname) {
        const n = this.atomCount;
        const atomMap = this.structure.atomMap;
        const atomTypeIdList = this.atomTypeIdList;
        if (Array.isArray(atomname)) {
            for (let i = 0; i < n; ++i) {
                const index = atomTypeIdList[i];
                if (atomname.includes(atomMap.get(index).atomname)) {
                    return i;
                }
            }
        }
        else {
            for (let i = 0; i < n; ++i) {
                const index = atomTypeIdList[i];
                if (atomname === atomMap.get(index).atomname) {
                    return i;
                }
            }
        }
        return undefined;
    }
    hasAtomWithName(...atomnames) {
        const n = atomnames.length;
        for (let i = 0; i < n; ++i) {
            if (atomnames[i] === undefined)
                continue;
            if (this.getAtomIndexByName(atomnames[i]) === undefined) {
                return false;
            }
        }
        return true;
    }
    getBonds(r) {
        if (this.bonds === undefined) {
            this.bonds = calculateResidueBonds(r); // TODO
        }
        return this.bonds;
    }
    getRings() {
        if (this.rings === undefined) {
            this.calculateRings();
        }
        return this.rings;
    }
    getBondGraph() {
        if (this.bondGraph === undefined) {
            this.calculateBondGraph();
        }
        return this.bondGraph;
    }
    getAromatic(a) {
        if (this.aromaticAtoms === undefined) {
            this.calculateAromatic(this.structure.getResidueProxy((a).residueIndex)); // TODO
        }
        return this.aromaticAtoms;
    }
    getAromaticRings(r) {
        if (this.aromaticRings === undefined) {
            this.calculateAromatic(r); // TODO
        }
        return this.aromaticRings;
    }
    /**
     * @return {Object} bondGraph - represents the bonding in this
     *   residue: { ai1: [ ai2, ai3, ...], ...}
     */
    calculateBondGraph() {
        const bondGraph = this.bondGraph = {};
        const bonds = this.getBonds();
        const nb = bonds.atomIndices1.length;
        const atomIndices1 = bonds.atomIndices1;
        const atomIndices2 = bonds.atomIndices2;
        for (let i = 0; i < nb; ++i) {
            const ai1 = atomIndices1[i];
            const ai2 = atomIndices2[i];
            const a1 = bondGraph[ai1] = bondGraph[ai1] || [];
            a1.push(ai2);
            const a2 = bondGraph[ai2] = bondGraph[ai2] || [];
            a2.push(ai1);
        }
    }
    /**
     * Find all rings up to 2 * RingFinderMaxDepth
     */
    calculateRings() {
        const bondGraph = this.getBondGraph(); // TODO
        const state = RingFinderState(bondGraph, this.atomCount);
        for (let i = 0; i < state.count; i++) {
            if (state.visited[i] >= 0)
                continue;
            findRings(state, i);
        }
        this.rings = { atomRings: state.atomRings, rings: state.rings };
    }
    isAromatic(atom) {
        this.aromaticAtoms = this.getAromatic(atom); // TODO
        return this.aromaticAtoms[atom.index - atom.residueAtomOffset] === 1;
    }
    calculateAromatic(r) {
        const aromaticAtoms = this.aromaticAtoms = new Uint8Array(this.atomCount);
        const rings = this.getRings().rings;
        const aromaticRingFlags = rings.map(ring => {
            return isRingAromatic(ring.map(idx => {
                return this.structure.getAtomProxy(idx + r.atomOffset);
            }));
        });
        const aromaticRings = this.aromaticRings = [];
        rings.forEach((ring, i) => {
            if (aromaticRingFlags[i]) {
                aromaticRings.push(ring);
                ring.forEach(idx => aromaticAtoms[idx] = 1);
            }
        });
    }
    /**
     * For bonds with order > 1, pick a reference atom
     * @return {undefined}
     */
    assignBondReferenceAtomIndices() {
        const bondGraph = this.getBondGraph(); // TODO
        const rings = this.getRings(); // TODO
        const atomRings = rings.atomRings;
        const ringData = rings.rings;
        const bonds = this.bonds; // TODO
        const atomIndices1 = bonds.atomIndices1;
        const atomIndices2 = bonds.atomIndices2;
        const bondOrders = bonds.bondOrders;
        const bondReferenceAtomIndices = this.bondReferenceAtomIndices;
        const nb = bonds.atomIndices1.length;
        bondReferenceAtomIndices.length = 0; // reset array
        for (let i = 0; i < nb; ++i) {
            // Not required for single bonds
            if (bondOrders[i] <= 1)
                continue;
            let refRing;
            const ai1 = atomIndices1[i];
            const ai2 = atomIndices2[i];
            const rings1 = atomRings[ai1];
            const rings2 = atomRings[ai2];
            // Are both atoms in a ring?
            if (rings1 && rings2) {
                // Are they in the same ring? (If not, ignore ring info)
                for (let ri1 = 0; ri1 < rings1.length; ri1++) {
                    if (rings2.indexOf(rings1[ri1]) !== -1) {
                        refRing = ringData[rings1[ri1]];
                        break;
                    }
                }
            }
            // Find the first neighbour.
            if (bondGraph[ai1].length > 1) {
                for (let j = 0; j < bondGraph[ai1].length; ++j) {
                    const ai3 = bondGraph[ai1][j];
                    if (ai3 !== ai2) {
                        if (refRing === undefined || refRing.indexOf(ai3) !== -1) {
                            bondReferenceAtomIndices[i] = ai3;
                            break;
                        }
                    }
                }
            }
            else if (bondGraph[ai2].length > 1) {
                for (let j = 0; j < bondGraph[ai2].length; ++j) {
                    const ai3 = bondGraph[ai2][j];
                    if (ai3 !== ai1) {
                        if (refRing === undefined || refRing.indexOf(ai3) !== -1) {
                            bondReferenceAtomIndices[i] = ai3;
                            break;
                        }
                    }
                }
            } // No reference atom could be found (e.g. diatomic molecule/fragment)
        }
    }
    getBondIndex(atomIndex1, atomIndex2) {
        const bonds = this.bonds; // TODO
        const atomIndices1 = bonds.atomIndices1;
        const atomIndices2 = bonds.atomIndices2;
        let idx1 = atomIndices1.indexOf(atomIndex1);
        let idx2 = atomIndices2.indexOf(atomIndex2);
        const _idx2 = idx2;
        while (idx1 !== -1) {
            while (idx2 !== -1) {
                if (idx1 === idx2)
                    return idx1;
                idx2 = atomIndices2.indexOf(atomIndex2, idx2 + 1);
            }
            idx1 = atomIndices1.indexOf(atomIndex1, idx1 + 1);
            idx2 = _idx2;
        }
        // returns undefined when no bond is found
    }
    getBondReferenceAtomIndex(atomIndex1, atomIndex2) {
        const bondIndex = this.getBondIndex(atomIndex1, atomIndex2);
        if (bondIndex === undefined)
            return undefined;
        if (this.bondReferenceAtomIndices.length === 0) {
            this.assignBondReferenceAtomIndices();
        }
        return this.bondReferenceAtomIndices[bondIndex];
    }
}
//
const AromaticRingElements = [
    5 /* Elements.B */, 6 /* Elements.C */, 7 /* Elements.N */, 8 /* Elements.O */,
    14 /* Elements.SI */, 15 /* Elements.P */, 16 /* Elements.S */,
    32 /* Elements.GE */, 33 /* Elements.AS */,
    50 /* Elements.SN */, 51 /* Elements.SB */,
    83 /* Elements.BI */
];
const AromaticRingPlanarityThreshold = 0.05;
function isRingAromatic(ring) {
    if (ring.some(a => !AromaticRingElements.includes(a.number)))
        return false;
    let i = 0;
    const coords = new Matrix$2(3, ring.length);
    const cd = coords.data;
    ring.forEach(a => {
        cd[i + 0] = a.x;
        cd[i + 1] = a.y;
        cd[i + 2] = a.z;
        i += 3;
    });
    const pa = new PrincipalAxes(coords);
    return pa.vecC.length() < AromaticRingPlanarityThreshold;
}
//
/**
 * Ring finding code below adapted from MolQL
 * Copyright (c) 2017 MolQL contributors, licensed under MIT
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function addRing(state, a, b) {
    // only "monotonous" rings
    if (b < a)
        return;
    const { pred, color, left, right } = state;
    const nc = ++state.currentColor;
    let current = a;
    for (let t = 0; t < RingFinderMaxDepth; t++) {
        color[current] = nc;
        current = pred[current];
        if (current < 0)
            break;
    }
    let leftOffset = 0;
    let rightOffset = 0;
    let found = false;
    let target = 0;
    current = b;
    for (let t = 0; t < RingFinderMaxDepth; t++) {
        if (color[current] === nc) {
            target = current;
            found = true;
            break;
        }
        right[rightOffset++] = current;
        current = pred[current];
        if (current < 0)
            break;
    }
    if (!found)
        return;
    current = a;
    for (let t = 0; t < RingFinderMaxDepth; t++) {
        left[leftOffset++] = current;
        if (target === current)
            break;
        current = pred[current];
        if (current < 0)
            break;
    }
    const rn = leftOffset + rightOffset;
    const ring = new Array(rn);
    let ringOffset = 0;
    for (let t = 0; t < leftOffset; t++) {
        ring[ringOffset++] = left[t];
    }
    for (let t = rightOffset - 1; t >= 0; t--) {
        ring[ringOffset++] = right[t];
    }
    const ri = state.rings.length;
    // set atomRing indices:
    for (let i = 0; i < rn; ++i) {
        const ai = ring[i];
        if (state.atomRings[ai]) {
            state.atomRings[ai].push(ri);
        }
        else {
            state.atomRings[ai] = [ri];
        }
    }
    state.rings.push(ring);
}
function findRings(state, from) {
    const { bonds, visited, queue, pred } = state;
    visited[from] = 1;
    queue[0] = from;
    let head = 0;
    let size = 1;
    while (head < size) {
        const top = queue[head++];
        const start = 0;
        if (bonds[top] === undefined) {
            continue;
        }
        const end = bonds[top].length;
        for (let i = start; i < end; i++) {
            const other = bonds[top][i];
            if (visited[other] > 0) {
                if (pred[other] !== top && pred[top] !== other) {
                    addRing(state, top, other);
                }
                continue;
            }
            visited[other] = 1;
            queue[size++] = other;
            pred[other] = top;
        }
    }
}
const RingFinderMaxDepth = 4;
function RingFinderState(bonds, capacity) {
    const state = {
        count: capacity,
        visited: new Int32Array(capacity),
        queue: new Int32Array(capacity),
        pred: new Int32Array(capacity),
        left: new Int32Array(RingFinderMaxDepth),
        right: new Int32Array(RingFinderMaxDepth),
        color: new Int32Array(capacity),
        currentColor: 0,
        rings: [],
        atomRings: [],
        bonds
    };
    for (let i = 0; i < capacity; i++) {
        state.visited[i] = -1;
        state.pred[i] = -1;
    }
    return state;
}

/**
 * @file Residue Map
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getHash(resname, atomTypeIdList, hetero, chemCompType = '') {
    return (resname + '|' +
        atomTypeIdList.join(',') + '|' +
        (hetero ? 1 : 0) + '|' +
        chemCompType);
}
class ResidueMap {
    constructor(structure) {
        this.structure = structure;
        this.dict = {};
        this.list = [];
    }
    add(resname, atomTypeIdList, hetero, chemCompType = '', bonds) {
        resname = resname.toUpperCase();
        const hash = getHash(resname, atomTypeIdList, hetero, chemCompType);
        let id = this.dict[hash];
        if (id === undefined) {
            const residueType = new ResidueType(this.structure, resname, atomTypeIdList, hetero, chemCompType, bonds);
            id = this.list.length;
            this.dict[hash] = id;
            this.list.push(residueType);
        }
        return id;
    }
    get(id) {
        return this.list[id];
    }
}

/**
 * @file Bond Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Bond proxy
 */
class BondProxy {
    /**
     * @param {Structure} structure - the structure
     * @param {Integer} index - the index
     */
    constructor(structure, index = 0) {
        this.structure = structure;
        this.index = index;
        this.bondStore = structure.bondStore;
        this._v12 = new Vector3();
        this._v13 = new Vector3();
        this._ap1 = this.structure.getAtomProxy();
        this._ap2 = this.structure.getAtomProxy();
        this._ap3 = this.structure.getAtomProxy();
    }
    /**
     * @type {AtomProxy}
     */
    get atom1() {
        return this.structure.getAtomProxy(this.atomIndex1);
    }
    /**
     * @type {AtomProxy}
     */
    get atom2() {
        return this.structure.getAtomProxy(this.atomIndex2);
    }
    /**
     * @type {Integer}
     */
    get atomIndex1() {
        return this.bondStore.atomIndex1[this.index];
    }
    set atomIndex1(value) {
        this.bondStore.atomIndex1[this.index] = value;
    }
    /**
     * @type {Integer}
     */
    get atomIndex2() {
        return this.bondStore.atomIndex2[this.index];
    }
    set atomIndex2(value) {
        this.bondStore.atomIndex2[this.index] = value;
    }
    /**
     * @type {Integer}
     */
    get bondOrder() {
        return this.bondStore.bondOrder[this.index];
    }
    set bondOrder(value) {
        this.bondStore.bondOrder[this.index] = value;
    }
    getOtherAtomIndex(atomIndex) {
        return atomIndex === this.atomIndex1 ? this.atomIndex2 : this.atomIndex1;
    }
    getOtherAtom(atom) {
        return this.structure.getAtomProxy(this.getOtherAtomIndex(atom.index));
    }
    /**
     * Get reference atom index for the bond
     * @return {Integer|undefined} atom index, or `undefined` if unavailable
     */
    getReferenceAtomIndex() {
        const ap1 = this._ap1;
        const ap2 = this._ap2;
        ap1.index = this.atomIndex1;
        ap2.index = this.atomIndex2;
        if (ap1.residueIndex !== ap2.residueIndex) {
            return undefined; // Bond between residues, for now ignore (could detect)
        }
        const typeAtomIndex1 = ap1.index - ap1.residueAtomOffset;
        const typeAtomIndex2 = ap2.index - ap2.residueAtomOffset;
        const residueType = ap1.residueType;
        const ix = residueType.getBondReferenceAtomIndex(typeAtomIndex1, typeAtomIndex2);
        if (ix !== undefined) {
            return ix + ap1.residueAtomOffset;
        }
        else {
            console.warn('No reference atom found', ap1.index, ap2.index);
        }
    }
    /**
     * calculate shift direction for displaying double/triple bonds
     * @param  {Vector3} [v] pre-allocated output vector
     * @return {Vector3} the shift direction vector
     */
    calculateShiftDir(v = new Vector3()) {
        const ap1 = this._ap1;
        const ap2 = this._ap2;
        const ap3 = this._ap3;
        const v12 = this._v12;
        const v13 = this._v13;
        ap1.index = this.atomIndex1;
        ap2.index = this.atomIndex2;
        const ai3 = this.getReferenceAtomIndex();
        v12.subVectors(ap1, ap2).normalize(); // TODO
        if (ai3 !== undefined) {
            ap3.index = ai3;
            v13.subVectors(ap1, ap3); // TODO
        }
        else {
            v13.copy(ap1); // no reference point, use origin  // TODO
        }
        v13.normalize();
        // make sure v13 and v12 are not colinear
        let dp = v12.dot(v13);
        if (1 - Math.abs(dp) < 1e-5) {
            v13.set(1, 0, 0);
            dp = v12.dot(v13);
            if (1 - Math.abs(dp) < 1e-5) {
                v13.set(0, 1, 0);
                dp = v12.dot(v13);
            }
        }
        return v.copy(v13.sub(v12.multiplyScalar(dp))).normalize();
    }
    qualifiedName() {
        return this.atomIndex1 + '=' + this.atomIndex2;
    }
    /**
     * Clone object
     * @return {BondProxy} cloned bond
     */
    clone() {
        return new BondProxy(this.structure, this.index);
    }
    toObject() {
        return {
            atomIndex1: this.atomIndex1,
            atomIndex2: this.atomIndex2,
            bondOrder: this.bondOrder
        };
    }
}

/**
 * @file Residue Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Residue proxy
 */
class ResidueProxy {
    /**
     * @param {Structure} structure - the structure
     * @param {Integer} index - the index
     */
    constructor(structure, index = 0) {
        this.structure = structure;
        this.index = index;
        this.chainStore = structure.chainStore;
        this.residueStore = structure.residueStore;
        this.atomStore = structure.atomStore;
        this.residueMap = structure.residueMap;
        this.atomMap = structure.atomMap;
    }
    /**
     * Entity
     * @type {Entity}
     */
    get entity() {
        return this.structure.entityList[this.entityIndex];
    }
    get entityIndex() {
        return this.chainStore.entityIndex[this.chainIndex];
    }
    /**
     * Chain
     * @type {ChainProxy}
     */
    get chain() {
        return this.structure.getChainProxy(this.chainIndex);
    }
    get chainIndex() {
        return this.residueStore.chainIndex[this.index];
    }
    set chainIndex(value) {
        this.residueStore.chainIndex[this.index] = value;
    }
    get atomOffset() {
        return this.residueStore.atomOffset[this.index];
    }
    set atomOffset(value) {
        this.residueStore.atomOffset[this.index] = value;
    }
    /**
     * Atom count
     * @type {Integer}
     */
    get atomCount() {
        return this.residueStore.atomCount[this.index];
    }
    set atomCount(value) {
        this.residueStore.atomCount[this.index] = value;
    }
    get atomEnd() {
        return this.atomOffset + this.atomCount - 1;
    }
    //
    get modelIndex() {
        return this.chainStore.modelIndex[this.chainIndex];
    }
    /**
     * Chain name
     * @type {String}
     */
    get chainname() {
        return this.chainStore.getChainname(this.chainIndex);
    }
    /**
     * Chain id
     * @type {String}
     */
    get chainid() {
        return this.chainStore.getChainid(this.chainIndex);
    }
    //
    /**
     * Residue number/label
     * @type {Integer}
     */
    get resno() {
        return this.residueStore.resno[this.index];
    }
    set resno(value) {
        this.residueStore.resno[this.index] = value;
    }
    /**
     * Secondary structure code
     * @type {String}
     */
    get sstruc() {
        return this.residueStore.getSstruc(this.index);
    }
    set sstruc(value) {
        this.residueStore.setSstruc(this.index, value);
    }
    /**
     * Insertion code
     * @type {String}
     */
    get inscode() {
        return this.residueStore.getInscode(this.index);
    }
    set inscode(value) {
        this.residueStore.setInscode(this.index, value);
    }
    //
    get residueType() {
        return this.residueMap.get(this.residueStore.residueTypeId[this.index]);
    }
    /**
     * Residue name
     * @type {String}
     */
    get resname() {
        return this.residueType.resname;
    }
    /**
     * Hetero flag
     * @type {Boolean}
     */
    get hetero() {
        return this.residueType.hetero;
    }
    get moleculeType() {
        return this.residueType.moleculeType;
    }
    get backboneType() {
        return this.residueType.backboneType;
    }
    get backboneStartType() {
        return this.residueType.backboneStartType;
    }
    get backboneEndType() {
        return this.residueType.backboneEndType;
    }
    get traceAtomIndex() {
        return this.residueType.traceAtomIndex + this.atomOffset;
    }
    get direction1AtomIndex() {
        return this.residueType.direction1AtomIndex + this.atomOffset;
    }
    get direction2AtomIndex() {
        return this.residueType.direction2AtomIndex + this.atomOffset;
    }
    get backboneStartAtomIndex() {
        return this.residueType.backboneStartAtomIndex + this.atomOffset;
    }
    get backboneEndAtomIndex() {
        return this.residueType.backboneEndAtomIndex + this.atomOffset;
    }
    get rungEndAtomIndex() {
        return this.residueType.rungEndAtomIndex + this.atomOffset;
    }
    //
    get x() {
        let x = 0;
        for (let i = this.atomOffset; i <= this.atomEnd; ++i) {
            x += this.atomStore.x[i];
        }
        return x / this.atomCount;
    }
    get y() {
        let y = 0;
        for (let i = this.atomOffset; i <= this.atomEnd; ++i) {
            y += this.atomStore.y[i];
        }
        return y / this.atomCount;
    }
    get z() {
        let z = 0;
        for (let i = this.atomOffset; i <= this.atomEnd; ++i) {
            z += this.atomStore.z[i];
        }
        return z / this.atomCount;
    }
    //
    /**
     * Atom iterator
     * @param  {function(atom: AtomProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachAtom(callback, selection) {
        const count = this.atomCount;
        const offset = this.atomOffset;
        const ap = this.structure._ap;
        const end = offset + count;
        if (selection && selection.atomOnlyTest) {
            const atomOnlyTest = selection.atomOnlyTest;
            for (let i = offset; i < end; ++i) {
                ap.index = i;
                if (atomOnlyTest(ap))
                    callback(ap);
            }
        }
        else {
            for (let i = offset; i < end; ++i) {
                ap.index = i;
                callback(ap);
            }
        }
    }
    //
    /**
     * Write residue center position to array
     * @param  {Array|TypedArray} [array] - target array
     * @param  {Integer} [offset] - the offset
     * @return {Array|TypedArray} target array
     */
    positionToArray(array = [], offset = 0) {
        array[offset + 0] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        return array;
    }
    //
    /**
     * If residue is from a protein
     * @return {Boolean} flag
     */
    isProtein() {
        return this.residueType.moleculeType === ProteinType;
    }
    /**
     * If residue is nucleic
     * @return {Boolean} flag
     */
    isNucleic() {
        const moleculeType = this.residueType.moleculeType;
        return moleculeType === RnaType || moleculeType === DnaType;
    }
    /**
     * If residue is rna
     * @return {Boolean} flag
     */
    isRna() {
        return this.residueType.moleculeType === RnaType;
    }
    /**
     * If residue is dna
     * @return {Boolean} flag
     */
    isDna() {
        return this.residueType.moleculeType === DnaType;
    }
    /**
     * If residue is coarse-grain
     * @return {Boolean} flag
     */
    isCg() {
        const backboneType = this.residueType.backboneType;
        return (backboneType === CgProteinBackboneType ||
            backboneType === CgRnaBackboneType ||
            backboneType === CgDnaBackboneType);
    }
    /**
     * If residue is from a polymer
     * @return {Boolean} flag
     */
    isPolymer() {
        if (this.structure.entityList.length > 0) {
            return this.entity.isPolymer();
        }
        else {
            const moleculeType = this.residueType.moleculeType;
            return (moleculeType === ProteinType ||
                moleculeType === RnaType ||
                moleculeType === DnaType);
        }
    }
    /**
     * If residue is hetero
     * @return {Boolean} flag
     */
    isHetero() {
        return this.residueType.hetero === 1;
    }
    /**
     * If residue is a water molecule
     * @return {Boolean} flag
     */
    isWater() {
        return this.residueType.moleculeType === WaterType;
    }
    /**
     * If residue is an ion
     * @return {Boolean} flag
     */
    isIon() {
        return this.residueType.moleculeType === IonType;
    }
    /**
     * If residue is a saccharide
     * @return {Boolean} flag
     */
    isSaccharide() {
        return this.residueType.moleculeType === SaccharideType;
    }
    isStandardAminoacid() {
        return this.residueType.isStandardAminoacid();
    }
    isStandardBase() {
        return this.residueType.isStandardBase();
    }
    /**
     * If residue is part of a helix
     * @return {Boolean} flag
     */
    isHelix() {
        return SecStrucHelix.includes(this.sstruc);
    }
    /**
     * If residue is part of a sheet
     * @return {Boolean} flag
     */
    isSheet() {
        return SecStrucSheet.includes(this.sstruc);
    }
    /**
     * If residue is part of a turn
     * @return {Boolean} flag
     */
    isTurn() {
        return SecStrucTurn.includes(this.sstruc) && this.isProtein();
    }
    getAtomType(index) {
        return this.atomMap.get(this.atomStore.atomTypeId[index]);
    }
    getResname1() {
        // FIXME nucleic support
        return AA1[this.resname.toUpperCase()] || 'X';
    }
    getBackboneType(position) {
        switch (position) {
            case -1:
                return this.residueType.backboneStartType;
            case 1:
                return this.residueType.backboneEndType;
            default:
                return this.residueType.backboneType;
        }
    }
    getAtomIndexByName(atomname) {
        let index = this.residueType.getAtomIndexByName(atomname);
        if (index !== undefined) {
            index += this.atomOffset;
        }
        return index;
    }
    hasAtomWithName(atomname) {
        return this.residueType.hasAtomWithName(atomname);
    }
    getAtomnameList() {
        console.warn('getAtomnameList - might be expensive');
        const n = this.atomCount;
        const offset = this.atomOffset;
        const list = new Array(n);
        for (let i = 0; i < n; ++i) {
            list[i] = this.getAtomType(offset + i).atomname;
        }
        return list;
    }
    /**
     * If residue is connected to another
     * @param  {ResidueProxy} rNext - the other residue
     * @return {Boolean} - flag
     */
    connectedTo(rNext) {
        const bbAtomEnd = this.structure.getAtomProxy(this.backboneEndAtomIndex);
        const bbAtomStart = this.structure.getAtomProxy(rNext.backboneStartAtomIndex);
        if (bbAtomEnd && bbAtomStart) {
            return bbAtomEnd.connectedTo(bbAtomStart);
        }
        else {
            return false;
        }
    }
    getNextConnectedResidue() {
        const rOffset = this.chainStore.residueOffset[this.chainIndex];
        const rCount = this.chainStore.residueCount[this.chainIndex];
        const nextIndex = this.index + 1;
        if (nextIndex < rOffset + rCount) {
            const rpNext = this.structure.getResidueProxy(nextIndex);
            if (this.connectedTo(rpNext)) {
                return rpNext;
            }
        }
        else if (nextIndex === rOffset + rCount) { // cyclic
            const rpFirst = this.structure.getResidueProxy(rOffset);
            if (this.connectedTo(rpFirst)) {
                return rpFirst;
            }
        }
        return undefined;
    }
    getPreviousConnectedResidue(residueProxy) {
        const rOffset = this.chainStore.residueOffset[this.chainIndex];
        const prevIndex = this.index - 1;
        if (prevIndex >= rOffset) {
            const rpPrev = defaults(residueProxy, this.structure.getResidueProxy());
            rpPrev.index = prevIndex;
            if (rpPrev.connectedTo(this)) {
                return rpPrev;
            }
        }
        else if (prevIndex === rOffset - 1) { // cyclic
            const rCount = this.chainStore.residueCount[this.chainIndex];
            const rpLast = defaults(residueProxy, this.structure.getResidueProxy());
            rpLast.index = rOffset + rCount - 1;
            if (rpLast.connectedTo(this)) {
                return rpLast;
            }
        }
        return undefined;
    }
    getBonds() {
        return this.residueType.getBonds(this);
    }
    getRings() {
        return this.residueType.getRings();
    }
    getAromaticRings() {
        return this.residueType.getAromaticRings(this);
    }
    qualifiedName(noResname = false) {
        let name = '';
        if (this.resname && !noResname)
            name += '[' + this.resname + ']';
        if (this.resno !== undefined)
            name += this.resno;
        if (this.inscode)
            name += '^' + this.inscode;
        if (this.chain)
            name += ':' + this.chainname;
        name += '/' + this.modelIndex;
        return name;
    }
    /**
     * Clone object
     * @return {ResidueProxy} cloned residue
     */
    clone() {
        return new ResidueProxy(this.structure, this.index);
    }
    toObject() {
        return {
            index: this.index,
            chainIndex: this.chainIndex,
            atomOffset: this.atomOffset,
            atomCount: this.atomCount,
            resno: this.resno,
            resname: this.resname,
            sstruc: this.sstruc
        };
    }
}

/**
 * @file Polymer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Polymer
 */
class Polymer {
    /**
     * @param {Structure} structure - the structure
     * @param {Integer} residueIndexStart - the index of the first residue
     * @param {Integer} residueIndexEnd - the index of the last residue
     */
    constructor(structure, residueIndexStart, residueIndexEnd) {
        this.structure = structure;
        this.residueIndexStart = residueIndexStart;
        this.residueIndexEnd = residueIndexEnd;
        this.chainStore = structure.chainStore;
        this.residueStore = structure.residueStore;
        this.atomStore = structure.atomStore;
        /**
         * @type {Integer}
         */
        this.residueCount = residueIndexEnd - residueIndexStart + 1;
        const rpStart = this.structure.getResidueProxy(this.residueIndexStart);
        const rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
        this.isPrevConnected = rpStart.getPreviousConnectedResidue() !== undefined;
        const rpNext = rpEnd.getNextConnectedResidue();
        this.isNextConnected = rpNext !== undefined;
        this.isNextNextConnected = rpNext !== undefined && rpNext.getNextConnectedResidue() !== undefined;
        this.isCyclic = rpEnd.connectedTo(rpStart);
        this.__residueProxy = this.structure.getResidueProxy();
        // console.log( this.qualifiedName(), this );
    }
    get chainIndex() {
        return this.residueStore.chainIndex[this.residueIndexStart];
    }
    get modelIndex() {
        return this.chainStore.modelIndex[this.chainIndex];
    }
    /**
     * @type {String}
     */
    get chainname() {
        return this.chainStore.getChainname(this.chainIndex);
    }
    //
    /**
     * If first residue is from aprotein
     * @return {Boolean} flag
     */
    isProtein() {
        this.__residueProxy.index = this.residueIndexStart;
        return this.__residueProxy.isProtein();
    }
    /**
     * If atom is part of a coarse-grain group
     * @return {Boolean} flag
     */
    isCg() {
        this.__residueProxy.index = this.residueIndexStart;
        return this.__residueProxy.isCg();
    }
    /**
     * If atom is part of a nucleic molecule
     * @return {Boolean} flag
     */
    isNucleic() {
        this.__residueProxy.index = this.residueIndexStart;
        return this.__residueProxy.isNucleic();
    }
    getMoleculeType() {
        this.__residueProxy.index = this.residueIndexStart;
        return this.__residueProxy.moleculeType;
    }
    getBackboneType(position) {
        this.__residueProxy.index = this.residueIndexStart;
        return this.__residueProxy.getBackboneType(position);
    }
    getAtomIndexByType(index, type) {
        // TODO pre-calculate, add to residueStore???
        if (this.isCyclic) {
            if (index === -1) {
                index = this.residueCount - 1;
            }
            else if (index === this.residueCount) {
                index = 0;
            }
        }
        else {
            if (index === -1 && !this.isPrevConnected)
                index += 1;
            if (index === this.residueCount && !this.isNextNextConnected)
                index -= 1;
            // if( index === this.residueCount - 1 && !this.isNextConnected ) index -= 1;
        }
        const rp = this.__residueProxy;
        rp.index = this.residueIndexStart + index;
        let aIndex;
        switch (type) {
            case 'trace':
                aIndex = rp.traceAtomIndex;
                break;
            case 'direction1':
                aIndex = rp.direction1AtomIndex;
                break;
            case 'direction2':
                aIndex = rp.direction2AtomIndex;
                break;
            default:
                aIndex = rp.getAtomIndexByName(type);
        }
        // if (!ap){
        //   console.log(this, type, rp.residueType)
        //   // console.log(rp.qualifiedName(), rp.index, index, this.residueCount - 1)
        //   // rp.index = this.residueIndexStart;
        //   // console.log(rp.qualifiedName(), this.residueIndexStart)
        //   // rp.index = this.residueIndexEnd;
        //   // console.log(rp.qualifiedName(), this.residueIndexEnd)
        // }
        return aIndex;
    }
    /**
     * Atom iterator
     * @param  {function(atom: AtomProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachAtom(callback, selection) {
        this.eachResidue(function (rp) {
            rp.eachAtom(callback, selection);
        });
    }
    eachAtomN(n, callback, type) {
        const m = this.residueCount;
        const array = new Array(n);
        for (let i = 0; i < n; ++i) {
            array[i] = this.structure.getAtomProxy(this.getAtomIndexByType(i, type));
        }
        callback.apply(this, array);
        for (var j = n; j < m; ++j) {
            for (let i = 1; i < n; ++i) {
                array[i - 1].index = array[i].index;
            }
            array[n - 1].index = this.getAtomIndexByType(j, type); // TODO
            callback.apply(this, array);
        }
    }
    /**
     * Residue iterator
     * @param  {function(residue: ResidueProxy)} callback - the callback
     * @return {undefined}
     */
    eachResidue(callback) {
        const rp = this.structure.getResidueProxy();
        const n = this.residueCount;
        const rStartIndex = this.residueIndexStart;
        for (let i = 0; i < n; ++i) {
            rp.index = rStartIndex + i;
            callback(rp);
        }
    }
    qualifiedName() {
        const rpStart = this.structure.getResidueProxy(this.residueIndexStart);
        const rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
        return rpStart.qualifiedName() + ' - ' + rpEnd.qualifiedName();
    }
}

/**
 * @file Chain Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Chain proxy
 */
class ChainProxy {
    /**
     * @param {Structure} structure - the structure
     * @param {Integer} index - the index
     */
    constructor(structure, index = 0) {
        this.structure = structure;
        this.index = index;
        this.chainStore = structure.chainStore;
        this.residueStore = structure.residueStore;
    }
    /**
     * Entity
     * @type {Entity}
     */
    get entity() {
        return this.structure.entityList[this.entityIndex];
    }
    /**
     * Model
     * @type {ModelProxy}
     */
    get model() {
        return this.structure.getModelProxy(this.modelIndex);
    }
    get entityIndex() {
        return this.chainStore.entityIndex[this.index];
    }
    set entityIndex(value) {
        this.chainStore.entityIndex[this.index] = value;
    }
    get modelIndex() {
        return this.chainStore.modelIndex[this.index];
    }
    set modelIndex(value) {
        this.chainStore.modelIndex[this.index] = value;
    }
    get residueOffset() {
        return this.chainStore.residueOffset[this.index];
    }
    set residueOffset(value) {
        this.chainStore.residueOffset[this.index] = value;
    }
    /**
     * Residue count
     * @type {Integer}
     */
    get residueCount() {
        return this.chainStore.residueCount[this.index];
    }
    set residueCount(value) {
        this.chainStore.residueCount[this.index] = value;
    }
    get residueEnd() {
        return this.residueOffset + this.residueCount - 1;
    }
    get atomOffset() {
        return this.residueStore.atomOffset[this.residueOffset];
    }
    get atomEnd() {
        return (this.residueStore.atomOffset[this.residueEnd] +
            this.residueStore.atomCount[this.residueEnd] - 1);
    }
    /**
     * Atom count
     * @type {Integer}
     */
    get atomCount() {
        if (this.residueCount === 0) {
            return 0;
        }
        else {
            return this.atomEnd - this.atomOffset + 1;
        }
    }
    //
    /**
     * Chain name
     * @type {String}
     */
    get chainname() {
        return this.chainStore.getChainname(this.index);
    }
    set chainname(value) {
        this.chainStore.setChainname(this.index, value);
    }
    /**
     * Chain id
     * @type {String}
     */
    get chainid() {
        return this.chainStore.getChainid(this.index);
    }
    set chainid(value) {
        this.chainStore.setChainid(this.index, value);
    }
    //
    /**
     * Atom iterator
     * @param  {function(atom: AtomProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachAtom(callback, selection) {
        this.eachResidue(function (rp) {
            rp.eachAtom(callback, selection);
        }, selection);
    }
    /**
     * Residue iterator
     * @param  {function(residue: ResidueProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachResidue(callback, selection) {
        const count = this.residueCount;
        const offset = this.residueOffset;
        const rp = this.structure._rp;
        const end = offset + count;
        if (selection && selection.test) {
            const residueOnlyTest = selection.residueOnlyTest;
            if (residueOnlyTest) {
                for (let i = offset; i < end; ++i) {
                    rp.index = i;
                    if (residueOnlyTest(rp)) {
                        callback(rp);
                    }
                }
            }
            else {
                for (let i = offset; i < end; ++i) {
                    rp.index = i;
                    callback(rp);
                }
            }
        }
        else {
            for (let i = offset; i < end; ++i) {
                rp.index = i;
                callback(rp);
            }
        }
    }
    /**
     * Multi-residue iterator
     * @param {Integer} n - window size
     * @param  {function(residueList: ResidueProxy[])} callback - the callback
     * @return {undefined}
     */
    eachResidueN(n, callback) {
        const count = this.residueCount;
        const offset = this.residueOffset;
        const end = offset + count;
        if (count < n)
            return;
        const array = new Array(n);
        for (let i = 0; i < n; ++i) {
            array[i] = this.structure.getResidueProxy(offset + i);
        }
        callback.apply(this, array);
        for (let j = offset + n; j < end; ++j) {
            for (let i = 0; i < n; ++i) {
                array[i].index += 1;
            }
            callback.apply(this, array);
        }
    }
    /**
     * Polymer iterator
     * @param  {function(polymer: Polymer)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachPolymer(callback, selection) {
        let rStartIndex = 0;
        let rNextIndex = 0;
        const test = selection ? selection.residueOnlyTest : undefined;
        const structure = this.model.structure;
        const count = this.residueCount;
        const offset = this.residueOffset;
        const end = offset + count;
        const rp1 = this.structure.getResidueProxy();
        const rp2 = this.structure.getResidueProxy(offset);
        const ap1 = this.structure.getAtomProxy();
        const ap2 = this.structure.getAtomProxy();
        let first = true;
        for (let i = offset + 1; i < end; ++i) {
            rp1.index = rp2.index;
            rp2.index = i;
            const bbType1 = first ? rp1.backboneEndType : rp1.backboneType;
            const bbType2 = rp2.backboneType;
            if (first) {
                rStartIndex = rp1.index;
                first = false;
            }
            rNextIndex = rp2.index;
            if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
                ap1.index = rp1.backboneEndAtomIndex;
                ap2.index = rp2.backboneStartAtomIndex;
            }
            else {
                if (bbType1 !== UnknownBackboneType) {
                    if (rp1.index - rStartIndex > 1) {
                        // console.log("FOO1",rStartIndex, rp1.index)
                        callback(new Polymer(structure, rStartIndex, rp1.index));
                    }
                }
                rStartIndex = rNextIndex;
                continue;
            }
            if (!ap1 || !ap2 || !ap1.connectedTo(ap2) ||
                (test && (!test(rp1) || !test(rp2)))) {
                if (rp1.index - rStartIndex > 1) {
                    // console.log("FOO2",rStartIndex, rp1.index)
                    callback(new Polymer(structure, rStartIndex, rp1.index));
                }
                rStartIndex = rNextIndex;
            }
        }
        if (rNextIndex - rStartIndex > 1) {
            if (this.structure.getResidueProxy(rStartIndex).backboneEndType) {
                // console.log("FOO3",rStartIndex, rNextIndex)
                callback(new Polymer(structure, rStartIndex, rNextIndex));
            }
        }
    }
    //
    qualifiedName() {
        var name = ':' + this.chainname + '/' + this.modelIndex;
        return name;
    }
    /**
     * Clone object
     * @return {ChainProxy} cloned chain
     */
    clone() {
        return new ChainProxy(this.structure, this.index);
    }
    toObject() {
        return {
            index: this.index,
            residueOffset: this.residueOffset,
            residueCount: this.residueCount,
            chainname: this.chainname
        };
    }
}

/**
 * @file Model Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Model proxy
 */
class ModelProxy {
    /**
     * @param {Structure} structure - the structure
     * @param {Integer} index - the index
     */
    constructor(structure, index = 0) {
        this.structure = structure;
        this.index = index;
        this.modelStore = structure.modelStore;
        this.chainStore = structure.chainStore;
        this.residueStore = structure.residueStore;
    }
    get chainOffset() {
        return this.modelStore.chainOffset[this.index];
    }
    set chainOffset(value) {
        this.modelStore.chainOffset[this.index] = value;
    }
    get chainCount() {
        return this.modelStore.chainCount[this.index];
    }
    set chainCount(value) {
        this.modelStore.chainCount[this.index] = value;
    }
    get residueOffset() {
        return this.chainStore.residueOffset[this.chainOffset];
    }
    get atomOffset() {
        return this.residueStore.atomOffset[this.residueOffset];
    }
    get chainEnd() {
        return this.chainOffset + this.chainCount - 1;
    }
    get residueEnd() {
        return (this.chainStore.residueOffset[this.chainEnd] +
            this.chainStore.residueCount[this.chainEnd] - 1);
    }
    get atomEnd() {
        return (this.residueStore.atomOffset[this.residueEnd] +
            this.residueStore.atomCount[this.residueEnd] - 1);
    }
    /**
     * Residue count
     * @type {Integer}
     */
    get residueCount() {
        if (this.chainCount === 0) {
            return 0;
        }
        else {
            return this.residueEnd - this.residueOffset + 1;
        }
    }
    /**
     * Atom count
     * @type {Integer}
     */
    get atomCount() {
        if (this.residueCount === 0) {
            return 0;
        }
        else {
            return this.atomEnd - this.atomOffset + 1;
        }
    }
    //
    /**
     * Atom iterator
     * @param  {function(atom: AtomProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachAtom(callback, selection) {
        this.eachChain(function (cp) {
            cp.eachAtom(callback, selection);
        }, selection);
    }
    /**
     * Residue iterator
     * @param  {function(residue: ResidueProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachResidue(callback, selection) {
        this.eachChain(function (cp) {
            cp.eachResidue(callback, selection);
        }, selection);
    }
    /**
     * Polymer iterator
     * @param  {function(polymer: Polymer)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachPolymer(callback, selection) {
        if (selection && selection.chainOnlyTest) {
            const chainOnlyTest = selection.chainOnlyTest;
            this.eachChain(function (cp) {
                if (chainOnlyTest(cp)) {
                    cp.eachPolymer(callback, selection);
                }
            });
        }
        else {
            this.eachChain(function (cp) {
                cp.eachPolymer(callback, selection);
            });
        }
    }
    /**
     * Chain iterator
     * @param  {function(chain: ChainProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachChain(callback, selection) {
        const count = this.chainCount;
        const offset = this.chainOffset;
        const cp = this.structure._cp;
        const end = offset + count;
        if (selection && selection.test) {
            const chainOnlyTest = selection.chainOnlyTest;
            if (chainOnlyTest) {
                for (let i = offset; i < end; ++i) {
                    cp.index = i;
                    if (chainOnlyTest(cp)) {
                        callback(cp);
                    }
                }
            }
            else {
                for (let i = offset; i < end; ++i) {
                    cp.index = i;
                    callback(cp);
                }
            }
        }
        else {
            for (let i = offset; i < end; ++i) {
                cp.index = i;
                callback(cp);
            }
        }
    }
    //
    qualifiedName() {
        const name = '/' + this.index;
        return name;
    }
    /**
     * Clone object
     * @return {ModelProxy} cloned model
     */
    clone() {
        return new ModelProxy(this.structure, this.index);
    }
    toObject() {
        return {
            index: this.index,
            chainOffset: this.chainOffset,
            chainCount: this.chainCount
        };
    }
}

/**
 * @file Structure
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Structure
 */
class Structure {
    /**
     * @param {String} name - structure name
     * @param {String} path - source path
     */
    constructor(name = '', path = '') {
        this.signals = {
            refreshed: new Signal()
        };
        this.init(name, path);
    }
    init(name, path) {
        this.name = name;
        this.path = path;
        this.title = '';
        this.id = '';
        this.data = createData(this);
        this.header = {};
        this.extraData = {};
        this.atomSetCache = {};
        this.atomSetDict = {};
        this.biomolDict = {};
        this.entityList = [];
        this.unitcell = undefined;
        this.frames = [];
        this.boxes = [];
        this.validation = undefined;
        this.bondStore = new BondStore(0);
        this.backboneBondStore = new BondStore(0);
        this.rungBondStore = new BondStore(0);
        this.atomStore = new AtomStore(0);
        this.residueStore = new ResidueStore(0);
        this.chainStore = new ChainStore(0);
        this.modelStore = new ModelStore(0);
        this.atomMap = new AtomMap(this);
        this.residueMap = new ResidueMap(this);
        this.chemCompMap = undefined;
        this.bondHash = undefined;
        this.spatialHash = undefined;
        this.atomSet = undefined;
        this.bondSet = undefined;
        this.center = new Vector3();
        this.boundingBox = new Box3();
        this._bp = this.getBondProxy();
        this._ap = this.getAtomProxy();
        this._rp = this.getResidueProxy();
        this._cp = this.getChainProxy();
    }
    get type() { return 'Structure'; }
    finalizeAtoms() {
        this.atomSet = this.getAtomSet();
        this.atomCount = this.atomStore.count;
        this.boundingBox = this.getBoundingBox(undefined, this.boundingBox);
        this.center = this.boundingBox.getCenter(new Vector3());
        this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
    }
    finalizeBonds() {
        this.bondSet = this.getBondSet();
        this.bondCount = this.bondStore.count;
        this.bondHash = new BondHash(this.bondStore, this.atomStore.count);
        this.atomSetCache = {};
        if (!this.atomSetDict.rung) {
            this.atomSetDict.rung = this.getAtomSet(false);
        }
        for (let name in this.atomSetDict) {
            this.atomSetCache['__' + name] = this.atomSetDict[name].clone();
        }
    }
    //
    getBondProxy(index) {
        return new BondProxy(this, index);
    }
    getAtomProxy(index) {
        return new AtomProxy(this, index);
    }
    getResidueProxy(index) {
        return new ResidueProxy(this, index);
    }
    getChainProxy(index) {
        return new ChainProxy(this, index);
    }
    getModelProxy(index) {
        return new ModelProxy(this, index);
    }
    //
    getBondSet( /* selection */) {
        // TODO implement selection parameter
        const n = this.bondStore.count;
        const bondSet = new BitArray(n);
        const atomSet = this.atomSet;
        if (atomSet) {
            if (atomSet.isAllSet()) {
                bondSet.setAll();
            }
            else if (atomSet.isAllClear()) {
                bondSet.clearAll();
            }
            else {
                const bp = this.getBondProxy();
                for (let i = 0; i < n; ++i) {
                    bp.index = i;
                    if (atomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                        bondSet.set(bp.index);
                    }
                }
            }
        }
        else {
            bondSet.setAll();
        }
        return bondSet;
    }
    getBackboneBondSet( /* selection */) {
        // TODO implement selection parameter
        const n = this.backboneBondStore.count;
        const backboneBondSet = new BitArray(n);
        const backboneAtomSet = this.atomSetCache.__backbone;
        if (backboneAtomSet) {
            const bp = this.getBondProxy();
            bp.bondStore = this.backboneBondStore;
            for (let i = 0; i < n; ++i) {
                bp.index = i;
                if (backboneAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                    backboneBondSet.set(bp.index);
                }
            }
        }
        else {
            backboneBondSet.setAll();
        }
        return backboneBondSet;
    }
    getRungBondSet( /* selection */) {
        // TODO implement selection parameter
        const n = this.rungBondStore.count;
        const rungBondSet = new BitArray(n);
        const rungAtomSet = this.atomSetCache.__rung;
        if (rungAtomSet) {
            const bp = this.getBondProxy();
            bp.bondStore = this.rungBondStore;
            for (let i = 0; i < n; ++i) {
                bp.index = i;
                if (rungAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
                    rungBondSet.set(bp.index);
                }
            }
        }
        else {
            rungBondSet.setAll();
        }
        return rungBondSet;
    }
    /**
     * Get a set of atoms
     * @param  {Boolean|Selection|BitArray} selection - object defining how to
     *                                      initialize the atom set.
     *                                      Boolean: init with value;
     *                                      Selection: init with selection;
     *                                      BitArray: return bit array
     * @return {BitArray} set of atoms
     */
    getAtomSet(selection) {
        const n = this.atomStore.count;
        if (selection === undefined) {
            return new BitArray(n, true);
        }
        else if (selection instanceof BitArray) {
            return selection;
        }
        else if (selection === true) {
            return new BitArray(n, true);
        }
        else if (selection && selection.test) {
            const seleString = selection.string;
            if (seleString in this.atomSetCache) {
                return this.atomSetCache[seleString];
            }
            else {
                if (seleString === '') {
                    return new BitArray(n, true);
                }
                else {
                    const atomSet = new BitArray(n);
                    this.eachAtom(function (ap) {
                        atomSet.set(ap.index);
                    }, selection);
                    this.atomSetCache[seleString] = atomSet;
                    return atomSet;
                }
            }
        }
        else if (selection === false) {
            return new BitArray(n);
        }
        return new BitArray(n, true);
    }
    /**
     * Get set of atoms around a set of atoms from a selection
     * @param  {Selection} selection - the selection object
     * @param  {Number} radius - radius to select within
     * @return {BitArray} set of atoms
     */
    getAtomSetWithinSelection(selection, radius) {
        const spatialHash = this.spatialHash;
        const atomSet = this.getAtomSet(false);
        const ap = this.getAtomProxy();
        if (!spatialHash)
            return atomSet;
        this.getAtomSet(selection).forEach(function (idx) {
            ap.index = idx;
            spatialHash.within(ap.x, ap.y, ap.z, radius).forEach(function (idx2) {
                atomSet.set(idx2);
            });
        });
        return atomSet;
    }
    /**
     * Get set of atoms around a point
     * @param  {Vector3|AtomProxy} point - the point
     * @param  {Number} radius - radius to select within
     * @return {BitArray} set of atoms
     */
    getAtomSetWithinPoint(point, radius) {
        const p = point;
        const atomSet = this.getAtomSet(false);
        if (!this.spatialHash)
            return atomSet;
        this.spatialHash.within(p.x, p.y, p.z, radius).forEach(function (idx) {
            atomSet.set(idx);
        });
        return atomSet;
    }
    /**
     * Get set of atoms within a volume
     * @param  {Volume} volume - the volume
     * @param  {Number} radius - radius to select within
     * @param  {[type]} minValue - minimum value to be considered as within the volume
     * @param  {[type]} maxValue - maximum value to be considered as within the volume
     * @param  {[type]} outside - use only values falling outside of the min/max values
     * @return {BitArray} set of atoms
     */
    getAtomSetWithinVolume(volume, radius, minValue, maxValue, outside) {
        const fv = new FilteredVolume(volume, minValue, maxValue, outside); // TODO
        const dp = fv.getDataPosition();
        const n = dp.length;
        const r = fv.matrix.getMaxScaleOnAxis();
        const atomSet = this.getAtomSet(false);
        if (!this.spatialHash)
            return atomSet;
        for (let i = 0; i < n; i += 3) {
            this.spatialHash.within(dp[i], dp[i + 1], dp[i + 2], r).forEach(function (idx) {
                atomSet.set(idx);
            });
        }
        return atomSet;
    }
    /**
     * Get set of all atoms within the groups of a selection
     * @param  {Selection} selection - the selection object
     * @return {BitArray} set of atoms
     */
    getAtomSetWithinGroup(selection) {
        const atomResidueIndex = this.atomStore.residueIndex;
        const atomSet = this.getAtomSet(false);
        const rp = this.getResidueProxy();
        this.getAtomSet(selection).forEach(function (idx) {
            rp.index = atomResidueIndex[idx];
            for (let idx2 = rp.atomOffset; idx2 <= rp.atomEnd; ++idx2) {
                atomSet.set(idx2);
            }
        });
        return atomSet;
    }
    //
    getSelection() {
        return;
    }
    getStructure() {
        return this;
    }
    /**
     * Entity iterator
     * @param  {function(entity: Entity)} callback - the callback
     * @param  {EntityType} type - entity type
     * @return {undefined}
     */
    eachEntity(callback, type) {
        this.entityList.forEach(function (entity) {
            if (type === undefined || entity.getEntityType() === type) {
                callback(entity);
            }
        });
    }
    /**
     * Bond iterator
     * @param  {function(bond: BondProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachBond(callback, selection) {
        const bp = this.getBondProxy();
        let bondSet;
        if (selection && selection.test) {
            bondSet = this.getBondSet( /*selection*/);
            if (this.bondSet) {
                bondSet.intersection(this.bondSet);
            }
        }
        if (bondSet) {
            bondSet.forEach(function (index) {
                bp.index = index;
                callback(bp);
            });
        }
        else {
            const n = this.bondStore.count;
            for (let i = 0; i < n; ++i) {
                bp.index = i;
                callback(bp);
            }
        }
    }
    /**
     * Atom iterator
     * @param  {function(atom: AtomProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachAtom(callback, selection) {
        if (selection && selection.test) {
            this.eachModel(function (mp) {
                mp.eachAtom(callback, selection);
            }, selection);
        }
        else {
            const an = this.atomStore.count;
            const ap = this.getAtomProxy();
            for (let i = 0; i < an; ++i) {
                ap.index = i;
                callback(ap);
            }
        }
    }
    /**
     * Residue iterator
     * @param  {function(residue: ResidueProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachResidue(callback, selection) {
        if (selection && selection.test) {
            const mn = this.modelStore.count;
            const mp = this.getModelProxy();
            const modelOnlyTest = selection.modelOnlyTest;
            if (modelOnlyTest) {
                for (let i = 0; i < mn; ++i) {
                    mp.index = i;
                    if (modelOnlyTest(mp)) {
                        mp.eachResidue(callback, selection);
                    }
                }
            }
            else {
                for (let i = 0; i < mn; ++i) {
                    mp.index = i;
                    mp.eachResidue(callback, selection);
                }
            }
        }
        else {
            const rn = this.residueStore.count;
            const rp = this.getResidueProxy();
            for (let i = 0; i < rn; ++i) {
                rp.index = i;
                callback(rp);
            }
        }
    }
    /**
     * Multi-residue iterator
     * @param {Integer} n - window size
     * @param  {function(residueList: ResidueProxy[])} callback - the callback
     * @return {undefined}
     */
    eachResidueN(n, callback) {
        const rn = this.residueStore.count;
        if (rn < n)
            return;
        const array = new Array(n);
        for (let i = 0; i < n; ++i) {
            array[i] = this.getResidueProxy(i);
        }
        callback.apply(this, array);
        for (let j = n; j < rn; ++j) {
            for (let i = 0; i < n; ++i) {
                array[i].index += 1;
            }
            callback.apply(this, array);
        }
    }
    /**
     * Polymer iterator
     * @param  {function(polymer: Polymer)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachPolymer(callback, selection) {
        if (selection && selection.modelOnlyTest) {
            const modelOnlyTest = selection.modelOnlyTest;
            this.eachModel(function (mp) {
                if (modelOnlyTest(mp)) {
                    mp.eachPolymer(callback, selection);
                }
            });
        }
        else {
            this.eachModel(function (mp) {
                mp.eachPolymer(callback, selection);
            });
        }
    }
    /**
     * Chain iterator
     * @param  {function(chain: ChainProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachChain(callback, selection) {
        if (selection && selection.test) {
            this.eachModel(function (mp) {
                mp.eachChain(callback, selection);
            });
        }
        else {
            const cn = this.chainStore.count;
            const cp = this.getChainProxy();
            for (let i = 0; i < cn; ++i) {
                cp.index = i;
                callback(cp);
            }
        }
    }
    /**
     * Model iterator
     * @param  {function(model: ModelProxy)} callback - the callback
     * @param  {Selection} [selection] - the selection
     * @return {undefined}
     */
    eachModel(callback, selection) {
        const n = this.modelStore.count;
        const mp = this.getModelProxy();
        if (selection && selection.test) {
            const modelOnlyTest = selection.modelOnlyTest;
            if (modelOnlyTest) {
                for (let i = 0; i < n; ++i) {
                    mp.index = i;
                    if (modelOnlyTest(mp)) {
                        callback(mp);
                    }
                }
            }
            else {
                for (let i = 0; i < n; ++i) {
                    mp.index = i;
                    callback(mp);
                }
            }
        }
        else {
            for (let i = 0; i < n; ++i) {
                mp.index = i;
                callback(mp);
            }
        }
    }
    //
    getAtomData(params) {
        const p = Object.assign({}, params);
        if (p.colorParams)
            p.colorParams.structure = this.getStructure();
        const what = p.what;
        const atomSet = defaults(p.atomSet, this.atomSet);
        let radiusFactory; // TODO
        let colormaker; // TODO
        const atomData = {};
        const ap = this.getAtomProxy();
        const atomCount = atomSet.getSize();
        if (!what || what.position) {
            atomData.position = new Float32Array(atomCount * 3);
        }
        if ((!what || what.color) && p.colorParams) {
            atomData.color = new Float32Array(atomCount * 3);
            colormaker = ColormakerRegistry.getScheme(p.colorParams);
        }
        if (!what || what.picking) {
            atomData.picking = new AtomPicker(new Float32Array(atomCount), this.getStructure());
        }
        if (!what || what.radius) {
            atomData.radius = new Float32Array(atomCount);
            radiusFactory = new RadiusFactory(p.radiusParams);
        }
        if (!what || what.index) {
            atomData.index = new Uint32Array(atomCount);
        }
        const { position, color, picking, radius, index } = atomData;
        atomSet.forEach((idx, i) => {
            const i3 = i * 3;
            ap.index = idx;
            if (position) {
                ap.positionToArray(position, i3);
            }
            if (color) {
                colormaker.atomColorToArray(ap, color, i3);
            }
            if (picking) {
                picking.array[i] = idx;
            }
            if (radius) {
                radius[i] = radiusFactory.atomRadius(ap);
            }
            if (index) {
                index[i] = idx;
            }
        });
        return atomData;
    }
    getBondData(params) {
        const p = Object.assign({}, params);
        if (p.colorParams)
            p.colorParams.structure = this.getStructure();
        const what = p.what;
        const bondSet = defaults(p.bondSet, this.bondSet);
        const multipleBond = defaults(p.multipleBond, 'off');
        const isMulti = multipleBond !== 'off';
        const isOffset = multipleBond === 'offset';
        const bondScale = defaults(p.bondScale, 0.4);
        const bondSpacing = defaults(p.bondSpacing, 1.0);
        let radiusFactory; // TODO
        let colormaker; // TODO
        const bondData = {};
        const bp = this.getBondProxy();
        if (p.bondStore)
            bp.bondStore = p.bondStore;
        const ap1 = this.getAtomProxy();
        const ap2 = this.getAtomProxy();
        let bondCount;
        if (isMulti) {
            const storeBondOrder = bp.bondStore.bondOrder;
            bondCount = 0;
            bondSet.forEach(function (index) {
                bondCount += storeBondOrder[index];
            });
        }
        else {
            bondCount = bondSet.getSize();
        }
        if (!what || what.position) {
            bondData.position1 = new Float32Array(bondCount * 3);
            bondData.position2 = new Float32Array(bondCount * 3);
        }
        if ((!what || what.color) && p.colorParams) {
            bondData.color = new Float32Array(bondCount * 3);
            bondData.color2 = new Float32Array(bondCount * 3);
            colormaker = ColormakerRegistry.getScheme(p.colorParams);
        }
        if (!what || what.picking) {
            bondData.picking = new BondPicker(new Float32Array(bondCount), this.getStructure(), p.bondStore);
        }
        if (!what || what.radius || (isMulti && what.position)) {
            radiusFactory = new RadiusFactory(p.radiusParams);
        }
        if (!what || what.radius) {
            bondData.radius = new Float32Array(bondCount);
            if (p.radius2) {
                bondData.radius2 = new Float32Array(bondCount);
            }
        }
        const { position1, position2, color, color2, picking, radius, radius2 } = bondData;
        let i = 0;
        let j, i3, k, bondOrder, absOffset;
        let multiRadius;
        const vt = new Vector3();
        const vShortening = new Vector3();
        const vShift = new Vector3();
        bondSet.forEach((index) => {
            i3 = i * 3;
            bp.index = index;
            ap1.index = bp.atomIndex1;
            ap2.index = bp.atomIndex2;
            bondOrder = bp.bondOrder;
            if (position1) {
                if (isMulti && bondOrder > 1) {
                    const atomRadius = radiusFactory.atomRadius(ap1);
                    multiRadius = atomRadius * bondScale / (0.5 * bondOrder);
                    bp.calculateShiftDir(vShift);
                    if (isOffset) {
                        absOffset = 2 * bondSpacing * atomRadius;
                        vShift.multiplyScalar(absOffset);
                        vShift.negate();
                        // Shortening is calculated so that neighbouring double
                        // bonds on tetrahedral geometry (e.g. sulphonamide)
                        // are not quite touching (arccos(1.9 / 2) ~ 109deg)
                        // but don't shorten beyond 10% each end or it looks odd
                        vShortening.subVectors(ap2, ap1).multiplyScalar(// TODO
                        Math.max(0.1, absOffset / 1.88));
                        ap1.positionToArray(position1, i3);
                        ap2.positionToArray(position2, i3);
                        if (bondOrder >= 2) {
                            vt.addVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 3); // TODO
                            vt.addVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 3); // TODO
                            if (bondOrder >= 3) {
                                vt.subVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 6); // TODO
                                vt.subVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 6); // TODO
                            }
                        }
                    }
                    else {
                        absOffset = (bondSpacing - bondScale) * atomRadius;
                        vShift.multiplyScalar(absOffset);
                        if (bondOrder === 2) {
                            vt.addVectors(ap1, vShift).toArray(position1, i3); // TODO
                            vt.subVectors(ap1, vShift).toArray(position1, i3 + 3); // TODO
                            vt.addVectors(ap2, vShift).toArray(position2, i3); // TODO
                            vt.subVectors(ap2, vShift).toArray(position2, i3 + 3); // TODO
                        }
                        else if (bondOrder === 3) {
                            ap1.positionToArray(position1, i3);
                            vt.addVectors(ap1, vShift).toArray(position1, i3 + 3); // TODO
                            vt.subVectors(ap1, vShift).toArray(position1, i3 + 6); // TODO
                            ap2.positionToArray(position2, i3);
                            vt.addVectors(ap2, vShift).toArray(position2, i3 + 3); // TODO
                            vt.subVectors(ap2, vShift).toArray(position2, i3 + 6); // TODO
                        }
                        else {
                            // todo, better fallback
                            ap1.positionToArray(position1, i3);
                            ap2.positionToArray(position2, i3);
                        }
                    }
                }
                else {
                    ap1.positionToArray(position1, i3);
                    ap2.positionToArray(position2, i3);
                }
            }
            if (color && color2) {
                colormaker.bondColorToArray(bp, 1, color, i3);
                colormaker.bondColorToArray(bp, 0, color2, i3);
                if (isMulti && bondOrder > 1) {
                    for (j = 1; j < bondOrder; ++j) {
                        k = j * 3 + i3;
                        copyWithin(color, i3, k, 3);
                        copyWithin(color2, i3, k, 3);
                    }
                }
            }
            if (picking && picking.array) {
                picking.array[i] = index;
                if (isMulti && bondOrder > 1) {
                    for (j = 1; j < bondOrder; ++j) {
                        picking.array[i + j] = index;
                    }
                }
            }
            if (radius) {
                radius[i] = radiusFactory.atomRadius(ap1);
                if (isMulti && bondOrder > 1) {
                    multiRadius = radius[i] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
                    for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
                        radius[i + j] = multiRadius;
                    }
                }
            }
            if (radius2) {
                radius2[i] = radiusFactory.atomRadius(ap2);
                if (isMulti && bondOrder > 1) {
                    multiRadius = radius2[i] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
                    for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
                        radius2[i + j] = multiRadius;
                    }
                }
            }
            i += isMulti ? bondOrder : 1;
        });
        return bondData;
    }
    getBackboneAtomData(params) {
        params = Object.assign({
            atomSet: this.atomSetCache.__backbone
        }, params);
        return this.getAtomData(params);
    }
    getBackboneBondData(params) {
        params = Object.assign({
            bondSet: this.getBackboneBondSet(),
            bondStore: this.backboneBondStore
        }, params);
        return this.getBondData(params);
    }
    getRungAtomData(params) {
        params = Object.assign({
            atomSet: this.atomSetCache.__rung
        }, params);
        return this.getAtomData(params);
    }
    getRungBondData(params) {
        params = Object.assign({
            bondSet: this.getRungBondSet(),
            bondStore: this.rungBondStore
        }, params);
        return this.getBondData(params);
    }
    //
    /**
     * Gets the bounding box of the (selected) structure atoms
     * @param  {Selection} [selection] - the selection
     * @param  {Box3} [box] - optional target
     * @return {Vector3} the box
     */
    getBoundingBox(selection, box) {
        if (Debug)
            Log.time('getBoundingBox');
        box = box || new Box3();
        let minX = +Infinity;
        let minY = +Infinity;
        let minZ = +Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        let maxZ = -Infinity;
        this.eachAtom(ap => {
            const x = ap.x;
            const y = ap.y;
            const z = ap.z;
            if (x < minX)
                minX = x;
            if (y < minY)
                minY = y;
            if (z < minZ)
                minZ = z;
            if (x > maxX)
                maxX = x;
            if (y > maxY)
                maxY = y;
            if (z > maxZ)
                maxZ = z;
        }, selection);
        box.min.set(minX, minY, minZ);
        box.max.set(maxX, maxY, maxZ);
        if (Debug)
            Log.timeEnd('getBoundingBox');
        return box;
    }
    /**
     * Gets the principal axes of the (selected) structure atoms
     * @param  {Selection} [selection] - the selection
     * @return {PrincipalAxes} the principal axes
     */
    getPrincipalAxes(selection) {
        if (Debug)
            Log.time('getPrincipalAxes');
        let i = 0;
        const coords = new Matrix$2(3, this.atomCount);
        const cd = coords.data;
        this.eachAtom(a => {
            cd[i + 0] = a.x;
            cd[i + 1] = a.y;
            cd[i + 2] = a.z;
            i += 3;
        }, selection);
        if (Debug)
            Log.timeEnd('getPrincipalAxes');
        return new PrincipalAxes(coords);
    }
    /**
     * Gets the center of the (selected) structure atoms
     * @param  {Selection} [selection] - the selection
     * @return {Vector3} the center
     */
    atomCenter(selection) {
        if (selection) {
            return this.getBoundingBox(selection).getCenter(new Vector3());
        }
        else {
            return this.center.clone();
        }
    }
    hasCoords() {
        if (this._hasCoords === undefined) {
            const atomStore = this.atomStore;
            this._hasCoords = (arrayMin(atomStore.x) !== 0 || arrayMax(atomStore.x) !== 0 ||
                arrayMin(atomStore.y) !== 0 || arrayMax(atomStore.y) !== 0 ||
                arrayMin(atomStore.z) !== 0 || arrayMax(atomStore.z) !== 0) || (
            // allow models with a single atom at the origin
            atomStore.count / this.modelStore.count === 1);
        }
        return this._hasCoords;
    }
    getSequence(selection) {
        const seq = [];
        const rp = this.getResidueProxy();
        this.eachAtom(function (ap) {
            rp.index = ap.residueIndex;
            if (ap.index === rp.traceAtomIndex) {
                seq.push(rp.getResname1());
            }
        }, selection);
        return seq;
    }
    getAtomIndices(selection) {
        if (selection && selection.string) {
            const indices = [];
            this.eachAtom(function (ap) {
                indices.push(ap.index);
            }, selection);
            return new Uint32Array(indices);
        }
        else {
            const p = { what: { index: true } };
            return this.getAtomData(p).index;
        }
    }
    /**
     * Get number of unique chainnames
     * @param  {Selection} selection - limit count to selection
     * @return {Integer} count
     */
    getChainnameCount(selection) {
        const chainnames = new Set();
        this.eachChain(function (cp) {
            if (cp.residueCount) {
                chainnames.add(cp.chainname);
            }
        }, selection);
        return chainnames.size;
    }
    /**
     * Update atomic positions
     * @param position - Array to copy positions from
     * @param refresh - Whether or not to issue a full refresh (automatically
     *                  triggers re-calculation of bounding boxes, spatial hash,
     *                  representations etc etc). This provides compatibility with
     *                  the old behaviour
     */
    updatePosition(position, refresh = true) {
        let i = 0;
        this.eachAtom(function (ap) {
            ap.positionFromArray(position, i);
            i += 3;
        }, undefined);
        this._hasCoords = undefined; // to trigger recalculation (of the _hasCoords value)
        if (refresh) {
            this.refreshPosition(); // Recalculate bounds - structure-component listener will 
            // trigger representation rebuild
        }
    }
    refreshPosition() {
        this.getBoundingBox(undefined, this.boundingBox);
        this.boundingBox.getCenter(this.center);
        this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
        this.signals.refreshed.dispatch(this);
    }
    /**
     * Calls dispose() method of property objects.
     * Unsets properties to help garbage collection.
     * @return {undefined}
     */
    dispose() {
        if (this.frames)
            this.frames.length = 0;
        if (this.boxes)
            this.boxes.length = 0;
        this.bondStore.dispose();
        this.backboneBondStore.dispose();
        this.rungBondStore.dispose();
        this.atomStore.dispose();
        this.residueStore.dispose();
        this.chainStore.dispose();
        this.modelStore.dispose();
        // can't delete non-optional properties as of TS 4
        // and since we've already disposed them, don't need to.
        delete this.bondSet;
        delete this.atomSet;
    }
}

/**
 * @file Shape
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const tmpBox = new Box3();
const Primitives = [
    ArrowPrimitive, BoxPrimitive, ConePrimitive, CylinderPrimitive,
    EllipsoidPrimitive, OctahedronPrimitive, SpherePrimitive, TetrahedronPrimitive,
    TextPrimitive, TorusPrimitive, PointPrimitive, WidelinePrimitive
];
const ShapeDefaultParameters = {
    aspectRatio: 1.5,
    sphereDetail: 2,
    radialSegments: 50,
    disableImpostor: false,
    openEnded: false,
    dashedCylinder: false,
    labelParams: {},
    pointSize: 2,
    sizeAttenuation: false,
    useTexture: true,
    linewidth: 2
};
/**
 * Class for building custom shapes.
 *
 * @example
 * var shape = new NGL.Shape('shape', { disableImpostor: true });
 * shape.addSphere([ 0, 0, 9 ], [ 1, 0, 0 ], 1.5 );
 * shape.addEllipsoid([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
 * shape.addCylinder([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
 * shape.addCone([ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5);
 * shape.addArrow([ 1, 2, 7 ], [ 30, 3, 3 ], [ 1, 0, 1 ], 1.0);
 * shape.addBox([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
 * var shapeComp = stage.addComponentFromObject(shape);
 * geoComp.addRepresentation('buffer');
 */
class Shape {
    /**
     * @param {String} name - name
     * @param {Object} params - parameter object
     * @param {Integer} params.aspectRatio - arrow aspect ratio, used for cylinder radius and cone length
     * @param {Integer} params.sphereDetail - sphere quality (icosahedron subdivisions)
     * @param {Integer} params.radialSegments - cylinder quality (number of segments)
     * @param {Boolean} params.disableImpostor - disable use of raycasted impostors for rendering
     * @param {Boolean} params.openEnded - capped or not
     * @param {TextBufferParameters} params.labelParams - label parameters
     */
    constructor(name = 'shape', params = {}) {
        this.boundingBox = new Box3();
        this.bufferList = [];
        this.meshCount = 0;
        this._primitiveData = {};
        this.name = name;
        this.parameters = createParams(params, ShapeDefaultParameters);
        Primitives.forEach(P => {
            Object.keys(P.fields).forEach(name => {
                this._primitiveData[P.getShapeKey(name)] = [];
            });
            this._primitiveData[P.getShapeKey('name')] = [];
        });
    }
    /**
     * Add a buffer
     * @param {Buffer} buffer - buffer object
     * @return {Shape} this object
     */
    addBuffer(buffer) {
        this.bufferList.push(buffer);
        const geometry = buffer.geometry; // TODO
        if (!geometry.boundingBox) {
            geometry.computeBoundingBox();
        }
        this.boundingBox.union(geometry.boundingBox);
        return this;
    }
    /**
     * Add a mesh
     * @example
     * shape.addMesh(
     *   [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ],
     *   [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
     * );
     *
     * @param {Float32Array|Array} position - positions
     * @param {Float32Array|Array} color - colors
     * @param {Uint32Array|Uint16Array|Array} [index] - indices
     * @param {Float32Array|Array} [normal] - normals
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addMesh(position, color, index, normal, name) {
        position = ensureFloat32Array(position);
        color = ensureFloat32Array(color);
        if (Array.isArray(index)) {
            index = getUintArray(index, position.length);
        }
        if (normal) {
            normal = ensureFloat32Array(normal);
        }
        let data;
        if (normal === undefined || normal.length == 0) {
            data = { position, color, index };
        }
        else {
            data = { position, color, index, normal };
        }
        //const data = { position, color, index, normal }
        const picking = new MeshPicker(this, Object.assign({ serial: this.meshCount, name }, data));
        const meshBuffer = new MeshBuffer(Object.assign({ picking }, data));
        this.bufferList.push(meshBuffer);
        tmpBox.setFromArray(position);
        this.boundingBox.union(tmpBox);
        this.meshCount += 1;
        return this;
    }
    /**
     * Add a sphere
     * @example
     * shape.addSphere([ 0, 0, 9 ], [ 1, 0, 0 ], 1.5);
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} radius - radius value
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addSphere(position, color, radius, name) {
        SpherePrimitive.objectToShape(this, { position, color, radius, name });
        return this;
    }
    /**
     * Add an ellipsoid
     * @example
     * shape.addEllipsoid([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} radius - radius value
     * @param {Vector3|Array} majorAxis - major axis vector or array
     * @param {Vector3|Array} minorAxis - minor axis vector or array
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addEllipsoid(position, color, radius, majorAxis, minorAxis, name) {
        EllipsoidPrimitive.objectToShape(this, { position, color, radius, majorAxis, minorAxis, name });
        return this;
    }
    /**
     * Add a torus
     * @example
     * shape.addTorus([ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ]);
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} radius - radius value
     * @param {Vector3|Array} majorAxis - major axis vector or array
     * @param {Vector3|Array} minorAxis - minor axis vector or array
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addTorus(position, color, radius, majorAxis, minorAxis, name) {
        TorusPrimitive.objectToShape(this, { position, color, radius, majorAxis, minorAxis, name });
        return this;
    }
    /**
     * Add a cylinder
     * @example
     * shape.addCylinder([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
     *
     * @param {Vector3|Array} position1 - from position vector or array
     * @param {Vector3|Array} position2 - to position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} radius - radius value
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addCylinder(position1, position2, color, radius, name) {
        CylinderPrimitive.objectToShape(this, { position1, position2, color, radius, name });
        return this;
    }
    /**
     * Add a cone
     * @example
     * shape.addCone([ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5);
     *
     * @param {Vector3|Array} position1 - from position vector or array
     * @param {Vector3|Array} position2 - to position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} radius - radius value
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addCone(position1, position2, color, radius, name) {
        ConePrimitive.objectToShape(this, { position1, position2, color, radius, name });
        return this;
    }
    /**
     * Add an arrow
     * @example
     * shape.addArrow([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5);
     *
     * @param {Vector3|Array} position1 - from position vector or array
     * @param {Vector3|Array} position2 - to position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} radius - radius value
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addArrow(position1, position2, color, radius, name) {
        ArrowPrimitive.objectToShape(this, { position1, position2, color, radius, name });
        return this;
    }
    /**
     * Add a box
     * @example
     * shape.addBox([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} size - size value
     * @param {Vector3|Array} heightAxis - height axis vector or array
     * @param {Vector3|Array} depthAxis - depth axis vector or array
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addBox(position, color, size, heightAxis, depthAxis, name) {
        BoxPrimitive.objectToShape(this, { position, color, size, heightAxis, depthAxis, name });
        return this;
    }
    /**
     * Add an octahedron
     * @example
     * shape.addOctahedron([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} size - size value
     * @param {Vector3|Array} heightAxis - height axis vector or array
     * @param {Vector3|Array} depthAxis - depth axis vector or array
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addOctahedron(position, color, size, heightAxis, depthAxis, name) {
        OctahedronPrimitive.objectToShape(this, { position, color, size, heightAxis, depthAxis, name });
        return this;
    }
    /**
     * Add a tetrahedron
     * @example
     * shape.addTetrahedron([ 0, 3, 0 ], [ 1, 0, 1 ], 2, [ 0, 1, 1 ], [ 1, 0, 1 ]);
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} size - size value
     * @param {Vector3|Array} heightAxis - height axis vector or array
     * @param {Vector3|Array} depthAxis - depth axis vector or array
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addTetrahedron(position, color, size, heightAxis, depthAxis, name) {
        TetrahedronPrimitive.objectToShape(this, { position, color, size, heightAxis, depthAxis, name });
        return this;
    }
    /**
     * Add text
     * @example
     * shape.addText([ 10, -2, 4 ], [ 0.2, 0.5, 0.8 ], 0.5, "Hello");
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {Float} size - size value
     * @param {String} text - text value
     * @return {Shape} this object
     */
    addText(position, color, size, text) {
        TextPrimitive.objectToShape(this, { position, color, size, text });
        return this;
    }
    /**
     * Add point
     * @example
     * shape.addPoint([ 10, -2, 4 ], [ 0.2, 0.5, 0.8 ]);
     *
     * @param {Vector3|Array} position - position vector or array
     * @param {Color|Array} color - color object or array
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addPoint(position, color, name) {
        PointPrimitive.objectToShape(this, { position, color, name });
        return this;
    }
    /**
     * Add a wideline
     * @example
     * shape.addWideline([ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ]);
     *
     * @param {Vector3|Array} position1 - from position vector or array
     * @param {Vector3|Array} position2 - to position vector or array
     * @param {Color|Array} color - color object or array
     * @param {String} [name] - text
     * @return {Shape} this object
     */
    addWideline(position1, position2, color, linewidth, name) {
        this.parameters.linewidth = linewidth;
        WidelinePrimitive.objectToShape(this, { position1, position2, color, name });
        return this;
    }
    /**
     * Deprecated, use `.addText`
     */
    addLabel(position, color, size, text) {
        console.warn('Shape.addLabel is deprecated, use .addText instead');
        return this.addText(position, color, size, text);
    }
    getBufferList() {
        const buffers = [];
        Primitives.forEach(P => {
            if (this._primitiveData[P.getShapeKey('color')].length) {
                buffers.push(P.bufferFromShape(this, this.parameters));
            }
        });
        return this.bufferList.concat(buffers);
    }
    dispose() {
        this.bufferList.forEach(function (buffer) {
            buffer.dispose();
        });
        this.bufferList.length = 0;
        Primitives.forEach(P => {
            Object.keys(P.fields).forEach(name => {
                this._primitiveData[P.getShapeKey(name)].length = 0;
            });
            this._primitiveData[P.getShapeKey('name')].length = 0;
        });
    }
    get center() {
        if (!this._center) {
            this._center = this.boundingBox.getCenter(new Vector3());
        }
        return this._center;
    }
    get type() { return 'Shape'; }
}

/**
 * @file Buffer Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Representation for showing buffer objects. Good for efficiently showing
 * large amounts of geometric primitives e.g. spheres via {@link SphereBuffer}.
 * Smaller numbers of geometric primitives are more easily shown with help
 * from the {@link Shape} class.
 *
 * __Name:__ _buffer_
 *
 * @example
 * // add a single red sphere from a buffer to a shape instance
 * var shape = new NGL.Shape( "shape" );
 * var sphereBuffer = new NGL.SphereBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 * shape.addBuffer( sphereBuffer );
 * var shapeComp = stage.addComponentFromObject( shape );
 * shapeComp.addRepresentation( "buffer" );
 *
 * @example
 * // add a single red sphere from a buffer to a structure component instance
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     var sphereBuffer = new NGL.SphereBuffer( {
 *         position: new Float32Array( [ 0, 0, 0 ] ),
 *         color: new Float32Array( [ 1, 0, 0 ] ),
 *         radius: new Float32Array( [ 1 ] )
 *     } );
 *     o.addBufferRepresentation( sphereBuffer, { opacity: 0.5 } );
 * } );
 */
class BufferRepresentation extends Representation {
    /**
     * Create Buffer representation
     * @param {Buffer} buffer - a buffer object
     * @param {Viewer} viewer - a viewer object
     * @param {RepresentationParameters} params - representation parameters
     */
    constructor(buffer, viewer, params) {
        if (!Array.isArray(buffer)) {
            buffer = [buffer];
        }
        super(buffer, viewer, params);
        this.type = 'buffer';
        this.parameters = Object.assign({}, this.parameters, {
            colorScheme: null,
            colorScale: null,
            colorValue: null,
            colorDomain: null,
            colorMode: null
        });
        this.buffer = buffer;
        this.init(params);
    }
    init(params) {
        super.init(params);
        this.build();
    }
    create() {
        this.bufferList.push.apply(this.bufferList, this.buffer);
    }
    attach(callback) {
        this.bufferList.forEach(buffer => {
            this.viewer.add(buffer);
            buffer.setParameters(this.getBufferParams());
        });
        this.setVisibility(this.visible);
        callback();
    }
}

/**
 * @file Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const matrix = new Matrix4();
const normalMatrix = new Matrix3();
function getData$2(data, geo) {
    const geoPosition = geo.attributes.position.array;
    const geoIndex = geo.index ? geo.index.array : undefined;
    const n = data.position.length / 3;
    const m = geoPosition.length / 3;
    const size = n * m;
    const meshPosition = new Float32Array(size * 3);
    const meshNormal = new Float32Array(size * 3);
    const meshColor = new Float32Array(size * 3);
    let meshIndex;
    if (geoIndex) {
        meshIndex = getUintArray(n * geoIndex.length, size);
    }
    return {
        position: meshPosition,
        color: meshColor,
        index: meshIndex,
        normal: meshNormal,
        primitiveId: data.primitiveId || serialBlockArray(n, m),
        picking: data.picking
    };
}
/**
 * Geometry buffer. Base class for geometry-based buffers. Used to draw
 * geometry primitives given a mesh.
 * @interface
 */
class GeometryBuffer extends MeshBuffer {
    /**
     * @param {Object} data - buffer data
     * @param {Float32Array} data.position - positions
     * @param {Float32Array} data.color - colors
     * @param {Float32Array} data.radius - radii
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} [params] - parameters object
     * @param {BufferGeometry} geo - geometry object
     */
    constructor(data, params = {}, geo) {
        super(getData$2(data, geo), params);
        this.updateNormals = false;
        const geoPosition = geo.attributes.position.array;
        const geoNormal = geo.attributes.normal.array;
        const geoIndex = geo.index ? geo.index.array : undefined;
        this.geoPosition = geoPosition;
        this.geoNormal = geoNormal;
        this.geoIndex = geoIndex;
        this.positionCount = data.position.length / 3;
        this.geoPositionCount = geoPosition.length / 3;
        this.transformedGeoPosition = new Float32Array(this.geoPositionCount * 3);
        this.transformedGeoNormal = new Float32Array(this.geoPositionCount * 3);
        const attributes = this.geometry.attributes; // TODO
        this.meshPosition = attributes.position.array;
        this.meshColor = attributes.color.array;
        this.meshNormal = attributes.normal.array;
        this.setAttributes(data);
        if (geoIndex) {
            const index = this.geometry.getIndex();
            if (!index) {
                Log.error('Index is null');
                return;
            }
            this.meshIndex = index.array;
            this.makeIndex();
        }
    }
    setAttributes(data = {}, initNormals = false) {
        const attributes = this.geometry.attributes; // TODO
        let position, color;
        let geoPosition, geoNormal;
        let transformedGeoPosition, transformedGeoNormal;
        let meshPosition, meshColor, meshNormal;
        const updateNormals = this.updateNormals;
        if (data.position) {
            position = data.position;
            geoPosition = this.geoPosition;
            meshPosition = this.meshPosition;
            transformedGeoPosition = this.transformedGeoPosition;
            attributes.position.needsUpdate = true;
            if (updateNormals || initNormals) {
                geoNormal = this.geoNormal;
                meshNormal = this.meshNormal;
                transformedGeoNormal = this.transformedGeoNormal;
                attributes.normal.needsUpdate = true;
            }
        }
        if (data.color) {
            color = data.color;
            meshColor = this.meshColor;
            attributes.color.needsUpdate = true;
        }
        const n = this.positionCount;
        const m = this.geoPositionCount;
        for (let i = 0; i < n; ++i) {
            let j, l;
            const k = i * m * 3;
            const i3 = i * 3;
            if (position && transformedGeoPosition && meshPosition && meshNormal && geoPosition && geoNormal) {
                transformedGeoPosition.set(geoPosition);
                matrix.makeTranslation(position[i3], position[i3 + 1], position[i3 + 2]);
                this.applyPositionTransform(matrix, i, i3);
                applyMatrix4toVector3array(matrix.elements, transformedGeoPosition);
                meshPosition.set(transformedGeoPosition, k);
                if (updateNormals && transformedGeoNormal) {
                    transformedGeoNormal.set(geoNormal);
                    normalMatrix.getNormalMatrix(matrix);
                    applyMatrix3toVector3array(normalMatrix.elements, transformedGeoNormal);
                    meshNormal.set(transformedGeoNormal, k);
                }
                else if (initNormals) {
                    meshNormal.set(geoNormal, k);
                }
            }
            if (color && meshColor) {
                for (j = 0; j < m; ++j) {
                    l = k + 3 * j;
                    meshColor[l] = color[i3];
                    meshColor[l + 1] = color[i3 + 1];
                    meshColor[l + 2] = color[i3 + 2];
                }
            }
        }
    }
    makeIndex() {
        const geoIndex = this.geoIndex;
        const meshIndex = this.meshIndex;
        if (!geoIndex)
            return;
        const n = this.positionCount;
        const m = this.geoPositionCount;
        const o = geoIndex.length / 3;
        const o3 = o * 3;
        for (let i = 0; i < n; ++i) {
            const j = i * o3;
            const q = j + o3;
            meshIndex.set(geoIndex, j);
            for (let p = j; p < q; ++p)
                meshIndex[p] += i * m;
        }
    }
}

/**
 * @file Sphere Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale$7 = new Vector3();
const SphereGeometryBufferDefaultParameters = Object.assign({
    sphereDetail: 1
}, BufferDefaultParameters);
/**
 * Sphere geometry buffer.
 *
 * @example
 * var sphereGeometryBuffer = new SphereGeometryBuffer({
 *   position: new Float32Array([ 0, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   radius: new Float32Array([ 1 ])
 * });
 */
class SphereGeometryBuffer extends GeometryBuffer {
    /**
     * @param {Object} data - attribute object
     * @param {Float32Array} data.position - positions
     * @param {Float32Array} data.color - colors
     * @param {Float32Array} data.radius - radii
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super(data, params, new IcosahedronGeometry(1, defaults(params.sphereDetail, 1)));
        this.setAttributes(data, true);
    }
    get defaultParameters() { return SphereGeometryBufferDefaultParameters; }
    applyPositionTransform(matrix, i) {
        const r = this._radius[i];
        scale$7.set(r, r, r);
        matrix.scale(scale$7);
    }
    setAttributes(data = {}, initNormals) {
        if (data.radius)
            this._radius = data.radius;
        super.setAttributes(data, initNormals);
    }
}

ShaderRegistry.add('shader/SphereImpostor.vert', "uniform mat4 projectionMatrixInverse;\nuniform float clipNear;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\nattribute vec2 mapping;\nattribute float radius;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\n#include matrix_scale\nconst mat4 D = mat4(\n1.0, 0.0, 0.0, 0.0,\n0.0, 1.0, 0.0, 0.0,\n0.0, 0.0, 1.0, 0.0,\n0.0, 0.0, 0.0, -1.0\n);\nmat4 transposeM( in mat4 inMatrix ) {\nvec4 i0 = inMatrix[0];\nvec4 i1 = inMatrix[1];\nvec4 i2 = inMatrix[2];\nvec4 i3 = inMatrix[3];\nmat4 outMatrix = mat4(\nvec4(i0.x, i1.x, i2.x, i3.x),\nvec4(i0.y, i1.y, i2.y, i3.y),\nvec4(i0.z, i1.z, i2.z, i3.z),\nvec4(i0.w, i1.w, i2.w, i3.w)\n);\nreturn outMatrix;\n}\nvoid ComputePointSizeAndPositionInClipCoordSphere(){\nvec2 xbc;\nvec2 ybc;\nmat4 T = mat4(\nradius, 0.0, 0.0, 0.0,\n0.0, radius, 0.0, 0.0,\n0.0, 0.0, radius, 0.0,\nposition.x, position.y, position.z, 1.0\n);\nmat4 R = transposeM( projectionMatrix * modelViewMatrix * T );\nfloat A = dot( R[ 3 ], D * R[ 3 ] );\nfloat B = -2.0 * dot( R[ 0 ], D * R[ 3 ] );\nfloat C = dot( R[ 0 ], D * R[ 0 ] );\nxbc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nxbc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sx = abs( xbc[ 0 ] - xbc[ 1 ] ) * 0.5;\nA = dot( R[ 3 ], D * R[ 3 ] );\nB = -2.0 * dot( R[ 1 ], D * R[ 3 ] );\nC = dot( R[ 1 ], D * R[ 1 ] );\nybc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nybc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sy = abs( ybc[ 0 ] - ybc[ 1 ] ) * 0.5;\ngl_Position.xy = vec2( 0.5 * ( xbc.x + xbc.y ), 0.5 * ( ybc.x + ybc.y ) );\ngl_Position.xy -= mapping * vec2( sx, sy );\ngl_Position.xy *= gl_Position.w;\n}\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\nvRadius = radius * matrixScale( modelViewMatrix );\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nmvPosition.z -= vRadius;\ngl_Position = projectionMatrix * vec4( mvPosition.xyz, 1.0 );\nComputePointSizeAndPositionInClipCoordSphere();\nvRadiusSq = vRadius * vRadius;\nvec4 vPoint4 = projectionMatrixInverse * gl_Position;\nvPoint = vPoint4.xyz / vPoint4.w;\nvPointViewPosition = -mvPosition.xyz / mvPosition.w;\n}");

ShaderRegistry.add('shader/SphereImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool flag2 = false;\nbool interior = false;\nvec3 cameraPos;\nvec3 cameraNormal;\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nbool Impostor( out vec3 cameraPos, out vec3 cameraNormal ){\nvec3 cameraSpherePos = -vPointViewPosition;\ncameraSpherePos.z += vRadius;\nvec3 rayOrigin = mix( vec3( 0.0, 0.0, 0.0 ), vPoint, ortho );\nvec3 rayDirection = mix( normalize( vPoint ), vec3( 0.0, 0.0, 1.0 ), ortho );\nvec3 cameraSphereDir = mix( cameraSpherePos, rayOrigin - cameraSpherePos, ortho );\nfloat B = dot( rayDirection, cameraSphereDir );\nfloat det = B * B + vRadiusSq - dot( cameraSphereDir, cameraSphereDir );\nif( det < 0.0 ){\ndiscard;\nreturn false;\n}\nfloat sqrtDet = sqrt( det );\nfloat posT = mix( B + sqrtDet, B + sqrtDet, ortho );\nfloat negT = mix( B - sqrtDet, sqrtDet - B, ortho );\ncameraPos = rayDirection * negT + rayOrigin;\n#ifdef NEAR_CLIP\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\n}else if( calcClip( cameraPos ) > 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\nflag2 = true;\n}\n#else\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\n}\n#endif\ncameraNormal = normalize( cameraPos - cameraSpherePos );\ncameraNormal *= float(!interior) * 2.0 - 1.0;\nreturn !interior;\n}\nvoid main(void){\nbool flag = Impostor( cameraPos, cameraNormal );\n#ifdef NEAR_CLIP\nif( calcClip( cameraPos ) > 0.0 )\ndiscard;\n#endif\ngl_FragDepthEXT = calcDepth( cameraPos );\nif( !flag ){\n#ifdef NEAR_CLIP\nif( flag2 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}else if( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#else\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#endif\n}\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vNormal = cameraNormal;\nvec3 vViewPosition = -cameraPos;\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_fragment_begin\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Mapped Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Mapped buffer. Sends mapping attribute to the GPU and repeats data in
 * others attributes. Used to render imposters.
 * @interface
 */
class MappedBuffer extends Buffer$1 {
    constructor(mappingType, data, params = {}) {
        super(data, params);
        this.index = getUintArray(this.indexSize, this.attributeSize);
        this.makeIndex();
        this.initIndex(this.index);
        this.addAttributes({
            'mapping': { type: mappingType, value: null }
        });
        this.setAttributes({ primitiveId: serialArray(this.size) });
    }
    get attributeSize() {
        return this.size * this.mappingSize;
    }
    get indexSize() {
        return this.size * this.mappingIndicesSize;
    }
    addAttributes(attributes) {
        const nullValueAttributes = {};
        for (const name in attributes) {
            const a = attributes[name];
            nullValueAttributes[name] = {
                type: a.type,
                value: null
            };
        }
        super.addAttributes(nullValueAttributes);
    }
    getAttributeIndex(dataIndex) {
        return dataIndex * 3 * this.mappingSize;
    }
    setAttributes(data) {
        if (data && !data.position && data.position1 && data.position2) {
            data.position = calculateCenterArray(data.position1, data.position2);
        }
        const size = this.size;
        const mappingSize = this.mappingSize;
        const attributes = this.geometry.attributes; // TODO
        let a, d, itemSize, array, n, i, j;
        for (const name in data) {
            if (name === 'index' || name === 'picking')
                continue;
            d = data[name];
            a = attributes[name];
            itemSize = a.itemSize;
            array = a.array;
            for (let k = 0; k < size; ++k) {
                n = k * itemSize;
                i = n * mappingSize;
                for (let l = 0; l < mappingSize; ++l) {
                    j = i + (itemSize * l);
                    for (let m = 0; m < itemSize; ++m) {
                        array[j + m] = d[n + m];
                    }
                }
            }
            a.needsUpdate = true;
        }
    }
    makeMapping() {
        const size = this.size;
        const mapping = this.mapping;
        const mappingSize = this.mappingSize;
        const mappingItemSize = this.mappingItemSize;
        const attributes = this.geometry.attributes; // TODO
        const aMapping = attributes.mapping.array;
        for (let v = 0; v < size; v++) {
            aMapping.set(mapping, v * mappingItemSize * mappingSize);
        }
    }
    makeIndex() {
        const size = this.size;
        const mappingSize = this.mappingSize;
        const mappingIndices = this.mappingIndices;
        const mappingIndicesSize = this.mappingIndicesSize;
        const index = this.index;
        for (let v = 0; v < size; v++) {
            const ix = v * mappingIndicesSize;
            const it = v * mappingSize;
            index.set(mappingIndices, ix);
            for (let s = 0; s < mappingIndicesSize; ++s) {
                index[ix + s] += it;
            }
        }
    }
}

/**
 * @file Mapped Quad Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const mapping$2 = new Float32Array([
    -1.0, 1.0,
    -1.0, -1.0,
    1.0, 1.0,
    1.0, -1.0
]);
const mappingIndices$2 = new Uint16Array([
    0, 1, 2,
    1, 3, 2
]);
/**
 * Mapped Quad buffer. Draws screen-aligned quads. Used to render impostors.
 * @interface
 */
class MappedQuadBuffer extends MappedBuffer {
    constructor(data, params = {}) {
        super('v2', data, params);
    }
    get mapping() { return mapping$2; }
    get mappingIndices() { return mappingIndices$2; }
    get mappingIndicesSize() { return 6; }
    get mappingSize() { return 4; }
    get mappingItemSize() { return 2; }
}

/**
 * @file Sphere Impostor Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Sphere impostor buffer.
 *
 * @example
 * var sphereImpostorBuffer = new SphereImpostorBuffer({
 *   position: new Float32Array([ 0, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   radius: new Float32Array([ 1 ])
 * });
 */
class SphereImpostorBuffer extends MappedQuadBuffer {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.color - colors
     * @param  {Float32Array} data.radius - radii
     * @param {Picker} [data.picking] - picking ids
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super(data, params);
        this.isImpostor = true;
        this.vertexShader = 'SphereImpostor.vert';
        this.fragmentShader = 'SphereImpostor.frag';
        this.addUniforms({
            'projectionMatrixInverse': { value: new Matrix4() },
            'ortho': { value: 0.0 }
        });
        this.addAttributes({
            'radius': { type: 'f', value: null }
        });
        this.setAttributes(data);
        this.makeMapping();
    }
}

/**
 * @file Sphere Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
Object.assign({
    disableImpostor: false
}, SphereGeometryBufferDefaultParameters);
class SphereBufferImpl {
    /**
     * @param {Object} data - buffer data
     * @param {Float32Array} data.position - positions
     * @param {Float32Array} data.color - colors
     * @param {Float32Array} data.radius - radii
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} params - parameters object
     * @return {SphereGeometryBuffer|SphereImpostorBuffer} the buffer object
     */
    constructor(data, params) {
        if (!ExtensionFragDepth || (params && params.disableImpostor)) {
            return new SphereGeometryBuffer(data, params);
        }
        else {
            return new SphereImpostorBuffer(data, params);
        }
    }
}
/**
 * Sphere buffer. Depending on the value {@link ExtensionFragDepth} and
 * `params.disableImpostor` the constructor returns either a
 * {@link SphereGeometryBuffer} or a {@link SphereImpostorBuffer}
 * @implements {Buffer}
 *
 * @example
 * var sphereBuffer = new SphereBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
//@ts-expect-error Incompatible constructor signatures
const SphereBuffer = SphereBufferImpl;
BufferRegistry.add('sphere', SphereBuffer);

ShaderRegistry.add('shader/Point.vert', "uniform float clipNear;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float size;\nuniform float canvasHeight;\nuniform float pixelRatio;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\nvarying vec3 vViewPosition;\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\n#include begin_vertex\n#include project_vertex\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * pixelRatio * ( ( canvasHeight / 2.0 ) / -mvPosition.z );\n#else\ngl_PointSize = size * pixelRatio;\n#endif\n#ifndef PICKING\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

ShaderRegistry.add('shader/Point.frag', "uniform vec3 diffuse;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include alphatest_pars_fragment\nvarying vec3 vViewPosition;\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\n#ifdef USE_MAP\nif( texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).a < 0.5 )\ndiscard;\n#endif\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 outgoingLight = vec3( 0.0 );\nvec4 diffuseColor = vec4( diffuse, 1.0 );\n#ifdef USE_MAP\ndiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif\n#include color_fragment\n#include alphatest_fragment\noutgoingLight = diffuseColor.rgb;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Point Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function distance(x0, y0, x1, y1) {
    const dx = x1 - x0;
    const dy = y1 - y0;
    return Math.sqrt(dx * dx + dy * dy);
}
function makePointTexture(params) {
    const p = params || {};
    const width = defaults(p.width, 256);
    const height = defaults(p.height, 256);
    const center = [width / 2, height / 2];
    const radius = Math.min(width / 2, height / 2);
    const delta = defaults(p.delta, 1 / (radius + 1)) * radius;
    let x = 0;
    let y = 0;
    const data = new Uint8Array(width * height * 4);
    for (let i = 0, il = data.length; i < il; i += 4) {
        const dist = distance(x, y, center[0], center[1]);
        const value = 1 - smoothstep(radius - delta, radius, dist);
        data[i] = value * 255;
        data[i + 1] = value * 255;
        data[i + 2] = value * 255;
        data[i + 3] = value * 255;
        if (++x === width) {
            x = 0;
            y++;
        }
    }
    const tex = new DataTexture(data, width, height);
    tex.needsUpdate = true;
    return tex;
}
const PointBufferDefaultParameters = Object.assign({
    pointSize: 1,
    sizeAttenuation: true,
    sortParticles: false,
    alphaTest: 0.5,
    useTexture: false,
    forceTransparent: false,
    edgeBleach: 0.0
}, BufferDefaultParameters);
const PointBufferParameterTypes = Object.assign({
    pointSize: { uniform: 'size' },
    sizeAttenuation: { updateShader: true },
    sortParticles: {},
    alphaTest: { uniform: true },
    useTexture: { updateShader: true },
    forceTransparent: {},
    edgeBleach: { uniform: true }
}, BufferParameterTypes);
/**
 * Point buffer. Draws points. Optionally textured.
 *
 * @example
 * var pointBuffer = new PointBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] )
 * } );
 */
class PointBuffer extends Buffer$1 {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.color - colors
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super(data, params);
        this.parameterTypes = PointBufferParameterTypes;
        this.vertexShader = 'Point.vert';
        this.fragmentShader = 'Point.frag';
        this.isPoint = true;
        this.addUniforms({
            'size': { value: this.parameters.pointSize },
            'canvasHeight': { value: 1.0 },
            'pixelRatio': { value: 1.0 },
            'map': { value: null },
            'alphaTest': { value: this.parameters.alphaTest }
        });
    }
    get defaultParameters() { return PointBufferDefaultParameters; }
    makeMaterial() {
        super.makeMaterial();
        this.makeTexture();
        const m = this.material;
        const wm = this.wireframeMaterial;
        const pm = this.pickingMaterial;
        m.uniforms.map.value = this.tex;
        m.needsUpdate = true;
        wm.uniforms.map.value = this.tex;
        wm.needsUpdate = true;
        pm.uniforms.map.value = this.tex;
        pm.needsUpdate = true;
    }
    makeTexture() {
        if (this.tex)
            this.tex.dispose();
        this.tex = makePointTexture({ delta: this.parameters.edgeBleach });
    }
    getDefines(type) {
        const defines = super.getDefines(type);
        if (this.parameters.sizeAttenuation) {
            defines.USE_SIZEATTENUATION = 1;
        }
        if (this.parameters.useTexture) {
            defines.USE_MAP = 1;
        }
        if (this.parameters.alphaTest > 0 && this.parameters.alphaTest <= 1) {
            defines.USE_ALPHATEST = 1;
        }
        return defines;
    }
    setUniforms(data) {
        if (data && data.edgeBleach !== undefined) {
            this.makeTexture();
            data.map = this.tex;
        }
        super.setUniforms(data);
    }
    dispose() {
        super.dispose();
        if (this.tex)
            this.tex.dispose();
    }
}
BufferRegistry.add('point', PointBuffer);

/**
 * @file Dot Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Dot representation
 */
class DotRepresentation extends Representation {
    /**
     * Create Dot representation object
     * @param {Surface|Volume} surface - the surface or volume to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {DotRepresentationParameters} params - dot representation parameters
     */
    constructor(surface, viewer, params) {
        super(surface, viewer, params);
        this.type = 'dot';
        this.parameters = Object.assign({
            thresholdType: {
                type: 'select',
                rebuild: true,
                options: {
                    'value': 'value', 'sigma': 'sigma'
                }
            },
            thresholdMin: {
                type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
            },
            thresholdMax: {
                type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
            },
            thresholdOut: {
                type: 'boolean', rebuild: true
            },
            dotType: {
                type: 'select',
                rebuild: true,
                options: {
                    '': '',
                    'sphere': 'sphere',
                    'point': 'point'
                }
            },
            radiusType: {
                type: 'select',
                options: {
                    '': '',
                    'value': 'value',
                    'abs-value': 'abs-value',
                    'value-min': 'value-min',
                    'deviation': 'deviation',
                    'size': 'size'
                }
            },
            radius: {
                type: 'number', precision: 3, max: 10.0, min: 0.001, property: 'size'
            },
            scale: {
                type: 'number', precision: 3, max: 10.0, min: 0.001
            },
            sphereDetail: true,
            disableImpostor: true,
            pointSize: {
                type: 'number', precision: 1, max: 100, min: 0, buffer: true
            },
            sizeAttenuation: {
                type: 'boolean', buffer: true
            },
            sortParticles: {
                type: 'boolean', rebuild: true
            },
            useTexture: {
                type: 'boolean', buffer: true
            },
            alphaTest: {
                type: 'range', step: 0.001, max: 1, min: 0, buffer: true
            },
            forceTransparent: {
                type: 'boolean', buffer: true
            },
            edgeBleach: {
                type: 'range', step: 0.001, max: 1, min: 0, buffer: true
            }
        }, this.parameters, {
            colorScheme: {
                type: 'select',
                update: 'color',
                options: {
                    '': '',
                    'value': 'value',
                    'uniform': 'uniform',
                    'random': 'random'
                }
            }
        });
        if (surface instanceof Volume) {
            this.surface = undefined;
            this.volume = new FilteredVolume(surface);
        }
        else {
            this.surface = surface;
            this.volume = undefined;
        }
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'uniform');
        p.colorValue = defaults(p.colorValue, 0xDDDDDD);
        this.thresholdType = defaults(p.thresholdType, 'sigma');
        this.thresholdMin = defaults(p.thresholdMin, 2.0);
        this.thresholdMax = defaults(p.thresholdMax, Infinity);
        this.thresholdOut = defaults(p.thresholdOut, false);
        this.dotType = defaults(p.dotType, 'point');
        this.radius = defaults(p.radius, 0.1);
        this.scale = defaults(p.scale, 1.0);
        this.pointSize = defaults(p.pointSize, 1);
        this.sizeAttenuation = defaults(p.sizeAttenuation, true);
        this.sortParticles = defaults(p.sortParticles, false);
        this.useTexture = defaults(p.useTexture, false);
        this.alphaTest = defaults(p.alphaTest, 0.5);
        this.forceTransparent = defaults(p.forceTransparent, false);
        this.edgeBleach = defaults(p.edgeBleach, 0.0);
        super.init(p);
        this.build();
    }
    attach(callback) {
        this.bufferList.forEach(buffer => {
            this.viewer.add(buffer);
        });
        this.setVisibility(this.visible);
        callback();
    }
    create() {
        var dotData = {};
        if (this.volume) {
            var volume = this.volume;
            var thresholdMin, thresholdMax;
            if (this.thresholdType === 'sigma') {
                thresholdMin = volume.getValueForSigma(this.thresholdMin);
                thresholdMax = volume.getValueForSigma(this.thresholdMax);
            }
            else {
                thresholdMin = this.thresholdMin;
                thresholdMax = this.thresholdMax;
            }
            volume.setFilter(thresholdMin, thresholdMax, this.thresholdOut);
            Object.assign(dotData, {
                position: volume.getDataPosition(),
                color: volume.getDataColor(this.getColorParams())
            });
            if (this.dotType === 'sphere') {
                Object.assign(dotData, {
                    radius: volume.getDataSize(this.radius, this.scale),
                    picking: volume.getDataPicking()
                });
            }
        }
        else {
            var surface = this.surface;
            Object.assign(dotData, {
                position: surface.getPosition(),
                color: surface.getColor(this.getColorParams())
            });
            if (this.dotType === 'sphere') {
                Object.assign(dotData, {
                    radius: surface.getSize(this.radius, this.scale),
                    picking: surface.getPicking()
                });
            }
        }
        if (this.dotType === 'sphere') {
            this.dotBuffer = new SphereBuffer(dotData, this.getBufferParams({
                sphereDetail: this.sphereDetail,
                disableImpostor: this.disableImpostor,
                dullInterior: false
            }));
        }
        else {
            this.dotBuffer = new PointBuffer(dotData, this.getBufferParams({
                pointSize: this.pointSize,
                sizeAttenuation: this.sizeAttenuation,
                sortParticles: this.sortParticles,
                useTexture: this.useTexture,
                alphaTest: this.alphaTest,
                forceTransparent: this.forceTransparent,
                edgeBleach: this.edgeBleach
            }));
        }
        this.bufferList.push(this.dotBuffer);
    }
    update(what = {}) {
        if (this.bufferList.length === 0)
            return;
        const dotData = {};
        if (what.color) {
            if (this.volume) {
                Object.assign(dotData, {
                    color: this.volume.getDataColor(this.getColorParams())
                });
            }
            else {
                Object.assign(dotData, {
                    color: this.surface.getColor(this.getColorParams())
                });
            }
        }
        if (this.dotType === 'sphere' && (what.radius || what.scale)) {
            if (this.volume) {
                Object.assign(dotData, {
                    radius: this.volume.getDataSize(this.radius, this.scale)
                });
            }
            else {
                Object.assign(dotData, {
                    radius: this.surface.getSize(this.radius, this.scale)
                });
            }
        }
        this.dotBuffer.setAttributes(dotData);
    }
    setParameters(params, what = {}, rebuild) {
        if (params && params.thresholdType !== undefined &&
            this.volume instanceof Volume) {
            if (this.thresholdType === 'value' &&
                params.thresholdType === 'sigma') {
                this.thresholdMin = this.volume.getSigmaForValue(this.thresholdMin);
                this.thresholdMax = this.volume.getSigmaForValue(this.thresholdMax);
            }
            else if (this.thresholdType === 'sigma' &&
                params.thresholdType === 'value') {
                this.thresholdMin = this.volume.getValueForSigma(this.thresholdMin);
                this.thresholdMax = this.volume.getValueForSigma(this.thresholdMax);
            }
            this.thresholdType = params.thresholdType;
        }
        if (params && params.radiusType !== undefined) {
            if (params.radiusType === 'radius') {
                this.radius = 0.1;
            }
            else {
                this.radius = parseFloat(params.radiusType);
            }
            what.radius = true;
            if (this.dotType === 'sphere' &&
                (!ExtensionFragDepth || this.disableImpostor)) {
                rebuild = true;
            }
        }
        if (params && params.radius !== undefined) {
            what.radius = true;
            if (this.dotType === 'sphere' &&
                (!ExtensionFragDepth || this.disableImpostor)) {
                rebuild = true;
            }
        }
        if (params && params.scale !== undefined) {
            what.scale = true;
            if (this.dotType === 'sphere' &&
                (!ExtensionFragDepth || this.disableImpostor)) {
                rebuild = true;
            }
        }
        super.setParameters(params, what, rebuild);
        return this;
    }
}

ShaderRegistry.add('shader/Image.vert', "uniform float clipRadius;\nuniform vec3 clipCenter;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nvoid main() {\n#include begin_vertex\n#include project_vertex\nvUv = uv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n}");

ShaderRegistry.add('shader/Image.frag', "uniform sampler2D map;\nuniform float opacity;\nuniform vec2 mapSize;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform sampler2D pickingMap;\nuniform float objectId;\n#else\n#include fog_pars_fragment\n#endif\n#if defined( CUBIC_INTERPOLATION )\n#if defined( CATMULROM_FILTER ) || defined( MITCHELL_FILTER )\n#if defined( CATMULROM_FILTER )\nconst float B = 0.0;\nconst float C = 0.5;\n#elif defined( MITCHELL_FILTER )\nconst float B = 0.333;\nconst float C = 0.333;\n#endif\nfloat applyFilter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f < 1.0 ){\nreturn ( ( 12.0 - 9.0 * B - 6.0 * C ) * ( f * f * f ) +\n( -18.0 + 12.0 * B + 6.0 *C ) * ( f * f ) +\n( 6.0 - 2.0 * B ) ) / 6.0;\n}else if( f >= 1.0 && f < 2.0 ){\nreturn ( ( -B - 6.0 * C ) * ( f * f * f )\n+ ( 6.0 * B + 30.0 * C ) * ( f *f ) +\n( - ( 12.0 * B ) - 48.0 * C ) * f +\n8.0 * B + 24.0 * C ) / 6.0;\n}else{\nreturn 0.0;\n}\n}\n#elif defined( BSPLINE_FILTER )\nfloat applyFilter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f >= 0.0 && f <= 1.0 ){\nreturn ( 2.0 / 3.0 ) + ( 0.5 ) * ( f * f * f ) - ( f * f );\n}else if( f > 1.0 && f <= 2.0 ){\nreturn 1.0 / 6.0 * pow( ( 2.0 - f ), 3.0 );\n}\nreturn 1.0;\n}\n#else\nfloat applyFilter( float x ){\nreturn 1.0;\n}\n#endif\nvec4 biCubic( sampler2D tex, vec2 texCoord ){\nvec2 texelSize = 1.0 / mapSize;\ntexCoord -= texelSize / 2.0;\nvec4 nSum = vec4( 0.0 );\nfloat nDenom = 0.0;\nvec2 cell = fract( texCoord * mapSize );\nfor( float m = -1.0; m <= 2.0; ++m ){\nfor( float n = -1.0; n <= 2.0; ++n ){\nvec4 vecData = texture2D(\ntex, texCoord + texelSize * vec2( m, n )\n);\nfloat c = applyFilter( m - cell.x ) * applyFilter( -n + cell.y );\nnSum += vecData * c;\nnDenom += c;\n}\n}\nreturn nSum / nDenom;\n}\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( CUBIC_INTERPOLATION )\ngl_FragColor = biCubic( map, vUv );\n#else\ngl_FragColor = texture2D( map, vUv );\n#endif\n#if defined( PICKING )\nif( gl_FragColor.a < 0.3 )\ndiscard;\ngl_FragColor = vec4( texture2D( pickingMap, vUv ).xyz, objectId );\n#else\nif( gl_FragColor.a < 0.01 )\ndiscard;\ngl_FragColor.a *= opacity;\n#include fog_fragment\n#endif\n}");

/**
 * @file Image Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const quadIndices$1 = new Uint16Array([
    0, 1, 2,
    1, 3, 2
]);
const quadUvs = new Float32Array([
    0, 1,
    0, 0,
    1, 1,
    1, 0
]);
const ImageBufferDefaultParameters = Object.assign({
    filter: 'nearest',
    forceTransparent: true
}, BufferDefaultParameters);
const ImageBufferParameterTypes = Object.assign({
    filter: { updateShader: true, uniform: true }
}, BufferParameterTypes);
/**
 * Image buffer. Draw a single image. Optionally interpolate.
 */
class ImageBuffer extends Buffer$1 {
    /**
     * @param {Object} data - buffer data
     * @param {Float32Array} data.position - image position
     * @param {Float32Array} data.imageData - image data, rgba channels
     * @param {Float32Array} data.width - image width
     * @param {Float32Array} data.height - image height
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} [params] - parameters object
     */
    constructor(data, params) {
        super({
            position: data.position,
            index: quadIndices$1,
            picking: data.picking
        }, params);
        this.parameterTypes = ImageBufferParameterTypes;
        this.alwaysTransparent = true;
        this.hasWireframe = false;
        this.vertexShader = 'Image.vert';
        this.fragmentShader = 'Image.frag';
        const { imageData, width, height } = data;
        const tex = new DataTexture(imageData, width, height);
        tex.flipY = true;
        this.tex = tex;
        const n = imageData.length;
        const pickingData = new Uint8Array(n);
        for (let i = 0; i < n; i += 4) {
            const j = i / 4;
            pickingData[i] = j >> 16 & 255;
            pickingData[i + 1] = j >> 8 & 255;
            pickingData[i + 2] = j & 255;
        }
        const pickingTex = new DataTexture(pickingData, width, height);
        pickingTex.flipY = true;
        pickingTex.minFilter = NearestFilter;
        pickingTex.magFilter = NearestFilter;
        this.pickingTex = pickingTex;
        this.addUniforms({
            'map': { value: tex },
            'pickingMap': { value: pickingTex },
            'mapSize': { value: new Vector2(width, height) }
        });
        this.geometry.setAttribute('uv', new BufferAttribute(quadUvs, 2));
    }
    get defaultParameters() { return ImageBufferDefaultParameters; }
    getDefines(type) {
        const defines = super.getDefines(type);
        const filter = this.parameters.filter;
        if (filter.startsWith('cubic')) {
            defines.CUBIC_INTERPOLATION = 1;
            if (filter.endsWith('bspline')) {
                defines.BSPLINE_FILTER = 1;
            }
            else if (filter.endsWith('catmulrom')) {
                defines.CATMULROM_FILTER = 1;
            }
            else if (filter.endsWith('mitchell')) {
                defines.MITCHELL_FILTER = 1;
            }
        }
        return defines;
    }
    updateTexture() {
        const tex = this.tex;
        const filter = this.parameters.filter;
        if (filter.startsWith('cubic')) {
            tex.minFilter = NearestFilter;
            tex.magFilter = NearestFilter;
        }
        else if (filter === 'linear') {
            tex.minFilter = LinearFilter;
            tex.magFilter = LinearFilter;
        }
        else { // filter === "nearest"
            tex.minFilter = NearestFilter;
            tex.magFilter = NearestFilter;
        }
        tex.needsUpdate = true;
        this.pickingTex.needsUpdate = true;
    }
    makeMaterial() {
        super.makeMaterial();
        this.updateTexture();
        const m = this.material;
        m.uniforms.map.value = this.tex;
        m.blending = NormalBlending;
        m.needsUpdate = true;
        const wm = this.wireframeMaterial;
        wm.uniforms.map.value = this.tex;
        wm.blending = NormalBlending;
        wm.needsUpdate = true;
        const pm = this.pickingMaterial;
        pm.uniforms.map.value = this.tex;
        pm.uniforms.pickingMap.value = this.pickingTex;
        pm.blending = NormalBlending;
        pm.needsUpdate = true;
    }
    setUniforms(data) {
        if (data && data.filter !== undefined) {
            this.updateTexture();
            data.map = this.tex;
        }
        super.setUniforms(data);
    }
}

/**
 * @file Volume Slice
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class VolumeSlice {
    constructor(volume, params) {
        const p = params || {};
        this.dimension = defaults(p.dimension, 'x');
        this.positionType = defaults(p.positionType, 'percent');
        this.position = defaults(p.position, 30);
        this.thresholdType = defaults(p.thresholdType, 'sigma');
        this.thresholdMin = defaults(p.thresholdMin, -Infinity);
        this.thresholdMax = defaults(p.thresholdMax, Infinity);
        this.normalize = defaults(p.normalize, false);
        this.volume = volume;
    }
    getPositionFromCoordinate(coord) {
        const dim = this.dimension;
        const v = this.volume;
        const m = v.matrix;
        const mp = new Vector3().setFromMatrixPosition(m)[dim];
        const ms = new Vector3().setFromMatrixScale(m)[dim];
        let vn;
        if (dim === 'x') {
            vn = v.nx;
        }
        else if (dim === 'y') {
            vn = v.ny;
        }
        else {
            vn = v.nz;
        }
        return Math.round((((coord - mp) / (vn / 100)) + 1) / ms);
    }
    getData(params) {
        params = params || {};
        const v = this.volume;
        const d = v.data;
        const m = v.matrix;
        let p;
        if (this.positionType === 'coordinate') {
            p = this.getPositionFromCoordinate(this.position);
        }
        else {
            p = this.position;
        }
        function pos(dimLen) {
            return Math.round((dimLen / 100) * (p - 1));
        }
        function index(x, y, z, i) {
            return (z * v.ny * v.nx + y * v.nx + x) * 3 + i;
        }
        const position = new Float32Array(4 * 3);
        const vec = new Vector3();
        let width, height;
        let x;
        let y;
        let z;
        let x0 = 0;
        let y0 = 0;
        let z0 = 0;
        let nx = v.nx;
        let ny = v.ny;
        let nz = v.nz;
        function setVec(x, y, z, offset) {
            vec.set(x, y, z).applyMatrix4(m).toArray(position, offset);
        }
        if (this.dimension === 'x') {
            x = pos(v.nx);
            y = v.ny - 1;
            z = v.nz - 1;
            width = v.nz;
            height = v.ny;
            x0 = x;
            nx = x0 + 1;
            setVec(x, 0, 0, 0);
            setVec(x, y, 0, 3);
            setVec(x, 0, z, 6);
            setVec(x, y, z, 9);
        }
        else if (this.dimension === 'y') {
            x = v.nx - 1;
            y = pos(v.ny);
            z = v.nz - 1;
            width = v.nz;
            height = v.nx;
            y0 = y;
            ny = y0 + 1;
            setVec(0, y, 0, 0);
            setVec(x, y, 0, 3);
            setVec(0, y, z, 6);
            setVec(x, y, z, 9);
        }
        else if (this.dimension === 'z') {
            x = v.nx - 1;
            y = v.ny - 1;
            z = pos(v.nz);
            width = v.nx;
            height = v.ny;
            z0 = z;
            nz = z0 + 1;
            setVec(0, 0, z, 0);
            setVec(0, y, z, 3);
            setVec(x, 0, z, 6);
            setVec(x, y, z, 9);
        }
        let i = 0;
        let j = 0;
        const imageData = new Uint8Array(width * height * 4);
        const pickingArray = new Float32Array(width * height);
        let tMin, tMax;
        if (this.thresholdType === 'sigma') {
            tMin = v.getValueForSigma(this.thresholdMin);
            tMax = v.getValueForSigma(this.thresholdMax);
        }
        else {
            tMin = this.thresholdMin;
            tMax = this.thresholdMax;
        }
        const cp = Object.assign({}, params.colorParams, { volume: v });
        if (this.normalize) {
            cp.domain = [0, 1];
        }
        const colormaker = ColormakerRegistry.getScheme(cp);
        const tmp = new Float32Array(3);
        const scale = colormaker.getScale();
        let min = 0, max, diff = 0;
        if (this.normalize) {
            min = +Infinity;
            max = -Infinity;
            for (let iy = y0; iy < ny; ++iy) {
                for (let ix = x0; ix < nx; ++ix) {
                    for (let iz = z0; iz < nz; ++iz) {
                        const idx = index(ix, iy, iz, 0) / 3;
                        const val = d[idx];
                        if (val < min)
                            min = val;
                        if (val > max)
                            max = val;
                    }
                }
            }
            diff = max - min;
        }
        for (let iy = y0; iy < ny; ++iy) {
            for (let ix = x0; ix < nx; ++ix) {
                for (let iz = z0; iz < nz; ++iz) {
                    const idx = index(ix, iy, iz, 0) / 3;
                    let val = d[idx];
                    if (this.normalize) {
                        val = (val - min) / diff;
                    }
                    colormaker.colorToArray(scale(val), tmp);
                    imageData[i] = Math.round(tmp[0] * 255);
                    imageData[i + 1] = Math.round(tmp[1] * 255);
                    imageData[i + 2] = Math.round(tmp[2] * 255);
                    imageData[i + 3] = (val > tMin && val < tMax) ? 255 : 0;
                    pickingArray[j] = idx;
                    ++j;
                    i += 4;
                }
            }
        }
        const picking = new SlicePicker(pickingArray, v);
        return { position, imageData, width, height, picking };
    }
}

/**
 * @file Slice Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Slice representation
 */
class SliceRepresentation extends Representation {
    /**
     * Create Slice representation object
     * @param {Volume} surface - the volume to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {SliceRepresentationParameters} params - slice representation parameters
     */
    constructor(volume, viewer, params) {
        super(volume, viewer, params);
        this.type = 'slice';
        this.parameters = Object.assign({
            filter: {
                type: 'select',
                buffer: true,
                options: {
                    'nearest': 'nearest',
                    'linear': 'linear',
                    'cubic-bspline': 'cubic-bspline',
                    'cubic-catmulrom': 'cubic-catmulrom',
                    'cubic-mitchell': 'cubic-mitchell'
                }
            },
            positionType: {
                type: 'select',
                rebuild: true,
                options: {
                    'percent': 'percent', 'coordinate': 'coordinate'
                }
            },
            position: {
                type: 'range',
                step: 0.1,
                max: 100,
                min: 1,
                rebuild: true
            },
            dimension: {
                type: 'select',
                rebuild: true,
                options: {
                    'x': 'x', 'y': 'y', 'z': 'z'
                }
            },
            thresholdType: {
                type: 'select',
                rebuild: true,
                options: {
                    'value': 'value', 'sigma': 'sigma'
                }
            },
            thresholdMin: {
                type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
            },
            thresholdMax: {
                type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
            },
            normalize: {
                type: 'boolean', rebuild: true
            }
        }, this.parameters, {
            flatShaded: null,
            side: null,
            wireframe: null,
            linewidth: null,
            colorScheme: null,
            roughness: null,
            metalness: null,
            diffuse: null
        });
        this.volume = volume;
        this.init(params);
    }
    init(params) {
        const v = this.volume;
        const p = params || {};
        p.colorDomain = defaults(p.colorDomain, [v.min, v.max]);
        p.colorScheme = defaults(p.colorScheme, 'value');
        p.colorScale = defaults(p.colorScale, 'Spectral');
        this.colorScheme = 'value';
        this.dimension = defaults(p.dimension, 'x');
        this.filter = defaults(p.filter, 'cubic-bspline');
        this.positionType = defaults(p.positionType, 'percent');
        this.position = defaults(p.position, 30);
        this.thresholdType = defaults(p.thresholdType, 'sigma');
        this.thresholdMin = defaults(p.thresholdMin, -Infinity);
        this.thresholdMax = defaults(p.thresholdMax, Infinity);
        this.normalize = defaults(p.normalize, false);
        super.init(p);
        this.build();
    }
    attach(callback) {
        this.bufferList.forEach(buffer => {
            this.viewer.add(buffer);
        });
        this.setVisibility(this.visible);
        callback();
    }
    create() {
        const volumeSlice = new VolumeSlice(this.volume, {
            positionType: this.positionType,
            position: this.position,
            dimension: this.dimension,
            thresholdType: this.thresholdType,
            thresholdMin: this.thresholdMin,
            thresholdMax: this.thresholdMax,
            normalize: this.normalize
        });
        const sliceBuffer = new ImageBuffer(volumeSlice.getData({ colorParams: this.getColorParams() }), this.getBufferParams({
            filter: this.filter
        }));
        this.bufferList.push(sliceBuffer);
    }
}

/**
 * @file Representation Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function logReprUnknown(type) {
    Log.error(`makeRepresentation: representation type ${type} unknown`);
}
function makeRepresentation(type, object, viewer, params) {
    if (Debug)
        Log.time('makeRepresentation ' + type);
    var ReprClass;
    if (object instanceof Structure) {
        ReprClass = RepresentationRegistry.get(type);
        if (!ReprClass) {
            logReprUnknown(type);
            return;
        }
    }
    else if (object instanceof Surface) {
        if (type === 'surface') {
            ReprClass = SurfaceRepresentation;
        }
        else if (type === 'dot') {
            ReprClass = DotRepresentation;
        }
        else {
            logReprUnknown(type);
            return;
        }
    }
    else if (object instanceof Volume) {
        if (type === 'surface') {
            ReprClass = SurfaceRepresentation;
        }
        else if (type === 'dot') {
            ReprClass = DotRepresentation;
        }
        else if (type === 'slice') {
            ReprClass = SliceRepresentation;
        }
        else {
            logReprUnknown(type);
            return;
        }
    }
    else if (object instanceof Shape) {
        ReprClass = BufferRepresentation;
        object = object.getBufferList();
    }
    else if (type === 'buffer') {
        ReprClass = BufferRepresentation;
    }
    else {
        Log.error('makeRepresentation: object ' + object + ' unknown');
        return;
    }
    const repr = new ReprClass(object, viewer, params);
    if (Debug)
        Log.timeEnd('makeRepresentation ' + type);
    return repr;
}

/**
 * @file Element
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const ElementDefaultParameters = {
    name: 'some element',
    status: ''
};
/**
 * Element base class
 */
class Element {
    /**
     * @param {Stage} stage - stage object the component belongs to
     * @param {ElementParameters} params - component parameters
     */
    constructor(stage, params = {}) {
        this.stage = stage;
        /**
         * Events emitted by the element
         */
        this.signals = {
            statusChanged: new Signal(),
            nameChanged: new Signal(),
            disposed: new Signal()
        };
        this.parameters = createParams(params, this.defaultParameters);
        this.uuid = generateUUID();
    }
    get defaultParameters() { return ElementDefaultParameters; }
    get name() { return this.parameters.name; }
    setStatus(value) {
        this.parameters.status = value;
        this.signals.statusChanged.dispatch(value);
        return this;
    }
    setName(value) {
        this.parameters.name = value;
        this.signals.nameChanged.dispatch(value);
        return this;
    }
    dispose() {
        this.signals.disposed.dispatch();
    }
}

/**
 * @file Representation Element
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const RepresentationElementDefaultParameters = Object.assign({
    visible: true
}, ElementDefaultParameters);
/**
 * Element wrapping a {@link Representation} object
 */
class RepresentationElement extends Element {
    /**
     * Create representation component
     * @param {Stage} stage - stage object the component belongs to
     * @param {Representation} repr - representation object to wrap
     * @param {RepresentationParameters} [params] - component parameters
     * @param {Component} [parent] - parent component
     */
    constructor(stage, repr, params = {}, parent) {
        super(stage, Object.assign({ name: repr.type }, params));
        this.parent = parent;
        this.signals = Object.assign({
            visibilityChanged: new Signal(),
            parametersChanged: new Signal()
        }, this.signals);
        this.setRepresentation(repr);
    }
    get defaultParameters() { return RepresentationElementDefaultParameters; }
    get visible() { return this.parameters.visible; }
    /**
     * Component type
     * @type {String}
     */
    get type() { return 'representation'; }
    getType() {
        return this.repr.type;
    }
    setRepresentation(repr) {
        this._disposeRepresentation();
        this.repr = repr;
        // this.name = repr.type;
        this.stage.tasks.listen(this.repr.tasks);
        this.updateVisibility();
    }
    _disposeRepresentation() {
        if (this.repr) {
            this.stage.tasks.unlisten(this.repr.tasks);
            this.repr.dispose();
        }
    }
    dispose() {
        if (this.parent && this.parent.hasRepresentation(this)) {
            this.parent.removeRepresentation(this);
        }
        else {
            this._disposeRepresentation();
            this.signals.disposed.dispatch();
        }
    }
    /**
     * Set the visibility of the component, takes parent visibility into account
     * @param {Boolean} value - visibility flag
     * @return {RepresentationElement} this object
     */
    setVisibility(value) {
        this.parameters.visible = value;
        this.updateVisibility();
        this.signals.visibilityChanged.dispatch(this.parameters.visible);
        return this;
    }
    getVisibility() {
        if (this.parent) {
            return this.parent.parameters.visible && this.parameters.visible;
        }
        else {
            return this.parameters.visible;
        }
    }
    /**
     * Toggle visibility of the component, takes parent visibility into account
     * @return {RepresentationElement} this object
     */
    toggleVisibility() {
        return this.setVisibility(!this.parameters.visible);
    }
    updateVisibility() {
        this.repr.setVisibility(this.getVisibility());
    }
    /**
     * Set selection
     * @param {Object} what - flags indicating what attributes to update
     * @param {Boolean} what.position - update position attribute
     * @param {Boolean} what.color - update color attribute
     * @param {Boolean} what.radius - update radius attribute
     * @return {RepresentationElement} this object
     */
    update(what) {
        this.repr.update(what); // TODO
        return this;
    }
    build(params) {
        this.repr.build(params);
        return this;
    }
    /**
     * Set selection
     * @param {String} string - selection string
     * @return {RepresentationElement} this object
     */
    setSelection(string) {
        const repr = this.repr; // TODO
        if (repr.setSelection) {
            repr.setSelection(string);
        }
        return this;
    }
    /**
     * Set representation parameters
     * @param {RepresentationParameters} params - parameter object
     * @return {RepresentationElement} this object
     */
    setParameters(params) {
        this.repr.setParameters(params);
        this.signals.parametersChanged.dispatch(this.repr.getParameters());
        return this;
    }
    /**
     * Get representation parameters
     * @return {RepresentationParameters} parameter object
     */
    getParameters() {
        return this.repr.getParameters();
    }
    /**
     * Set color
     * @param {String|Color|Hex} value - color value
     * @return {RepresentationElement} this object
     */
    setColor(value) {
        this.repr.setColor(value);
        return this;
    }
}

/**
 * @file Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const _m = new Matrix4();
const _v = new Vector3();
const ComponentDefaultParameters = {
    name: '',
    status: '',
    visible: true
};
/**
 * Base class for components
 */
class Component {
    /**
     * @param {Stage} stage - stage object the component belongs to
     * @param {ComponentParameters} params - parameter object
     */
    constructor(stage, object, params = {}) {
        this.stage = stage;
        this.object = object;
        /**
         * Events emitted by the component
         */
        this.signals = {
            representationAdded: new Signal(),
            representationRemoved: new Signal(),
            visibilityChanged: new Signal(),
            matrixChanged: new Signal(),
            statusChanged: new Signal(),
            nameChanged: new Signal(),
            disposed: new Signal()
        };
        this.reprList = [];
        this.annotationList = [];
        this.matrix = new Matrix4();
        this.position = new Vector3();
        this.quaternion = new Quaternion();
        this.scale = new Vector3(1, 1, 1);
        this.transform = new Matrix4();
        this.parameters = createParams(params, this.defaultParameters);
        this.uuid = generateUUID();
        this.viewer = stage.viewer;
        this.controls = new ComponentControls(this);
    }
    get defaultParameters() { return ComponentDefaultParameters; }
    get name() { return this.parameters.name; }
    get status() { return this.parameters.status; }
    get visible() { return this.parameters.visible; }
    /**
     * Set position transform
     *
     * @example
     * // translate by 25 angstrom along x axis
     * component.setPosition([ 25, 0, 0 ]);
     *
     * @param {Vector3|Array} p - the coordinates
     * @return {Component} this object
     */
    setPosition(p) {
        if (Array.isArray(p)) {
            this.position.fromArray(p);
        }
        else {
            this.position.copy(p);
        }
        this.updateMatrix();
        return this;
    }
    /**
     * Set local rotation transform
     * (for global rotation use setTransform)
     *
     * @example
     * // rotate by 2 degree radians on x axis
     * component.setRotation( [ 2, 0, 0 ] );
     *
     * @param {Quaternion|Euler|Array} r - the rotation
     * @return {Component} this object
     */
    setRotation(r) {
        if (Array.isArray(r)) {
            if (r.length === 3) {
                const e = new Euler().fromArray(r);
                this.quaternion.setFromEuler(e);
            }
            else {
                this.quaternion.fromArray(r);
            }
        }
        else if (r instanceof Euler) {
            this.quaternion.setFromEuler(r);
        }
        else {
            this.quaternion.copy(r);
        }
        this.updateMatrix();
        return this;
    }
    /**
     * Set scale transform
     *
     * @example
     * // scale by factor of two
     * component.setScale( 2 );
     *
     * @param {Number} s - the scale
     * @return {Component} this object
     */
    setScale(s) {
        this.scale.set(s, s, s);
        this.updateMatrix();
        return this;
    }
    /**
     * Set general transform. Is applied before and in addition
     * to the position, rotation and scale transformations
     *
     * @example
     * component.setTransform( matrix );
     *
     * @param {Matrix4} m - the matrix
     * @return {Component} this object
     */
    setTransform(m) {
        this.transform.copy(m);
        this.updateMatrix();
        return this;
    }
    updateMatrix() {
        const c = this.getCenterUntransformed(_v);
        this.matrix.makeTranslation(-c.x, -c.y, -c.z);
        _m.makeRotationFromQuaternion(this.quaternion);
        this.matrix.premultiply(_m);
        _m.makeScale(this.scale.x, this.scale.y, this.scale.z);
        this.matrix.premultiply(_m);
        const p = this.position;
        _m.makeTranslation(p.x + c.x, p.y + c.y, p.z + c.z);
        this.matrix.premultiply(_m);
        this.matrix.premultiply(this.transform);
        this.updateRepresentationMatrices();
        this.stage.viewer.updateBoundingBox();
        this.signals.matrixChanged.dispatch(this.matrix);
    }
    /**
     * Propogates our matrix to each representation
     */
    updateRepresentationMatrices() {
        this.reprList.forEach(repr => {
            repr.setParameters({ matrix: this.matrix });
        });
    }
    /**
     * Add an anotation object
     * @param {Vector3} position - the 3d position
     * @param {String|Element} content - the HTML content
     * @param {Object} [params] - parameters
     * @param {Integer} params.offsetX - 2d offset in x direction
     * @param {Integer} params.offsetY - 2d offset in y direction
     * @return {Annotation} the added annotation object
     */
    addAnnotation(position, content, params) {
        const annotation = new Annotation(this, position, content, params);
        this.annotationList.push(annotation);
        return annotation;
    }
    /**
     * Iterator over each annotation and executing the callback
     * @param  {Function} callback - function to execute
     * @return {undefined}
     */
    eachAnnotation(callback) {
        this.annotationList.slice().forEach(callback);
    }
    /**
     * Remove the give annotation from the component
     * @param {Annotation} annotation - the annotation to remove
     * @return {undefined}
     */
    removeAnnotation(annotation) {
        const idx = this.annotationList.indexOf(annotation);
        if (idx !== -1) {
            this.annotationList.splice(idx, 1);
            annotation.dispose();
        }
    }
    /**
     * Remove all annotations from the component
     * @return {undefined}
     */
    removeAllAnnotations() {
        this.eachAnnotation(annotation => annotation.dispose());
        this.annotationList.length = 0;
    }
    /**
     * Add a new representation to the component
     * @param {String} type - the name of the representation
     * @param {Object} object - the object on which the representation should be based
     * @param {RepresentationParameters} [params] - representation parameters
     * @return {RepresentationElement} the created representation wrapped into
     *                                   a representation element object
     */
    _addRepresentation(type, object, params, hidden = false) {
        const p = params || {};
        const sp = this.stage.getParameters(); // TODO
        p.matrix = this.matrix.clone();
        p.quality = p.quality || sp.quality;
        p.disableImpostor = defaults(p.disableImpostor, !sp.impostor);
        p.useWorker = defaults(p.useWorker, sp.workerDefault);
        p.visible = defaults(p.visible, true);
        const p2 = Object.assign({}, p, { visible: this.parameters.visible && p.visible });
        const repr = makeRepresentation(type, object, this.viewer, p2);
        const reprElem = new RepresentationElement(this.stage, repr, p, this);
        if (!hidden) {
            this.reprList.push(reprElem);
            this.signals.representationAdded.dispatch(reprElem);
        }
        return reprElem;
    }
    addBufferRepresentation(buffer, params) {
        return this._addRepresentation.call(this, 'buffer', buffer, params);
    }
    hasRepresentation(repr) {
        return this.reprList.indexOf(repr) !== -1;
    }
    /**
     * Iterator over each representation and executing the callback
     * @param  {Function} callback - function to execute
     * @return {undefined}
     */
    eachRepresentation(callback) {
        this.reprList.slice().forEach(callback);
    }
    /**
     * Removes a representation component
     * @param {RepresentationElement} repr - the representation element
     * @return {undefined}
     */
    removeRepresentation(repr) {
        const idx = this.reprList.indexOf(repr);
        if (idx !== -1) {
            this.reprList.splice(idx, 1);
            repr.dispose();
            this.signals.representationRemoved.dispatch(repr);
        }
    }
    updateRepresentations(what) {
        this.reprList.forEach(repr => repr.update(what));
        this.stage.viewer.requestRender();
    }
    /**
     * Removes all representation components
     * @return {undefined}
     */
    removeAllRepresentations() {
        this.eachRepresentation(repr => repr.dispose());
    }
    dispose() {
        this.removeAllAnnotations();
        this.removeAllRepresentations();
        this.reprList.length = 0;
        this.signals.disposed.dispatch();
    }
    /**
     * Set the visibility of the component, including added representations
     * @param {Boolean} value - visibility flag
     * @return {Component} this object
     */
    setVisibility(value) {
        this.parameters.visible = value;
        this.eachRepresentation((repr) => repr.updateVisibility());
        this.eachAnnotation((annotation) => annotation.updateVisibility());
        this.signals.visibilityChanged.dispatch(value);
        return this;
    }
    setStatus(value) {
        this.parameters.status = value;
        this.signals.statusChanged.dispatch(value);
        return this;
    }
    setName(value) {
        this.parameters.name = value;
        this.signals.nameChanged.dispatch(value);
        return this;
    }
    /**
     * @return {Box3} the component's bounding box
     */
    getBox(...args) {
        return this.getBoxUntransformed(...args)
            .clone().applyMatrix4(this.matrix);
    }
    /**
     * @return {Vector3} the component's center position
     */
    getCenter(...args) {
        return this.getCenterUntransformed(...args)
            .clone().applyMatrix4(this.matrix);
    }
    getZoom(...args) {
        return this.stage.getZoomForBox(this.getBox(...args));
    }
    /**
     * @abstract
     * @return {Box3} the untransformed component's bounding box
     */
    getBoxUntransformed(...args) {
        return new Box3();
    }
    getCenterUntransformed(...args) {
        return this.getBoxUntransformed().getCenter(new Vector3());
    }
    /**
     * Automatically center and zoom the component
     * @param  {Integer} [duration] - duration of the animation, defaults to 0
     * @return {undefined}
     */
    autoView(duration) {
        this.stage.animationControls.zoomMove(this.getCenter(), this.getZoom(), defaults(duration, 0));
    }
}

/**
 * @file Collection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Collection {
    constructor(list = []) {
        this.list = list;
        // remove elements from list when they get disposed
        const n = list.length;
        for (let i = 0; i < n; ++i) {
            const elm = list[i];
            elm.signals.disposed.add(this._remove, this);
        }
    }
    _remove(elm) {
        const idx = this.list.indexOf(elm);
        if (idx !== -1) {
            this.list.splice(idx, 1);
        }
    }
    get first() {
        return this.list.length > 0 ? this.list[0] : undefined;
    }
    forEach(fn) {
        this.list.forEach(fn);
        return this;
    }
    dispose() {
        return this.forEach((elm) => elm.dispose());
    }
}

/**
 * @file Component Collection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class RepresentationCollection extends Collection {
    setParameters(params) {
        return this.forEach((repr) => repr.setParameters(params));
    }
    setVisibility(value) {
        return this.forEach((repr) => repr.setVisibility(value));
    }
    setSelection(string) {
        return this.forEach((repr) => repr.setSelection(string));
    }
    setColor(color) {
        return this.forEach((repr) => repr.setColor(color));
    }
    update(what) {
        return this.forEach((repr) => repr.update(what));
    }
    build(params) {
        return this.forEach((repr) => repr.build(params));
    }
    dispose(params) {
        return this.forEach((repr) => repr.dispose());
    }
}

/**
 * @file Trajectory Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Trajectory component parameter object.
 * @typedef {Object} TrajectoryComponentParameters - component parameters
 *
 * @property {String} name - component name
 * @property {Integer} initialFrame - initial frame the trajectory is set to
 * @property {Integer} defaultStep - default step size to be used by trajectory players
 * @property {Integer} defaultTimeout - default timeout to be used by trajectory players
 * @property {String} defaultInterpolateType - one of "" (empty string), "linear" or "spline"
 * @property {Integer} defaultInterpolateStep - window size used for interpolation
 * @property {String} defaultMode - either "loop" or "once"
 * @property {String} defaultDirection - either "forward" or "backward"
 */
const TrajectoryElementDefaultParameters = Object.assign({
    defaultStep: 1,
    defaultTimeout: 50,
    defaultInterpolateType: '',
    defaultInterpolateStep: 5,
    defaultMode: 'loop',
    defaultDirection: 'forward',
    initialFrame: 0
}, ElementDefaultParameters);
/**
 * Component wrapping a {@link Trajectory} object
 */
class TrajectoryElement extends Element {
    /**
     * @param {Stage} stage - stage object the component belongs to
     * @param {Trajectory} trajectory - the trajectory object
     * @param {TrajectoryComponentParameters} params - component parameters
     * @param {StructureComponent} parent - the parent structure
     */
    constructor(stage, trajectory, params = {}) {
        super(stage, Object.assign({ name: trajectory.name }, params));
        this.trajectory = trajectory;
        this.signals = Object.assign(this.signals, {
            frameChanged: new Signal(),
            playerChanged: new Signal(),
            countChanged: new Signal(),
            parametersChanged: new Signal()
        });
        // signals
        trajectory.signals.frameChanged.add((i) => {
            this.signals.frameChanged.dispatch(i);
        });
        trajectory.signals.playerChanged.add((player) => {
            this.signals.playerChanged.dispatch(player);
        });
        trajectory.signals.countChanged.add((n) => {
            this.signals.countChanged.dispatch(n);
        });
        //
        if (params.initialFrame !== undefined) {
            this.setFrame(params.initialFrame);
        }
    }
    get defaultParameters() { return TrajectoryElementDefaultParameters; }
    /**
     * Component type
     * @type {String}
     */
    get type() { return 'trajectory'; }
    /**
     * Set the frame of the trajectory
     * @param {Integer} i - frame number
     * @return {undefined}
     */
    setFrame(i) {
        this.trajectory.setFrame(i);
    }
    /**
     * Set trajectory parameters
     * @param {TrajectoryParameters} params - trajectory parameters
     * @return {undefined}
     */
    setParameters(params = {}) {
        this.trajectory.setParameters(params);
        this.signals.parametersChanged.dispatch(params);
    }
    dispose() {
        this.trajectory.dispose();
        super.dispose();
    }
}

/**
 * @file Frames
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Frames {
    constructor(name, path) {
        this.name = name;
        this.path = path;
        this.coordinates = [];
        this.boxes = [];
        this.times = [];
        this.timeOffset = 0;
        this.deltaTime = 1;
    }
    get type() { return 'Frames'; }
}

/**
 * @file Superposition
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Superposition {
    constructor(atoms1, atoms2) {
        // allocate & init data structures
        this.A = new Matrix$2(3, 3);
        this.W = new Matrix$2(1, 3);
        this.U = new Matrix$2(3, 3);
        this.V = new Matrix$2(3, 3);
        this.VH = new Matrix$2(3, 3);
        this.R = new Matrix$2(3, 3);
        this.tmp = new Matrix$2(3, 3);
        this.c = new Matrix$2(3, 3);
        let n1;
        if (atoms1 instanceof Structure) {
            n1 = atoms1.atomCount;
        }
        else if (atoms1 instanceof Float32Array) {
            n1 = atoms1.length / 3;
        }
        else {
            return;
        }
        let n2;
        if (atoms2 instanceof Structure) {
            n2 = atoms2.atomCount;
        }
        else if (atoms2 instanceof Float32Array) {
            n2 = atoms2.length / 3;
        }
        else {
            return;
        }
        const n = Math.min(n1, n2);
        const coords1 = new Matrix$2(3, n);
        const coords2 = new Matrix$2(3, n);
        this.coords1t = new Matrix$2(n, 3);
        this.coords2t = new Matrix$2(n, 3);
        this.transformationMatrix = new Matrix4();
        this.c.data.set([1, 0, 0, 0, 1, 0, 0, 0, -1]);
        // prep coords
        this.prepCoords(atoms1, coords1, n, false);
        this.prepCoords(atoms2, coords2, n, false);
        // superpose
        this._superpose(coords1, coords2);
    }
    _superpose(coords1, coords2) {
        this.mean1 = meanRows(coords1);
        this.mean2 = meanRows(coords2);
        subRows(coords1, this.mean1);
        subRows(coords2, this.mean2);
        transpose(this.coords1t, coords1);
        transpose(this.coords2t, coords2);
        multiplyABt(this.A, this.coords2t, this.coords1t);
        svd(this.A, this.W, this.U, this.V);
        invert3x3(this.V, this.VH);
        multiply3x3(this.R, this.U, this.VH);
        if (mat3x3determinant(this.R) < 0.0) {
            if (Debug)
                Log.log('R not a right handed system');
            multiply3x3(this.tmp, this.c, this.VH);
            multiply3x3(this.R, this.U, this.tmp);
        }
        //get the transformation matrix
        const transformMat_ = new Matrix$2(4, 4);
        const tmp_1 = new Matrix$2(4, 4);
        const tmp_2 = new Matrix$2(4, 4);
        const sub = new Matrix$2(4, 4);
        const mult = new Matrix$2(4, 4);
        const add = new Matrix$2(4, 4);
        const R = this.R.data;
        const M1 = this.mean1;
        const M2 = this.mean2;
        sub.data.set([1, 0, 0, -M1[0],
            0, 1, 0, -M1[1],
            0, 0, 1, -M1[2],
            0, 0, 0, 1]);
        mult.data.set([R[0], R[1], R[2], 0,
            R[3], R[4], R[5], 0,
            R[6], R[7], R[8], 0,
            0, 0, 0, 1]);
        add.data.set([1, 0, 0, M2[0],
            0, 1, 0, M2[1],
            0, 0, 1, M2[2],
            0, 0, 0, 1]);
        transpose(tmp_1, sub);
        multiplyABt(transformMat_, mult, tmp_1);
        transpose(tmp_2, transformMat_);
        multiplyABt(tmp_1, add, tmp_2);
        transpose(transformMat_, tmp_1);
        this.transformationMatrix.elements = transformMat_.data;
    }
    prepCoords(atoms, coords, n, is4X4) {
        let i = 0;
        const cd = coords.data;
        let c = 3;
        let d = n * 3;
        if (is4X4) {
            d = n * 4;
            c = 4;
        }
        if (atoms instanceof Structure) {
            atoms.eachAtom(function (a) {
                if (i < d) {
                    cd[i + 0] = a.x;
                    cd[i + 1] = a.y;
                    cd[i + 2] = a.z;
                    if (is4X4)
                        cd[i + 3] = 1;
                    i += c;
                }
            });
        }
        else if (atoms instanceof Float32Array) {
            for (; i < d; i += c) {
                if (i < d) {
                    cd[i] = atoms[i];
                    cd[i + 1] = atoms[i + 1];
                    cd[i + 2] = atoms[i + 2];
                    if (is4X4)
                        cd[i + 3] = 1;
                }
            }
        }
        else {
            Log.warn('prepCoords: input type unknown');
        }
    }
    transform(atoms) {
        // allocate data structures
        let n;
        if (atoms instanceof Structure) {
            n = atoms.atomCount;
        }
        else if (atoms instanceof Float32Array) {
            n = atoms.length / 3;
        }
        else {
            return;
        }
        const coords = new Matrix$2(4, n);
        const tCoords = new Matrix$2(n, 4);
        // prep coords
        this.prepCoords(atoms, coords, n, true);
        // check for transformation matrix correctness
        const transform = this.transformationMatrix;
        const det = transform.determinant();
        if (!det) {
            return det;
        }
        // do transform
        const mult = new Matrix$2(4, 4);
        mult.data = transform.elements;
        multiply(tCoords, coords, mult);
        let i = 0;
        const cd = tCoords.data;
        if (atoms instanceof Structure) {
            atoms.eachAtom(function (a) {
                a.x = cd[i];
                a.y = cd[i + 1];
                a.z = cd[i + 2];
                i += 4;
            });
            //update transformation matrices for each assembly
            const invertTrasform = new Matrix4();
            invertTrasform.copy(transform).invert();
            const biomolDict = atoms.biomolDict;
            for (let key in biomolDict) {
                if (biomolDict.hasOwnProperty(key)) {
                    let assembly = biomolDict[key];
                    assembly.partList.forEach(function (part) {
                        part.matrixList.forEach(function (mat) {
                            mat.premultiply(transform);
                            mat.multiply(invertTrasform);
                        });
                    });
                }
            }
        }
        else if (atoms instanceof Float32Array) {
            const n4 = n * 4;
            for (; i < n4; i += 4) {
                atoms[i] = cd[i];
                atoms[i + 1] = cd[i + 1];
                atoms[i + 2] = cd[i + 2];
            }
        }
        else {
            Log.warn('transform: input type unknown');
        }
        return this.transformationMatrix;
    }
}

/**
 * @file Trajectory Player
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const TrajectoryPlayerDefaultParameters = {
    step: 1,
    timeout: 50,
    start: 0,
    end: 0,
    interpolateType: '',
    interpolateStep: 5,
    mode: 'loop',
    direction: 'forward'
};
/**
 * Trajectory player for animating coordinate frames
 * @example
 * var player = new TrajectoryPlayer(trajectory, {step: 1, timeout: 50});
 * player.play();
 */
class TrajectoryPlayer {
    /**
     * make trajectory player
     * @param {Trajectory} traj - the trajectory
     * @param {TrajectoryPlayerParameters} [params] - parameter object
     */
    constructor(traj, params = {}) {
        this.signals = {
            startedRunning: new Signal(),
            haltedRunning: new Signal()
        };
        this._run = false;
        this._previousTime = 0;
        this._currentTime = 0;
        this._currentStep = 1;
        traj.signals.playerChanged.add((player) => {
            if (player !== this) {
                this.pause();
            }
        }, this);
        const n = defaults(traj.frameCount, 1);
        this.traj = traj;
        this.parameters = createParams(params, TrajectoryPlayerDefaultParameters);
        this.parameters.end = Math.min(defaults(params.end, n - 1), n - 1);
        this.parameters.step = defaults(params.step, Math.ceil((n + 1) / 100));
        this._currentFrame = this.parameters.start;
        this._direction = this.parameters.direction === 'bounce' ? 'forward' : this.parameters.direction;
        traj.signals.countChanged.add((n) => {
            this.parameters.end = Math.min(defaults(this.parameters.end, n - 1), n - 1);
        }, this);
        this._animate = this._animate.bind(this);
    }
    get isRunning() { return this._run; }
    /**
     * set player parameters
     * @param {TrajectoryPlayerParameters} [params] - parameter object
     */
    setParameters(params = {}) {
        updateParams(this.parameters, params);
        if (params.direction !== undefined && this.parameters.direction !== 'bounce') {
            this._direction = this.parameters.direction;
        }
    }
    _animate() {
        if (!this._run)
            return;
        this._currentTime = window.performance.now();
        const dt = this._currentTime - this._previousTime;
        const step = this.parameters.interpolateType ? this.parameters.interpolateStep : 1;
        const timeout = this.parameters.timeout / step;
        const traj = this.traj;
        if (traj && traj.frameCount && !traj.inProgress && dt >= timeout) {
            if (this.parameters.interpolateType) {
                if (this._currentStep > this.parameters.interpolateStep) {
                    this._currentStep = 1;
                }
                if (this._currentStep === 1) {
                    this._currentFrame = this._nextInterpolated();
                }
                if (traj.hasFrame(this._currentFrame)) {
                    this._currentStep += 1;
                    const t = this._currentStep / (this.parameters.interpolateStep + 1);
                    const [i, ip, ipp, ippp] = this._currentFrame;
                    traj.setFrameInterpolated(i, ip, ipp, ippp, t, this.parameters.interpolateType);
                    this._previousTime = this._currentTime;
                }
                else {
                    traj.loadFrame(this._currentFrame);
                }
            }
            else {
                const i = this._next();
                if (traj.hasFrame(i)) {
                    traj.setFrame(i);
                    this._previousTime = this._currentTime;
                }
                else {
                    traj.loadFrame(i);
                }
            }
        }
        window.requestAnimationFrame(this._animate);
    }
    _next() {
        const p = this.parameters;
        let i;
        if (this._direction === 'forward') {
            i = this.traj.currentFrame + p.step;
        }
        else {
            i = this.traj.currentFrame - p.step;
        }
        if (i > p.end || i < p.start) {
            if (p.direction === 'bounce') {
                if (this._direction === 'forward') {
                    this._direction = 'backward';
                }
                else {
                    this._direction = 'forward';
                }
            }
            if (p.mode === 'once') {
                this.pause();
                if (p.direction === 'forward') {
                    i = p.end;
                }
                else if (p.direction === 'backward') {
                    i = p.start;
                }
                else {
                    if (this._direction === 'forward') {
                        i = p.start;
                    }
                    else {
                        i = p.end;
                    }
                }
            }
            else {
                if (this._direction === 'forward') {
                    i = p.start;
                    if (p.interpolateType) {
                        i = Math.min(p.end, i + p.step);
                    }
                }
                else {
                    i = p.end;
                    if (p.interpolateType) {
                        i = Math.max(p.start, i - p.step);
                    }
                }
            }
        }
        return i;
    }
    _nextInterpolated() {
        const p = this.parameters;
        const i = this._next();
        let ip, ipp, ippp;
        if (this._direction === 'forward') {
            ip = Math.max(p.start, i - p.step);
            ipp = Math.max(p.start, i - 2 * p.step);
            ippp = Math.max(p.start, i - 3 * p.step);
        }
        else {
            ip = Math.min(p.end, i + p.step);
            ipp = Math.min(p.end, i + 2 * p.step);
            ippp = Math.min(p.end, i + 3 * p.step);
        }
        return [i, ip, ipp, ippp];
    }
    /**
     * toggle between playing and pausing the animation
     * @return {undefined}
     */
    toggle() {
        if (this._run) {
            this.pause();
        }
        else {
            this.play();
        }
    }
    /**
     * start the animation
     * @return {undefined}
     */
    play() {
        if (!this._run) {
            if (this.traj.player !== this) {
                this.traj.setPlayer(this);
            }
            this._currentStep = 1;
            const p = this.parameters;
            const frame = this.traj.currentFrame;
            // snap to the grid implied by this.step division and multiplication
            // thus minimizing cache misses
            let i = Math.ceil(frame / p.step) * p.step;
            // wrap when restarting from the limit (i.e. end or start)
            if (p.direction === 'forward' && frame >= p.end) {
                i = p.start;
            }
            else if (p.direction === 'backward' && frame <= p.start) {
                i = p.end;
            }
            this.traj.setFrame(i);
            this._run = true;
            this._animate();
            this.signals.startedRunning.dispatch();
        }
    }
    /**
     * pause the animation
     * @return {undefined}
     */
    pause() {
        this._run = false;
        this.signals.haltedRunning.dispatch();
    }
    /**
     * stop the animation (pause and go to start-frame)
     * @return {undefined}
     */
    stop() {
        this.pause();
        this.traj.setFrame(this.parameters.start);
    }
}

/**
 * @file Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function centerPbc(coords, mean, box) {
    if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
        return;
    }
    const n = coords.length;
    const bx = box[0];
    const by = box[1];
    const bz = box[2];
    const mx = mean[0];
    const my = mean[1];
    const mz = mean[2];
    const fx = -mx + bx + bx / 2;
    const fy = -my + by + by / 2;
    const fz = -mz + bz + bz / 2;
    for (let i = 0; i < n; i += 3) {
        coords[i + 0] = (coords[i + 0] + fx) % bx;
        coords[i + 1] = (coords[i + 1] + fy) % by;
        coords[i + 2] = (coords[i + 2] + fz) % bz;
    }
}
function removePbc(x, box) {
    if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
        return;
    }
    // ported from GROMACS src/gmxlib/rmpbc.c:rm_gropbc()
    // in-place
    const n = x.length;
    for (let i = 3; i < n; i += 3) {
        for (let j = 0; j < 3; ++j) {
            const dist = x[i + j] - x[i - 3 + j];
            if (Math.abs(dist) > 0.9 * box[j * 3 + j]) {
                if (dist > 0) {
                    for (let d = 0; d < 3; ++d) {
                        x[i + d] -= box[j * 3 + d];
                    }
                }
                else {
                    for (let d = 0; d < 3; ++d) {
                        x[i + d] += box[j * 3 + d];
                    }
                }
            }
        }
    }
    return x;
}
function removePeriodicity(x, box, mean) {
    if (box[0] === 0 || box[8] === 0 || box[4] === 0) {
        return;
    }
    const n = x.length;
    for (let i = 3; i < n; i += 3) {
        for (let j = 0; j < 3; ++j) {
            const f = (x[i + j] - mean[j]) / box[j * 3 + j];
            if (Math.abs(f) > 0.5) {
                x[i + j] -= box[j * 3 + j] * Math.round(f);
            }
        }
    }
    return x;
}
function circularMean3(indices, coords, box) {
    return [
        circularMean(coords, box[0], 3, 0, indices),
        circularMean(coords, box[1], 3, 1, indices),
        circularMean(coords, box[2], 3, 2, indices)
    ];
}
function arrayMean3(coords) {
    return [
        arrayMean(coords, 3, 0),
        arrayMean(coords, 3, 1),
        arrayMean(coords, 3, 2)
    ];
}
function interpolateSpline(c, cp, cpp, cppp, t) {
    const m = c.length;
    const coords = new Float32Array(m);
    for (let j0 = 0; j0 < m; j0 += 3) {
        const j1 = j0 + 1;
        const j2 = j0 + 2;
        coords[j0] = spline$1(cppp[j0], cpp[j0], cp[j0], c[j0], t, 1);
        coords[j1] = spline$1(cppp[j1], cpp[j1], cp[j1], c[j1], t, 1);
        coords[j2] = spline$1(cppp[j2], cpp[j2], cp[j2], c[j2], t, 1);
    }
    return coords;
}
function interpolateLerp(c, cp, t) {
    const m = c.length;
    const coords = new Float32Array(m);
    for (let j0 = 0; j0 < m; j0 += 3) {
        const j1 = j0 + 1;
        const j2 = j0 + 2;
        coords[j0] = lerp(cp[j0], c[j0], t);
        coords[j1] = lerp(cp[j1], c[j1], t);
        coords[j2] = lerp(cp[j2], c[j2], t);
    }
    return coords;
}
/**
 * Base class for trajectories, tying structures and coordinates together
 * @interface
 */
class Trajectory {
    /**
     * @param {String} trajPath - trajectory source
     * @param {Structure} structure - the structure object
     * @param {TrajectoryParameters} params - trajectory parameters
     */
    constructor(trajPath, structure, params = {}) {
        this.signals = {
            countChanged: new Signal(),
            frameChanged: new Signal(),
            playerChanged: new Signal()
        };
        this.frameCache = {};
        this.loadQueue = {};
        this.boxCache = {};
        this.pathCache = {};
        this.frameCacheSize = 0;
        this._frameCount = 0;
        this._currentFrame = -1;
        this._disposed = false;
        this.deltaTime = defaults(params.deltaTime, 0);
        this.timeOffset = defaults(params.timeOffset, 0);
        this.centerPbc = defaults(params.centerPbc, false);
        this.removePbc = defaults(params.removePbc, false);
        this.removePeriodicity = defaults(params.removePeriodicity, false);
        this.superpose = defaults(params.superpose, false);
        this.name = trajPath.replace(/^.*[\\/]/, '');
        this.trajPath = trajPath;
        this.selection = new Selection(defaults(params.sele, 'backbone and not hydrogen'));
        this.selection.signals.stringChanged.add(() => {
            this.selectionIndices = this.structure.getAtomIndices(this.selection);
            this._resetCache();
            this._saveInitialCoords();
            this.setFrame(this._currentFrame);
        });
    }
    /**
     * Number of frames in the trajectory
     */
    get frameCount() {
        return this._frameCount;
    }
    /**
     * Currently set frame of the trajectory
     */
    get currentFrame() {
        return this._currentFrame;
    }
    _init(structure) {
        this.setStructure(structure);
        this._loadFrameCount();
        this.setPlayer(new TrajectoryPlayer(this));
    }
    _loadFrameCount() { }
    setStructure(structure) {
        this.structure = structure;
        this.atomCount = structure.atomCount;
        this.backboneIndices = this._getIndices(new Selection('backbone and not hydrogen'));
        this._makeAtomIndices();
        this._saveStructureCoords();
        this.selectionIndices = this._getIndices(this.selection);
        this._resetCache();
        this._saveInitialCoords();
        this.setFrame(this._currentFrame);
    }
    _saveInitialCoords() {
        if (this.structure.hasCoords()) {
            this.initialCoords = new Float32Array(this.structureCoords);
            this._makeSuperposeCoords();
        }
        else if (this.frameCache[0]) {
            this.initialCoords = new Float32Array(this.frameCache[0]);
            this._makeSuperposeCoords();
        }
        else {
            this.loadFrame(0, () => this._saveInitialCoords());
        }
    }
    _saveStructureCoords() {
        const p = { what: { position: true } };
        this.structureCoords = this.structure.getAtomData(p).position;
    }
    setSelection(string) {
        this.selection.setString(string);
        return this;
    }
    _getIndices(selection) {
        let i = 0;
        const test = selection.test;
        const indices = [];
        if (test) {
            this.structure.eachAtom((ap) => {
                if (test(ap))
                    indices.push(i);
                i += 1;
            });
        }
        return indices;
    }
    _makeSuperposeCoords() {
        const n = this.selectionIndices.length * 3;
        this.coords1 = new Float32Array(n);
        this.coords2 = new Float32Array(n);
        const y = this.initialCoords;
        const coords2 = this.coords2;
        for (let i = 0; i < n; i += 3) {
            const j = this.selectionIndices[i / 3] * 3;
            coords2[i + 0] = y[j + 0];
            coords2[i + 1] = y[j + 1];
            coords2[i + 2] = y[j + 2];
        }
    }
    _makeAtomIndices() {
        Log.error('Trajectory._makeAtomIndices not implemented');
    }
    _resetCache() {
        this.frameCache = {};
        this.loadQueue = {};
        this.boxCache = {};
        this.pathCache = {};
        this.frameCacheSize = 0;
        this.initialCoords = new Float32Array(0);
    }
    setParameters(params = {}) {
        let resetCache = false;
        if (params.centerPbc !== undefined && params.centerPbc !== this.centerPbc) {
            this.centerPbc = params.centerPbc;
            resetCache = true;
        }
        if (params.removePeriodicity !== undefined && params.removePeriodicity !== this.removePeriodicity) {
            this.removePeriodicity = params.removePeriodicity;
            resetCache = true;
        }
        if (params.removePbc !== undefined && params.removePbc !== this.removePbc) {
            this.removePbc = params.removePbc;
            resetCache = true;
        }
        if (params.superpose !== undefined && params.superpose !== this.superpose) {
            this.superpose = params.superpose;
            resetCache = true;
        }
        this.deltaTime = defaults(params.deltaTime, this.deltaTime);
        this.timeOffset = defaults(params.timeOffset, this.timeOffset);
        if (resetCache) {
            this._resetCache();
            this.setFrame(this._currentFrame);
        }
    }
    /**
     * Check if a frame is available
     * @param  {Integer|Integer[]} i - the frame index
     * @return {Boolean} frame availability
     */
    hasFrame(i) {
        if (Array.isArray(i)) {
            return i.every(j => !!this.frameCache[j]);
        }
        else {
            return !!this.frameCache[i];
        }
    }
    /**
     * Set trajectory to a frame index
     * @param {Integer} i - the frame index
     * @param {Function} [callback] - fired when the frame has been set
     */
    setFrame(i, callback) {
        if (i === undefined)
            return this;
        this.inProgress = true;
        // i = parseInt(i)  // TODO
        if (i === -1 || this.frameCache[i]) {
            this._updateStructure(i);
            if (callback)
                callback();
        }
        else {
            this.loadFrame(i, () => {
                this._updateStructure(i);
                if (callback)
                    callback();
            });
        }
        return this;
    }
    _interpolate(i, ip, ipp, ippp, t, type) {
        const fc = this.frameCache;
        let coords;
        if (type === 'spline') {
            coords = interpolateSpline(fc[i], fc[ip], fc[ipp], fc[ippp], t);
        }
        else {
            coords = interpolateLerp(fc[i], fc[ip], t);
        }
        this.structure.updatePosition(coords);
        this._currentFrame = i;
        this.signals.frameChanged.dispatch(i);
    }
    /**
     * Interpolated and set trajectory to frame indices
     * @param {Integer} i - the frame index
     * @param {Integer} ip - one before frame index
     * @param {Integer} ipp - two before frame index
     * @param {Integer} ippp - three before frame index
     * @param {Number} t - interpolation step [0,1]
     * @param {String} type - interpolation type, '', 'spline' or 'linear'
     * @param {Function} callback - fired when the frame has been set
     */
    setFrameInterpolated(i, ip, ipp, ippp, t, type, callback) {
        if (i === undefined)
            return this;
        const fc = this.frameCache;
        const iList = [];
        if (!fc[ippp])
            iList.push(ippp);
        if (!fc[ipp])
            iList.push(ipp);
        if (!fc[ip])
            iList.push(ip);
        if (!fc[i])
            iList.push(i);
        if (iList.length) {
            this.loadFrame(iList, () => {
                this._interpolate(i, ip, ipp, ippp, t, type);
                if (callback)
                    callback();
            });
        }
        else {
            this._interpolate(i, ip, ipp, ippp, t, type);
            if (callback)
                callback();
        }
        return this;
    }
    /**
     * Load frame index
     * @param {Integer|Integer[]} i - the frame index
     * @param {Function} callback - fired when the frame has been loaded
     */
    loadFrame(i, callback) {
        if (Array.isArray(i)) {
            i.forEach(j => {
                if (!this.loadQueue[j] && !this.frameCache[j]) {
                    this.loadQueue[j] = true;
                    this._loadFrame(j, () => {
                        delete this.loadQueue[j];
                    });
                }
            });
        }
        else {
            if (!this.loadQueue[i] && !this.frameCache[i]) {
                this.loadQueue[i] = true;
                this._loadFrame(i, () => {
                    delete this.loadQueue[i];
                    if (callback)
                        callback();
                });
            }
        }
    }
    /**
     * Load frame index
     * @abstract
     * @param {Integer} i - the frame index
     * @param {Function} callback - fired when the frame has been loaded
     */
    _loadFrame(i, callback) {
        Log.error('Trajectory._loadFrame not implemented', i, callback);
    }
    _updateStructure(i) {
        if (this._disposed) {
            console.error('updateStructure: traj disposed');
            return;
        }
        if (i === -1) {
            if (this.structureCoords) {
                this.structure.updatePosition(this.structureCoords);
            }
        }
        else {
            this.structure.updatePosition(this.frameCache[i]);
        }
        this.structure.trajectory = {
            name: this.trajPath,
            frame: i
        };
        this._currentFrame = i;
        this.inProgress = false;
        this.signals.frameChanged.dispatch(i);
    }
    _doSuperpose(x) {
        const n = this.selectionIndices.length * 3;
        const coords1 = this.coords1;
        const coords2 = this.coords2;
        for (let i = 0; i < n; i += 3) {
            const j = this.selectionIndices[i / 3] * 3;
            coords1[i + 0] = x[j + 0];
            coords1[i + 1] = x[j + 1];
            coords1[i + 2] = x[j + 2];
        }
        // TODO re-use superposition object
        const sp = new Superposition(coords1, coords2);
        sp.transform(x);
    }
    _process(i, box, coords, frameCount) {
        this._setFrameCount(frameCount);
        if (box) {
            if (this.backboneIndices.length > 0 && this.centerPbc) {
                const box2 = [box[0], box[4], box[8]];
                const circMean = circularMean3(this.backboneIndices, coords, box2);
                centerPbc(coords, circMean, box2);
            }
            if (this.removePeriodicity) {
                const mean = arrayMean3(coords);
                removePeriodicity(coords, box, mean);
            }
            if (this.removePbc) {
                removePbc(coords, box);
            }
        }
        if (this.selectionIndices.length > 0 && this.coords1 && this.superpose) {
            this._doSuperpose(coords);
        }
        this.frameCache[i] = coords;
        this.boxCache[i] = box;
        this.frameCacheSize += 1;
    }
    _setFrameCount(n) {
        if (n !== this._frameCount) {
            this._frameCount = n;
            this.signals.countChanged.dispatch(n);
        }
    }
    /**
     * Dispose of the trajectory object
     * @return {undefined}
     */
    dispose() {
        this._resetCache(); // aid GC
        this._disposed = true;
        if (this.player)
            this.player.stop();
    }
    /**
     * Set player for this trajectory
     * @param {TrajectoryPlayer} player - the player
     */
    setPlayer(player) {
        this.player = player;
        this.signals.playerChanged.dispatch(player);
    }
    /**
     * Get time for frame
     * @param  {Integer} i - frame index
     * @return {Number} time in picoseconds
     */
    getFrameTime(i) {
        return this.timeOffset + i * this.deltaTime;
    }
}

/**
 * @file Frames Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Frames trajectory class. Gets data from a frames object.
 */
class FramesTrajectory extends Trajectory {
    constructor(frames, structure, params) {
        const p = params || {};
        p.timeOffset = defaults(p.timeOffset, frames.timeOffset);
        p.deltaTime = defaults(p.deltaTime, frames.deltaTime);
        super('', structure, p);
        this.name = frames.name;
        this.path = frames.path;
        this.frames = frames.coordinates;
        this.boxes = frames.boxes;
        this._init(structure);
    }
    get type() { return 'frames'; }
    _makeAtomIndices() {
        if (this.structure.type === 'StructureView') {
            this.atomIndices = this.structure.getAtomIndices();
        }
        else {
            this.atomIndices = undefined;
        }
    }
    _loadFrame(i, callback) {
        let coords;
        const frame = this.frames[i];
        if (this.atomIndices) {
            const indices = this.atomIndices;
            const m = indices.length;
            coords = new Float32Array(m * 3);
            for (let j = 0; j < m; ++j) {
                const j3 = j * 3;
                const idx3 = indices[j] * 3;
                coords[j3 + 0] = frame[idx3 + 0];
                coords[j3 + 1] = frame[idx3 + 1];
                coords[j3 + 2] = frame[idx3 + 2];
            }
        }
        else {
            coords = new Float32Array(frame);
        }
        const box = this.boxes[i];
        const frameCount = this.frames.length;
        this._process(i, box, coords, frameCount);
        if (typeof callback === 'function') {
            callback();
        }
    }
    _loadFrameCount() {
        if (this.frames) {
            this._setFrameCount(this.frames.length);
        }
    }
}

/**
 * @file Structure Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Structure trajectory class. Gets data from a structure object.
 */
class StructureTrajectory extends Trajectory {
    constructor(trajPath, structure, params) {
        super('', structure, params);
        this._init(structure);
    }
    get type() { return 'structure'; }
    _makeAtomIndices() {
        if (this.structure.atomSet && this.structure.atomSet.getSize() < this.structure.atomStore.count) {
            this.atomIndices = this.structure.getAtomIndices();
        }
        else {
            this.atomIndices = undefined;
        }
    }
    _loadFrame(i, callback) {
        let coords;
        const structure = this.structure;
        const frame = structure.frames[i];
        if (this.atomIndices) {
            const indices = this.atomIndices;
            const m = indices.length;
            coords = new Float32Array(m * 3);
            for (let j = 0; j < m; ++j) {
                const j3 = j * 3;
                const idx3 = indices[j] * 3;
                coords[j3 + 0] = frame[idx3 + 0];
                coords[j3 + 1] = frame[idx3 + 1];
                coords[j3 + 2] = frame[idx3 + 2];
            }
        }
        else {
            coords = new Float32Array(frame);
        }
        const box = structure.boxes[i];
        const frameCount = structure.frames.length;
        this._process(i, box, coords, frameCount);
        if (typeof callback === 'function') {
            callback();
        }
    }
    _loadFrameCount() {
        this._setFrameCount(this.structure.frames.length);
    }
}

/**
 * @file Remote Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Remote trajectory class. Gets data from an MDsrv instance.
 */
class RemoteTrajectory extends Trajectory {
    constructor(trajPath, structure, params) {
        super(trajPath, structure, params);
        this._init(structure);
    }
    get type() { return 'remote'; }
    _makeAtomIndices() {
        const atomIndices = [];
        if (this.structure.type === 'StructureView') {
            const indices = this.structure.getAtomIndices(); // TODO
            const n = indices.length;
            let p = indices[0];
            let q = indices[0];
            for (let i = 1; i < n; ++i) {
                const r = indices[i];
                if (q + 1 < r) {
                    atomIndices.push([p, q + 1]);
                    p = r;
                }
                q = r;
            }
            atomIndices.push([p, q + 1]);
        }
        else {
            atomIndices.push([0, this.atomCount]);
        }
        this.atomIndices = atomIndices;
    }
    _loadFrame(i, callback) {
        // TODO implement max frameCache size, re-use arrays
        const request = new XMLHttpRequest();
        const url = TrajectoryDatasource.getFrameUrl(this.trajPath, i);
        const params = TrajectoryDatasource.getFrameParams(this.trajPath, this.atomIndices);
        request.open('POST', url, true);
        request.responseType = 'arraybuffer';
        request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        request.addEventListener('load', () => {
            const arrayBuffer = request.response;
            if (!arrayBuffer) {
                Log.error(`empty arrayBuffer for '${url}'`);
                return;
            }
            const frameCount = new Int32Array(arrayBuffer, 0, 1)[0];
            // const time = new Float32Array( arrayBuffer, 1 * 4, 1 )[ 0 ];
            const box = new Float32Array(arrayBuffer, 2 * 4, 9);
            const coords = new Float32Array(arrayBuffer, 11 * 4);
            this._process(i, box, coords, frameCount);
            if (typeof callback === 'function') {
                callback();
            }
        }, false);
        request.send(params);
    }
    _loadFrameCount() {
        const request = new XMLHttpRequest();
        const url = TrajectoryDatasource.getCountUrl(this.trajPath);
        request.open('GET', url, true);
        request.addEventListener('load', () => {
            this._setFrameCount(parseInt(request.response));
        }, false);
        request.send();
    }
}

/**
 * @file Callback Trajectory
 * @author Tarn W. Burton <twburton@gmail.com>
 * @private
 */
/**
 * Callback trajectory class. Gets data from an JavaScript function.
 */
class CallbackTrajectory extends Trajectory {
    constructor(requestCallback, structure, params) {
        super('', structure, params);
        this.requestCallback = requestCallback;
        this._init(structure);
    }
    get type() { return 'callback'; }
    _makeAtomIndices() {
        const atomIndices = [];
        if (this.structure.type === 'StructureView') {
            const indices = this.structure.getAtomIndices(); // TODO
            const n = indices.length;
            let p = indices[0];
            let q = indices[0];
            for (let i = 1; i < n; ++i) {
                const r = indices[i];
                if (q + 1 < r) {
                    atomIndices.push([p, q + 1]);
                    p = r;
                }
                q = r;
            }
            atomIndices.push([p, q + 1]);
        }
        else {
            atomIndices.push([0, this.atomCount]);
        }
        this.atomIndices = atomIndices;
    }
    _loadFrame(i, callback) {
        this.requestCallback((i, box, coords, frameCount) => {
            this._process(i, box, coords, frameCount);
            if (typeof callback === 'function') {
                callback();
            }
        }, i, this.atomIndices);
    }
    _loadFrameCount() {
        this.requestCallback((count) => this._setFrameCount(count));
    }
}

/**
 * @file Trajectory Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function makeTrajectory(trajSrc, structure, params) {
    let traj;
    if (trajSrc && trajSrc instanceof Frames) {
        traj = new FramesTrajectory(trajSrc, structure, params);
    }
    else if (!trajSrc && structure.frames) {
        traj = new StructureTrajectory(trajSrc, structure, params);
    }
    else if (trajSrc && typeof trajSrc === 'function') {
        traj = new CallbackTrajectory(trajSrc, structure, params);
    }
    else {
        traj = new RemoteTrajectory(trajSrc, structure, params);
    }
    return traj;
}

/**
 * @file Structure View
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Get view on structure restricted to the selection
 * @param  {Selection} selection - the selection
 * @return {StructureView} the view on the structure
 */
Structure.prototype.getView = function (selection) {
    // added here to avoid cyclic import dependency
    return new StructureView(this, selection);
};
/**
 * View on the structure, restricted to the selection
 */
class StructureView extends Structure {
    /**
     * @param {Structure} structure - the structure
     * @param {Selection} selection - the selection
     */
    constructor(structure, selection) {
        super();
        this.structure = structure;
        this.selection = selection;
        this.center = new Vector3();
        this.boundingBox = new Box3();
        this._bp = this.getBondProxy();
        this._ap = this.getAtomProxy();
        this._rp = this.getResidueProxy();
        this._cp = this.getChainProxy();
        if (this.selection) {
            this.selection.signals.stringChanged.add(this.refresh, this);
        }
        this.structure.signals.refreshed.add(this.refresh, this);
        this.refresh();
    }
    init() { }
    get type() { return 'StructureView'; }
    get name() { return this.structure.name; }
    get path() { return this.structure.path; }
    get title() { return this.structure.title; }
    get id() { return this.structure.id; }
    get data() { return this.structure.data; }
    get atomSetDict() { return this.structure.atomSetDict; }
    get biomolDict() { return this.structure.biomolDict; }
    get entityList() { return this.structure.entityList; }
    get unitcell() { return this.structure.unitcell; }
    get frames() { return this.structure.frames; }
    get boxes() { return this.structure.boxes; }
    get validation() { return this.structure.validation; }
    get bondStore() { return this.structure.bondStore; }
    get backboneBondStore() { return this.structure.backboneBondStore; }
    get rungBondStore() { return this.structure.rungBondStore; }
    get atomStore() { return this.structure.atomStore; }
    get residueStore() { return this.structure.residueStore; }
    get chainStore() { return this.structure.chainStore; }
    get modelStore() { return this.structure.modelStore; }
    get atomMap() { return this.structure.atomMap; }
    get residueMap() { return this.structure.residueMap; }
    get bondHash() { return this.structure.bondHash; }
    get spatialHash() { return this.structure.spatialHash; }
    get _hasCoords() { return this.structure._hasCoords; }
    set _hasCoords(value) { this.structure._hasCoords = value; }
    /**
     * Updates atomSet, bondSet, atomSetCache, atomCount, bondCount, boundingBox, center.
     * @emits {Structure.signals.refreshed} when refreshed
     * @return {undefined}
     */
    refresh() {
        if (Debug)
            Log.time('StructureView.refresh');
        this.atomSetCache = {};
        const structure = this.structure;
        if (this.selection.isAllSelection() &&
            structure !== this && structure.atomSet && structure.bondSet) {
            this.atomSet = structure.atomSet.clone();
            this.bondSet = structure.bondSet.clone();
            for (let name in this.atomSetDict) {
                const atomSet = this.atomSetDict[name];
                this.atomSetCache['__' + name] = atomSet.clone();
            }
            this.atomCount = structure.atomCount;
            this.bondCount = structure.bondCount;
            this.boundingBox.copy(structure.boundingBox);
            this.center.copy(structure.center);
        }
        else if (this.selection.isNoneSelection() &&
            structure !== this && structure.atomSet && structure.bondSet) {
            this.atomSet = new BitArray(structure.atomCount);
            this.bondSet = new BitArray(structure.bondCount);
            for (let name in this.atomSetDict) {
                this.atomSetCache['__' + name] = new BitArray(structure.atomCount);
            }
            this.atomCount = 0;
            this.bondCount = 0;
            this.boundingBox.makeEmpty();
            this.center.set(0, 0, 0);
        }
        else {
            this.atomSet = this.getAtomSet(this.selection, true);
            if (structure.atomSet) {
                this.atomSet = this.atomSet.intersection(structure.atomSet);
            }
            this.bondSet = this.getBondSet();
            for (let name in this.atomSetDict) {
                const atomSet = this.atomSetDict[name];
                this.atomSetCache['__' + name] = atomSet.makeIntersection(this.atomSet);
            }
            this.atomCount = this.atomSet.getSize();
            this.bondCount = this.bondSet.getSize();
            this.boundingBox = this.getBoundingBox();
            this.center = this.boundingBox.getCenter(new Vector3());
        }
        if (Debug)
            Log.timeEnd('StructureView.refresh');
        this.signals.refreshed.dispatch();
    }
    //
    setSelection(selection) {
        this.selection = selection;
        this.refresh();
    }
    getSelection(selection) {
        const seleList = [];
        if (selection && selection.string) {
            seleList.push(selection.string);
        }
        const parentSelection = this.structure.getSelection();
        if (parentSelection && parentSelection.string) {
            seleList.push(parentSelection.string);
        }
        if (this.selection && this.selection.string) {
            seleList.push(this.selection.string);
        }
        let sele = '';
        if (seleList.length > 0) {
            sele = `( ${seleList.join(' ) AND ( ')} )`;
        }
        return new Selection(sele);
    }
    getStructure() {
        return this.structure.getStructure();
    }
    //
    eachBond(callback, selection) {
        this.structure.eachBond(callback, this.getSelection(selection));
    }
    eachAtom(callback, selection) {
        const ap = this.getAtomProxy();
        const atomSet = this.getAtomSet(selection);
        const n = this.atomStore.count;
        if (atomSet.getSize() < n) {
            atomSet.forEach(function (index) {
                ap.index = index;
                callback(ap);
            });
        }
        else {
            for (let i = 0; i < n; ++i) {
                ap.index = i;
                callback(ap);
            }
        }
    }
    eachResidue(callback, selection) {
        this.structure.eachResidue(callback, this.getSelection(selection));
    }
    /**
     * Not implemented
     * @alias StructureView#eachResidueN
     * @return {undefined}
     */
    eachResidueN(n, callback) {
        console.error('StructureView.eachResidueN() not implemented');
    }
    eachChain(callback, selection) {
        this.structure.eachChain(callback, this.getSelection(selection));
    }
    eachModel(callback, selection) {
        this.structure.eachModel(callback, this.getSelection(selection));
    }
    //
    getAtomSet(selection, ignoreView = false) {
        let atomSet = this.structure.getAtomSet(selection);
        if (!ignoreView && this.atomSet) {
            atomSet = atomSet.makeIntersection(this.atomSet);
        }
        return atomSet;
    }
    //
    getAtomIndices(selection) {
        return this.structure.getAtomIndices(this.getSelection(selection));
    }
    refreshPosition() {
        return this.structure.refreshPosition();
    }
    //
    dispose() {
        if (this.selection) {
            this.selection.signals.stringChanged.remove(this.refresh, this);
        }
        this.structure.signals.refreshed.remove(this.refresh, this);
        this.structure = new Structure(); // delete old data
        delete this.atomSet;
        delete this.bondSet;
    }
}

/**
 * @file Alignment
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// const nucleotides = 'ACTG';
const aminoacidsX = 'ACDEFGHIKLMNPQRSTVWY';
const aminoacids = 'ARNDCQEGHILKMFPSTWYVBZ?';
const blosum62x = [
    [4, 0, -2, -1, -2, 0, -2, -1, -1, -1, -1, -2, -1, -1, -1, 1, 0, 0, -3, -2],
    [0, 9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2],
    [-2, -3, 6, 2, -3, -1, -1, -3, -1, -4, -3, 1, -1, 0, -2, 0, -1, -3, -4, -3],
    [-1, -4, 2, 5, -3, -2, 0, -3, 1, -3, -2, 0, -1, 2, 0, 0, -1, -2, -3, -2],
    [-2, -2, -3, -3, 6, -3, -1, 0, -3, 0, 0, -3, -4, -3, -3, -2, -2, -1, 1, 3],
    [0, -3, -1, -2, -3, 6, -2, -4, -2, -4, -3, 0, -2, -2, -2, 0, -2, -3, -2, -3],
    [-2, -3, -1, 0, -1, -2, 8, -3, -1, -3, -2, 1, -2, 0, 0, -1, -2, -3, -2, 2],
    [-1, -1, -3, -3, 0, -4, -3, 4, -3, 2, 1, -3, -3, -3, -3, -2, -1, 3, -3, -1],
    [-1, -3, -1, 1, -3, -2, -1, -3, 5, -2, -1, 0, -1, 1, 2, 0, -1, -2, -3, -2],
    [-1, -1, -4, -3, 0, -4, -3, 2, -2, 4, 2, -3, -3, -2, -2, -2, -1, 1, -2, -1],
    [-1, -1, -3, -2, 0, -3, -2, 1, -1, 2, 5, -2, -2, 0, -1, -1, -1, 1, -1, -1],
    [-2, -3, 1, 0, -3, 0, 1, -3, 0, -3, -2, 6, -2, 0, 0, 1, 0, -3, -4, -2],
    [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2, 7, -1, -2, -1, -1, -2, -4, -3],
    [-1, -3, 0, 2, -3, -2, 0, -3, 1, -2, 0, 0, -1, 5, 1, 0, -1, -2, -2, -1],
    [-1, -3, -2, 0, -3, -2, 0, -3, 2, -2, -1, 0, -2, 1, 5, -1, -1, -3, -3, -2],
    [1, -1, 0, 0, -2, 0, -1, -2, 0, -2, -1, 1, -1, 0, -1, 4, 1, -2, -3, -2],
    [0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1, 0, -1, -1, -1, 1, 5, 0, -2, -2],
    [0, -1, -3, -2, -1, -3, -3, 3, -2, 1, 1, -3, -2, -2, -3, -2, 0, 4, -3, -1],
    [-3, -2, -4, -3, 1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11, 2],
    [-2, -2, -3, -2, 3, -3, 2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1, 2, 7] // Y
];
const blosum62 = [
    // A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X
    [4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0, -2, -1, 0],
    [-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3, -1, 0, -1],
    [-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3, 3, 0, -1],
    [-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3, 4, 1, -1],
    [0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2],
    [-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0, 3, -1],
    [-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
    [0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, -1, -2, -1],
    [-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0, 0, -1],
    [-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, -3, -3, -1],
    [-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, -4, -3, -1],
    [-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0, 1, -1],
    [-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, -3, -1, -1],
    [-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, -3, -3, -1],
    [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, -2, -1, -2],
    [1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0, 0, 0],
    [0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, -1, -1, 0],
    [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, -4, -3, -2],
    [-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, -3, -2, -1],
    [0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, -3, -2, -1],
    [-2, -1, 3, 4, -3, 0, 1, -1, 0, -3, -4, 0, -3, -3, -2, 0, -1, -4, -3, -3, 4, 1, -1],
    [-1, 0, 0, 1, -3, 3, 4, -2, 0, -3, -3, 1, -1, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
    [0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 0, 0, -2, -1, -1, -1, -1, -1] // X
];
function prepareMatrix(cellNames, mat) {
    let j;
    let i = 0;
    const matDict = {};
    mat.forEach(function (row) {
        j = 0;
        const rowDict = {};
        row.forEach(function (elm) {
            rowDict[cellNames[j++]] = elm;
        });
        matDict[cellNames[i++]] = rowDict;
    });
    return matDict;
}
const SubstitutionMatrices = (function () {
    return {
        blosum62: prepareMatrix(aminoacids, blosum62),
        blosum62x: prepareMatrix(aminoacidsX, blosum62x)
    };
}());
class Alignment {
    constructor(seq1, seq2, gapPenalty = -10, gapExtensionPenalty = -1, substMatrix = 'blosum62') {
        // TODO try encoding seqs as integers and use array subst matrix, maybe faster
        this.seq1 = seq1;
        this.seq2 = seq2;
        this.gapPenalty = gapPenalty;
        this.gapExtensionPenalty = gapExtensionPenalty;
        if (substMatrix) {
            this.substMatrix = SubstitutionMatrices[substMatrix];
        }
    }
    initMatrices() {
        this.n = this.seq1.length;
        this.m = this.seq2.length;
        // Log.log(this.n, this.m);
        this.score = undefined;
        this.ali = '';
        this.S = [];
        this.V = [];
        this.H = [];
        for (let i = 0; i <= this.n; ++i) {
            this.S[i] = [];
            this.V[i] = [];
            this.H[i] = [];
            for (let j = 0; j <= this.m; ++j) {
                this.S[i][j] = 0;
                this.V[i][j] = 0;
                this.H[i][j] = 0;
            }
        }
        for (let i = 0; i <= this.n; ++i) {
            this.S[i][0] = this.gap(0);
            this.H[i][0] = -Infinity;
        }
        for (let j = 0; j <= this.m; ++j) {
            this.S[0][j] = this.gap(0);
            this.V[0][j] = -Infinity;
        }
        this.S[0][0] = 0;
        // Log.log(this.S, this.V, this.H);
    }
    gap(len) {
        return this.gapPenalty + len * this.gapExtensionPenalty;
    }
    makeScoreFn() {
        const seq1 = this.seq1;
        const seq2 = this.seq2;
        const substMatrix = this.substMatrix;
        if (substMatrix) {
            return function score(i, j) {
                const c1 = seq1[i];
                const c2 = seq2[j];
                try {
                    return substMatrix[c1][c2];
                }
                catch (e) {
                    return -4;
                }
            };
        }
        else {
            Log.warn('Alignment: no subst matrix');
            return function scoreNoSubstMat(i, j) {
                const c1 = seq1[i];
                const c2 = seq2[j];
                return c1 === c2 ? 5 : -3;
            };
        }
    }
    calc() {
        if (Debug)
            Log.time('Alignment.calc');
        this.initMatrices();
        const gap0 = this.gap(0);
        const scoreFn = this.makeScoreFn();
        const gapExtensionPenalty = this.gapExtensionPenalty;
        const V = this.V;
        const H = this.H;
        const S = this.S;
        const n = this.n;
        const m = this.m;
        let Vi1, Si1, Vi, Hi, Si;
        for (let i = 1; i <= n; ++i) {
            Si1 = S[i - 1];
            Vi1 = V[i - 1];
            Vi = V[i];
            Hi = H[i];
            Si = S[i];
            for (let j = 1; j <= m; ++j) {
                Vi[j] = Math.max(Si1[j] + gap0, Vi1[j] + gapExtensionPenalty);
                Hi[j] = Math.max(Si[j - 1] + gap0, Hi[j - 1] + gapExtensionPenalty);
                Si[j] = Math.max(Si1[j - 1] + scoreFn(i - 1, j - 1), // match
                Vi[j], // del
                Hi[j] // ins
                );
            }
        }
        if (Debug)
            Log.timeEnd('Alignment.calc');
        if (Debug)
            Log.log(this.S, this.V, this.H);
    }
    trace() {
        if (Debug)
            Log.time('Alignment.trace');
        this.ali1 = '';
        this.ali2 = '';
        const scoreFn = this.makeScoreFn();
        let i = this.n;
        let j = this.m;
        let mat;
        if (this.S[i][j] >= this.V[i][j]) {
            mat = 'S';
            this.score = this.S[i][j];
        }
        else if (this.V[i][j] >= this.H[i][j]) {
            mat = 'V';
            this.score = this.V[i][j];
        }
        else {
            mat = 'H';
            this.score = this.H[i][j];
        }
        if (Debug)
            Log.log('Alignment: SCORE', this.score);
        if (Debug)
            Log.log('Alignment: S, V, H', this.S[i][j], this.V[i][j], this.H[i][j]);
        while (i > 0 && j > 0) {
            if (mat === 'S') {
                if (this.S[i][j] === this.S[i - 1][j - 1] + scoreFn(i - 1, j - 1)) {
                    this.ali1 = this.seq1[i - 1] + this.ali1;
                    this.ali2 = this.seq2[j - 1] + this.ali2;
                    --i;
                    --j;
                    mat = 'S';
                }
                else if (this.S[i][j] === this.V[i][j]) {
                    mat = 'V';
                }
                else if (this.S[i][j] === this.H[i][j]) {
                    mat = 'H';
                }
                else {
                    // Log.debug('Alignment: S');
                    --i;
                    --j;
                }
            }
            else if (mat === 'V') {
                if (this.V[i][j] === this.V[i - 1][j] + this.gapExtensionPenalty) {
                    this.ali1 = this.seq1[i - 1] + this.ali1;
                    this.ali2 = '-' + this.ali2;
                    --i;
                    mat = 'V';
                }
                else if (this.V[i][j] === this.S[i - 1][j] + this.gap(0)) {
                    this.ali1 = this.seq1[i - 1] + this.ali1;
                    this.ali2 = '-' + this.ali2;
                    --i;
                    mat = 'S';
                }
                else {
                    // Log.debug('Alignment: V');
                    --i;
                }
            }
            else if (mat === 'H') {
                if (this.H[i][j] === this.H[i][j - 1] + this.gapExtensionPenalty) {
                    this.ali1 = '-' + this.ali1;
                    this.ali2 = this.seq2[j - 1] + this.ali2;
                    --j;
                    mat = 'H';
                }
                else if (this.H[i][j] === this.S[i][j - 1] + this.gap(0)) {
                    this.ali1 = '-' + this.ali1;
                    this.ali2 = this.seq2[j - 1] + this.ali2;
                    --j;
                    mat = 'S';
                }
                else {
                    // Log.debug('Alignment: H');
                    --j;
                }
            }
            else {
                Log.error('Alignment: no matrix');
            }
        }
        while (i > 0) {
            this.ali1 = this.seq1[i - 1] + this.ali1;
            this.ali2 = '-' + this.ali2;
            --i;
        }
        while (j > 0) {
            this.ali1 = '-' + this.ali1;
            this.ali2 = this.seq2[j - 1] + this.ali2;
            --j;
        }
        if (Debug)
            Log.timeEnd('Alignment.trace');
        if (Debug)
            Log.log([this.ali1, this.ali2]);
    }
}

/**
 * @file Align Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Perform structural superposition of two structures,
 * optionally guided by a sequence alignment
 * @param  {Structure|StructureView} s1 - structure 1 which is superposed onto structure 2
 * @param  {Structure|StructureView} s2 - structure 2 onto which structure 1 is superposed
 * @param  {Boolean} [align] - guide the superposition by a sequence alignment
 * @param  {String} [sele1] - selection string for structure 1
 * @param  {String} [sele2] - selection string for structure 2
 * @return {undefined}
 */
function superpose(s1, s2, align = false, sele1 = '', sele2 = '') {
    let i;
    let j;
    let n;
    let atoms1;
    let atoms2;
    if (align) {
        let _s1 = s1;
        let _s2 = s2;
        if (sele1 && sele2) {
            _s1 = s1.getView(new Selection(sele1));
            _s2 = s2.getView(new Selection(sele2));
        }
        const seq1 = _s1.getSequence();
        const seq2 = _s2.getSequence();
        // Log.log( seq1.join("") );
        // Log.log( seq2.join("") );
        const ali = new Alignment(seq1.join(''), seq2.join(''));
        ali.calc();
        ali.trace();
        // Log.log( "superpose alignment score", ali.score );
        // Log.log( ali.ali1 );
        // Log.log( ali.ali2 );
        let _i, _j;
        i = 0;
        j = 0;
        n = ali.ali1.length;
        const aliIdx1 = [];
        const aliIdx2 = [];
        for (let l = 0; l < n; ++l) {
            const x = ali.ali1[l];
            const y = ali.ali2[l];
            _i = 0;
            _j = 0;
            if (x === '-') {
                aliIdx2[j] = false;
            }
            else {
                aliIdx2[j] = true;
                _i = 1;
            }
            if (y === '-') {
                aliIdx1[i] = false;
            }
            else {
                aliIdx1[i] = true;
                _j = 1;
            }
            i += _i;
            j += _j;
        }
        // Log.log( i, j );
        // Log.log( aliIdx1 );
        // Log.log( aliIdx2 );
        const _atoms1 = [];
        const _atoms2 = [];
        const ap1 = _s1.getAtomProxy();
        const ap2 = _s2.getAtomProxy();
        i = 0;
        _s1.eachResidue(function (r) {
            if (r.traceAtomIndex === undefined ||
                r.traceAtomIndex !== r.getAtomIndexByName('CA'))
                return;
            if (aliIdx1[i]) {
                ap1.index = r.getAtomIndexByName('CA'); // TODO
                _atoms1.push(ap1.x, ap1.y, ap1.z);
            }
            i += 1;
        });
        i = 0;
        _s2.eachResidue(function (r) {
            if (r.traceAtomIndex === undefined ||
                r.traceAtomIndex !== r.getAtomIndexByName('CA'))
                return;
            if (aliIdx2[i]) {
                ap2.index = r.getAtomIndexByName('CA'); // TODO
                _atoms2.push(ap2.x, ap2.y, ap2.z);
            }
            i += 1;
        });
        atoms1 = new Float32Array(_atoms1);
        atoms2 = new Float32Array(_atoms2);
    }
    else {
        const sviewCa1 = s1.getView(new Selection(`${sele1} and .CA`));
        const sviewCa2 = s2.getView(new Selection(`${sele2} and .CA`));
        atoms1 = sviewCa1;
        atoms2 = sviewCa2;
    }
    const superpose = new Superposition(atoms1, atoms2);
    const result = superpose.transform(s1);
    s1.refreshPosition();
    return result;
}

/**
 * @file Sturucture Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const StructureComponentDefaultParameters = Object.assign({
    sele: '',
    defaultAssembly: ''
}, ComponentDefaultParameters);
/**
 * Component wrapping a {@link Structure} object
 *
 * @example
 * // get a structure component by loading a structure file into the stage
 * stage.loadFile( "rcsb://4opj" ).then( function( structureComponent ){
 *     structureComponent.addRepresentation( "cartoon" );
 *     structureComponent.autoView();
 * } );
 */
class StructureComponent extends Component {
    constructor(stage, structure, params = {}) {
        super(stage, structure, Object.assign({ name: structure.name }, params));
        this.structure = structure;
        this.trajList = [];
        this.signals = Object.assign(this.signals, {
            trajectoryAdded: new Signal(),
            trajectoryRemoved: new Signal(),
            defaultAssemblyChanged: new Signal()
        });
        this.initSelection(this.parameters.sele);
        //
        this.pickBuffer = createRingBuffer(4);
        this.pickDict = createSimpleDict();
        this.spacefillRepresentation = this.addRepresentation('spacefill', {
            sele: 'none',
            opacity: MeasurementDefaultParams.opacity,
            color: MeasurementDefaultParams.color,
            disablePicking: true,
            radiusType: 'data'
        }, true);
        this.distanceRepresentation = this.addRepresentation('distance', MeasurementDefaultParams, true);
        this.angleRepresentation = this.addRepresentation('angle', MeasurementDefaultParams, true);
        this.dihedralRepresentation = this.addRepresentation('dihedral', MeasurementDefaultParams, true);
        this.measureRepresentations = new RepresentationCollection([
            this.spacefillRepresentation,
            this.distanceRepresentation,
            this.angleRepresentation,
            this.dihedralRepresentation
        ]);
        //
        this.setDefaultAssembly(this.parameters.defaultAssembly);
        this.structure.signals.refreshed.add(() => {
            this.updateRepresentations({ position: true });
        });
    }
    get defaultParameters() { return StructureComponentDefaultParameters; }
    /**
     * Component type
     * @type {String}
     */
    get type() { return 'structure'; }
    /**
     * Initialize selection
     * @private
     * @param {String} sele - selection string
     * @return {undefined}
     */
    initSelection(sele) {
        /**
         * Selection for {@link StructureComponent#structureView}
         * @private
         * @type {Selection}
         */
        this.selection = new Selection(sele);
        /**
         * View on {@link StructureComponent#structure}.
         * Change its selection via {@link StructureComponent#setSelection}.
         * @type {StructureView}
         */
        this.structureView = new StructureView(this.structure, this.selection);
        this.selection.signals.stringChanged.add(() => {
            this.structureView.setSelection(this.selection);
            this.rebuildRepresentations();
            this.rebuildTrajectories();
        });
    }
    /**
     * Set selection of {@link StructureComponent#structureView}
     * @param {String} string - selection string
     * @return {StructureComponent} this object
     */
    setSelection(string) {
        this.parameters.sele = string;
        this.selection.setString(string);
        return this;
    }
    /**
     * Set the default assembly
     * @param {String} value - assembly name
     * @return {undefined}
     */
    setDefaultAssembly(value) {
        // filter out non-exsisting assemblies
        if (this.structure.biomolDict[value] === undefined)
            value = '';
        // only set default assembly when changed
        if (this.parameters.defaultAssembly !== value) {
            const reprParams = { defaultAssembly: value };
            this.reprList.forEach(repr => repr.setParameters(reprParams));
            this.measureRepresentations.setParameters(reprParams);
            this.parameters.defaultAssembly = value;
            this.signals.defaultAssemblyChanged.dispatch(value);
        }
        return this;
    }
    /**
     * Rebuild all representations
     * @return {undefined}
     */
    rebuildRepresentations() {
        this.reprList.forEach((repr) => {
            repr.build();
        });
        this.measureRepresentations.build();
    }
    /**
     * Rebuild all trajectories
     * @return {undefined}
     */
    rebuildTrajectories() {
        this.trajList.forEach(trajComp => {
            trajComp.trajectory.setStructure(this.structureView);
        });
    }
    updateRepresentations(what) {
        super.updateRepresentations(what);
        this.measureRepresentations.update(what);
    }
    /**
     * Overrides {@link Component.updateRepresentationMatrices}
     * to also update matrix for measureRepresentations
     */
    updateRepresentationMatrices() {
        super.updateRepresentationMatrices();
        this.measureRepresentations.setParameters({ matrix: this.matrix });
    }
    addRepresentation(type, params = {}, hidden = false) {
        params.defaultAssembly = this.parameters.defaultAssembly;
        const reprComp = this._addRepresentation(type, this.structureView, params, hidden);
        if (!hidden) {
            reprComp.signals.parametersChanged.add(() => this.measureUpdate());
        }
        return reprComp;
    }
    /**
     * Add a new trajectory component to the structure
     */
    addTrajectory(trajPath = '', params = {}) {
        const traj = makeTrajectory(trajPath, this.structureView, params);
        const trajComp = new TrajectoryElement(this.stage, traj, params);
        this.trajList.push(trajComp);
        this.signals.trajectoryAdded.dispatch(trajComp);
        return trajComp;
    }
    removeTrajectory(traj) {
        const idx = this.trajList.indexOf(traj);
        if (idx !== -1) {
            this.trajList.splice(idx, 1);
        }
        traj.dispose();
        this.signals.trajectoryRemoved.dispatch(traj);
    }
    dispose() {
        // copy via .slice because side effects may change trajList
        this.trajList.slice().forEach(traj => traj.dispose());
        this.trajList.length = 0;
        this.structure.dispose();
        this.measureRepresentations.dispose();
        super.dispose();
    }
    /**
     * Automatically center and zoom the component
     * @param  {String|Integer} [sele] - selection string or duration if integer
     * @param  {Integer} [duration] - duration of the animation, defaults to 0
     * @return {undefined}
     */
    autoView(sele, duration) {
        if (typeof sele === 'number') {
            duration = sele;
            sele = '';
        }
        this.stage.animationControls.zoomMove(this.getCenter(sele), this.getZoom(sele), defaults(duration, 0));
    }
    getBoxUntransformed(sele) {
        let bb;
        if (sele) {
            bb = this.structureView.getBoundingBox(new Selection(sele));
        }
        else {
            bb = this.structureView.boundingBox;
        }
        return bb;
    }
    getCenterUntransformed(sele) {
        if (sele && typeof sele === 'string') {
            return this.structure.atomCenter(new Selection(sele));
        }
        else {
            return this.structure.center;
        }
    }
    superpose(component, align, sele1, sele2) {
        superpose(this.structureView, component.structureView, align, sele1, sele2);
        this.updateRepresentations({ 'position': true });
        return this;
    }
    getMaxRepresentationRadius(atomIndex) {
        let maxRadius = 0;
        const atom = this.structure.getAtomProxy(atomIndex);
        this.eachRepresentation(reprElem => {
            if (reprElem.getVisibility()) {
                const repr = reprElem.repr; // TODO
                maxRadius = Math.max(repr.getAtomRadius(atom), maxRadius);
            }
        });
        return maxRadius;
    }
    measurePick(atom) {
        const pickCount = this.pickBuffer.count;
        if (this.lastPick === atom.index && pickCount >= 1) {
            if (pickCount > 1) {
                const atomList = this.pickBuffer.data;
                const atomListSorted = this.pickBuffer.data.sort();
                if (this.pickDict.has(atomListSorted)) {
                    this.pickDict.del(atomListSorted);
                }
                else {
                    this.pickDict.add(atomListSorted, atomList);
                }
                if (pickCount === 2) {
                    this.distanceRepresentation.setParameters({
                        atomPair: this.pickDict.values.filter(l => l.length === 2)
                    });
                }
                else if (pickCount === 3) {
                    this.angleRepresentation.setParameters({
                        atomTriple: this.pickDict.values.filter(l => l.length === 3)
                    });
                }
                else if (pickCount === 4) {
                    this.dihedralRepresentation.setParameters({
                        atomQuad: this.pickDict.values.filter(l => l.length === 4)
                    });
                }
            }
            this.pickBuffer.clear();
            this.lastPick = undefined;
        }
        else {
            if (!this.pickBuffer.has(atom.index)) {
                this.pickBuffer.push(atom.index);
            }
            this.lastPick = atom.index;
        }
        this.measureUpdate();
    }
    measureClear() {
        this.pickBuffer.clear();
        this.lastPick = undefined;
        this.spacefillRepresentation.setSelection('none');
    }
    measureBuild() {
        const md = this.measureData();
        this.distanceRepresentation.setParameters({ atomPair: md.distance });
        this.angleRepresentation.setParameters({ atomTriple: md.angle });
        this.dihedralRepresentation.setParameters({ atomQuad: md.dihedral });
    }
    measureUpdate() {
        const pickData = this.pickBuffer.data;
        const radiusData = {};
        pickData.forEach(ai => {
            const r = Math.max(0.1, this.getMaxRepresentationRadius(ai));
            radiusData[ai] = r * (2.3 - smoothstep(0.1, 2, r));
        });
        this.spacefillRepresentation.setSelection(pickData.length ? ('@' + pickData.join(',')) : 'none');
        if (pickData.length)
            this.spacefillRepresentation.setParameters({ radiusData });
    }
    measureData() {
        const pv = this.pickDict.values;
        return {
            distance: pv.filter(l => l.length === 2),
            angle: pv.filter(l => l.length === 3),
            dihedral: pv.filter(l => l.length === 4)
        };
    }
    /**
     * Remove all measurements, optionally limit to distance, angle or dihedral
     */
    removeAllMeasurements(type) {
        const pd = this.pickDict;
        const pv = pd.values;
        const remove = function (len) {
            pv.filter(l => l.length === len).forEach(l => pd.del(l.slice().sort()));
        };
        if (!type || type & 1 /* MeasurementFlags.Distance */)
            remove(2);
        if (!type || type & 2 /* MeasurementFlags.Angle */)
            remove(3);
        if (!type || type & 4 /* MeasurementFlags.Dihedral */)
            remove(4);
        this.measureBuild();
    }
    /**
     * Remove a measurement given as a pair, triple, quad of atom indices
     */
    removeMeasurement(atomList) {
        this.pickDict.del(atomList.slice().sort());
        this.measureBuild();
    }
    /**
     * Add a measurement given as a pair, triple, quad of atom indices
     */
    addMeasurement(atomList) {
        if (atomList.length < 2 || atomList.length > 4)
            return;
        const atomListSorted = atomList.slice().sort();
        if (!this.pickDict.has(atomListSorted)) {
            this.pickDict.add(atomListSorted, atomList);
        }
        this.measureBuild();
    }
}
ComponentRegistry.add('structure', StructureComponent);
ComponentRegistry.add('structureview', StructureComponent);

/**
 * @file Surface Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Component wrapping a {@link Surface} object
 *
 * @example
 * // get a surface component by loading a surface file into the stage
 * stage.loadFile( "url/for/surface" ).then( function( surfaceComponent ){
 *     surfaceComponent.addRepresentation( "surface" );
 *     surfaceComponent.autoView();
 * } );
 */
class SurfaceComponent extends Component {
    /**
     * @param {Stage} stage - stage object the component belongs to
     * @param {Surface} surface - surface object to wrap
     * @param {ComponentParameters} params - component parameters
     */
    constructor(stage, surface, params = {}) {
        super(stage, surface, Object.assign({ name: surface.name }, params));
        this.surface = surface;
    }
    /**
     * Component type
     * @type {String}
     */
    get type() { return 'surface'; }
    /**
     * Add a new surface representation to the component
     * @param {String} type - the name of the representation, one of:
     *                        surface, dot.
     * @param {SurfaceRepresentationParameters} params - representation parameters
     * @return {RepresentationComponent} the created representation wrapped into
     *                                   a representation component object
     */
    addRepresentation(type, params = {}) {
        return this._addRepresentation(type, this.surface, params);
    }
    getBoxUntransformed() {
        return this.surface.boundingBox;
    }
    getCenterUntransformed() {
        return this.surface.center;
    }
    dispose() {
        this.surface.dispose();
        super.dispose();
    }
}
ComponentRegistry.add('surface', SurfaceComponent);

/**
 * @file Volume Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Component wrapping a {@link Volume} object
 *
 * @example
 * // get a volume component by loading a volume file into the stage
 * stage.loadFile( "url/for/volume" ).then(function(volumeComponent){
 *   volumeComponent.addRepresentation('surface');
 *   volumeComponent.autoView();
 * });
 */
class VolumeComponent extends Component {
    /**
     * @param {Stage} stage - stage object the component belongs to
     * @param {Volume} volume - volume object to wrap
     * @param {ComponentParameters} params - component parameters
     */
    constructor(stage, volume, params = {}) {
        super(stage, volume, Object.assign({ name: volume.name }, params));
        this.volume = volume;
    }
    /**
     * Component type
     * @type {String}
     */
    get type() { return 'volume'; }
    /**
     * Add a new volume representation to the component
     */
    addRepresentation(type, params = {}) {
        return this._addRepresentation(type, this.volume, params);
    }
    getBoxUntransformed() {
        return this.volume.boundingBox;
    }
    getCenterUntransformed() {
        return this.volume.center;
    }
    dispose() {
        this.volume.dispose();
        super.dispose();
    }
}
ComponentRegistry.add('volume', VolumeComponent);

/**
 * @file Component Collection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class ComponentCollection extends Collection {
    addRepresentation(name, params) {
        return this.forEach((comp) => comp.addRepresentation(name, params));
    }
    autoView(duration) {
        return this.forEach((comp) => comp.autoView(duration));
    }
}

/**
 * @file Stage
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function matchName(name, object) {
    if (name instanceof RegExp) {
        return object.name.match(name) !== null;
    }
    else {
        return object.name === name;
    }
}
const tmpZoomVector = new Vector3();
const StageDefaultParameters = {
    impostor: true,
    quality: 'medium',
    workerDefault: true,
    sampleLevel: 0,
    backgroundColor: 'black',
    rotateSpeed: 2.0,
    zoomSpeed: 1.2,
    panSpeed: 1.0,
    clipNear: 0,
    clipFar: 100,
    clipDist: 10,
    clipMode: 'scene',
    clipScale: 'relative',
    fogNear: 50,
    fogFar: 100,
    cameraFov: 40,
    cameraEyeSep: 0.3,
    cameraType: 'perspective',
    lightColor: 0xdddddd,
    lightIntensity: 1.2,
    ambientColor: 0xdddddd,
    ambientIntensity: 0.3,
    hoverTimeout: 0,
    tooltip: true,
    mousePreset: 'default'
};
/**
 * Stage class, central for creating molecular scenes with NGL.
 *
 * @example
 * var stage = new Stage( "elementId", { backgroundColor: "white" } );
 */
class Stage {
    constructor(idOrElement, params = {}) {
        this.signals = {
            parametersChanged: new Signal(),
            fullscreenChanged: new Signal(),
            componentAdded: new Signal(),
            componentRemoved: new Signal(),
            clicked: new Signal(),
            hovered: new Signal()
        };
        /**
         * Counter that keeps track of various potentially long-running tasks,
         * including file loading and surface calculation.
         */
        this.tasks = new Counter();
        this.compList = [];
        this.defaultFileParams = {};
        this.logList = [];
        this.viewer = new Viewer(idOrElement);
        if (!this.viewer.renderer)
            return;
        this.tooltip = document.createElement('div');
        Object.assign(this.tooltip.style, {
            display: 'none',
            position: 'fixed',
            zIndex: '1000000',
            pointerEvents: 'none',
            backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
            color: 'lightgrey',
            padding: '8px',
            fontFamily: 'sans-serif'
        });
        this.viewer.container.appendChild(this.tooltip);
        this.mouseObserver = new MouseObserver(this.viewer.renderer.domElement);
        this.viewerControls = new ViewerControls(this);
        this.trackballControls = new TrackballControls(this);
        this.pickingControls = new PickingControls(this);
        this.animationControls = new AnimationControls(this);
        this.mouseControls = new MouseControls(this);
        this.keyControls = new KeyControls(this);
        this.pickingBehavior = new PickingBehavior(this);
        this.mouseBehavior = new MouseBehavior(this);
        this.animationBehavior = new AnimationBehavior(this);
        this.keyBehavior = new KeyBehavior(this);
        this.spinAnimation = this.animationControls.spin([0, 1, 0], 0.005);
        this.spinAnimation.pause(true);
        this.rockAnimation = this.animationControls.rock([0, 1, 0], 0.005);
        this.rockAnimation.pause(true);
        // must come after the viewer has been instantiated
        this.parameters = createParams(params, StageDefaultParameters);
        this.setParameters(this.parameters);
        this.viewer.animate();
    }
    /**
     * Set stage parameters
     */
    setParameters(params = {}) {
        updateParams(this.parameters, params);
        const p = params;
        const tp = this.parameters;
        const viewer = this.viewer;
        const controls = this.trackballControls;
        // apply parameters
        if (p.quality !== undefined)
            this.setQuality(tp.quality);
        if (p.impostor !== undefined)
            this.setImpostor(tp.impostor);
        if (p.rotateSpeed !== undefined)
            controls.rotateSpeed = tp.rotateSpeed;
        if (p.zoomSpeed !== undefined)
            controls.zoomSpeed = tp.zoomSpeed;
        if (p.panSpeed !== undefined)
            controls.panSpeed = tp.panSpeed;
        if (p.mousePreset !== undefined)
            this.mouseControls.preset(tp.mousePreset);
        this.mouseObserver.setParameters({ hoverTimeout: tp.hoverTimeout });
        viewer.setClip(tp.clipNear, tp.clipFar, tp.clipDist, tp.clipMode, tp.clipScale);
        viewer.setFog(undefined, tp.fogNear, tp.fogFar);
        viewer.setCamera(tp.cameraType, tp.cameraFov, tp.cameraEyeSep);
        viewer.setSampling(tp.sampleLevel);
        viewer.setBackground(tp.backgroundColor);
        viewer.setLight(tp.lightColor, tp.lightIntensity, tp.ambientColor, tp.ambientIntensity);
        this.signals.parametersChanged.dispatch(this.getParameters());
        return this;
    }
    log(msg) {
        console.log('STAGE LOG', msg);
        this.logList.push(msg);
    }
    /**
     * Get stage parameters
     */
    getParameters() {
        return Object.assign({}, this.parameters);
    }
    /**
     * Create default representations for the given component
     * @param  {StructureComponent|SurfaceComponent} object - component to create the representations for
     * @return {undefined}
     */
    defaultFileRepresentation(component) {
        if (component instanceof StructureComponent) {
            component.setSelection('/0');
            let atomCount, residueCount, instanceCount;
            const structure = component.structure;
            if (structure.biomolDict.BU1) {
                const assembly = structure.biomolDict.BU1;
                atomCount = assembly.getAtomCount(structure);
                residueCount = assembly.getResidueCount(structure);
                instanceCount = assembly.getInstanceCount();
                component.setDefaultAssembly('BU1');
            }
            else {
                atomCount = structure.getModelProxy(0).atomCount;
                residueCount = structure.getModelProxy(0).residueCount;
                instanceCount = 1;
            }
            let sizeScore = atomCount;
            if (Mobile) {
                sizeScore *= 4;
            }
            const backboneOnly = structure.atomStore.count / structure.residueStore.count < 2;
            if (backboneOnly) {
                sizeScore *= 10;
            }
            let colorScheme = 'chainname';
            let colorScale = 'RdYlBu';
            let colorReverse = false;
            if (structure.getChainnameCount(new Selection('polymer and /0')) === 1) {
                colorScheme = 'residueindex';
                colorScale = 'Spectral';
                colorReverse = true;
            }
            if (Debug)
                console.log(sizeScore, atomCount, instanceCount, backboneOnly);
            if (residueCount / instanceCount < 4) {
                component.addRepresentation('ball+stick', {
                    colorScheme: 'element',
                    radiusScale: 2.0,
                    aspectRatio: 1.5,
                    bondScale: 0.3,
                    bondSpacing: 0.75,
                    quality: 'auto'
                });
            }
            else if ((instanceCount > 5 && sizeScore > 15000) || sizeScore > 700000) {
                let scaleFactor = (Math.min(2.0, Math.max(0.1, 6000 / (sizeScore / instanceCount))));
                if (backboneOnly)
                    scaleFactor = Math.min(scaleFactor, 0.5);
                component.addRepresentation('surface', {
                    colorScheme, colorScale, colorReverse,
                    sele: 'polymer',
                    surfaceType: 'av',
                    probeRadius: 1.4,
                    scaleFactor: scaleFactor,
                    useWorker: false
                });
            }
            else if (sizeScore > 250000) {
                component.addRepresentation('backbone', {
                    colorScheme, colorScale, colorReverse,
                    lineOnly: true
                });
            }
            else if (sizeScore > 100000) {
                component.addRepresentation('backbone', {
                    colorScheme, colorScale, colorReverse,
                    quality: 'low',
                    disableImpostor: true,
                    radiusScale: 2.0
                });
            }
            else if (sizeScore > 80000) {
                component.addRepresentation('backbone', {
                    colorScheme, colorScale, colorReverse,
                    radiusScale: 2.0
                });
            }
            else {
                component.addRepresentation('cartoon', {
                    colorScheme, colorScale, colorReverse,
                    radiusScale: 0.7,
                    aspectRatio: 5,
                    quality: 'auto'
                });
                if (sizeScore < 50000) {
                    component.addRepresentation('base', {
                        colorScheme, colorScale, colorReverse,
                        quality: 'auto'
                    });
                }
                component.addRepresentation('ball+stick', {
                    sele: 'ligand',
                    colorScheme: 'element',
                    radiusScale: 2.0,
                    aspectRatio: 1.5,
                    bondScale: 0.3,
                    bondSpacing: 0.75,
                    quality: 'auto'
                });
            }
            // add frames as trajectory
            if (component.structure.frames.length) {
                component.addTrajectory();
            }
        }
        else if (component instanceof SurfaceComponent) {
            component.addRepresentation('surface');
        }
        else if (component instanceof VolumeComponent) {
            component.addRepresentation('surface');
        }
        this.tasks.onZeroOnce(this.autoView, this);
    }
    /**
     * Load a file onto the stage
     *
     * @example
     * // load from URL
     * stage.loadFile( "http://files.rcsb.org/download/5IOS.cif" );
     *
     * @example
     * // load binary data in CCP4 format via a Blob
     * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
     * stage.loadFile( binaryBlob, { ext: "ccp4" } );
     *
     * @example
     * // load string data in PDB format via a Blob
     * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
     * stage.loadFile( stringBlob, { ext: "pdb" } );
     *
     * @example
     * // load a File object
     * stage.loadFile( file );
     *
     * @example
     * // load from URL and add a 'ball+stick' representation with double/triple bonds
     * stage.loadFile( "http://files.rcsb.org/download/1crn.cif" ).then( function( comp ){
     *     comp.addRepresentation( "ball+stick", { multipleBond: true } );
     * } );
     *
     * @param  {String|File|Blob} path - either a URL or an object containing the file data
     * @param  {LoaderParameters} params - loading parameters
     * @param  {Boolean} params.asTrajectory - load multi-model structures as a trajectory
     * @return {Promise} A Promise object that resolves to a {@link StructureComponent},
     *                   a {@link SurfaceComponent} or a {@link ScriptComponent} object,
     *                   depending on the type of the loaded file.
     */
    loadFile(path, params = {}) {
        const p = Object.assign({}, this.defaultFileParams, params);
        const name = getFileInfo(path).name;
        this.tasks.increment();
        this.log(`loading file '${name}'`);
        const onLoadFn = (object) => {
            this.log(`loaded '${name}'`);
            const component = this.addComponentFromObject(object, p);
            if (p.defaultRepresentation) {
                this.defaultFileRepresentation(component);
            }
            this.tasks.decrement();
            return component;
        };
        const onErrorFn = (e) => {
            this.tasks.decrement();
            const errorMsg = `error loading file: '${e}'`;
            this.log(errorMsg);
            throw errorMsg; // throw so it can be catched
        };
        const ext = defaults(p.ext, getFileInfo(path).ext);
        let promise;
        if (ParserRegistry.isTrajectory(ext)) {
            promise = Promise.reject(new Error(`loadFile: ext '${ext}' is a trajectory and must be loaded into a structure component`));
        }
        else {
            promise = autoLoad(path, p);
        }
        return promise.then(onLoadFn, onErrorFn);
    }
    loadScript(path) {
        const name = getFileInfo(path).name;
        this.log(`loading script '${name}'`);
        return autoLoad(path).then((script) => {
            this.tasks.increment();
            this.log(`running script '${name}'`);
            script.run(this).then(() => {
                this.tasks.decrement();
                this.log(`finished script '${name}'`);
            });
            this.log(`called script '${name}'`);
        }, (error) => {
            this.tasks.decrement();
            const errorMsg = `errored script '${name}' "${error}"`;
            this.log(errorMsg);
            throw errorMsg; // throw so it can be catched
        });
    }
    /**
     * Add the given component to the stage
     * @param {Component} component - the component to add
     * @return {undefined}
     */
    addComponent(component) {
        if (!component) {
            Log.warn('Stage.addComponent: no component given');
            return;
        }
        this.compList.push(component);
        this.signals.componentAdded.dispatch(component);
    }
    /**
     * Create a component from the given object and add to the stage
     */
    addComponentFromObject(object, params = {}) {
        const CompClass = ComponentRegistry.get(object.type);
        if (CompClass) {
            const component = new CompClass(this, object, params);
            this.addComponent(component);
            return component;
        }
        Log.warn('no component for object type', object.type);
    }
    /**
     * Remove the given component
     * @param  {Component} component - the component to remove
     * @return {undefined}
     */
    removeComponent(component) {
        const idx = this.compList.indexOf(component);
        if (idx !== -1) {
            this.compList.splice(idx, 1);
            component.dispose();
            this.signals.componentRemoved.dispatch(component);
        }
    }
    /**
     * Remove all components from the stage
     */
    removeAllComponents() {
        this.compList.slice().forEach(o => this.removeComponent(o));
    }
    /**
     * Handle any size-changes of the container element
     * @return {undefined}
     */
    handleResize() {
        this.viewer.handleResize();
    }
    /**
     * Set width and height
     * @param {String} width - CSS width value
     * @param {String} height - CSS height value
     * @return {undefined}
     */
    setSize(width, height) {
        const container = this.viewer.container;
        if (container !== document.body) {
            if (width !== undefined)
                container.style.width = width;
            if (height !== undefined)
                container.style.height = height;
            this.handleResize();
        }
    }
    /**
     * Toggle fullscreen
     * @param  {Element} [element] - document element to put into fullscreen,
     *                               defaults to the viewer container
     * @return {undefined}
     */
    toggleFullscreen(element) {
        if (!document.fullscreenEnabled && !document.mozFullScreenEnabled &&
            !document.webkitFullscreenEnabled && !document.msFullscreenEnabled) {
            Log.log('fullscreen mode (currently) not possible');
            return;
        }
        const self = this;
        element = element || this.viewer.container;
        this.lastFullscreenElement = element;
        //
        function getFullscreenElement() {
            return document.fullscreenElement || document.mozFullScreenElement ||
                document.webkitFullscreenElement || document.msFullscreenElement;
        }
        function resizeElement() {
            if (!getFullscreenElement() && self.lastFullscreenElement) {
                const element = self.lastFullscreenElement;
                element.style.width = element.dataset.normalWidth || '';
                element.style.height = element.dataset.normalHeight || '';
                document.removeEventListener('fullscreenchange', resizeElement);
                document.removeEventListener('mozfullscreenchange', resizeElement);
                document.removeEventListener('webkitfullscreenchange', resizeElement);
                document.removeEventListener('MSFullscreenChange', resizeElement);
                self.handleResize();
                self.signals.fullscreenChanged.dispatch(false);
            }
        }
        //
        if (!getFullscreenElement()) {
            element.dataset.normalWidth = element.style.width || '';
            element.dataset.normalHeight = element.style.height || '';
            element.style.width = window.screen.width + 'px';
            element.style.height = window.screen.height + 'px';
            if (element.requestFullscreen) {
                element.requestFullscreen();
            }
            else if (element.msRequestFullscreen) {
                element.msRequestFullscreen();
            }
            else if (element.mozRequestFullScreen) {
                element.mozRequestFullScreen();
            }
            else if (element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen();
            }
            document.addEventListener('fullscreenchange', resizeElement);
            document.addEventListener('mozfullscreenchange', resizeElement);
            document.addEventListener('webkitfullscreenchange', resizeElement);
            document.addEventListener('MSFullscreenChange', resizeElement);
            this.handleResize();
            this.signals.fullscreenChanged.dispatch(true);
            // workaround for Safari
            setTimeout(function () { self.handleResize(); }, 100);
        }
        else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            }
            else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            }
            else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            }
            else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            }
        }
    }
    /**
     * Set spin
     * @param {Boolean} flag - if true start rocking and stop spinning
     * @return {undefined}
     */
    setSpin(flag) {
        if (flag) {
            this.spinAnimation.resume(true);
            this.rockAnimation.pause(true);
        }
        else {
            this.spinAnimation.pause(true);
        }
    }
    /**
     * Set rock
     * @param {Boolean} flag - if true start rocking and stop spinning
     * @return {undefined}
     */
    setRock(flag) {
        if (flag) {
            this.rockAnimation.resume(true);
            this.spinAnimation.pause(true);
        }
        else {
            this.rockAnimation.pause(true);
        }
    }
    /**
     * Toggle spin
     * @return {undefined}
     */
    toggleSpin() {
        this.setSpin(this.spinAnimation.paused);
    }
    /**
     * Toggle rock
     * @return {undefined}
     */
    toggleRock() {
        this.setRock(this.rockAnimation.paused);
    }
    /**
     * Get the current focus from the current clipNear value expressed
     * as 0 (full view) to 100 (completely clipped)
     * Negative values may be returned in some cases.
     *
     * In 'camera' clipMode focus isn't applicable, this method returns 0.0
     *
     * @return {number} focus
     */
    getFocus() {
        const p = this.parameters;
        if (p.clipMode !== 'scene')
            return 0.0;
        let clipNear = p.clipNear;
        if (p.clipScale === 'absolute') {
            clipNear = this.viewer.absoluteToRelative(clipNear);
        }
        return clipNear * 2;
    }
    /**
     * Set the focus, a value of 0 sets clipping planes to show full scene,
     * while a value of 100 will compltely clip the scene.
     *
     * @param {number} value focus
     */
    setFocus(value) {
        if (this.parameters.clipMode !== 'scene')
            return;
        let clipNear;
        let clipFar;
        let fogNear;
        let fogFar;
        if (this.parameters.clipScale === 'relative') {
            clipNear = clamp$1(value / 2.0, 0.0, 49.9);
            clipFar = 100 - clipNear;
            fogNear = 50;
            fogFar = pclamp(2 * clipFar - 50);
        }
        else {
            clipNear = this.viewer.relativeToAbsolute(value / 2.0);
            clipFar = clipNear;
            fogNear = 0;
            fogFar = 2 * clipFar;
        }
        this.setParameters({ clipNear, clipFar, fogNear, fogFar });
    }
    getZoomForBox(boundingBox) {
        const bbSize = boundingBox.getSize(tmpZoomVector);
        const maxSize = Math.max(bbSize.x, bbSize.y, bbSize.z);
        const minSize = Math.min(bbSize.x, bbSize.y, bbSize.z);
        let distance = maxSize + Math.sqrt(minSize);
        const fov = degToRad$1(this.viewer.perspectiveCamera.fov);
        const width = this.viewer.width;
        const height = this.viewer.height;
        const aspect = width / height;
        const aspectFactor = (height < width ? 1 : aspect);
        distance = Math.abs(((distance * 0.5) / aspectFactor) / Math.sin(fov / 2));
        distance += this.parameters.clipDist;
        return -distance;
    }
    getBox() {
        return this.viewer.boundingBox;
    }
    getZoom() {
        return this.getZoomForBox(this.getBox());
    }
    getCenter(optionalTarget) {
        return this.getBox().getCenter(optionalTarget || new Vector3());
    }
    /**
     * Add a zoom and a move animation with automatic targets
     * @param  {Integer} duration - animation time in milliseconds
     * @return {undefined}
     */
    autoView(duration) {
        this.animationControls.zoomMove(this.getCenter(), this.getZoom(), defaults(duration, 0));
    }
    /**
     * Make image from what is shown in a viewer canvas
     */
    makeImage(params = {}) {
        return new Promise((resolve, reject) => {
            this.tasks.onZeroOnce(() => {
                this.tasks.increment();
                this.viewer.makeImage(params).then(blob => {
                    this.tasks.decrement();
                    resolve(blob);
                }).catch(e => {
                    this.tasks.decrement();
                    reject(e);
                });
            });
        });
    }
    setImpostor(value) {
        this.parameters.impostor = value;
        const types = [
            'spacefill', 'ball+stick', 'licorice', 'hyperball',
            'backbone', 'rocket', 'helixorient', 'contact', 'distance',
            'dot'
        ];
        this.eachRepresentation(function (reprElem) {
            if (!types.includes(reprElem.getType()))
                return;
            const p = reprElem.getParameters(); // TODO
            p.disableImpostor = !value;
            reprElem.build(p);
        });
    }
    setQuality(value) {
        this.parameters.quality = value;
        const types = [
            'tube', 'cartoon', 'ribbon', 'trace', 'rope'
        ];
        const impostorTypes = [
            'spacefill', 'ball+stick', 'licorice', 'hyperball',
            'backbone', 'rocket', 'helixorient', 'contact', 'distance',
            'dot'
        ];
        this.eachRepresentation(function (repr) {
            const p = repr.getParameters(); // TODO
            if (!types.includes(repr.getType())) {
                if (!impostorTypes.includes(repr.getType()))
                    return;
                if (!p.disableImpostor) {
                    repr.repr.quality = value; // TODO
                    return;
                }
            }
            p.quality = value;
            repr.build(p);
        });
    }
    /**
     * Iterator over each component and executing the callback
     */
    eachComponent(callback, type) {
        this.compList.slice().forEach(comp => {
            if (type === undefined || type === comp.type)
                callback(comp);
        });
    }
    /**
     * Iterator over each representation and executing the callback
     */
    eachRepresentation(callback, type) {
        this.eachComponent(comp => {
            comp.reprList.slice().forEach(reprElem => {
                if (type === undefined || type === reprElem.getType())
                    callback(reprElem, comp);
            });
        });
    }
    /**
     * Get collection of components by name
     */
    getComponentsByName(name) {
        const compList = [];
        this.eachComponent(comp => {
            if (name === undefined || matchName(name, comp))
                compList.push(comp);
        });
        return new ComponentCollection(compList);
    }
    /**
     * Get collection of components by object
     */
    getComponentsByObject(object) {
        const compList = [];
        this.eachComponent(comp => {
            if (comp.object === object)
                compList.push(comp);
        });
        return new ComponentCollection(compList);
    }
    /**
     * Get collection of representations by name
     */
    getRepresentationsByName(name) {
        const reprList = [];
        this.eachRepresentation((repr, comp) => {
            if (name === undefined || matchName(name, repr))
                reprList.push(repr);
        });
        return new RepresentationCollection(reprList);
    }
    measureClear() {
        this.eachComponent((sc) => sc.measureClear(), 'structure');
    }
    measureUpdate() {
        this.eachComponent((sc) => sc.measureUpdate(), 'structure');
    }
    /**
     * Cleanup when disposing of a stage object
     */
    dispose() {
        this.tasks.dispose();
        this.viewer.dispose();
        this.mouseObserver.dispose();
    }
}

/**
 * @file Shape Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Component wrapping a {@link Shape} object
 *
 * @example
 * // get a shape component by adding a shape object to the stage
 * var shape = new NGL.Shape( "shape" );
 * shape.addSphere( [ 0, 0, 0 ], [ 1, 0, 0 ], 1.5 );
 * var shapeComponent = stage.addComponentFromObject( shape );
 * shapeComponent.addRepresentation( "buffer" );
 */
class ShapeComponent extends Component {
    constructor(stage, shape, params = {}) {
        super(stage, shape, Object.assign({ name: shape.name }, params));
        this.shape = shape;
    }
    /**
     * Component type
     * @type {String}
     */
    get type() { return 'shape'; }
    /**
     * Add a new shape representation to the component
     * @param {String} type - the name of the representation, one of:
     *                        buffer.
     * @param {BufferRepresentationParameters} params - representation parameters
     * @return {RepresentationComponent} the created representation wrapped into
     *                                   a representation component object
     */
    addRepresentation(type, params = {}) {
        return this._addRepresentation(type, this.shape, params);
    }
    getBoxUntransformed() {
        return this.shape.boundingBox;
    }
    getCenterUntransformed() {
        return this.shape.center;
    }
    dispose() {
        this.shape.dispose();
        super.dispose();
    }
}
ComponentRegistry.add('shape', ShapeComponent);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/**
 * @file Atomindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by atom index. The {@link AtomProxy.index} property is used for coloring.
 * Each {@link ModelProxy} of a {@link Structure} is colored seperately. The
 * `params.domain` parameter is ignored.
 *
 * __Name:__ _atomindex_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "ball+stick", { colorScheme: "atomindex" } );
 *     o.autoView();
 * } );
 */
class AtomindexColormaker extends Colormaker {
    constructor(params) {
        super(params);
        if (!params.scale) {
            this.parameters.scale = 'rainbow';
            this.parameters.reverse = defaults(params.reverse, true);
        }
        this.scalePerModel = {};
        params.structure.eachModel((mp) => {
            this.parameters.domain = [mp.atomOffset, mp.atomEnd];
            this.scalePerModel[mp.index] = this.getScale(); // TODO
        });
    }
    /**
     * get color for an atom
     * @param  {AtomProxy} atom - atom to get color for
     * @return {Integer} hex atom color
     */
    atomColor(atom) {
        return this.scalePerModel[atom.modelIndex](atom.index);
    }
}
__decorate([
    manageColor
], AtomindexColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('atomindex', AtomindexColormaker);

/**
 * @file Bfactor Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by b-factor. The {@link AtomProxy.bfactor} property is used for coloring.
 * By default the min and max b-factor values are used for the scale`s domain.
 *
 * __Name:__ _bfactor_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "ball+stick", { colorScheme: "bfactor" } );
 *     o.autoView();
 * } );
 */
class BfactorColormaker extends Colormaker {
    constructor(params) {
        super(params);
        if (!params.scale) {
            this.parameters.scale = 'OrRd';
        }
        if (!params.domain) {
            let selection;
            let min = Infinity;
            let max = -Infinity;
            if (params.sele) {
                selection = new Selection(params.sele);
            }
            params.structure.eachAtom(function (a) {
                const bfactor = a.bfactor;
                min = Math.min(min, bfactor);
                max = Math.max(max, bfactor);
            }, selection);
            this.parameters.domain = [min, max];
        }
        this.bfactorScale = this.getScale();
    }
    atomColor(a) {
        return this.bfactorScale(a.bfactor);
    }
}
__decorate([
    manageColor
], BfactorColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('bfactor', BfactorColormaker);

/**
 * @file Chainid Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by chain id
 */
class ChainidColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.chainidDictPerModel = {};
        this.scalePerModel = {};
        if (!params.scale) {
            this.parameters.scale = 'Spectral';
        }
        params.structure.eachModel((mp) => {
            let i = 0;
            const chainidDict = {};
            mp.eachChain(function (cp) {
                if (chainidDict[cp.chainid] === undefined) {
                    chainidDict[cp.chainid] = i;
                    i += 1;
                }
            });
            this.parameters.domain = [0, i - 1];
            this.chainidDictPerModel[mp.index] = chainidDict;
            this.scalePerModel[mp.index] = this.getScale();
        });
    }
    atomColor(a) {
        const chainidDict = this.chainidDictPerModel[a.modelIndex];
        return this.scalePerModel[a.modelIndex](chainidDict[a.chainid]);
    }
}
__decorate([
    manageColor
], ChainidColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('chainid', ChainidColormaker);

/**
 * @file Chainindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by chain index
 */
class ChainindexColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.scalePerModel = {};
        if (!params.scale) {
            this.parameters.scale = 'Spectral';
        }
        params.structure.eachModel((mp) => {
            this.parameters.domain = [mp.chainOffset, mp.chainEnd];
            this.scalePerModel[mp.index] = this.getScale();
        });
    }
    atomColor(a) {
        return this.scalePerModel[a.modelIndex](a.chainIndex);
    }
}
__decorate([
    manageColor
], ChainindexColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('chainindex', ChainindexColormaker);

/**
 * @file Chainname Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by chain name
 */
class ChainnameColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.chainnameDictPerModel = {};
        this.scalePerModel = {};
        if (!params.scale) {
            this.parameters.scale = 'Spectral';
        }
        params.structure.eachModel((mp) => {
            let i = 0;
            const chainnameDict = {};
            mp.eachChain(function (cp) {
                if (chainnameDict[cp.chainname] === undefined) {
                    chainnameDict[cp.chainname] = i;
                    i += 1;
                }
            });
            this.parameters.domain = [0, i - 1];
            this.chainnameDictPerModel[mp.index] = chainnameDict;
            this.scalePerModel[mp.index] = this.getScale();
        });
    }
    atomColor(a) {
        const chainnameDict = this.chainnameDictPerModel[a.modelIndex];
        return this.scalePerModel[a.modelIndex](chainnameDict[a.chainname]);
    }
}
__decorate([
    manageColor
], ChainnameColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('chainname', ChainnameColormaker);

/**
 * @file Densityfit Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by validation density fit
 */
class DensityfitColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.rsrzDict = {};
        this.rsccDict = {};
        if (!params.scale) {
            this.parameters.scale = 'RdYlBu';
        }
        this.rsrzScale = this.getScale({ domain: [2, 0] });
        this.rsccScale = this.getScale({ domain: [0.678, 1.0] });
        const val = params.structure.validation;
        if (val) {
            this.rsrzDict = val.rsrzDict;
            this.rsccDict = val.rsccDict;
        }
    }
    atomColor(atom) {
        let sele = atom.resno + '';
        if (atom.inscode)
            sele += '^' + atom.inscode;
        if (atom.chainname)
            sele += ':' + atom.chainname;
        sele += '/' + atom.modelIndex;
        const rsrz = this.rsrzDict[sele];
        if (rsrz !== undefined) {
            return this.rsrzScale(rsrz);
        }
        const rscc = this.rsccDict[sele];
        if (rscc !== undefined) {
            return this.rsccScale(rscc);
        }
        return 0x909090;
    }
}
__decorate([
    manageColor
], DensityfitColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('densityfit', DensityfitColormaker);

/**
 * @file Atomindex Colormaker
 * @author Fred Ludlow <Fred.Ludlow@astx.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// from CHARMM
const partialCharges = {
    'ARG': {
        'CD': 0.1,
        'CZ': 0.5,
        'NE': -0.1
    },
    'ASN': {
        'CG': 0.55,
        'OD1': -0.55
    },
    'ASP': {
        'CB': -0.16,
        'CG': 0.36,
        'OD1': -0.6,
        'OD2': -0.6
    },
    'CYS': {
        'CB': 0.19,
        'SG': -0.19
    },
    'GLN': {
        'CD': 0.55,
        'OE1': -0.55
    },
    'GLU': {
        'CD': 0.36,
        'CG': -0.16,
        'OE1': -0.6,
        'OE2': -0.6
    },
    'HIS': {
        'CB': 0.1,
        'CD2': 0.2,
        'CE1': 0.45,
        'CG': 0.15,
        'ND1': 0.05,
        'NE2': 0.05
    },
    'LYS': {
        'CE': 0.25,
        'NZ': 0.75
    },
    'MET': {
        'CE': 0.06,
        'CG': 0.06,
        'SD': -0.12
    },
    'PTR': {
        'C': 0.55,
        'CA': 0.1,
        'CZ': 0.25,
        'N': -0.35,
        'O': -0.55,
        'O1P': -0.85,
        'O2P': -0.85,
        'O3P': -0.85,
        'OG1': -1.1,
        'P': 1.4
    },
    'SEP': {
        'C': 0.55,
        'CA': 0.1,
        'CB': 0.25,
        'N': -0.35,
        'O': -0.55,
        'O1P': -0.85,
        'O2P': -0.85,
        'O3P': -0.85,
        'OG1': -1.1,
        'P': 1.4
    },
    'SER': {
        'CB': 0.25,
        'OG': -0.25
    },
    'THR': {
        'CB': 0.25,
        'OG1': -0.25
    },
    'TPO': {
        'C': 0.55,
        'CA': 0.1,
        'CB': 0.25,
        'N': -0.35,
        'O': -0.55,
        'OG1': -1.1,
        'O1P': -0.85,
        'O2P': -0.85,
        'O3P': -0.85,
        'P': 1.4
    },
    'TRP': {
        'CD1': 0.06,
        'CD2': 0.1,
        'CE2': -0.04,
        'CE3': -0.03,
        'CG': -0.03,
        'NE1': -0.06
    },
    'TYR': {
        'CZ': 0.25,
        'OH': -0.25
    },
    'backbone': {
        'C': 0.55,
        'O': -0.55,
        'N': -0.35,
        'CA': 0.1
    }
};
const maxRadius = 12.0;
const nHBondDistance = 1.04;
const nHCharge = 0.25;
/**
 * Populates position vector with location of implicit or explicit H
 * Returns position or undefined if not able to locate H
 *
 * @param {AtomProxy} ap - the nitrogen atom
 * @param {Vector3} [position] - optional target
 * @return {Vectors|undefined} the hydrogen atom position
 */
function backboneNHPosition(ap, position = new Vector3()) {
    let h = false;
    let ca = false;
    let c = false;
    position.set(2 * ap.x, 2 * ap.y, 2 * ap.z);
    ap.eachBondedAtom(function (a2) {
        // Any time we detect H, reset position and skip
        // future tests
        if (h)
            return;
        if (a2.atomname === 'H') {
            position.set(a2.x, a2.y, a2.z);
            h = true;
            return;
        }
        if (!ca && a2.atomname === 'CA') {
            position.sub(a2); // TODO
            ca = true;
        }
        else if (!c && a2.atomname === 'C') {
            c = true;
            position.sub(a2); // TODO
        }
    });
    if (h) {
        return position;
    }
    if (ca && c) {
        position.normalize();
        position.multiplyScalar(nHBondDistance);
        position.add(ap);
        return position;
    }
}
/**
 * Takes an array of Vector3 objects and
 * converts to an object that looks like an AtomStore
 *
 * @param {Vector3[]} positions - array of positions
 * @return {Object} AtomStore-like object
 */
function buildStoreLike(positions) {
    const n = positions.length;
    const x = new Float32Array(n);
    const y = new Float32Array(n);
    const z = new Float32Array(n);
    for (let i = 0; i < positions.length; i++) {
        const v = positions[i];
        x[i] = v.x;
        y[i] = v.y;
        z[i] = v.z;
    }
    return { x: x, y: y, z: z, count: n };
}
function chargeForAtom(a) {
    if (a.partialCharge !== null)
        return a.partialCharge;
    if (!a.isProtein()) {
        return 0.0;
    }
    return ((partialCharges[a.resname] &&
        partialCharges[a.resname][a.atomname]) ||
        partialCharges['backbone'][a.atomname] || 0.0);
}
/**
 * Color a surface by electrostatic charge. This is a highly approximate
 * calculation! The partial charges are CHARMM with hydrogens added to heavy
 * atoms and hydrogen positions generated for amides.
 *
 * __Name:__ _electrostatic_
 *
 * @example
 * stage.loadFile( "rcsb://3dqb" ).then( function( o ){
 *     o.addRepresentation( "surface", { colorScheme: "electrostatic" } );
 *     o.autoView();
 * } );
 */
class ElectrostaticColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.delta = new Vector3();
        this.hCharges = [];
        if (!params.scale) {
            this.parameters.scale = 'rwb';
        }
        if (!params.domain) {
            this.parameters.domain = [-50, 50];
        }
        this.scale = this.getScale();
        this.charges = new Float32Array(params.structure.atomCount);
        const hPositions = [];
        params.structure.eachAtom((ap) => {
            this.charges[ap.index] = chargeForAtom(ap) * ap.occupancy;
            if (ap.atomname === 'N') {
                // In the specific case where N forms two bonds to
                // CA and C, try and place a dummy hydrogen
                if (ap.bondCount >= 3)
                    return; // Skip if 3 bonds already (e.g. PRO)
                if (ap.bondToElementCount(1))
                    return; // Skip if any H specificed
                const hPos = backboneNHPosition(ap);
                if (hPos !== undefined) {
                    hPositions.push(hPos);
                    this.hCharges.push(nHCharge * ap.occupancy);
                }
            }
        });
        const bbox = params.structure.getBoundingBox();
        bbox.expandByScalar(nHBondDistance); // Worst case
        // SpatialHash requires x,y,z and count
        this.hStore = buildStoreLike(hPositions);
        this.hHash = new SpatialHash(this.hStore, bbox); // TODO
        this.hash = new SpatialHash(params.structure.atomStore, bbox);
    }
    positionColor(v) {
        const charges = this.charges;
        const hCharges = this.hCharges;
        let p = 0.0;
        this.hash.eachWithin(v.x, v.y, v.z, maxRadius, (atomIndex, dSq) => {
            const charge = charges[atomIndex];
            if (charge === 0.0)
                return;
            p += charge / dSq;
        });
        this.hHash.eachWithin(v.x, v.y, v.z, maxRadius, (atomIndex, dSq) => {
            const charge = hCharges[atomIndex];
            if (charge === 0.0)
                return;
            p += charge / dSq;
        });
        return this.scale(p * 332); // 332 to convert to kcal/mol
    }
}
__decorate([
    manageColor
], ElectrostaticColormaker.prototype, "positionColor", null);
ColormakerRegistry.add('electrostatic', ElectrostaticColormaker);

/**
 * @file Element Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// from Jmol http://jmol.sourceforge.net/jscolors/ (or 0xFFFFFF)
const ElementColors = {
    'H': 0xFFFFFF,
    'HE': 0xD9FFFF,
    'LI': 0xCC80FF,
    'BE': 0xC2FF00,
    'B': 0xFFB5B5,
    'C': 0x909090,
    'N': 0x3050F8,
    'O': 0xFF0D0D,
    'F': 0x90E050,
    'NE': 0xB3E3F5,
    'NA': 0xAB5CF2,
    'MG': 0x8AFF00,
    'AL': 0xBFA6A6,
    'SI': 0xF0C8A0,
    'P': 0xFF8000,
    'S': 0xFFFF30,
    'CL': 0x1FF01F,
    'AR': 0x80D1E3,
    'K': 0x8F40D4,
    'CA': 0x3DFF00,
    'SC': 0xE6E6E6,
    'TI': 0xBFC2C7,
    'V': 0xA6A6AB,
    'CR': 0x8A99C7,
    'MN': 0x9C7AC7,
    'FE': 0xE06633,
    'CO': 0xF090A0,
    'NI': 0x50D050,
    'CU': 0xC88033,
    'ZN': 0x7D80B0,
    'GA': 0xC28F8F,
    'GE': 0x668F8F,
    'AS': 0xBD80E3,
    'SE': 0xFFA100,
    'BR': 0xA62929,
    'KR': 0x5CB8D1,
    'RB': 0x702EB0,
    'SR': 0x00FF00,
    'Y': 0x94FFFF,
    'ZR': 0x94E0E0,
    'NB': 0x73C2C9,
    'MO': 0x54B5B5,
    'TC': 0x3B9E9E,
    'RU': 0x248F8F,
    'RH': 0x0A7D8C,
    'PD': 0x006985,
    'AG': 0xC0C0C0,
    'CD': 0xFFD98F,
    'IN': 0xA67573,
    'SN': 0x668080,
    'SB': 0x9E63B5,
    'TE': 0xD47A00,
    'I': 0x940094,
    'XE': 0x940094,
    'CS': 0x57178F,
    'BA': 0x00C900,
    'LA': 0x70D4FF,
    'CE': 0xFFFFC7,
    'PR': 0xD9FFC7,
    'ND': 0xC7FFC7,
    'PM': 0xA3FFC7,
    'SM': 0x8FFFC7,
    'EU': 0x61FFC7,
    'GD': 0x45FFC7,
    'TB': 0x30FFC7,
    'DY': 0x1FFFC7,
    'HO': 0x00FF9C,
    'ER': 0x00E675,
    'TM': 0x00D452,
    'YB': 0x00BF38,
    'LU': 0x00AB24,
    'HF': 0x4DC2FF,
    'TA': 0x4DA6FF,
    'W': 0x2194D6,
    'RE': 0x267DAB,
    'OS': 0x266696,
    'IR': 0x175487,
    'PT': 0xD0D0E0,
    'AU': 0xFFD123,
    'HG': 0xB8B8D0,
    'TL': 0xA6544D,
    'PB': 0x575961,
    'BI': 0x9E4FB5,
    'PO': 0xAB5C00,
    'AT': 0x754F45,
    'RN': 0x428296,
    'FR': 0x420066,
    'RA': 0x007D00,
    'AC': 0x70ABFA,
    'TH': 0x00BAFF,
    'PA': 0x00A1FF,
    'U': 0x008FFF,
    'NP': 0x0080FF,
    'PU': 0x006BFF,
    'AM': 0x545CF2,
    'CM': 0x785CE3,
    'BK': 0x8A4FE3,
    'CF': 0xA136D4,
    'ES': 0xB31FD4,
    'FM': 0xB31FBA,
    'MD': 0xB30DA6,
    'NO': 0xBD0D87,
    'LR': 0xC70066,
    'RF': 0xCC0059,
    'DB': 0xD1004F,
    'SG': 0xD90045,
    'BH': 0xE00038,
    'HS': 0xE6002E,
    'MT': 0xEB0026,
    'DS': 0xFFFFFF,
    'RG': 0xFFFFFF,
    'CN': 0xFFFFFF,
    'UUT': 0xFFFFFF,
    'FL': 0xFFFFFF,
    'UUP': 0xFFFFFF,
    'LV': 0xFFFFFF,
    'UUH': 0xFFFFFF,
    'D': 0xFFFFC0,
    'T': 0xFFFFA0
};
const DefaultElementColor = 0xFFFFFF;
/**
 * Color by element
 */
class ElementColormaker extends Colormaker {
    constructor(params) {
        params.value = defaults(params.value, ElementColors.C);
        super(params);
    }
    atomColor(a) {
        const element = a.element;
        if (element === 'C') {
            return this.parameters.value;
        }
        else {
            return ElementColors[element] || DefaultElementColor;
        }
    }
}
__decorate([
    manageColor
], ElementColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('element', ElementColormaker);

/**
 * @file Entityindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by entity index
 */
class EntityindexColormaker extends Colormaker {
    constructor(params) {
        super(params);
        if (!params.scale) {
            this.parameters.scale = 'Spectral';
        }
        if (!params.domain) {
            this.parameters.domain = [0, params.structure.entityList.length - 1];
        }
        this.entityindexScale = this.getScale();
    }
    atomColor(a) {
        return this.entityindexScale(a.entityIndex);
    }
}
__decorate([
    manageColor
], EntityindexColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('entityindex', EntityindexColormaker);

/**
 * @file Entitytype Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by entity type
 */
class EntitytypeColormaker extends Colormaker {
    atomColor(a) {
        const e = a.entity;
        const et = e ? e.entityType : undefined;
        switch (et) {
            case PolymerEntity:
                return 0x7fc97f;
            case NonPolymerEntity:
                return 0xfdc086;
            case MacrolideEntity:
                return 0xbeaed4;
            case WaterEntity:
                return 0x386cb0;
            default:
                return 0xffff99;
        }
    }
}
__decorate([
    manageColor
], EntitytypeColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('entitytype', EntitytypeColormaker);

/**
 * @file Geoquality Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by validation gometry quality
 */
class GeoqualityColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.geoAtomDict = {};
        this.geoDict = {};
        const val = params.structure.validation;
        if (val) {
            this.geoAtomDict = val.geoAtomDict;
            this.geoDict = val.geoDict;
        }
    }
    atomColor(atom) {
        let sele = atom.resno + '';
        if (atom.inscode)
            sele += '^' + atom.inscode;
        if (atom.chainname)
            sele += ':' + atom.chainname;
        sele += '/' + atom.modelIndex;
        let geoProblemCount;
        const geoAtom = this.geoAtomDict[sele];
        if (geoAtom !== undefined) {
            const atomProblems = geoAtom[atom.atomname] || 0;
            geoProblemCount = countSetBits(atomProblems);
        }
        else {
            geoProblemCount = this.geoDict[sele] || 0;
        }
        if (geoProblemCount === 0) {
            return 0x2166ac;
        }
        else if (geoProblemCount === 1) {
            return 0xfee08b;
        }
        else if (geoProblemCount === 2) {
            return 0xf46d43;
        }
        else if (geoProblemCount >= 3) {
            return 0xa50026;
        }
        return 0x909090;
    }
}
__decorate([
    manageColor
], GeoqualityColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('geoquality', GeoqualityColormaker);

/**
 * @file Hydrophobicity Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by hydrophobicity
 */
class HydrophobicityColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.resHF = {};
        if (!params.scale) {
            this.parameters.scale = 'RdYlGn';
        }
        const idx = 0; // 0: DGwif, 1: DGwoct, 2: Oct-IF
        for (const name in ResidueHydrophobicity) {
            this.resHF[name] = ResidueHydrophobicity[name][idx];
        }
        this.defaultResidueHydrophobicity = DefaultResidueHydrophobicity[idx];
        if (!params.domain) {
            let min = Infinity;
            let max = -Infinity;
            for (const name in this.resHF) {
                const val = this.resHF[name];
                min = Math.min(min, val);
                max = Math.max(max, val);
            }
            this.parameters.domain = [min, 0, max];
        }
        this.hfScale = this.getScale();
    }
    atomColor(a) {
        return this.hfScale(this.resHF[a.resname] || this.defaultResidueHydrophobicity);
    }
}
__decorate([
    manageColor
], HydrophobicityColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('hydrophobicity', HydrophobicityColormaker);

/**
 * @file Modelindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by model index
 */
class ModelindexColormaker extends Colormaker {
    constructor(params) {
        super(params);
        if (!params.scale) {
            this.parameters.scale = 'rainbow';
        }
        if (!params.domain) {
            this.parameters.domain = [0, params.structure.modelStore.count];
        }
        this.modelindexScale = this.getScale();
    }
    atomColor(a) {
        return this.modelindexScale(a.modelIndex);
    }
}
__decorate([
    manageColor
], ModelindexColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('modelindex', ModelindexColormaker);

/**
 * @file Moleculetype Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by molecule type
 */
class MoleculetypeColormaker extends Colormaker {
    atomColor(a) {
        switch (a.residueType.moleculeType) {
            case WaterType:
                return 0x386cb0;
            case IonType:
                return 0xf0027f;
            case ProteinType:
                return 0xbeaed4;
            case RnaType:
                return 0xfdc086;
            case DnaType:
                return 0xbf5b17;
            case SaccharideType:
                return 0x7fc97f;
            default:
                return 0xffff99;
        }
    }
}
__decorate([
    manageColor
], MoleculetypeColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('moleculetype', MoleculetypeColormaker);

/**
 * @file Occupancy Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by occupancy
 */
class OccupancyColormaker extends Colormaker {
    constructor(params) {
        super(params);
        if (!params.scale) {
            this.parameters.scale = 'PuBu';
        }
        if (!params.domain) {
            this.parameters.domain = [0.0, 1.0];
        }
        this.occupancyScale = this.getScale();
    }
    atomColor(a) {
        return this.occupancyScale(a.occupancy);
    }
}
__decorate([
    manageColor
], OccupancyColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('occupancy', OccupancyColormaker);

/**
 * @file Partialcharge Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by partial charge. The {@link AtomProxy.partialCharge} property is used for coloring.
 * The default domain is [-1, 1].
 *
 * __Name:__ _partialCharge_
 *
 * @example
 * stage.loadFile("rcsb://1crn").then(function (o) {
 *   o.addRepresentation("ball+stick", {colorScheme: "partialCharge"});
 *   o.autoView();
 * });
 */
class PartialchargeColormaker extends Colormaker {
    constructor(params) {
        super(params);
        if (!params.scale) {
            this.parameters.scale = 'rwb';
        }
        if (!params.domain) {
            this.parameters.domain = [-1, 1];
        }
        this.partialchargeScale = this.getScale();
    }
    atomColor(a) {
        return this.partialchargeScale(a.partialCharge || 0);
    }
}
__decorate([
    manageColor
], PartialchargeColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('partialcharge', PartialchargeColormaker);

/**
 * @file Random Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function randomColor() {
    return Math.random() * 0xFFFFFF;
}
/**
 * Class by random color
 */
class RandomColormaker extends Colormaker {
    /**
     * get color for an atom
     * @return {Integer} random hex color
     */
    atomColor() {
        return randomColor();
    }
    /**
     * get color for volume cell
     * @return {Integer} random hex color
     */
    volumeColor() {
        return randomColor();
    }
    /**
     * get color for coordinates in space
     * @return {Integer} random hex color
     */
    positionColor() {
        return randomColor();
    }
}
__decorate([
    manageColor
], RandomColormaker.prototype, "atomColor", null);
__decorate([
    manageColor
], RandomColormaker.prototype, "volumeColor", null);
__decorate([
    manageColor
], RandomColormaker.prototype, "positionColor", null);
ColormakerRegistry.add('random', RandomColormaker);

/**
 * @file Randomcoilindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by random coil index
 */
class RandomcoilindexColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.rciDict = {};
        if (!params.scale) {
            this.parameters.scale = 'RdYlBu';
        }
        this.rciScale = this.getScale({ domain: [0.6, 0] });
        const val = params.structure.validation;
        if (val)
            this.rciDict = val.rciDict;
    }
    atomColor(atom) {
        let sele = `[${atom.resname}]${atom.resno}`;
        if (atom.chainname)
            sele += ':' + atom.chainname;
        const rci = this.rciDict[sele];
        return rci !== undefined ? this.rciScale(rci) : 0x909090;
    }
}
__decorate([
    manageColor
], RandomcoilindexColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('randomcoilindex', RandomcoilindexColormaker);

/**
 * @file Residueindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by residue index
 */
class ResidueindexColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.scalePerChain = {};
        if (!params.scale) {
            this.parameters.scale = 'rainbow';
            this.parameters.reverse = defaults(params.reverse, true);
        }
        params.structure.eachChain((cp) => {
            this.parameters.domain = [cp.residueOffset, cp.residueEnd];
            this.scalePerChain[cp.index] = this.getScale();
        });
    }
    atomColor(a) {
        return this.scalePerChain[a.chainIndex](a.residueIndex);
    }
}
__decorate([
    manageColor
], ResidueindexColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('residueindex', ResidueindexColormaker);

/**
 * @file Resname Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// protein colors from Jmol http://jmol.sourceforge.net/jscolors/
const ResidueColors = {
    'ALA': 0x8CFF8C,
    'ARG': 0x00007C,
    'ASN': 0xFF7C70,
    'ASP': 0xA00042,
    'CYS': 0xFFFF70,
    'GLN': 0xFF4C4C,
    'GLU': 0x660000,
    'GLY': 0xFFFFFF,
    'HIS': 0x7070FF,
    'ILE': 0x004C00,
    'LEU': 0x455E45,
    'LYS': 0x4747B8,
    'MET': 0xB8A042,
    'PHE': 0x534C52,
    'PRO': 0x525252,
    'SER': 0xFF7042,
    'THR': 0xB84C00,
    'TRP': 0x4F4600,
    'TYR': 0x8C704C,
    'VAL': 0xFF8CFF,
    'ASX': 0xFF00FF,
    'GLX': 0xFF00FF,
    'ASH': 0xFF00FF,
    'GLH': 0xFF00FF,
    'A': 0xDC143C,
    'G': 0x32CD32,
    'I': 0x9ACD32,
    'X': 0x7CFC00,
    'C': 0xFFD700,
    'T': 0x4169E1,
    'U': 0x40E0D0,
    'D': 0x008B8B,
    'DA': 0xDC143C,
    'DG': 0x32CD32,
    'DI': 0x9ACD32,
    'DX': 0x7CFC00,
    'DC': 0xFFD700,
    'DT': 0x4169E1,
    'DU': 0x40E0D0,
    'DD': 0x008B8B
};
const DefaultResidueColor = 0xFF00FF;
/**
 * Color by residue name
 */
class ResnameColormaker extends Colormaker {
    atomColor(a) {
        return ResidueColors[a.resname] || DefaultResidueColor;
    }
}
__decorate([
    manageColor
], ResnameColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('resname', ResnameColormaker);

/**
 * @file Sstruc Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// from Jmol http://jmol.sourceforge.net/jscolors/ (shapely)
const StructureColors = {
    'alphaHelix': 0xFF0080,
    'threeTenHelix': 0xA00080,
    'piHelix': 0x600080,
    'betaStrand': 0xFFC800,
    'betaTurn': 0x6080FF,
    'coil': 0xFFFFFF,
    'dna': 0xAE00FE,
    'rna': 0xFD0162,
    'carbohydrate': 0xA6A6FA
};
const DefaultStructureColor = 0x808080;
/**
 * Color by secondary structure
 */
class SstrucColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.residueProxy = params.structure.getResidueProxy();
    }
    atomColor(ap) {
        const sstruc = ap.sstruc;
        const rp = this.residueProxy;
        if (sstruc === 'h') {
            return StructureColors.alphaHelix;
        }
        else if (sstruc === 'g') {
            return StructureColors.threeTenHelix;
        }
        else if (sstruc === 'i') {
            return StructureColors.piHelix;
        }
        else if (sstruc === 'e' || sstruc === 'b') {
            return StructureColors.betaStrand;
        }
        else if (sstruc === 't') {
            return StructureColors.betaTurn;
        }
        else {
            rp.index = ap.residueIndex;
            if (rp.isDna()) {
                return StructureColors.dna;
            }
            else if (rp.isRna()) {
                return StructureColors.rna;
            }
            else if (rp.isSaccharide()) {
                return StructureColors.carbohydrate;
            }
            else if (rp.isProtein() || sstruc === 's' || sstruc === 'l') {
                return StructureColors.coil;
            }
            else {
                return DefaultStructureColor;
            }
        }
    }
}
__decorate([
    manageColor
], SstrucColormaker.prototype, "atomColor", null);
ColormakerRegistry.add('sstruc', SstrucColormaker);

/**
 * @file Colordata Colormaker
 * @author Fred Ludlow <fred.ludlow@gmail.com>
 * @private
 */
class StructuredataColormaker extends Colormaker {
    constructor(params) {
        var _a, _b;
        super(params);
        if (!params.scale) {
            this.parameters.scale = 'rwb';
        }
        this.atomData = (_a = this.parameters.data) === null || _a === void 0 ? void 0 : _a.atomData;
        this.bondData = (_b = this.parameters.data) === null || _b === void 0 ? void 0 : _b.bondData;
        this.scale = this.getScale(this.parameters);
    }
    atomColor(a) {
        var _a;
        const val = (_a = this.atomData) === null || _a === void 0 ? void 0 : _a[a.index];
        return (val !== undefined) ? this.scale(val) : this.parameters.value;
    }
    bondColor(bond, fromTo) {
        var _a;
        const val = (_a = this.bondData) === null || _a === void 0 ? void 0 : _a[bond.index];
        // Explicit bond data?
        if (val !== undefined)
            return this.scale(val);
        if (this.atomProxy) {
            this.atomProxy.index = fromTo ? bond.atomIndex1 : bond.atomIndex2;
            return this.atomColor(this.atomProxy);
        }
        // Fallback
        return this.parameters.value;
    }
}
__decorate([
    manageColor
], StructuredataColormaker.prototype, "atomColor", null);
__decorate([
    manageColor
], StructuredataColormaker.prototype, "bondColor", null);
ColormakerRegistry.add('structuredata', StructuredataColormaker);

/**
 * @file Uniform Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by uniform color
 */
class UniformColormaker extends Colormaker {
    atomColor() {
        return this.parameters.value;
    }
    bondColor() {
        return this.parameters.value;
    }
    valueColor() {
        return this.parameters.value;
    }
    volumeColor() {
        return this.parameters.value;
    }
}
__decorate([
    manageColor
], UniformColormaker.prototype, "atomColor", null);
__decorate([
    manageColor
], UniformColormaker.prototype, "bondColor", null);
__decorate([
    manageColor
], UniformColormaker.prototype, "valueColor", null);
__decorate([
    manageColor
], UniformColormaker.prototype, "volumeColor", null);
ColormakerRegistry.add('uniform', UniformColormaker);

/**
 * @file Value Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by volume value
 */
class ValueColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.valueScale = this.getScale();
    }
    /**
     * return the color for a volume cell
     * @param  {Integer} index - volume cell index
     * @return {Integer} hex cell color
     */
    volumeColor(index) {
        return this.valueScale(this.parameters.volume.data[index]); // TODO
    }
}
__decorate([
    manageColor
], ValueColormaker.prototype, "volumeColor", null);
ColormakerRegistry.add('value', ValueColormaker);

/**
 * @file Volume Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Color by volume position
 */
class VolumeColormaker extends Colormaker {
    constructor(params) {
        super(params);
        this.vec = new Vector3();
        this.valueScale = this.getScale();
    }
    /**
     * return the color for coordinates in space
     * @param  {Vector3} coords - xyz coordinates
     * @return {Integer} hex coords color
     */
    positionColor(coords) {
        const volume = this.parameters.volume; // TODO
        if (!volume || !volume.inverseMatrix) {
            return this.parameters.value;
        }
        const vec = this.vec;
        const data = volume.data;
        const nx = volume.nx;
        const ny = volume.ny;
        const nxy = nx * ny;
        vec.copy(coords);
        vec.applyMatrix4(volume.inverseMatrix);
        // position of grid cell
        const x0 = Math.floor(vec.x);
        const y0 = Math.floor(vec.y);
        const z0 = Math.floor(vec.z);
        // Indices
        const i = ((((z0 * ny) + y0) * nx) + x0);
        const i1 = i + 1;
        const iy = i + nx;
        const iz = i + nxy;
        const i1y = iy + 1;
        const i1z = iz + 1;
        const iyz = iy + nxy;
        const i1yz = iyz + 1;
        // Values
        const v = data[i];
        const v1 = data[i1];
        const vy = data[iy];
        const vz = data[iz];
        const v1y = data[i1y];
        const v1z = data[i1z];
        const vyz = data[iyz];
        const v1yz = data[i1yz];
        // Position of point in fraction of grid
        const xd = vec.x - x0;
        const yd = vec.y - y0;
        const zd = vec.z - z0;
        // 1st Dimension
        const c00 = lerp(v, v1, xd);
        const c01 = lerp(vz, v1z, xd);
        const c10 = lerp(vy, v1y, xd);
        const c11 = lerp(vyz, v1yz, xd);
        // 2nd Dimension
        const c0 = lerp(c00, c10, yd);
        const c1 = lerp(c01, c11, yd);
        // 3rd Dimension
        const c = lerp(c0, c1, zd);
        return this.valueScale(c);
    }
}
__decorate([
    manageColor
], VolumeColormaker.prototype, "positionColor", null);
ColormakerRegistry.add('volume', VolumeColormaker);

/**
 * @file Structure Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Structure representation
 * @interface
 */
class StructureRepresentation extends Representation {
    /**
     * Create Structure representation object
     * @param {Structure} structure - the structure to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {StructureRepresentationParameters} params - structure representation parameters
     */
    constructor(structure, viewer, params) {
        const p = params || {};
        super(structure, viewer, p);
        this.type = 'structure';
        this.parameters = Object.assign({
            radiusType: {
                type: 'select', options: RadiusFactory.types
            },
            radiusData: {
                type: 'hidden'
            },
            radiusSize: {
                type: 'number', precision: 3, max: 10.0, min: 0.001
            },
            radiusScale: {
                type: 'number', precision: 3, max: 10.0, min: 0.001
            },
            assembly: null,
            defaultAssembly: {
                type: 'hidden'
            }
        }, this.parameters);
        /**
         * @type {Selection}
         * @private
         */
        this.selection = new Selection(p.sele);
        /**
         * @type {Array}
         * @private
         */
        this.dataList = [];
        /**
         * @type {Structure}
         */
        this.structure = structure;
        /**
         * @type {StructureView}
         */
        this.structureView = this.structure.getView(this.selection);
        if (structure.biomolDict) {
            const biomolOptions = {
                'default': 'default',
                '': (structure.unitcell ? 'AU' : 'FULL')
            };
            Object.keys(structure.biomolDict).forEach(function (k) {
                biomolOptions[k] = k;
            });
            this.parameters.assembly = {
                type: 'select',
                options: biomolOptions,
                rebuild: true
            };
        }
        else {
            this.parameters.assembly = null;
        }
    }
    get defaultScale() {
        return {
            'vdw': 1.0,
            'covalent': 1.0,
            'bfactor': 0.01,
            'sstruc': 1.0
        };
    }
    init(params) {
        const p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'element');
        this.setRadius(p.radius, p);
        this.radiusType = defaults(p.radiusType, 'vdw');
        this.radiusData = defaults(p.radiusData, {});
        this.radiusSize = defaults(p.radiusSize, 1.0);
        this.radiusScale = defaults(p.radiusScale, 1.0);
        this.assembly = defaults(p.assembly, 'default');
        this.defaultAssembly = defaults(p.defaultAssembly, '');
        if (p.quality === 'auto') {
            p.quality = this.getQuality();
        }
        super.init(p);
        this.selection.signals.stringChanged.add(( /* sele */) => {
            this.build();
        });
        this.build();
    }
    setRadius(value, p) {
        const types = Object.keys(RadiusFactoryTypes);
        if (typeof value === 'string' && types.includes(value.toLowerCase())) {
            p.radiusType = value;
        }
        else if (value !== undefined) {
            p.radiusType = 'size';
            p.radiusSize = value;
        }
        return this;
    }
    getAssembly() {
        const name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
        return this.structure.biomolDict[name];
    }
    getQuality() {
        let atomCount;
        const s = this.structureView;
        const assembly = this.getAssembly();
        if (assembly) {
            atomCount = assembly.getAtomCount(s);
        }
        else {
            atomCount = s.atomCount;
        }
        if (Mobile) {
            atomCount *= 4;
        }
        const backboneOnly = s.atomStore.count / s.residueStore.count < 2;
        if (backboneOnly) {
            atomCount *= 10;
        }
        if (atomCount < 15000) {
            return 'high';
        }
        else if (atomCount < 80000) {
            return 'medium';
        }
        else {
            return 'low';
        }
    }
    create() {
        if (this.structureView.atomCount === 0)
            return;
        if (!this.structureView.hasCoords()) {
            this.needsBuild = true;
            return;
        }
        else {
            this.needsBuild = false;
        }
        const assembly = this.getAssembly();
        if (assembly) {
            assembly.partList.forEach((part, i) => {
                const sview = part.getView(this.structureView);
                if (sview.atomCount === 0)
                    return;
                const data = this.createData(sview, i);
                if (data) {
                    data.sview = sview;
                    data.instanceList = part.getInstanceList();
                    this.dataList.push(data);
                }
            });
        }
        else {
            const data = this.createData(this.structureView, 0);
            if (data) {
                data.sview = this.structureView;
                this.dataList.push(data);
            }
        }
    }
    update(what) {
        if (this.lazy && !this.visible) {
            Object.assign(this.lazyProps.what, what);
            return;
        }
        if (this.needsBuild) {
            this.build();
            return;
        }
        this.dataList.forEach((data) => {
            if (data.bufferList.length > 0) {
                this.updateData(what, data);
            }
        }, this);
    }
    updateData(what, data) {
        this.build();
    }
    getColorParams() {
        return Object.assign(Object.assign({}, super.getColorParams()), { structure: this.structure });
    }
    getRadiusParams(param) {
        return {
            type: this.radiusType,
            scale: this.radiusScale,
            size: this.radiusSize,
            data: this.radiusData
        };
    }
    getAtomParams(what, params) {
        return Object.assign({
            what: what,
            colorParams: this.getColorParams(),
            radiusParams: this.getRadiusParams()
        }, params);
    }
    getBondParams(what, params) {
        return Object.assign({
            what: what,
            colorParams: this.getColorParams(),
            radiusParams: this.getRadiusParams()
        }, params);
    }
    getAtomRadius(atom) {
        if (this.structureView.atomSet.isSet(atom.index)) {
            const radiusFactory = new RadiusFactory(this.getRadiusParams());
            return radiusFactory.atomRadius(atom);
        }
        return 0;
    }
    /**
     * Set representation parameters
     * @alias StructureRepresentation#setSelection
     * @param {String} string - selection string, see {@tutorial selection-language}
     * @param {Boolean} [silent] - don't trigger a change event in the selection
     * @return {StructureRepresentation} this object
     */
    setSelection(string, silent) {
        this.selection.setString(string, silent);
        return this;
    }
    /**
     * Set representation parameters
     * @alias StructureRepresentation#setParameters
     * @param {StructureRepresentationParameters} params - structure parameter object
     * @param {Object} [what] - buffer data attributes to be updated,
     *                        note that this needs to be implemented in the
     *                        derived classes. Generally it allows more
     *                        fine-grained control over updating than
     *                        forcing a rebuild.
     * @param {Boolean} what.position - update position data
     * @param {Boolean} what.color - update color data
     * @param {Boolean} [rebuild] - whether or not to rebuild the representation
     * @return {StructureRepresentation} this object
     */
    setParameters(params, what = {}, rebuild = false) {
        const p = params || {};
        this.setRadius(p.radius, p);
        if (p.radiusType !== undefined || p.radiusData !== undefined || p.radiusSize !== undefined || p.radiusScale !== undefined) {
            what.radius = true;
            if (!ExtensionFragDepth || this.disableImpostor) {
                rebuild = true;
            }
        }
        if (p.defaultAssembly !== undefined &&
            p.defaultAssembly !== this.defaultAssembly &&
            ((this.assembly === 'default' && p.assembly === undefined) ||
                p.assembly === 'default')) {
            rebuild = true;
        }
        super.setParameters(p, what, rebuild);
        return this;
    }
    getParameters() {
        const params = Object.assign(super.getParameters(), {
            sele: this.selection ? this.selection.string : undefined,
            defaultAssembly: this.defaultAssembly
        });
        return params;
    }
    attach(callback) {
        const viewer = this.viewer;
        const bufferList = this.bufferList;
        this.dataList.forEach(function (data) {
            data.bufferList.forEach(function (buffer) {
                bufferList.push(buffer);
                viewer.add(buffer, data.instanceList);
            });
        });
        this.setVisibility(this.visible);
        callback();
    }
    clear() {
        this.dataList.length = 0;
        super.clear();
    }
    dispose() {
        this.structureView.dispose();
        super.dispose();
    }
}

/**
 * @file Measurement Representation
 * @author Fred Ludlow <fred.ludlow@gmail.com>
 * @private
 */
/**
 * Measurement representation
 * @interface
 */
class MeasurementRepresentation extends StructureRepresentation {
    /**
     * Handles common label settings and position logic for
     * distance, angle and dihedral representations
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.n = 0; // Subclass create sets value
        this.parameters = Object.assign({
            labelVisible: {
                type: 'boolean'
            },
            labelSize: {
                type: 'number', precision: 3, max: 10.0, min: 0.001
            },
            labelColor: {
                type: 'color'
            },
            labelFontFamily: {
                type: 'select',
                options: {
                    'sans-serif': 'sans-serif',
                    'monospace': 'monospace',
                    'serif': 'serif'
                },
                buffer: 'fontFamily'
            },
            labelFontStyle: {
                type: 'select',
                options: {
                    'normal': 'normal',
                    'italic': 'italic'
                },
                buffer: 'fontStyle'
            },
            labelFontWeight: {
                type: 'select',
                options: {
                    'normal': 'normal',
                    'bold': 'bold'
                },
                buffer: 'fontWeight'
            },
            labelsdf: {
                type: 'boolean', buffer: 'sdf'
            },
            labelXOffset: {
                type: 'number', precision: 1, max: 20, min: -20, buffer: 'xOffset'
            },
            labelYOffset: {
                type: 'number', precision: 1, max: 20, min: -20, buffer: 'yOffset'
            },
            labelZOffset: {
                type: 'number', precision: 1, max: 20, min: -20, buffer: 'zOffset'
            },
            labelAttachment: {
                type: 'select',
                options: {
                    'bottom-left': 'bottom-left',
                    'bottom-center': 'bottom-center',
                    'bottom-right': 'bottom-right',
                    'middle-left': 'middle-left',
                    'middle-center': 'middle-center',
                    'middle-right': 'middle-right',
                    'top-left': 'top-left',
                    'top-center': 'top-center',
                    'top-right': 'top-right'
                },
                rebuild: true
            },
            labelBorder: {
                type: 'boolean', buffer: 'showBorder'
            },
            labelBorderColor: {
                type: 'color', buffer: 'borderColor'
            },
            labelBorderWidth: {
                type: 'number', precision: 2, max: 0.3, min: 0, buffer: 'borderWidth'
            },
            labelBackground: {
                type: 'boolean', rebuild: true
            },
            labelBackgroundColor: {
                type: 'color', buffer: 'backgroundColor'
            },
            labelBackgroundMargin: {
                type: 'number', precision: 2, max: 2, min: 0, rebuild: true
            },
            labelBackgroundOpacity: {
                type: 'range', step: 0.01, max: 1, min: 0, buffer: 'backgroundOpacity'
            },
            labelFixedSize: {
                type: 'boolean', buffer: 'fixedSize'
            },
            lineOpacity: {
                type: 'range', min: 0.0, max: 1.0, step: 0.01
            },
            linewidth: {
                type: 'integer', max: 50, min: 1, buffer: true
            }
        }, this.parameters, {
            flatShaded: null
        });
    }
    init(params) {
        const p = params || {};
        this.labelVisible = defaults(p.labelVisible, true);
        this.labelSize = defaults(p.labelSize, 2.0);
        this.labelColor = defaults(p.labelColor, 0xFFFFFF);
        this.labelFontFamily = defaults(p.labelFontFamily, 'sans-serif');
        this.labelFontStyle = defaults(p.labelFontstyle, 'normal');
        this.labelFontWeight = defaults(p.labelFontWeight, 'bold');
        this.labelsdf = defaults(p.labelsdf, Browser === 'Chrome');
        this.labelXOffset = defaults(p.labelXOffset, 0.0);
        this.labelYOffset = defaults(p.labelYOffset, 0.0);
        this.labelZOffset = defaults(p.labelZOffset, 0.5);
        this.labelAttachment = defaults(p.labelAttachment, 'bottom-left');
        this.labelBorder = defaults(p.labelBorder, false);
        this.labelBorderColor = defaults(p.labelBorderColor, 'lightgrey');
        this.labelBorderWidth = defaults(p.labelBorderWidth, 0.15);
        this.labelBackground = defaults(p.labelBackground, false);
        this.labelBackgroundColor = defaults(p.labelBackgroundColor, 'lightgrey');
        this.labelBackgroundMargin = defaults(p.labelBackgroundMargin, 0.5);
        this.labelBackgroundOpacity = defaults(p.labelBackgroundOpacity, 1.0);
        this.labelFixedSize = defaults(p.labelFixedSize, false);
        this.lineOpacity = defaults(p.lineOpacity, 1.0);
        this.linewidth = defaults(p.linewidth, 2);
        super.init(p);
    }
    // All measurements need to rebuild on position change
    update(what) {
        if (what.position) {
            this.build();
        }
        else {
            super.update(what);
        }
    }
    updateData(what, data) {
        const textData = {};
        if (!what || what.labelSize) {
            Object.assign(textData, { size: uniformArray(this.n, this.labelSize) });
        }
        if (!what || what.labelColor) {
            const c = new Color(this.labelColor);
            Object.assign(textData, { color: uniformArray3(this.n, c.r, c.g, c.b) });
        }
        this.textBuffer.setAttributes(textData);
    }
    setParameters(params, what = {}, rebuild = false) {
        if (params && params.labelSize) {
            what.labelSize = true;
        }
        if (params && (params.labelColor || params.labelColor === 0x000000)) {
            what.labelColor = true;
            rebuild = true;
        }
        super.setParameters(params, what, rebuild);
        if (params && params.opacity !== undefined) {
            this.textBuffer.setParameters({ opacity: 1.0 }); // only opaque labels
        }
        if (params && params.labelVisible !== undefined) {
            this.setVisibility(this.visible);
        }
        return this;
    }
    setVisibility(value, noRenderRequest) {
        super.setVisibility(value, true);
        if (this.textBuffer) {
            this.textBuffer.setVisibility(this.labelVisible && this.visible);
        }
        if (!noRenderRequest)
            this.viewer.requestRender();
        return this;
    }
    getLabelBufferParams(params = {}) {
        return super.getBufferParams(Object.assign({
            fontFamily: this.labelFontFamily,
            fontStyle: this.labelFontStyle,
            fontWeight: this.labelFontWeight,
            sdf: this.labelsdf,
            xOffset: this.labelXOffset,
            yOffset: this.labelYOffset,
            zOffset: this.labelZOffset,
            attachment: this.labelAttachment,
            showBorder: this.labelBorder,
            borderColor: this.labelBorderColor,
            borderWidth: this.labelBorderWidth,
            showBackground: this.labelBackground,
            backgroundColor: this.labelBackgroundColor,
            backgroundMargin: this.labelBackgroundMargin,
            backgroundOpacity: this.labelBackgroundOpacity,
            fixedSize: this.labelFixedSize,
            disablePicking: true,
            visible: this.labelVisible
        }, params, {
            opacity: 1.0 // only opaque labels
        }));
    }
    getAtomRadius() {
        return 0;
    }
}
/**
 * MeasurementRepresentations take atom[Pair|Triple|Quad] parameters.
 *
 * Parses nested array of either integer atom indices or selection
 * expressions into a flat array of coordinates.
 *
 * @param  {Structure} sview The structure to which the atoms refer
 * @param  {Array} atoms Nested array of atom pairs|triples|quads as
 *   Integer indices or selection expressions
 * @return {Float32Array} Flattened array of position coordinates
 */
function parseNestedAtoms(sview, atoms) {
    const ap = sview.getAtomProxy();
    const sele = new Selection();
    const nSets = atoms.length;
    if (nSets === 0)
        return new Float32Array(0);
    // Peek-ahead at first item to determine order and parse mode
    const order = atoms[0].length;
    const selected = sview.getAtomSet();
    const a = new Float32Array(nSets * order * 3);
    let p = 0;
    atoms.forEach(function (group) {
        let _break = false;
        for (let j = 0; j < order; j++) {
            const value = group[j];
            if (typeof (value) === 'number' && Number.isInteger(value)) {
                if (selected.get(value)) {
                    ap.index = value;
                }
                else {
                    _break = true;
                    break;
                }
            }
            else {
                sele.setString(value);
                const atomIndices = sview.getAtomIndices(sele);
                if (atomIndices.length) {
                    ap.index = atomIndices[0];
                }
                else {
                    _break = true;
                    break;
                }
            }
            let offset = p + j * 3;
            a[offset++] = ap.x;
            a[offset++] = ap.y;
            a[offset++] = ap.z;
        }
        if (!_break)
            p += 3 * order;
    });
    return a.subarray(0, p);
}
/* out = v1 * cos(angle) + v2 * sin(angle) */
function calcArcPoint(out, center, v1, v2, angle) {
    const x = Math.cos(angle);
    const y = Math.sin(angle);
    out[0] = center[0] + v1[0] * x + v2[0] * y;
    out[1] = center[1] + v1[1] * x + v2[1] * y;
    out[2] = center[2] + v1[2] * x + v2[2] * y;
}

ShaderRegistry.add('shader/SDFFont.vert', "uniform float clipNear;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float xOffset;\nuniform float yOffset;\nuniform float zOffset;\nuniform bool ortho;\nuniform float canvasHeight;\nuniform float pixelRatio;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\nattribute vec2 mapping;\nattribute vec2 inputTexCoord;\nattribute float inputSize;\n#include matrix_scale\n#include common\nvoid main(void){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\ntexCoord = inputTexCoord;\nfloat scale = matrixScale( modelViewMatrix );\nfloat _xOffset = xOffset * scale;\nfloat _yOffset = yOffset * scale;\nfloat _zOffset = zOffset * scale;\nif( texCoord.x == 10.0 ){\n_zOffset -= 0.001;\n}\nvec4 cameraPos = modelViewMatrix * vec4( position, 1.0 );\n#ifdef FIXED_SIZE\nif ( ortho ) {\nscale /= pixelRatio * (( canvasHeight / 2.0 ) / -cameraPosition.z) * 0.1;\n} else {\nscale /= pixelRatio * (( canvasHeight / 2.0 ) / -cameraPos.z) * 0.1;\n}\n#endif\nvec4 cameraCornerPos = vec4( cameraPos.xyz, 1.0 );\ncameraCornerPos.xy += mapping * inputSize * 0.01 * scale;\ncameraCornerPos.x += _xOffset;\ncameraCornerPos.y += _yOffset;\nif( ortho ){\ncameraCornerPos.xyz += normalize( -cameraPosition ) * _zOffset;\n} else {\ncameraCornerPos.xyz += normalize( -cameraCornerPos.xyz ) * _zOffset;\n}\ngl_Position = projectionMatrix * cameraCornerPos;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -cameraCornerPos.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

ShaderRegistry.add('shader/SDFFont.frag', "uniform sampler2D fontTexture;\nuniform float opacity;\nuniform bool showBorder;\nuniform vec3 borderColor;\nuniform float borderWidth;\nuniform vec3 backgroundColor;\nuniform float backgroundOpacity;\nuniform float clipNear;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\nconst vec3 vColor = vec3( 0.0 );\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#endif\nconst float gamma = 2.2 * 1.4142 / 128.0;\nconst float padding = 0.75;\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\nif( texCoord.x > 1.0 ){\ngl_FragColor = vec4( backgroundColor, backgroundOpacity );\n}else{\nfloat sdf = texture2D( fontTexture, texCoord ).a;\nif( showBorder ) sdf += borderWidth;\nfloat a = smoothstep(padding - gamma, padding + gamma, sdf);\nif( a < 0.2 ) discard;\na *= opacity;\nvec3 outgoingLight = vColor;\nif( showBorder && sdf < ( padding + borderWidth ) ){\noutgoingLight = borderColor;\n}\ngl_FragColor = vec4( outgoingLight, a );\n}\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Edt
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf
function edt(data, width, height, f, d, v, z) {
    for (let x = 0; x < width; x++) {
        for (let y = 0; y < height; y++) {
            f[y] = data[y * width + x];
        }
        edt1d(f, d, v, z, height);
        for (let y = 0; y < height; y++) {
            data[y * width + x] = d[y];
        }
    }
    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            f[x] = data[y * width + x];
        }
        edt1d(f, d, v, z, width);
        for (let x = 0; x < width; x++) {
            data[y * width + x] = Math.sqrt(d[x]);
        }
    }
}
// 1D squared distance transform
function edt1d(f, d, v, z, n) {
    v[0] = 0;
    z[0] = Number.MIN_SAFE_INTEGER;
    z[1] = Number.MAX_SAFE_INTEGER;
    for (let q = 1, k = 0; q < n; q++) {
        let s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
        while (s <= z[k]) {
            k--;
            s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k]);
        }
        k++;
        v[k] = q;
        z[k] = s;
        z[k + 1] = Number.MAX_SAFE_INTEGER;
    }
    for (let q = 0, k = 0; q < n; q++) {
        while (z[k + 1] < q)
            k++;
        d[q] = (q - v[k]) * (q - v[k]) + f[v[k]];
    }
}

/**
 * @file Text Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const TextAtlasCache = {};
function getTextAtlas(params) {
    const hash = JSON.stringify(params);
    if (TextAtlasCache[hash] === undefined) {
        TextAtlasCache[hash] = new TextAtlas(params);
    }
    return TextAtlasCache[hash];
}
const TextAtlasDefaultParams = {
    font: 'sans-serif',
    size: 36,
    style: 'normal',
    variant: 'normal',
    weight: 'normal',
    outline: 3,
    width: 1024,
    height: 1024
};
class TextAtlas {
    constructor(params = {}) {
        this.gamma = 1;
        this.mapped = {};
        this.scratchW = 0;
        this.scratchH = 0;
        this.currentX = 0;
        this.currentY = 0;
        this.cutoff = 0.25;
        this.parameters = createParams(params, TextAtlasDefaultParams);
        const p = this.parameters;
        this.radius = p.size / 8;
        this.padding = p.size / 3;
        // Prepare line-height with room for outline and descenders/ascenders
        const lineHeight = this.lineHeight = p.size + 2 * p.outline + Math.round(p.size / 4);
        const maxWidth = this.maxWidth = p.width / 4;
        // Prepare scratch canvas
        const canvas = this.canvas = document.createElement('canvas');
        canvas.width = maxWidth;
        canvas.height = lineHeight;
        const ctx = this.context = this.canvas.getContext('2d', { willReadFrequently: true });
        ctx.font = `${p.style} ${p.variant} ${p.weight} ${p.size}px ${p.font}`;
        ctx.fillStyle = 'black';
        ctx.textAlign = 'left';
        ctx.textBaseline = 'bottom';
        ctx.lineJoin = 'round';
        // temporary arrays for the distance transform
        this.gridOuter = new Float64Array(lineHeight * maxWidth);
        this.gridInner = new Float64Array(lineHeight * maxWidth);
        this.f = new Float64Array(Math.max(lineHeight, maxWidth));
        this.d = new Float64Array(Math.max(lineHeight, maxWidth));
        this.z = new Float64Array(Math.max(lineHeight, maxWidth) + 1);
        this.v = new Int16Array(Math.max(lineHeight, maxWidth));
        //
        this.data = new Uint8Array(p.width * p.height * 4);
        this.canvas2 = document.createElement('canvas');
        this.canvas2.width = p.width;
        this.canvas2.height = p.height;
        this.context2 = this.canvas2.getContext('2d');
        // Replacement Character
        this.placeholder = this.map(String.fromCharCode(0xFFFD));
        // Basic Latin (subset)
        for (let i = 0x0020; i <= 0x007E; ++i) {
            this.map(String.fromCharCode(i));
        }
        // TODO: to slow to always prepare them
        // // Latin-1 Supplement (subset)
        // for (let i = 0x00A1; i <= 0x00FF; ++i) {
        //   this.map(String.fromCharCode(i))
        // }
        // Degree sign
        this.map(String.fromCharCode(0x00B0));
        // // Greek and Coptic (subset)
        // for (let i = 0x0391; i <= 0x03C9; ++i) {
        //   this.map(String.fromCharCode(i))
        // }
        // // Cyrillic (subset)
        // for (let i = 0x0400; i <= 0x044F; ++i) {
        //   this.map(String.fromCharCode(i))
        // }
        // Angstrom Sign
        this.map(String.fromCharCode(0x212B));
        this.texture = new CanvasTexture(this.canvas2);
        this.texture.flipY = false;
        this.texture.needsUpdate = true;
    }
    map(text) {
        const p = this.parameters;
        if (this.mapped[text] === undefined) {
            this.draw(text);
            if (this.currentX + this.scratchW > p.width) {
                this.currentX = 0;
                this.currentY += this.scratchH;
            }
            if (this.currentY + this.scratchH > p.height) {
                console.warn('canvas to small');
            }
            this.mapped[text] = {
                x: this.currentX,
                y: this.currentY,
                w: this.scratchW,
                h: this.scratchH
            };
            this.context2.drawImage(this.canvas, 0, 0, this.scratchW, this.scratchH, this.currentX, this.currentY, this.scratchW, this.scratchH);
            this.currentX += this.scratchW;
        }
        return this.mapped[text];
    }
    get(text) {
        return this.mapped[text] || this.placeholder;
    }
    draw(text) {
        const p = this.parameters;
        const h = this.lineHeight;
        const o = p.outline;
        const ctx = this.context;
        // const dst = this.scratch
        const max = this.maxWidth;
        // const colors = this.colors
        // Bottom aligned, take outline into account
        const x = o;
        const y = h - p.outline;
        // Measure text
        const m = ctx.measureText(text);
        const w = Math.min(max, Math.ceil(m.width + 2 * x + 1));
        const n = w * h;
        // Clear scratch area
        ctx.clearRect(0, 0, w, h);
        // Draw text
        ctx.fillText(text, x, y);
        const imageData = ctx.getImageData(0, 0, w, h);
        const data = imageData.data;
        for (let i = 0; i < n; i++) {
            const a = imageData.data[i * 4 + 3] / 255; // alpha value
            this.gridOuter[i] = a === 1 ? 0 : a === 0 ? Number.MAX_SAFE_INTEGER : Math.pow(Math.max(0, 0.5 - a), 2);
            this.gridInner[i] = a === 1 ? Number.MAX_SAFE_INTEGER : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2);
        }
        edt(this.gridOuter, w, h, this.f, this.d, this.v, this.z);
        edt(this.gridInner, w, h, this.f, this.d, this.v, this.z);
        for (let i = 0; i < n; i++) {
            const d = this.gridOuter[i] - this.gridInner[i];
            data[i * 4 + 3] = Math.max(0, Math.min(255, Math.round(255 - 255 * (d / this.radius + this.cutoff))));
        }
        ctx.putImageData(imageData, 0, 0);
        this.scratchW = w;
        this.scratchH = h;
    }
}
const TextBufferDefaultParameters = Object.assign({
    fontFamily: 'sans-serif',
    fontStyle: 'normal',
    fontWeight: 'bold',
    fontSize: 36,
    xOffset: 0.0,
    yOffset: 0.0,
    zOffset: 0.5,
    attachment: 'bottom-left',
    showBorder: false,
    borderColor: 'lightgrey',
    borderWidth: 0.15,
    showBackground: false,
    backgroundColor: 'lightgrey',
    backgroundMargin: 0.5,
    backgroundOpacity: 1.0,
    forceTransparent: true,
    fixedSize: false
}, BufferDefaultParameters);
const TextBufferParameterTypes = Object.assign({
    fontFamily: { uniform: true },
    fontStyle: { uniform: true },
    fontWeight: { uniform: true },
    fontSize: { uniform: true },
    xOffset: { uniform: true },
    yOffset: { uniform: true },
    zOffset: { uniform: true },
    showBorder: { uniform: true },
    borderColor: { uniform: true },
    borderWidth: { uniform: true },
    backgroundColor: { uniform: true },
    backgroundOpacity: { uniform: true },
    fixedSize: { updateShader: true }
}, BufferParameterTypes);
function getCharCount(data, params) {
    const n = data.position.length / 3;
    let charCount = 0;
    for (let i = 0; i < n; ++i) {
        charCount += data.text[i].length;
    }
    if (params.showBackground)
        charCount += n;
    return charCount;
}
/**
 * Text buffer. Renders screen-aligned text strings.
 *
 * @example
 * var textBuffer = new TextBuffer({
 *   position: new Float32Array([ 0, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   size: new Float32Array([ 2 ]),
 *   text: [ "Hello" ]
 * });
 */
class TextBuffer extends MappedQuadBuffer {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.color - colors
     * @param  {Float32Array} data.size - sizes
     * @param  {String[]} data.text - text strings
     * @param  {TextBufferParameters} params - parameters object
     */
    constructor(data, params = {}) {
        super({
            position: new Float32Array(getCharCount(data, params) * 3),
            color: new Float32Array(getCharCount(data, params) * 3),
            picking: new IgnorePicker()
        }, params);
        this.parameterTypes = TextBufferParameterTypes;
        this.alwaysTransparent = true;
        this.hasWireframe = false;
        this.isText = true;
        this.vertexShader = 'SDFFont.vert';
        this.fragmentShader = 'SDFFont.frag';
        this.text = data.text;
        this.positionCount = data.position.length / 3;
        this.addUniforms({
            'fontTexture': { value: null },
            'xOffset': { value: this.parameters.xOffset },
            'yOffset': { value: this.parameters.yOffset },
            'zOffset': { value: this.parameters.zOffset },
            'ortho': { value: false },
            'showBorder': { value: this.parameters.showBorder },
            'borderColor': { value: new Color(this.parameters.borderColor) },
            'borderWidth': { value: this.parameters.borderWidth },
            'backgroundColor': { value: new Color(this.parameters.backgroundColor) },
            'backgroundOpacity': { value: this.parameters.backgroundOpacity },
            'canvasHeight': { value: 1.0 },
            'pixelRatio': { value: 1.0 }
        });
        this.addAttributes({
            'inputTexCoord': { type: 'v2', value: null },
            'inputSize': { type: 'f', value: null }
        });
        this.setAttributes(data);
        this.makeTexture();
        this.makeMapping();
    }
    get defaultParameters() { return TextBufferDefaultParameters; }
    makeMaterial() {
        super.makeMaterial();
        const tex = this.texture;
        const m = this.material;
        m.transparent = true;
        m.extensions.derivatives = true;
        m.lights = false;
        m.uniforms.fontTexture.value = tex;
        m.needsUpdate = true;
        const wm = this.wireframeMaterial;
        wm.transparent = true;
        wm.extensions.derivatives = true;
        wm.lights = false;
        wm.uniforms.fontTexture.value = tex;
        wm.needsUpdate = true;
        const pm = this.pickingMaterial;
        pm.extensions.derivatives = true;
        pm.lights = false;
        pm.uniforms.fontTexture.value = tex;
        pm.needsUpdate = true;
    }
    setAttributes(data = {}) {
        let position, size, color;
        let aPosition, inputSize, aColor;
        const text = this.text;
        const attributes = this.geometry.attributes; // TODO
        if (data.position) {
            position = data.position;
            aPosition = attributes.position.array;
            attributes.position.needsUpdate = true;
        }
        if (data.size) {
            size = data.size;
            inputSize = attributes.inputSize.array;
            attributes.inputSize.needsUpdate = true;
        }
        if (data.color) {
            color = data.color;
            aColor = attributes.color.array;
            attributes.color.needsUpdate = true;
        }
        const n = this.positionCount;
        let j, o;
        let iCharAll = 0;
        let txt, iChar, nChar;
        for (let v = 0; v < n; ++v) {
            o = 3 * v;
            txt = text[v];
            nChar = txt.length;
            if (this.parameters.showBackground)
                nChar += 1;
            for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
                for (let m = 0; m < 4; m++) {
                    j = iCharAll * 4 * 3 + (3 * m);
                    if (position) {
                        aPosition[j] = position[o];
                        aPosition[j + 1] = position[o + 1];
                        aPosition[j + 2] = position[o + 2];
                    }
                    if (size) {
                        inputSize[(iCharAll * 4) + m] = size[v];
                    }
                    if (color) {
                        aColor[j] = color[o];
                        aColor[j + 1] = color[o + 1];
                        aColor[j + 2] = color[o + 2];
                    }
                }
            }
        }
    }
    makeTexture() {
        this.textAtlas = getTextAtlas({
            font: this.parameters.fontFamily,
            style: this.parameters.fontStyle,
            weight: this.parameters.fontWeight,
            size: this.parameters.fontSize
        });
        this.texture = this.textAtlas.texture;
    }
    makeMapping() {
        const ta = this.textAtlas;
        const text = this.text;
        const attachment = this.parameters.attachment;
        const margin = (ta.lineHeight * this.parameters.backgroundMargin * 0.1) - 10;
        const attribs = this.geometry.attributes; // TODO
        const inputTexCoord = attribs.inputTexCoord.array;
        const inputMapping = attribs.mapping.array;
        const n = this.positionCount;
        let iCharAll = 0;
        let c, i, txt, xadvance, iChar, nChar, xShift, yShift;
        for (let v = 0; v < n; ++v) {
            txt = text[v];
            xadvance = 0;
            nChar = txt.length;
            // calculate width
            for (iChar = 0; iChar < nChar; ++iChar) {
                c = ta.get(txt[iChar]);
                xadvance += c.w - 2 * ta.parameters.outline;
            }
            // attachment
            if (attachment.startsWith('top')) {
                yShift = ta.lineHeight / 1.25;
            }
            else if (attachment.startsWith('middle')) {
                yShift = ta.lineHeight / 2.5;
            }
            else {
                yShift = 0; // "bottom"
            }
            if (attachment.endsWith('right')) {
                xShift = xadvance;
            }
            else if (attachment.endsWith('center')) {
                xShift = xadvance / 2;
            }
            else {
                xShift = 0; // "left"
            }
            xShift += ta.parameters.outline;
            yShift += ta.parameters.outline;
            // background
            if (this.parameters.showBackground) {
                i = iCharAll * 2 * 4;
                inputMapping[i + 0] = -ta.lineHeight / 6 - xShift - margin; // top left
                inputMapping[i + 1] = ta.lineHeight - yShift + margin;
                inputMapping[i + 2] = -ta.lineHeight / 6 - xShift - margin; // bottom left
                inputMapping[i + 3] = 0 - yShift - margin;
                inputMapping[i + 4] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.parameters.outline + margin; // top right
                inputMapping[i + 5] = ta.lineHeight - yShift + margin;
                inputMapping[i + 6] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.parameters.outline + margin; // bottom right
                inputMapping[i + 7] = 0 - yShift - margin;
                inputTexCoord[i + 0] = 10;
                inputTexCoord[i + 2] = 10;
                inputTexCoord[i + 4] = 10;
                inputTexCoord[i + 6] = 10;
                iCharAll += 1;
            }
            xadvance = 0;
            for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
                c = ta.get(txt[iChar]);
                i = iCharAll * 2 * 4;
                inputMapping[i + 0] = xadvance - xShift; // top left
                inputMapping[i + 1] = c.h - yShift;
                inputMapping[i + 2] = xadvance - xShift; // bottom left
                inputMapping[i + 3] = 0 - yShift;
                inputMapping[i + 4] = xadvance + c.w - xShift; // top right
                inputMapping[i + 5] = c.h - yShift;
                inputMapping[i + 6] = xadvance + c.w - xShift; // bottom right
                inputMapping[i + 7] = 0 - yShift;
                const texWidth = ta.parameters.width;
                const texHeight = ta.parameters.height;
                const texCoords = [
                    c.x / texWidth, c.y / texHeight,
                    c.x / texWidth, (c.y + c.h) / texHeight,
                    (c.x + c.w) / texWidth, c.y / texHeight,
                    (c.x + c.w) / texWidth, (c.y + c.h) / texHeight // bottom right
                ];
                inputTexCoord.set(texCoords, i);
                xadvance += c.w - 2 * ta.parameters.outline;
            }
        }
        attribs.inputTexCoord.needsUpdate = true;
        attribs.mapping.needsUpdate = true;
    }
    getDefines(type) {
        const defines = super.getDefines(type);
        if (this.parameters.fixedSize) {
            defines.FIXED_SIZE = 1;
        }
        return defines;
    }
    setUniforms(data) {
        if (data && (data.fontFamily !== undefined ||
            data.fontStyle !== undefined ||
            data.fontWeight !== undefined ||
            data.fontSize !== undefined)) {
            this.makeTexture();
            this.makeMapping();
            this.texture.needsUpdate = true;
            data.fontTexture = this.texture;
        }
        super.setUniforms(data);
    }
}
BufferRegistry.add('text', TextBuffer);

ShaderRegistry.add('shader/WideLine.vert', "\nuniform float clipNear;\nuniform vec3 clipCenter;\nuniform float linewidth;\nuniform vec2 resolution;\nuniform mat4 projectionMatrixInverse;\nattribute vec2 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor;\nvarying vec3 vColor2;\nvarying float flag;\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nvoid trimSegment( const in vec4 start, inout vec4 end ) {\nfloat a = projectionMatrix[ 2 ][ 2 ]; float b = projectionMatrix[ 3 ][ 2 ]; float nearEstimate = - 0.5 * b / a;\nfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\nend.xyz = mix( start.xyz, end.xyz, alpha );\n}\nvoid main() {\nfloat aspect = resolution.x / resolution.y;\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nflag = mapping.y;\nvColor = color;\nvColor2 = color2;\n#endif\nvec4 start = modelViewMatrix * vec4( position1, 1.0 );\nvec4 end = modelViewMatrix * vec4( position2, 1.0 );\nbool perspective = ( projectionMatrix[ 2 ][ 3 ] == -1.0 ); if ( perspective ) {\nif ( start.z < 0.0 && end.z >= 0.0 ) {\ntrimSegment( start, end );\n} else if ( end.z < 0.0 && start.z >= 0.0 ) {\ntrimSegment( end, start );\n}\n}\nvec4 clipStart = projectionMatrix * start;\nvec4 clipEnd = projectionMatrix * end;\nvec2 ndcStart = clipStart.xy / clipStart.w;\nvec2 ndcEnd = clipEnd.xy / clipEnd.w;\nvec2 dir = ndcEnd - ndcStart;\ndir.x *= aspect;\ndir = normalize( dir );\nvec2 offset = vec2( dir.y, - dir.x );\ndir.x /= aspect;\noffset.x /= aspect;\nif ( mapping.x < 0.0 ) offset *= - 1.0;\noffset *= linewidth;\noffset /= resolution.y;\nvec4 clip = ( mapping.y < 0.5 ) ? clipStart : clipEnd;\noffset *= clip.w;\nclip.xy += offset;\ngl_Position = clip;\n#ifndef PICKING\nvViewPosition = ( projectionMatrixInverse * clip ).xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

ShaderRegistry.add('shader/WideLine.frag', "uniform vec3 diffuse;\nuniform float opacity;\nuniform float clipNear;\nuniform float clipRadius;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include fog_pars_fragment\nvarying vec3 vViewPosition;\nvarying vec3 vColor;\nvarying vec3 vColor2;\nvarying float flag;\n#endif\nvoid main() {\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 outgoingLight = vec3( 0.0 );\nvec4 diffuseColor = vec4( diffuse, 1.0 );\nif ( flag < 0.0 ) {\ndiffuseColor.rgb *= vColor;\n} else {\ndiffuseColor.rgb *= vColor2;\n}\n#include alphatest_fragment\noutgoingLight = diffuseColor.rgb;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Wide Line Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const WideLineBufferDefaultParameters = Object.assign({
    linewidth: 2
}, BufferDefaultParameters);
const WideLineBufferParameterTypes = Object.assign({
    linewidth: { uniform: true }
}, BufferParameterTypes);
/**
 * Wide Line buffer. Draws lines with a fixed width in pixels.
 *
 * @example
 * var lineBuffer = new WideLineBuffer({
 *   position1: new Float32Array([ 0, 0, 0 ]),
 *   position2: new Float32Array([ 1, 1, 1 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   color2: new Float32Array([ 0, 1, 0 ])
 * });
 */
class WideLineBuffer extends MappedQuadBuffer {
    constructor(data, params = {}) {
        super(data, params);
        this.parameterTypes = WideLineBufferParameterTypes;
        this.vertexShader = 'WideLine.vert';
        this.fragmentShader = 'WideLine.frag';
        if (!data.color2 && data.color)
            data.color2 = data.color;
        this.addUniforms({
            'linewidth': { value: this.parameters.linewidth },
            'resolution': { value: new Vector2() },
            'projectionMatrixInverse': { value: new Matrix4() }
        });
        this.addAttributes({
            'position1': { type: 'v3', value: null },
            'position2': { type: 'v3', value: null },
            'color2': { type: 'c', value: null }
        });
        this.setAttributes(data);
        this.makeMapping();
    }
    get defaultParameters() { return WideLineBufferDefaultParameters; }
    setParameters(params) {
        super.setParameters(params);
    }
}
BufferRegistry.add('wideline', WideLineBuffer);

/**
 * @file Angle Representation
 * @author Fred Ludlow <fred.ludlow@gmail.com>
 * @private
 */
/**
 * Angle representation object
 *
 * Reperesentation consists of four parts, visibility can be set for each
 * label - the text label with the angle size
 * vectors - lines joining the three points
 * sector - triangles representing the angle
 * arc - line bordering the sector
 *
 * @param {Structure} structure - the structure to measure angles in
 * @param {Viewer} viewer - a viewer object
 * @param {AngleRepresentationParameters} params - angle representation parameters
 */
class AngleRepresentation extends MeasurementRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'angle';
        this.parameters = Object.assign({
            atomTriple: {
                type: 'hidden', rebuild: true
            },
            vectorVisible: {
                type: 'boolean', default: true
            },
            arcVisible: {
                type: 'boolean', default: true
            },
            sectorVisible: {
                type: 'boolean', default: true
            }
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.side = defaults(p.side, 'double');
        p.opacity = defaults(p.opacity, 0.5);
        this.atomTriple = defaults(p.atomTriple, []);
        this.arcVisible = defaults(p.arcVisible, true);
        this.sectorVisible = defaults(p.sectorVisible, true);
        this.vectorVisible = defaults(p.vectorVisible, true);
        super.init(p);
    }
    createData(sview) {
        if (!sview.atomCount || !this.atomTriple.length)
            return;
        const atomPosition = atomTriplePositions(sview, this.atomTriple);
        const angleData = getAngleData(atomPosition);
        const n = this.n = angleData.labelPosition.length / 3;
        const labelColor = new Color(this.labelColor);
        // Create buffers
        this.textBuffer = new TextBuffer({
            position: angleData.labelPosition,
            size: uniformArray(n, this.labelSize),
            color: uniformArray3(n, labelColor.r, labelColor.g, labelColor.b),
            text: angleData.labelText
        }, this.getLabelBufferParams());
        const c = new Color(this.colorValue);
        this.vectorBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
            position1: angleData.vectorPosition1,
            position2: angleData.vectorPosition2,
            color: uniformArray3(2 * n, c.r, c.g, c.b),
            color2: uniformArray3(2 * n, c.r, c.g, c.b)
        }), this.getBufferParams({
            linewidth: this.linewidth,
            visible: this.vectorVisible,
            opacity: this.lineOpacity
        }));
        this.arcLength = angleData.arcPosition1.length / 3;
        this.arcBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
            position1: angleData.arcPosition1,
            position2: angleData.arcPosition2,
            color: uniformArray3(this.arcLength, c.r, c.g, c.b),
            color2: uniformArray3(this.arcLength, c.r, c.g, c.b)
        }), this.getBufferParams({
            linewidth: this.linewidth,
            visible: this.arcVisible,
            opacity: this.lineOpacity
        }));
        this.sectorLength = angleData.sectorPosition.length / 3;
        this.sectorBuffer = new MeshBuffer({
            position: angleData.sectorPosition,
            color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
        }, this.getBufferParams({
            visible: this.sectorVisible
        }));
        return {
            bufferList: [
                this.textBuffer,
                this.vectorBuffer,
                this.arcBuffer,
                this.sectorBuffer
            ]
        };
    }
    updateData(what, data) {
        super.updateData(what, data);
        const vectorData = {};
        const arcData = {};
        const sectorData = {};
        if (what.color) {
            const c = new Color(this.colorValue);
            Object.assign(vectorData, {
                color: uniformArray3(this.n * 2, c.r, c.g, c.b),
                color2: uniformArray3(this.n * 2, c.r, c.g, c.b)
            });
            Object.assign(arcData, {
                color: uniformArray3(this.arcLength, c.r, c.g, c.b),
                color2: uniformArray3(this.arcLength, c.r, c.g, c.b)
            });
            Object.assign(sectorData, {
                color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
            });
        }
        // if (what.sectorOpacity) {
        //   this.sectorBuffer.opacity = what.sectorOpacity
        // }
        this.vectorBuffer.setAttributes(vectorData);
        this.arcBuffer.setAttributes(arcData);
        this.sectorBuffer.setAttributes(sectorData);
    }
    setParameters(params) {
        var rebuild = false;
        var what = {};
        super.setParameters(params, what, rebuild);
        if (params && (params.vectorVisible !== undefined ||
            params.arcVisible !== undefined ||
            params.sectorVisible !== undefined)) {
            this.setVisibility(this.visible);
        }
        if (params && params.lineOpacity) {
            this.vectorBuffer.setParameters({ opacity: params.lineOpacity });
            this.arcBuffer.setParameters({ opacity: params.lineOpacity });
        }
        if (params && params.opacity !== undefined) {
            this.vectorBuffer.setParameters({ opacity: this.lineOpacity });
            this.arcBuffer.setParameters({ opacity: this.lineOpacity });
        }
        if (params && params.linewidth) {
            this.vectorBuffer.setParameters({ linewidth: params.linewidth });
            this.arcBuffer.setParameters({ linewidth: params.linewidth });
        }
        return this;
    }
    setVisibility(value, noRenderRequest) {
        super.setVisibility(value, true);
        if (this.vectorBuffer) {
            this.vectorBuffer.setVisibility(this.vectorVisible && this.visible);
        }
        if (this.arcBuffer) {
            this.arcBuffer.setVisibility(this.arcVisible && this.visible);
        }
        if (this.sectorBuffer) {
            this.sectorBuffer.setVisibility(this.sectorVisible && this.visible);
        }
        if (!noRenderRequest)
            this.viewer.requestRender();
        return this;
    }
}
/**
 * Ensure mid point does not coincide with first or second
 * @param  {Float32Array} position 9*nAngle array of coordinates
 * @return {Float32Array}          Filtered position array, may be shorter
 */
function validatePositions(position) {
    const include = [];
    const n = position.length / 9;
    for (let i = 0; i < n; i++) {
        // Check that first point not same as second and that second not same as third
        let okay = true;
        for (let j = i; j < i + 3; j += 3) {
            if (position[j] === position[j + 3] &&
                position[j + 1] === position[j + 4] &&
                position[j + 2] === position[j + 5]) {
                okay = false;
            }
        }
        if (okay)
            include.push(i);
    }
    const outPosition = new Float32Array(include.length * 9);
    let outIdx = 0;
    include.forEach(function (i) {
        copyArray(position, outPosition, i * 9, outIdx * 9, 9);
        outIdx++;
    });
    return outPosition;
}
function atomTriplePositions(sview, atomTriple) {
    return validatePositions(parseNestedAtoms(sview, atomTriple));
}
/**
 * Converts triple positions into data required to build various buffers.
 */
function getAngleData(position, params = {}) {
    const angleStep = defaults(params.angleStep, Math.PI / 90);
    const n = position.length / 9;
    const angles = new Float32Array(n);
    const labelPosition = new Float32Array(n * 3);
    const labelText = new Array(n);
    const vectorPosition1 = new Float32Array(n * 6); // Two lines per angle
    const vectorPosition2 = new Float32Array(n * 6);
    const arcPositionTmp1 = new Array(n); // Start points for arc lines
    const arcPositionTmp2 = new Array(n); // End points for arc lines
    const sectorPositionTmp = new Array(n); // Triangle points
    let totalSegments = 0;
    // Re-used vectors etc
    const p1 = v3new(); // Positions of points for each angel
    const p2 = v3new();
    const p3 = v3new();
    const v21 = v3new(); // Vectors
    const v23 = v3new();
    const cross = v3new(); // Cross product v21xv23
    const cross2 = v3new(); // In-plane cross product v21 x (v21 x v23)
    const labelTmp = v3new();
    const arcPoint = v3new();
    for (var i = 0; i < n; i++) {
        let p = 9 * i;
        v3fromArray(p1, position, p);
        v3fromArray(p2, position, p + 3);
        v3fromArray(p3, position, p + 6);
        let v = 6 * i;
        v3toArray(p1, vectorPosition1, v);
        v3toArray(p2, vectorPosition2, v);
        v3toArray(p2, vectorPosition1, v + 3);
        v3toArray(p3, vectorPosition2, v + 3);
        v3sub(v21, p1, p2);
        v3sub(v23, p3, p2);
        v3normalize(v21, v21); // validatePositions ensures valid
        v3normalize(v23, v23);
        v3cross(cross, v21, v23);
        const crossLength = v3length(cross);
        const dot = v3dot(v21, v23);
        const angle = angles[i] = Math.atan2(crossLength, dot);
        labelText[i] = (RAD2DEG * angle).toFixed(1) + String.fromCharCode(0x00B0);
        if (v3length(cross) === 0.0) {
            // Angle exactly 0/180, pick an arbitrary direction
            cross[0] = 1.0;
            cross[1] = 0.0;
            cross[2] = 0.0;
        }
        v3cross(cross2, cross, v21);
        v3normalize(cross2, cross2);
        calcArcPoint(labelTmp, p2, v21, cross2, angle / 2.0);
        // TODO: Scale label position?
        v3toArray(labelTmp, labelPosition, 3 * i);
        // Build the arc and sector
        const nSegments = Math.ceil(angle / angleStep);
        const sectorVertices = new Float32Array(nSegments * 9);
        sectorPositionTmp[i] = sectorVertices;
        const arcVertices1 = new Float32Array(nSegments * 3);
        const arcVertices2 = new Float32Array(nSegments * 3);
        arcPositionTmp1[i] = arcVertices1;
        arcPositionTmp2[i] = arcVertices2;
        v3add(arcPoint, p2, v21); // Our initial arc point
        const appendArcSection = function (a, j) {
            const si = j * 9;
            const ai = j * 3;
            v3toArray(p2, sectorVertices, si);
            v3toArray(arcPoint, sectorVertices, si + 3);
            v3toArray(arcPoint, arcVertices1, ai);
            calcArcPoint(arcPoint, p2, v21, cross2, a);
            v3toArray(arcPoint, sectorVertices, si + 6);
            v3toArray(arcPoint, arcVertices2, ai);
        };
        let j = 0;
        for (let a = angleStep; a < angle; a += angleStep) {
            appendArcSection(a, j);
            j++;
        }
        appendArcSection(angle, j);
        totalSegments += nSegments;
    }
    // Flatten nested arrays of arc/segment points
    const arcSize = totalSegments * 3;
    const sectorSize = totalSegments * 9;
    const arcPosition1 = new Float32Array(arcSize);
    const arcPosition2 = new Float32Array(arcSize);
    const sectorPosition = new Float32Array(sectorSize);
    let sectorOffset = 0;
    let arcOffset = 0;
    for (let i = 0; i < n; i++) {
        const ap1 = arcPositionTmp1[i];
        const ap2 = arcPositionTmp2[i];
        copyArray(ap1, arcPosition1, 0, arcOffset, ap1.length);
        copyArray(ap2, arcPosition2, 0, arcOffset, ap2.length);
        arcOffset += ap1.length; // === ap2.length
        const sp = sectorPositionTmp[i];
        copyArray(sp, sectorPosition, 0, sectorOffset, sp.length);
        sectorOffset += sp.length;
    }
    return {
        labelPosition,
        labelText,
        vectorPosition1,
        vectorPosition2,
        arcPosition1,
        arcPosition2,
        sectorPosition
    };
}
RepresentationRegistry.add('angle', AngleRepresentation);

/**
 * @file Cylinder Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale$6 = new Vector3();
const eye$6 = new Vector3();
const target$6 = new Vector3();
const up$6 = new Vector3(0, 1, 0);
const CylinderGeometryBufferDefaultParameters = Object.assign({
    radialSegments: 1,
    openEnded: true
}, BufferDefaultParameters);
function getData$1(data, params = {}) {
    const geo = getGeo$1(params);
    const n = data.position1.length;
    const geoLength = geo.attributes.position.array.length / 3;
    const count = n / 3;
    const primitiveId = new Float32Array(count * 2 * geoLength);
    serialBlockArray(count, geoLength, 0, primitiveId);
    serialBlockArray(count, geoLength, count * geoLength, primitiveId);
    const position = new Float32Array(n * 2);
    const color = new Float32Array(n * 2);
    return {
        position, color, primitiveId, picking: data.picking
    };
}
function getGeo$1(params = {}) {
    const radialSegments = defaults(params.radialSegments, 10);
    const openEnded = defaults(params.openEnded, true);
    const matrix = new Matrix4().makeRotationX(Math.PI / 2);
    const geo = new CylinderGeometry(1, // radiusTop,
    1, // radiusBottom,
    1, // height,
    radialSegments, // radialSegments,
    1, // heightSegments,
    openEnded // openEnded
    );
    geo.applyMatrix4(matrix);
    return geo;
}
/**
 * Cylinder geometry buffer.
 *
 * @example
 * var cylinderGeometryBuffer = new CylinderGeometryBuffer({
 *   position1: new Float32Array([ 0, 0, 0 ]),
 *   position2: new Float32Array([ 1, 1, 1 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   color2: new Float32Array([ 0, 1, 0 ]),
 *   radius: new Float32Array([ 1 ])
 * });
 */
class CylinderGeometryBuffer extends GeometryBuffer {
    /**
     * @param {Object} data - buffer data
     * @param {Float32Array} data.position1 - from positions
     * @param {Float32Array} data.position2 - to positions
     * @param {Float32Array} data.color - from colors
     * @param {Float32Array} data.color2 - to colors
     * @param {Float32Array} data.radius - radii
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} [params] - parameters object
     */
    constructor(data, params = {}) {
        super(getData$1(data, params), params, getGeo$1(params));
        this.updateNormals = true;
        const n = data.position1.length;
        const m = data.radius.length;
        this.__center = new Float32Array(n);
        this._position = new Float32Array(n * 2);
        this._color = new Float32Array(n * 2);
        this._from = new Float32Array(n * 2);
        this._to = new Float32Array(n * 2);
        this._radius = new Float32Array(m * 2);
        this.setAttributes(data, true);
    }
    get defaultParameters() { return CylinderGeometryBufferDefaultParameters; }
    applyPositionTransform(matrix, i, i3) {
        eye$6.fromArray(this._from, i3);
        target$6.fromArray(this._to, i3);
        matrix.lookAt(eye$6, target$6, up$6);
        const r = this._radius[i];
        scale$6.set(r, r, eye$6.distanceTo(target$6));
        matrix.scale(scale$6);
    }
    setAttributes(data = {}, initNormals) {
        const meshData = {};
        if (data.position1 && data.position2) {
            calculateCenterArray(data.position1, data.position2, this.__center);
            calculateCenterArray(data.position1, this.__center, this._position);
            calculateCenterArray(this.__center, data.position2, this._position, data.position1.length);
            this._from.set(data.position1);
            this._from.set(this.__center, data.position1.length);
            this._to.set(this.__center);
            this._to.set(data.position2, this.__center.length);
            meshData.position = this._position;
        }
        if (data.color && data.color2) {
            this._color.set(data.color);
            this._color.set(data.color2, data.color.length);
            meshData.color = this._color;
        }
        if (data.radius) {
            this._radius.set(data.radius);
            this._radius.set(data.radius, data.radius.length);
            meshData.radius = this._radius;
        }
        super.setAttributes(meshData, initNormals);
    }
}

ShaderRegistry.add('shader/CylinderImpostor.vert', "\nattribute vec3 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\nattribute float radius;\nvarying vec3 axis;varying vec4 base_radius;varying vec4 end_b;varying vec3 U;varying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform mat4 modelViewMatrixInverse;\nuniform float ortho;\n#include matrix_scale\nvoid main(){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nbase_radius.w = radius * matrixScale( modelViewMatrix );\nvec3 center = position;\nvec3 dir = normalize( position2 - position1 );\nfloat ext = length( position2 - position1 ) / 2.0;\nvec3 cam_dir;\nif( ortho == 0.0 ){\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 0, 1 ) ).xyz - center;\n}else{\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 1, 0 ) ).xyz;\n}\ncam_dir = normalize( cam_dir );\nvec3 ldir;\nfloat b = dot( cam_dir, dir );\nend_b.w = b;\nif( b < 0.0 )\nldir = -ext * dir;\nelse\nldir = ext * dir;\nvec3 left = radius * normalize( cross( cam_dir, ldir ) );\nvec3 up = radius * normalize( cross( left, ldir ) );\naxis = normalize( normalMatrix * ldir );\nU = normalize( normalMatrix * up );\nV = normalize( normalMatrix * left );\nvec4 base4 = modelViewMatrix * vec4( center - ldir, 1.0 );\nbase_radius.xyz = base4.xyz / base4.w;\nvec4 end4 = modelViewMatrix * vec4( center + ldir, 1.0 );\nend_b.xyz = end4.xyz / end4.w;\nw = modelViewMatrix * vec4(\ncenter + mapping.x*ldir + mapping.y*left + mapping.z*up, 1.0\n);\ngl_Position = projectionMatrix * w;\ngl_Position.z = 0.99;\n}");

ShaderRegistry.add('shader/CylinderImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat distSq3( vec3 v3a, vec3 v3b ){\nreturn (\n( v3a.x - v3b.x ) * ( v3a.x - v3b.x ) +\n( v3a.y - v3b.y ) * ( v3a.y - v3b.y ) +\n( v3a.z - v3b.z ) * ( v3a.z - v3b.z )\n);\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nvoid main(){\nvec3 ray_target = w.xyz / w.w;\nvec3 base = base_radius.xyz; float vRadius = base_radius.w; vec3 end = end_b.xyz; float b = end_b.w;\nvec3 ray_origin = vec3(0.0); vec3 ortho_ray_direction = vec3(0.0, 0.0, 1.0); vec3 persp_ray_direction = normalize(ray_origin - ray_target);\nvec3 ray_direction = mix(persp_ray_direction, ortho_ray_direction, ortho);\nmat3 basis = mat3( U, V, axis );\nvec3 diff = ray_target - 0.5 * (base + end);\nvec3 P = diff * basis;\nfloat dz = dot( axis, ray_direction );\nfloat radius2 = vRadius*vRadius;\nvec3 D = vec3(dot(U, ray_direction),\ndot(V, ray_direction),\ndz);\nfloat a0 = P.x*P.x + P.y*P.y - radius2;\nfloat a1 = P.x*D.x + P.y*D.y;\nfloat a2 = D.x*D.x + D.y*D.y;\nfloat d = a1*a1 - a0*a2;\nif (d < 0.0) {\ndiscard;\n}\nfloat dist = (-a1 + sqrt(d)) / a2;\nvec3 surface_point = ray_target + dist * ray_direction;\nvec3 base_to_surface = surface_point - base;\nvec3 _normal = normalize( base_to_surface - axis * dot(base_to_surface, axis) );\nfloat base_cap_test = dot( base_to_surface, axis );\nfloat end_cap_test = dot((surface_point - end), axis);\n#ifndef CAP\nvec3 new_point2 = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\nvec3 tmp_point2 = new_point2 - base;\n#endif\nif (base_cap_test < 0.0) {\nfloat dNV;\nfloat near;\nvec3 front_point;\nif ( ortho == 1.0 ) {\nfront_point = ray_target;\n} else {\ndNV = dot(-axis, ray_direction);\nnear = dot(-axis, (base)) / dNV;\nfront_point = ray_direction * near + ray_origin;\n}\nif (dot(front_point - base, front_point-base) > radius2) {\ndiscard;\n}\n#ifdef CAP\nsurface_point = front_point;\n_normal = axis;\n#else\nsurface_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(axis, end) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - end, new_point2-base) < radius2) {\ndiscard;\n}\ninterior = true;\n#endif\n}\nif( end_cap_test > 0.0 )\n{\nfloat dNV;\nfloat near;\nvec3 end_point;\nif ( ortho == 1.0 ) {\nend_point = ray_target;\n} else {\ndNV = dot(axis, ray_direction);\nif (dNV < 0.0) {\ndiscard;\n}\nnear = dot(axis, end) / dNV;\nend_point = ray_direction * near + ray_origin;\n}\nif( dot(end_point - end, end_point-base) > radius2 ) {\ndiscard;\n}\n#ifdef CAP\nsurface_point = end_point;\n_normal = axis;\n#else\nsurface_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(-axis, (base)) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - base, new_point2-base) < radius2) {\ndiscard;\n}\ninterior = true;\n#endif\n}\ngl_FragDepthEXT = calcDepth( surface_point );\n#ifdef NEAR_CLIP\nif( calcClip( surface_point ) > 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nsurface_point = ray_target + dist * ray_direction;\nif( calcClip( surface_point ) > 0.0 ) {\ndiscard;\n}\ninterior = true;\ngl_FragDepthEXT = calcDepth( surface_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nsurface_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( surface_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nsurface_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( surface_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#endif\nif (gl_FragDepthEXT < 0.0) {\ndiscard;\n}\nif (gl_FragDepthEXT > 1.0) {\ndiscard;\n}\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -surface_point;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distSq3( surface_point, end ) < distSq3( surface_point, base ) ){\nif( b < 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}else{\nif( b > 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nvec3 nonPerturbedNormal = normal;\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Mapped Aligned Box Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
//       +Y   /
//    0**********2
//    *   | /   **
//    *   |/   * *
// -----------3---- +X
//    *  /|   *  *
//    * / |   *  *
//    1/**|******4
//    /   |   * *
//   /    |   **  
//  +Z    |   5 
const mapping$1 = new Float32Array([
    -1.0, 1.0, -1.0,
    -1.0, -1.0, -1.0,
    1.0, 1.0, -1.0,
    1.0, 1.0, 1.0,
    1.0, -1.0, -1.0,
    1.0, -1.0, 1.0
]);
const mappingIndices$1 = new Uint16Array([
    0, 1, 2,
    1, 4, 2,
    2, 4, 3,
    4, 5, 3
]);
/**
 * Mapped Aligned box buffer. Draws boxes where one side is always screen-space aligned.
 * Used to render cylinder imposters.
 * @interface
 */
class MappedAlignedBoxBuffer extends MappedBuffer {
    constructor(data, params = {}) {
        super('v3', data, params);
    }
    get mapping() { return mapping$1; }
    get mappingIndices() { return mappingIndices$1; }
    get mappingIndicesSize() { return 12; }
    get mappingSize() { return 6; }
    get mappingItemSize() { return 3; }
}

/**
 * @file Cylinder Impostor Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const CylinderImpostorBufferDefaultParameters = Object.assign({
    openEnded: false
}, BufferDefaultParameters);
const CylinderImpostorBufferParameterTypes = Object.assign({
    openEnded: { updateShader: true }
}, BufferParameterTypes);
/**
 * Cylinder impostor buffer.
 *
 * @example
 * var cylinderimpostorBuffer = new CylinderImpostorBuffer({
 *     position1: new Float32Array([ 0, 0, 0 ]),
 *     position2: new Float32Array([ 1, 1, 1 ]),
 *     color: new Float32Array([ 1, 0, 0 ]),
 *     color2: new Float32Array([ 0, 1, 0 ]),
 *     radius: new Float32Array([ 1 ])
 * });
 */
class CylinderImpostorBuffer extends MappedAlignedBoxBuffer {
    /**
     * make cylinder impostor buffer
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position1 - from positions
     * @param  {Float32Array} data.position2 - to positions
     * @param  {Float32Array} data.color - from colors
     * @param  {Float32Array} data.color2 - to colors
     * @param  {Float32Array} data.radius - radii
     * @param  {Picker} data.picking - picking ids
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super(data, params);
        this.parameterTypes = CylinderImpostorBufferParameterTypes;
        this.isImpostor = true;
        this.vertexShader = 'CylinderImpostor.vert';
        this.fragmentShader = 'CylinderImpostor.frag';
        this.addUniforms({
            'modelViewMatrixInverse': { value: new Matrix4() },
            'ortho': { value: 0.0 }
        });
        this.addAttributes({
            'position1': { type: 'v3', value: null },
            'position2': { type: 'v3', value: null },
            'color2': { type: 'c', value: null },
            'radius': { type: 'f', value: null }
        });
        this.setAttributes(data);
        this.makeMapping();
    }
    get defaultParameters() { return CylinderImpostorBufferDefaultParameters; }
    getDefines(type) {
        const defines = MappedAlignedBoxBuffer.prototype.getDefines.call(this, type);
        if (!this.parameters.openEnded) {
            defines.CAP = 1;
        }
        return defines;
    }
}

/**
 * @file Cylinder Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
Object.assign({
    disableImpostor: false
}, CylinderGeometryBufferDefaultParameters, CylinderImpostorBufferDefaultParameters);
class CylinderBufferImpl {
    constructor(data, params = {}) {
        if (!data.color2 && data.color)
            data.color2 = data.color;
        if (!ExtensionFragDepth || (params && params.disableImpostor)) {
            return new CylinderGeometryBuffer(data, params);
        }
        else {
            return new CylinderImpostorBuffer(data, params);
        }
    }
}
/**
 * Cylinder buffer. Depending on the value {@link ExtensionFragDepth} and
 * `params.disableImpostor` the constructor returns either a
 * {@link CylinderGeometryBuffer} or a {@link CylinderImpostorBuffer}
 * @implements {Buffer}
 *
 * @example
 * var cylinderBuffer = new CylinderBuffer({
 *   position1: new Float32Array([ 0, 0, 0 ]),
 *   position2: new Float32Array([ 1, 1, 1 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   color2: new Float32Array([ 0, 1, 0 ]),
 *   radius: new Float32Array([ 1 ])
 * });
 */
//@ts-expect-error Incompatible constructor signatures
const CylinderBuffer = CylinderBufferImpl;
BufferRegistry.add('cylinder', CylinderBuffer);

/**
 * @file Axes Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Axes representation. Show principal axes and/or a box aligned with them
 * that fits the structure or selection.
 *
 * __Name:__ _axes_
 *
 * @example
 * stage.loadFile( "rcsb://3pqr", {
 *     assembly: "BU1"
 * } ).then( function( o ){
 *     o.addRepresentation( "cartoon" );
 *     o.addRepresentation( "axes", {
 *         sele: "RET", showAxes: false, showBox: true, radius: 0.2
 *     } );
 *     o.addRepresentation( "ball+stick", { sele: "RET" } );
 *     o.addRepresentation( "axes", {
 *         sele: ":B and backbone", showAxes: false, showBox: true, radius: 0.2
 *     } );
 *     stage.autoView();
 *     var pa = o.structure.getPrincipalAxes();
 *     stage.animationControls.rotate( pa.getRotationQuaternion(), 1500 );
 * } );
 */
class AxesRepresentation extends StructureRepresentation {
    /**
     * @param  {Structure} structure - the structure object
     * @param  {Viewer} viewer - the viewer object
     * @param  {StructureRepresentationParameters} params - parameters object
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'axes';
        this.parameters = Object.assign({
            radiusSize: {
                type: 'number', precision: 3, max: 10.0, min: 0.001
            },
            sphereDetail: true,
            radialSegments: true,
            disableImpostor: true,
            showAxes: {
                type: 'boolean', rebuild: true
            },
            showBox: {
                type: 'boolean', rebuild: true
            }
        }, this.parameters, {
            assembly: null
        });
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.radiusSize = defaults(p.radiusSize, 0.5);
        p.colorValue = defaults(p.colorValue, 'lightgreen');
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        this.showAxes = defaults(p.showAxes, true);
        this.showBox = defaults(p.showBox, false);
        super.init(p);
    }
    getPrincipalAxes() {
        let selection;
        const assembly = this.getAssembly();
        if (assembly) {
            selection = assembly.partList[0].getSelection();
        }
        return this.structureView.getPrincipalAxes(selection);
    }
    getAxesData(sview) {
        const pa = this.getPrincipalAxes();
        const c = new Color(this.colorValue);
        let vn = 0;
        let en = 0;
        if (this.showAxes) {
            vn += 6;
            en += 3;
        }
        if (this.showBox) {
            vn += 8;
            en += 12;
        }
        const vertexPosition = new Float32Array(3 * vn);
        const vertexColor = uniformArray3(vn, c.r, c.g, c.b);
        const vertexRadius = uniformArray(vn, this.radiusSize);
        const edgePosition1 = new Float32Array(3 * en);
        const edgePosition2 = new Float32Array(3 * en);
        const edgeColor = uniformArray3(en, c.r, c.g, c.b);
        const edgeRadius = uniformArray(en, this.radiusSize);
        let offset = 0;
        if (this.showAxes) {
            const addAxis = function (v1, v2) {
                v1.toArray(vertexPosition, offset * 2);
                v2.toArray(vertexPosition, offset * 2 + 3);
                v1.toArray(edgePosition1, offset);
                v2.toArray(edgePosition2, offset);
                offset += 3;
            };
            addAxis(pa.begA, pa.endA);
            addAxis(pa.begB, pa.endB);
            addAxis(pa.begC, pa.endC);
        }
        if (this.showBox) {
            const v = new Vector3();
            const { d1a, d2a, d3a, d1b, d2b, d3b } = pa.getProjectedScaleForAtoms(sview);
            // console.log(d1a, d2a, d3a, d1b, d2b, d3b)
            let offset2 = offset * 2;
            const addCorner = function (d1, d2, d3) {
                v.copy(pa.center)
                    .addScaledVector(pa.normVecA, d1)
                    .addScaledVector(pa.normVecB, d2)
                    .addScaledVector(pa.normVecC, d3);
                v.toArray(vertexPosition, offset2);
                offset2 += 3;
            };
            addCorner(d1a, d2a, d3a);
            addCorner(d1a, d2a, d3b);
            addCorner(d1a, d2b, d3b);
            addCorner(d1a, d2b, d3a);
            addCorner(d1b, d2b, d3b);
            addCorner(d1b, d2b, d3a);
            addCorner(d1b, d2a, d3a);
            addCorner(d1b, d2a, d3b);
            let edgeOffset = offset;
            const addEdge = function (a, b) {
                v.fromArray(vertexPosition, offset * 2 + a * 3)
                    .toArray(edgePosition1, edgeOffset);
                v.fromArray(vertexPosition, offset * 2 + b * 3)
                    .toArray(edgePosition2, edgeOffset);
                edgeOffset += 3;
            };
            addEdge(0, 1);
            addEdge(0, 3);
            addEdge(0, 6);
            addEdge(1, 2);
            addEdge(1, 7);
            addEdge(2, 3);
            addEdge(2, 4);
            addEdge(3, 5);
            addEdge(4, 5);
            addEdge(4, 7);
            addEdge(5, 6);
            addEdge(6, 7);
        }
        const picker = new AxesPicker(pa);
        return {
            vertex: {
                position: vertexPosition,
                color: vertexColor,
                radius: vertexRadius,
                picking: picker
            },
            edge: {
                position1: edgePosition1,
                position2: edgePosition2,
                color: edgeColor,
                color2: edgeColor,
                radius: edgeRadius,
                picking: picker
            }
        };
    }
    create() {
        const axesData = this.getAxesData(this.structureView);
        this.sphereBuffer = new SphereBuffer(axesData.vertex, this.getBufferParams({
            sphereDetail: this.sphereDetail,
            disableImpostor: this.disableImpostor,
            dullInterior: true
        }));
        this.cylinderBuffer = new CylinderBuffer(axesData.edge, this.getBufferParams({
            openEnded: true,
            radialSegments: this.radialSegments,
            disableImpostor: this.disableImpostor,
            dullInterior: true
        }));
        this.dataList.push({
            sview: this.structureView,
            bufferList: [this.sphereBuffer, this.cylinderBuffer]
        });
    }
    createData(sview) {
        return;
    }
    updateData(what, data) {
        const axesData = this.getAxesData(data.sview);
        const sphereData = {};
        const cylinderData = {};
        if (!what || what.position) {
            Object.assign(sphereData, {
                position: axesData.vertex.position
            });
            Object.assign(cylinderData, {
                position1: axesData.edge.position1,
                position2: axesData.edge.position2
            });
        }
        if (!what || what.color) {
            Object.assign(sphereData, {
                color: axesData.vertex.color
            });
            Object.assign(cylinderData, {
                color: axesData.edge.color,
                color2: axesData.edge.color
            });
        }
        if (!what || what.radius) {
            Object.assign(sphereData, {
                radius: axesData.vertex.radius
            });
            Object.assign(cylinderData, {
                radius: axesData.edge.radius
            });
        }
        this.sphereBuffer.setAttributes(sphereData);
        this.cylinderBuffer.setAttributes(cylinderData);
    }
}
RepresentationRegistry.add('axes', AxesRepresentation);

/**
 * @file Ball And Stick Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Ball And Stick representation parameter object. Extends {@link RepresentationParameters} and
 * {@link StructureRepresentationParameters}.
 *
 * @typedef {Object} BallAndStickRepresentationParameters - ball and stick representation parameters
 *
 * @property {Integer} sphereDetail - sphere quality (icosahedron subdivisions)
 * @property {Integer} radialSegments - cylinder quality (number of segments)
 * @property {Boolean} openEnded - capped or not
 * @property {Boolean} disableImpostor - disable use of raycasted impostors for rendering
 * @property {Float} aspectRatio - size difference between atom and bond radii
 * @property {Boolean} lineOnly - render only bonds, and only as lines
 * @property {Integer} linewidth - width of lines
 * @property {Boolean} cylinderOnly - render only bonds (no atoms)
 * @property {String} multipleBond - one off "off", "symmetric", "offset"
 * @property {Float} bondSpacing - spacing for multiple bond rendering
 * @property {Float} bondScale - scale/radius for multiple bond rendering
 */
/**
 * Ball And Stick representation. Show atoms as spheres and bonds as cylinders.
 *
 * __Name:__ _ball+stick_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "ball+stick" );
 *     o.autoView();
 * } );
 */
class BallAndStickRepresentation extends StructureRepresentation {
    /**
     * Create Ball And Stick representation object
     * @param {Structure} structure - the structure to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {BallAndStickRepresentationParameters} params - ball and stick representation parameters
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'ball+stick';
        this.parameters = Object.assign({
            sphereDetail: true,
            radialSegments: true,
            openEnded: true,
            disableImpostor: true,
            aspectRatio: {
                type: 'number', precision: 1, max: 10.0, min: 1.0
            },
            lineOnly: {
                type: 'boolean', rebuild: true
            },
            cylinderOnly: {
                type: 'boolean', rebuild: true
            },
            multipleBond: {
                type: 'select',
                rebuild: true,
                options: {
                    'off': 'off',
                    'symmetric': 'symmetric',
                    'offset': 'offset'
                }
            },
            bondScale: {
                type: 'number', precision: 2, max: 1.0, min: 0.01
            },
            bondSpacing: {
                type: 'number', precision: 2, max: 2.0, min: 0.5
            },
            linewidth: {
                type: 'integer', max: 50, min: 1, buffer: true
            }
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.radiusType = defaults(p.radiusType, 'size');
        p.radiusSize = defaults(p.radiusSize, 0.15);
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        this.aspectRatio = defaults(p.aspectRatio, 2.0);
        this.lineOnly = defaults(p.lineOnly, false);
        this.cylinderOnly = defaults(p.cylinderOnly, false);
        this.multipleBond = defaults(p.multipleBond, 'off');
        this.bondSpacing = defaults(p.bondSpacing, 1.0);
        this.bondScale = defaults(p.bondScale, 0.4);
        this.linewidth = defaults(p.linewidth, 2);
        super.init(p);
    }
    getAtomRadius(atom) {
        return this.aspectRatio * super.getAtomRadius(atom);
    }
    getAtomParams(what, params) {
        var p = super.getAtomParams(what, params);
        p.radiusParams.scale *= this.aspectRatio;
        return p;
    }
    getAtomData(sview, what, params) {
        return sview.getAtomData(this.getAtomParams(what, params));
    }
    getBondParams(what, params) {
        params = Object.assign({
            multipleBond: this.multipleBond,
            bondSpacing: this.bondSpacing,
            bondScale: this.bondScale
        }, params);
        return super.getBondParams(what, params);
    }
    getBondData(sview, what, params) {
        return sview.getBondData(this.getBondParams(what, params));
    }
    createData(sview) {
        const bufferList = [];
        if (this.lineOnly) {
            this.lineBuffer = new WideLineBuffer(this.getBondData(sview, { position: true, color: true, picking: true }), this.getBufferParams({ linewidth: this.linewidth }));
            bufferList.push(this.lineBuffer);
        }
        else {
            const cylinderBuffer = new CylinderBuffer(this.getBondData(sview), this.getBufferParams({
                openEnded: this.openEnded,
                radialSegments: this.radialSegments,
                disableImpostor: this.disableImpostor,
                dullInterior: true
            }));
            bufferList.push(cylinderBuffer);
            if (!this.cylinderOnly) {
                const sphereBuffer = new SphereBuffer(this.getAtomData(sview), this.getBufferParams({
                    sphereDetail: this.sphereDetail,
                    disableImpostor: this.disableImpostor,
                    dullInterior: true
                }));
                bufferList.push(sphereBuffer);
            }
        }
        return {
            bufferList: bufferList
        };
    }
    updateData(what, data) {
        if (this.multipleBond !== 'off' && what && what.radius) {
            what.position = true;
        }
        const bondData = this.getBondData(data.sview, what);
        if (this.lineOnly) {
            const lineData = {};
            if (!what || what.position) {
                Object.assign(lineData, {
                    position1: bondData.position1,
                    position2: bondData.position2
                });
            }
            if (!what || what.color) {
                Object.assign(lineData, {
                    color: bondData.color,
                    color2: bondData.color2
                });
            }
            data.bufferList[0].setAttributes(lineData);
        }
        else {
            var cylinderData = {};
            if (!what || what.position) {
                Object.assign(cylinderData, {
                    position1: bondData.position1,
                    position2: bondData.position2
                });
            }
            if (!what || what.color) {
                Object.assign(cylinderData, {
                    color: bondData.color,
                    color2: bondData.color2
                });
            }
            if (!what || what.radius) {
                Object.assign(cylinderData, {
                    radius: bondData.radius
                });
            }
            data.bufferList[0].setAttributes(cylinderData);
            if (!this.cylinderOnly) {
                var atomData = this.getAtomData(data.sview, what);
                var sphereData = {};
                if (!what || what.position) {
                    Object.assign(sphereData, {
                        position: atomData.position
                    });
                }
                if (!what || what.color) {
                    Object.assign(sphereData, {
                        color: atomData.color
                    });
                }
                if (!what || what.radius) {
                    Object.assign(sphereData, {
                        radius: atomData.radius
                    });
                }
                data.bufferList[1].setAttributes(sphereData);
            }
        }
    }
    setParameters(params = {}) {
        let rebuild = false;
        const what = {};
        if (params.aspectRatio || params.bondSpacing || params.bondScale) {
            Object.assign(what, { radius: true });
            if (!ExtensionFragDepth || this.disableImpostor) {
                rebuild = true;
            }
        }
        super.setParameters(params, what, rebuild);
        return this;
    }
}
RepresentationRegistry.add('ball+stick', BallAndStickRepresentation);

/**
 * @file Backbone Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Backbone representation. Show cylinders (or lines) connecting .CA (protein)
 * or .C4'/.C3' (RNA/DNA) of polymers.
 *
 * __Name:__ _backbone_
 *
 * @example
 * stage.loadFile( "rcsb://1sfi" ).then( function( o ){
 *     o.addRepresentation( "backbone" );
 *     o.autoView();
 * } );
 */
class BackboneRepresentation extends BallAndStickRepresentation {
    /**
     * @param  {Structure} structure - the structure object
     * @param  {Viewer} viewer - the viewer object
     * @param  {BallAndStickRepresentationParameters} params - parameters object
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'backbone';
        this.parameters = Object.assign({}, this.parameters, {
            multipleBond: null,
            bondSpacing: null
        });
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.aspectRatio = defaults(p.aspectRatio, 1.0);
        p.radiusSize = defaults(p.radiusSize, 0.25);
        super.init(p);
    }
    getAtomRadius(atom) {
        return atom.isTrace() ? super.getAtomRadius(atom) : 0;
    }
    getAtomData(sview, what, params) {
        return sview.getBackboneAtomData(this.getAtomParams(what, params));
    }
    getBondData(sview, what, params) {
        return sview.getBackboneBondData(this.getBondParams(what, params));
    }
}
RepresentationRegistry.add('backbone', BackboneRepresentation);

/**
 * @file Base Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Base representation. Show cylinders for RNA/DNA ladders.
 *
 * __Name:__ _base_
 *
 * @example
 * stage.loadFile( "rcsb://1d66" ).then( function( o ){
 *     o.addRepresentation( "cartoon", { sele: "nucleic" } );
 *     o.addRepresentation( "base", { color: "resname" } );
 *     o.autoView( "nucleic" );
 * } );
 */
class BaseRepresentation extends BallAndStickRepresentation {
    /**
     * @param  {Structure} structure - the structure object
     * @param  {Viewer} viewer - the viewer object
     * @param  {BallAndStickRepresentationParameters} params - parameters object
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'base';
        this.parameters = Object.assign({}, this.parameters, {
            multipleBond: null,
            bondSpacing: null
        });
    }
    init(params) {
        let p = params || {};
        p.aspectRatio = defaults(p.aspectRatio, 1.0);
        p.radiusSize = defaults(p.radiusSize, 0.3);
        super.init(p);
    }
    getAtomData(sview, what, params) {
        return sview.getRungAtomData(this.getAtomParams(what, params));
    }
    getBondData(sview, what, params) {
        let p = this.getBondParams(what, params);
        Object.assign(p.colorParams, { rung: true });
        return sview.getRungBondData(p);
    }
}
RepresentationRegistry.add('base', BaseRepresentation);

/**
 * @file Spline
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Interpolator {
    constructor(m, tension) {
        this.m = m;
        this.tension = tension;
        this.dt = 1.0 / this.m;
        this.delta = 0.0001;
        this.vec1 = new Vector3();
        this.vec2 = new Vector3();
        this.vDir = new Vector3();
        this.vTan = new Vector3();
        this.vNorm = new Vector3();
        this.vBin = new Vector3();
        this.m2 = Math.ceil(this.m / 2);
    }
    interpolateToArr(v0, v1, v2, v3, t, arr, offset) {
        arr[offset + 0] = spline$1(v0.x, v1.x, v2.x, v3.x, t, this.tension);
        arr[offset + 1] = spline$1(v0.y, v1.y, v2.y, v3.y, t, this.tension);
        arr[offset + 2] = spline$1(v0.z, v1.z, v2.z, v3.z, t, this.tension);
    }
    interpolateToVec(v0, v1, v2, v3, t, vec) {
        vec.x = spline$1(v0.x, v1.x, v2.x, v3.x, t, this.tension);
        vec.y = spline$1(v0.y, v1.y, v2.y, v3.y, t, this.tension);
        vec.z = spline$1(v0.z, v1.z, v2.z, v3.z, t, this.tension);
    }
    interpolatePosition(v0, v1, v2, v3, pos, offset) {
        for (var j = 0; j < this.m; ++j) {
            var l = offset + j * 3;
            var d = this.dt * j;
            this.interpolateToArr(v0, v1, v2, v3, d, pos, l);
        }
    }
    interpolateTangent(v0, v1, v2, v3, tan, offset) {
        for (var j = 0; j < this.m; ++j) {
            var d = this.dt * j;
            var d1 = d - this.delta;
            var d2 = d + this.delta;
            var l = offset + j * 3;
            // capping as a precaution
            if (d1 < 0)
                d1 = 0;
            if (d2 > 1)
                d2 = 1;
            //
            this.interpolateToVec(v0, v1, v2, v3, d1, this.vec1);
            this.interpolateToVec(v0, v1, v2, v3, d2, this.vec2);
            //
            this.vec2.sub(this.vec1).normalize();
            this.vec2.toArray(tan, l);
        }
    }
    vectorSubdivide(interpolationFn, iterator, array, offset, isCyclic) {
        let v0;
        let v1 = iterator.next();
        let v2 = iterator.next();
        let v3 = iterator.next();
        //
        const n = iterator.size;
        const n1 = n - 1;
        let k = offset || 0;
        for (let i = 0; i < n1; ++i) {
            v0 = v1;
            v1 = v2;
            v2 = v3;
            v3 = iterator.next();
            interpolationFn.apply(this, [v0, v1, v2, v3, array, k]);
            k += 3 * this.m;
        }
        if (isCyclic) {
            v0 = iterator.get(n - 2);
            v1 = iterator.get(n - 1);
            v2 = iterator.get(0);
            v3 = iterator.get(1);
            interpolationFn.apply(this, [v0, v1, v2, v3, array, k]);
            k += 3 * this.m;
        }
    }
    //
    getPosition(iterator, array, offset, isCyclic) {
        iterator.reset();
        this.vectorSubdivide(this.interpolatePosition, iterator, array, offset, isCyclic);
        var n1 = iterator.size - 1;
        var k = n1 * this.m * 3;
        if (isCyclic)
            k += this.m * 3;
        var v = iterator.get(isCyclic ? 0 : n1);
        array[k] = v.x;
        array[k + 1] = v.y;
        array[k + 2] = v.z;
    }
    getTangent(iterator, array, offset, isCyclic) {
        iterator.reset();
        this.vectorSubdivide(this.interpolateTangent, iterator, array, offset, isCyclic);
        const n1 = iterator.size - 1;
        let k = n1 * this.m * 3;
        if (isCyclic)
            k += this.m * 3;
        copyArray(array, array, k - 3, k, 3);
    }
    interpolateNormalDir(u0, u1, u2, u3, v0, v1, v2, v3, tan, norm, bin, offset, shift) {
        for (let j = 0; j < this.m; ++j) {
            let l = offset + j * 3;
            if (shift)
                l += this.m2 * 3;
            const d = this.dt * j;
            this.interpolateToVec(u0, u1, u2, u3, d, this.vec1);
            this.interpolateToVec(v0, v1, v2, v3, d, this.vec2);
            this.vDir.subVectors(this.vec2, this.vec1).normalize();
            this.vTan.fromArray(tan, l);
            this.vBin.crossVectors(this.vDir, this.vTan).normalize();
            this.vBin.toArray(bin, l);
            this.vNorm.crossVectors(this.vTan, this.vBin).normalize();
            this.vNorm.toArray(norm, l);
        }
    }
    interpolateNormal(vDir, tan, norm, bin, offset) {
        for (var j = 0; j < this.m; ++j) {
            var l = offset + j * 3;
            vDir.copy(this.vNorm);
            this.vTan.fromArray(tan, l);
            this.vBin.crossVectors(vDir, this.vTan).normalize();
            this.vBin.toArray(bin, l);
            this.vNorm.crossVectors(this.vTan, this.vBin).normalize();
            this.vNorm.toArray(norm, l);
        }
    }
    getNormal(size, tan, norm, bin, offset, isCyclic) {
        this.vNorm.set(0, 0, 1);
        const n = size;
        const n1 = n - 1;
        let k = offset || 0;
        for (var i = 0; i < n1; ++i) {
            this.interpolateNormal(this.vDir, tan, norm, bin, k);
            k += 3 * this.m;
        }
        if (isCyclic) {
            this.interpolateNormal(this.vDir, tan, norm, bin, k);
            k += 3 * this.m;
        }
        this.vBin.toArray(bin, k);
        this.vNorm.toArray(norm, k);
    }
    getNormalDir(iterDir1, iterDir2, tan, norm, bin, offset, isCyclic, shift) {
        iterDir1.reset();
        iterDir2.reset();
        //
        const vSub1 = new Vector3();
        const vSub2 = new Vector3();
        const vSub3 = new Vector3();
        const vSub4 = new Vector3();
        //
        const d1v1 = new Vector3();
        const d1v2 = new Vector3().copy(iterDir1.next());
        const d1v3 = new Vector3().copy(iterDir1.next());
        const d1v4 = new Vector3().copy(iterDir1.next());
        const d2v1 = new Vector3();
        const d2v2 = new Vector3().copy(iterDir2.next());
        const d2v3 = new Vector3().copy(iterDir2.next());
        const d2v4 = new Vector3().copy(iterDir2.next());
        //
        this.vNorm.set(0, 0, 1);
        let n = iterDir1.size;
        let n1 = n - 1;
        let k = offset || 0;
        for (var i = 0; i < n1; ++i) {
            d1v1.copy(d1v2);
            d1v2.copy(d1v3);
            d1v3.copy(d1v4);
            d1v4.copy(iterDir1.next());
            d2v1.copy(d2v2);
            d2v2.copy(d2v3);
            d2v3.copy(d2v4);
            d2v4.copy(iterDir2.next());
            //
            if (i === 0) {
                vSub1.subVectors(d2v1, d1v1);
                vSub2.subVectors(d2v2, d1v2);
                if (vSub1.dot(vSub2) < 0) {
                    vSub2.multiplyScalar(-1);
                    d2v2.addVectors(d1v2, vSub2);
                }
                vSub3.subVectors(d2v3, d1v3);
                if (vSub2.dot(vSub3) < 0) {
                    vSub3.multiplyScalar(-1);
                    d2v3.addVectors(d1v3, vSub3);
                }
            }
            else {
                vSub3.copy(vSub4);
            }
            vSub4.subVectors(d2v4, d1v4);
            if (vSub3.dot(vSub4) < 0) {
                vSub4.multiplyScalar(-1);
                d2v4.addVectors(d1v4, vSub4);
            }
            this.interpolateNormalDir(d1v1, d1v2, d1v3, d1v4, d2v1, d2v2, d2v3, d2v4, tan, norm, bin, k, shift);
            k += 3 * this.m;
        }
        if (isCyclic) {
            d1v1.copy(iterDir1.get(n - 2));
            d1v2.copy(iterDir1.get(n - 1));
            d1v3.copy(iterDir1.get(0));
            d1v4.copy(iterDir1.get(1));
            d2v1.copy(iterDir2.get(n - 2));
            d2v2.copy(iterDir2.get(n - 1));
            d2v3.copy(iterDir2.get(0));
            d2v4.copy(iterDir2.get(1));
            //
            vSub3.copy(vSub4);
            vSub4.subVectors(d2v4, d1v4);
            if (vSub3.dot(vSub4) < 0) {
                vSub4.multiplyScalar(-1);
                d2v4.addVectors(d1v4, vSub4);
            }
            this.interpolateNormalDir(d1v1, d1v2, d1v3, d1v4, d2v1, d2v2, d2v3, d2v4, tan, norm, bin, k, shift);
            k += 3 * this.m;
        }
        if (shift) {
            // FIXME shift requires data from one this.more preceeding residue
            this.vBin.fromArray(bin, this.m2 * 3);
            this.vNorm.fromArray(norm, this.m2 * 3);
            for (var j = 0; j < this.m2; ++j) {
                this.vBin.toArray(bin, j * 3);
                this.vNorm.toArray(norm, j * 3);
            }
        }
        else {
            this.vBin.toArray(bin, k);
            this.vNorm.toArray(norm, k);
        }
    }
    //
    interpolateColor(item1, item2, colFn, col, offset) {
        var j, l;
        for (j = 0; j < this.m2; ++j) {
            l = offset + j * 3;
            colFn.apply(this, [item1, col, l]); // itemColorToArray
        }
        for (j = this.m2; j < this.m; ++j) {
            l = offset + j * 3;
            colFn.apply(this, [item2, col, l]); // itemColorToArray
        }
    }
    getColor(iterator, colFn, col, offset, isCyclic) {
        iterator.reset();
        iterator.next(); // first element not needed
        let i0;
        let i1 = iterator.next();
        //
        var n = iterator.size;
        var n1 = n - 1;
        var k = offset || 0;
        for (var i = 0; i < n1; ++i) {
            i0 = i1;
            i1 = iterator.next();
            this.interpolateColor(i0, i1, colFn, col, k);
            k += 3 * this.m;
        }
        if (isCyclic) {
            i0 = iterator.get(n - 1);
            i1 = iterator.get(0);
            this.interpolateColor(i0, i1, colFn, col, k);
            k += 3 * this.m;
        }
        //
        col[k] = col[k - 3];
        col[k + 1] = col[k - 2];
        col[k + 2] = col[k - 1];
    }
    //
    interpolatePicking(item1, item2, pickFn, pick, offset) {
        var j;
        for (j = 0; j < this.m2; ++j) {
            pick[offset + j] = pickFn.apply(this, [item1]);
        }
        for (j = this.m2; j < this.m; ++j) {
            pick[offset + j] = pickFn.apply(this, [item2]);
        }
    }
    getPicking(iterator, pickFn, pick, offset, isCyclic) {
        iterator.reset();
        iterator.next(); // first element not needed
        let i0;
        let i1 = iterator.next();
        //
        const n = iterator.size;
        const n1 = n - 1;
        let k = offset || 0;
        for (var i = 0; i < n1; ++i) {
            i0 = i1;
            i1 = iterator.next();
            this.interpolatePicking(i0, i1, pickFn, pick, k);
            k += this.m;
        }
        if (isCyclic) {
            i0 = iterator.get(n - 1);
            i1 = iterator.get(0);
            this.interpolatePicking(i0, i1, pickFn, pick, k);
            k += this.m;
        }
        //
        pick[k] = pick[k - 1];
    }
    //
    interpolateSize(item1, item2, sizeFn, size, offset) {
        const s1 = sizeFn.apply(this, [item1]);
        const s2 = sizeFn.apply(this, [item2]);
        for (let j = 0; j < this.m; ++j) {
            // linear interpolation
            let t = j / this.m;
            size[offset + j] = (1 - t) * s1 + t * s2;
        }
    }
    getSize(iterator, sizeFn, size, offset, isCyclic) {
        iterator.reset();
        iterator.next(); // first element not needed
        let i0;
        let i1 = iterator.next();
        //
        const n = iterator.size;
        const n1 = n - 1;
        let k = offset || 0;
        for (var i = 0; i < n1; ++i) {
            i0 = i1;
            i1 = iterator.next();
            this.interpolateSize(i0, i1, sizeFn, size, k);
            k += this.m;
        }
        if (isCyclic) {
            i0 = iterator.get(n - 1);
            i1 = iterator.get(0);
            this.interpolateSize(i0, i1, sizeFn, size, k);
            k += this.m;
        }
        //
        size[k] = size[k - 1];
    }
}
class Spline {
    constructor(polymer, params) {
        this.polymer = polymer;
        this.size = polymer.residueCount;
        var p = params || {};
        this.directional = p.directional || false;
        this.positionIterator = p.positionIterator || false;
        this.subdiv = p.subdiv || 1;
        this.smoothSheet = p.smoothSheet || false;
        if (!p.tension) {
            this.tension = this.polymer.isNucleic() ? 0.5 : 0.9;
        }
        else {
            this.tension = p.tension;
        }
        this.interpolator = new Interpolator(this.subdiv, this.tension);
    }
    getAtomIterator(type, smooth) {
        const polymer = this.polymer;
        const structure = polymer.structure;
        const n = polymer.residueCount;
        let i = 0;
        let j = -1;
        const cache = [
            structure.getAtomProxy(),
            structure.getAtomProxy(),
            structure.getAtomProxy(),
            structure.getAtomProxy()
        ];
        const cache2 = [
            new Vector3(),
            new Vector3(),
            new Vector3(),
            new Vector3()
        ];
        function next() {
            var atomProxy = get(j);
            j += 1;
            return atomProxy;
        }
        var apPrev = structure.getAtomProxy();
        var apNext = structure.getAtomProxy();
        function get(idx) {
            var atomProxy = cache[i % 4];
            atomProxy.index = polymer.getAtomIndexByType(idx, type);
            if (smooth && idx > 0 && idx < n && atomProxy.sstruc === 'e') {
                var vec = cache2[i % 4];
                apPrev.index = polymer.getAtomIndexByType(idx + 1, type);
                apNext.index = polymer.getAtomIndexByType(idx - 1, type);
                vec.addVectors(apPrev, apNext)
                    .add(atomProxy).add(atomProxy)
                    .multiplyScalar(0.25);
                i += 1;
                return vec;
            }
            i += 1;
            return atomProxy;
        }
        function reset() {
            i = 0;
            j = -1;
        }
        return {
            size: n,
            next: next,
            get: get,
            reset: reset
        };
    }
    getSubdividedColor(params) {
        var m = this.subdiv;
        var polymer = this.polymer;
        var n = polymer.residueCount;
        var n1 = n - 1;
        var nCol = n1 * m * 3 + 3;
        if (polymer.isCyclic)
            nCol += m * 3;
        var col = new Float32Array(nCol);
        var iterator = this.getAtomIterator('trace');
        var p = params || {};
        p.structure = polymer.structure;
        var colormaker = ColormakerRegistry.getScheme(p);
        function colFn(item, array, offset) {
            colormaker.atomColorToArray(item, array, offset);
        }
        this.interpolator.getColor(iterator, colFn, col, 0, polymer.isCyclic);
        return {
            'color': col
        };
    }
    getSubdividedPicking() {
        var m = this.subdiv;
        var polymer = this.polymer;
        var n = polymer.residueCount;
        var n1 = n - 1;
        var nCol = n1 * m + 1;
        if (polymer.isCyclic)
            nCol += m;
        var structure = polymer.structure;
        var iterator = this.getAtomIterator('trace');
        var pick = new Float32Array(nCol);
        function pickFn(item) {
            return item.index;
        }
        this.interpolator.getPicking(iterator, pickFn, pick, 0, polymer.isCyclic);
        return {
            'picking': new AtomPicker(pick, structure)
        };
    }
    getSubdividedPosition() {
        var pos = this.getPosition();
        return {
            'position': pos
        };
    }
    getSubdividedOrientation() {
        const tan = this.getTangent();
        const normals = this.getNormals(tan);
        return {
            'tangent': tan,
            'normal': normals.normal,
            'binormal': normals.binormal
        };
    }
    getSubdividedSize(params) {
        var m = this.subdiv;
        var polymer = this.polymer;
        var n = polymer.residueCount;
        var n1 = n - 1;
        var nSize = n1 * m + 1;
        if (polymer.isCyclic)
            nSize += m;
        var size = new Float32Array(nSize);
        var iterator = this.getAtomIterator('trace');
        var radiusFactory = new RadiusFactory(params);
        function sizeFn(item) {
            return radiusFactory.atomRadius(item);
        }
        this.interpolator.getSize(iterator, sizeFn, size, 0, polymer.isCyclic);
        return {
            'size': size
        };
    }
    getPosition() {
        const m = this.subdiv;
        const polymer = this.polymer;
        const n = polymer.residueCount;
        const n1 = n - 1;
        let nPos = n1 * m * 3 + 3;
        if (polymer.isCyclic)
            nPos += m * 3;
        const pos = new Float32Array(nPos);
        const iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);
        this.interpolator.getPosition(iterator, pos, 0, polymer.isCyclic);
        return pos;
    }
    getTangent() {
        const m = this.subdiv;
        const polymer = this.polymer;
        const n = this.size;
        const n1 = n - 1;
        let nTan = n1 * m * 3 + 3;
        if (polymer.isCyclic)
            nTan += m * 3;
        const tan = new Float32Array(nTan);
        const iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);
        this.interpolator.getTangent(iterator, tan, 0, polymer.isCyclic);
        return tan;
    }
    getNormals(tan) {
        const m = this.subdiv;
        const polymer = this.polymer;
        const isProtein = polymer.isProtein();
        const n = this.size;
        const n1 = n - 1;
        let nNorm = n1 * m * 3 + 3;
        if (polymer.isCyclic)
            nNorm += m * 3;
        const norm = new Float32Array(nNorm);
        const bin = new Float32Array(nNorm);
        if (this.directional && !this.polymer.isCg()) {
            const iterDir1 = this.getAtomIterator('direction1');
            const iterDir2 = this.getAtomIterator('direction2');
            this.interpolator.getNormalDir(iterDir1, iterDir2, tan, norm, bin, 0, polymer.isCyclic, isProtein);
        }
        else {
            this.interpolator.getNormal(n, tan, norm, bin, 0, polymer.isCyclic);
        }
        return {
            'normal': norm,
            'binormal': bin
        };
    }
}

/**
 * @file Tube Mesh Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const vTangent = new Vector3();
const vMeshNormal = new Vector3();
const TubeMeshBufferDefaultParameters = Object.assign({
    radialSegments: 4,
    capped: false,
    aspectRatio: 1.0
}, BufferDefaultParameters);
function getData(data, params = {}) {
    const radialSegments = defaults(params.radialSegments, 4);
    const capped = defaults(params.capped, false);
    const capVertices = capped ? radialSegments : 0;
    const capTriangles = capped ? radialSegments - 2 : 0;
    const n = data.position.length / 3;
    const n1 = n - 1;
    const x = n * radialSegments * 3 + 2 * capVertices * 3;
    const xi = n1 * 2 * radialSegments * 3 + 2 * capTriangles * 3;
    return {
        position: new Float32Array(x),
        color: new Float32Array(x),
        index: getUintArray(xi, x / 3),
        normal: new Float32Array(x),
        picking: data.picking
    };
}
/**
 * Tube mesh buffer. Draws a tube.
 */
class TubeMeshBuffer extends MeshBuffer {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.normal - normals
     * @param  {Float32Array} data.binormal - binormals
     * @param  {Float32Array} data.tangent - tangents
     * @param  {Float32Array} data.color - colors
     * @param  {Float32Array} data.size - sizes
     * @param  {Picker} data.picking - picking ids
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super(getData(data, params), params);
        this.capVertices = this.parameters.capped ? this.parameters.radialSegments : 0;
        this.capTriangles = this.parameters.capped ? this.parameters.radialSegments - 2 : 0;
        this.size2 = data.position.length / 3;
        data.primitiveId = serialArray(this.size2);
        this.setAttributes(data);
        this.makeIndex();
    }
    get defaultParameters() { return TubeMeshBufferDefaultParameters; }
    setAttributes(data = {}) {
        const aspectRatio = this.parameters.aspectRatio;
        const n = this.size2;
        const n1 = n - 1;
        const radialSegments = this.parameters.radialSegments;
        const attributes = this.geometry.attributes;
        let position, normal, binormal, tangent, color, size, primitiveId;
        let meshPosition, meshColor, meshNormal, meshPrimitiveId;
        if (data.position) {
            position = data.position;
            normal = data.normal;
            binormal = data.binormal;
            tangent = data.tangent;
            size = data.size;
            meshPosition = attributes.position.array;
            meshNormal = attributes.normal.array;
            attributes.position.needsUpdate = true;
            attributes.normal.needsUpdate = true;
        }
        if (data.color) {
            color = data.color;
            meshColor = attributes.color.array;
            attributes.color.needsUpdate = true;
        }
        if (data.primitiveId) {
            primitiveId = data.primitiveId;
            meshPrimitiveId = attributes.primitiveId.array;
            attributes.primitiveId.needsUpdate = true;
        }
        let k, l;
        let radius = 0;
        let normX = 0;
        let normY = 0;
        let normZ = 0;
        let biX = 0;
        let biY = 0;
        let biZ = 0;
        let posX = 0;
        let posY = 0;
        let posZ = 0;
        const cxArr = [];
        const cyArr = [];
        const cx1Arr = [];
        const cy1Arr = [];
        const cx2Arr = [];
        const cy2Arr = [];
        if (position) {
            for (let j = 0; j < radialSegments; ++j) {
                const v = (j / radialSegments) * 2 * Math.PI;
                cxArr[j] = aspectRatio * Math.cos(v);
                cyArr[j] = Math.sin(v);
                cx1Arr[j] = aspectRatio * Math.cos(v - 0.01);
                cy1Arr[j] = Math.sin(v - 0.01);
                cx2Arr[j] = aspectRatio * Math.cos(v + 0.01);
                cy2Arr[j] = Math.sin(v + 0.01);
            }
        }
        for (let i = 0; i < n; ++i) {
            k = i * 3;
            l = k * radialSegments;
            if (position && tangent && normal && binormal && size) {
                vTangent.set(tangent[k], tangent[k + 1], tangent[k + 2]);
                normX = normal[k];
                normY = normal[k + 1];
                normZ = normal[k + 2];
                biX = binormal[k];
                biY = binormal[k + 1];
                biZ = binormal[k + 2];
                posX = position[k];
                posY = position[k + 1];
                posZ = position[k + 2];
                radius = size[i];
            }
            for (let j = 0; j < radialSegments; ++j) {
                const s = l + j * 3;
                if (position) {
                    const cx = -radius * cxArr[j]; // TODO: Hack: Negating it so it faces outside.
                    const cy = radius * cyArr[j];
                    const cx1 = -radius * cx1Arr[j];
                    const cy1 = radius * cy1Arr[j];
                    const cx2 = -radius * cx2Arr[j];
                    const cy2 = radius * cy2Arr[j];
                    meshPosition[s] = posX + cx * normX + cy * biX;
                    meshPosition[s + 1] = posY + cx * normY + cy * biY;
                    meshPosition[s + 2] = posZ + cx * normZ + cy * biZ;
                    // TODO half of these are symmetric
                    vMeshNormal.set(
                    // ellipse tangent approximated as vector from/to adjacent points
                    (cx2 * normX + cy2 * biX) - (cx1 * normX + cy1 * biX), (cx2 * normY + cy2 * biY) - (cx1 * normY + cy1 * biY), (cx2 * normZ + cy2 * biZ) - (cx1 * normZ + cy1 * biZ)).cross(vTangent);
                    meshNormal[s] = vMeshNormal.x;
                    meshNormal[s + 1] = vMeshNormal.y;
                    meshNormal[s + 2] = vMeshNormal.z;
                }
                if (color) {
                    meshColor[s] = color[k];
                    meshColor[s + 1] = color[k + 1];
                    meshColor[s + 2] = color[k + 2];
                }
                if (primitiveId) {
                    meshPrimitiveId[i * radialSegments + j] = primitiveId[i];
                }
            }
        }
        // front cap
        k = 0;
        l = n * 3 * radialSegments;
        for (let j = 0; j < radialSegments; ++j) {
            const s = k + j * 3;
            const t = l + j * 3;
            if (position && tangent) {
                meshPosition[t] = meshPosition[s];
                meshPosition[t + 1] = meshPosition[s + 1];
                meshPosition[t + 2] = meshPosition[s + 2];
                meshNormal[t] = tangent[k];
                meshNormal[t + 1] = tangent[k + 1];
                meshNormal[t + 2] = tangent[k + 2];
            }
            if (color) {
                meshColor[t] = meshColor[s];
                meshColor[t + 1] = meshColor[s + 1];
                meshColor[t + 2] = meshColor[s + 2];
            }
            if (primitiveId) {
                meshPrimitiveId[n * radialSegments + j] = meshPrimitiveId[0 + j];
            }
        }
        // back cap
        k = (n - 1) * 3 * radialSegments;
        l = (n + 1) * 3 * radialSegments;
        for (let j = 0; j < radialSegments; ++j) {
            const s = k + j * 3;
            const t = l + j * 3;
            if (position && tangent) {
                meshPosition[t] = meshPosition[s];
                meshPosition[t + 1] = meshPosition[s + 1];
                meshPosition[t + 2] = meshPosition[s + 2];
                meshNormal[t] = tangent[n1 * 3];
                meshNormal[t + 1] = tangent[n1 * 3 + 1];
                meshNormal[t + 2] = tangent[n1 * 3 + 2];
            }
            if (color) {
                meshColor[t] = meshColor[s];
                meshColor[t + 1] = meshColor[s + 1];
                meshColor[t + 2] = meshColor[s + 2];
            }
            if (primitiveId) {
                meshPrimitiveId[(n + 1) * radialSegments + j] = meshPrimitiveId[(n - 1) * radialSegments + j];
            }
        }
    }
    makeIndex() {
        const index = this.geometry.getIndex();
        if (!index) {
            Log.error('Index is null');
            return;
        }
        const meshIndex = index.array;
        const n = this.size2;
        const n1 = n - 1;
        const capTriangles = this.capTriangles;
        const radialSegments = this.parameters.radialSegments;
        const radialSegments1 = this.parameters.radialSegments + 1;
        let k, l;
        for (let i = 0; i < n1; ++i) {
            const k = i * radialSegments * 3 * 2;
            const irs = i * radialSegments;
            const irs1 = (i + 1) * radialSegments;
            for (let j = 0; j < radialSegments; ++j) {
                l = k + j * 3 * 2;
                // meshIndex[ l + 0 ] = irs + ( ( j + 0 ) % radialSegments );
                meshIndex[l] = irs + j;
                meshIndex[l + 1] = irs + ((j + 1) % radialSegments);
                // meshIndex[ l + 2 ] = irs1 + ( ( j + 0 ) % radialSegments );
                meshIndex[l + 2] = irs1 + j;
                // meshIndex[ l + 3 ] = irs1 + ( ( j + 0 ) % radialSegments );
                meshIndex[l + 3] = irs1 + j;
                meshIndex[l + 4] = irs + ((j + 1) % radialSegments);
                meshIndex[l + 5] = irs1 + ((j + 1) % radialSegments);
            }
        }
        // capping
        const strip = [0];
        for (let j = 1; j < radialSegments1 / 2; ++j) {
            strip.push(j);
            if (radialSegments - j !== j) {
                strip.push(radialSegments - j);
            }
        }
        // front cap
        l = n1 * radialSegments * 3 * 2;
        k = n * radialSegments;
        for (let j = 0; j < strip.length - 2; ++j) {
            if (j % 2 === 0) {
                meshIndex[l + j * 3 + 0] = k + strip[j + 0];
                meshIndex[l + j * 3 + 1] = k + strip[j + 1];
                meshIndex[l + j * 3 + 2] = k + strip[j + 2];
            }
            else {
                meshIndex[l + j * 3 + 0] = k + strip[j + 2];
                meshIndex[l + j * 3 + 1] = k + strip[j + 1];
                meshIndex[l + j * 3 + 2] = k + strip[j + 0];
            }
        }
        // back cap
        l = n1 * radialSegments * 3 * 2 + 3 * capTriangles;
        k = n * radialSegments + radialSegments;
        for (let j = 0; j < strip.length - 2; ++j) {
            if (j % 2 === 0) {
                meshIndex[l + j * 3 + 0] = k + strip[j + 0];
                meshIndex[l + j * 3 + 1] = k + strip[j + 1];
                meshIndex[l + j * 3 + 2] = k + strip[j + 2];
            }
            else {
                meshIndex[l + j * 3 + 0] = k + strip[j + 2];
                meshIndex[l + j * 3 + 1] = k + strip[j + 1];
                meshIndex[l + j * 3 + 2] = k + strip[j + 0];
            }
        }
    }
}

/**
 * @file Cartoon Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Cartoon representation. Show a thick ribbon that
 * smoothly connecting backbone atoms in polymers.
 *
 * __Name:__ _cartoon_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "cartoon" );
 *     o.autoView();
 * } );
 */
class CartoonRepresentation extends StructureRepresentation {
    /**
     * Create Cartoon representation object
     * @param {Structure} structure - the structure to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {StructureRepresentationParameters} params - representation parameters
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'cartoon';
        this.parameters = Object.assign({
            aspectRatio: {
                type: 'number', precision: 1, max: 10.0, min: 1.0, rebuild: true
            },
            subdiv: {
                type: 'integer', max: 50, min: 1, rebuild: true
            },
            radialSegments: {
                type: 'integer', max: 50, min: 1, rebuild: true
            },
            tension: {
                type: 'number', precision: 1, max: 1.0, min: 0.1
            },
            capped: {
                type: 'boolean', rebuild: true
            },
            smoothSheet: {
                type: 'boolean', rebuild: true
            }
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'chainname');
        p.colorScale = defaults(p.colorScale, 'RdYlBu');
        p.radiusType = defaults(p.radiusType, 'sstruc');
        p.radiusScale = defaults(p.radiusScale, 0.7);
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        this.aspectRatio = defaults(p.aspectRatio, 5.0);
        this.tension = defaults(p.tension, NaN);
        this.capped = defaults(p.capped, true);
        this.smoothSheet = defaults(p.smoothSheet, false);
        if (p.quality === 'low') {
            this.subdiv = 3;
            this.radialSegments = 6;
        }
        else if (p.quality === 'medium') {
            this.subdiv = 6;
        }
        else if (p.quality === 'high') {
            this.subdiv = 12;
        }
        else {
            this.subdiv = defaults(p.subdiv, 6);
        }
        super.init(p);
    }
    getSplineParams(params) {
        return Object.assign({
            subdiv: this.subdiv,
            tension: this.tension,
            directional: this.aspectRatio !== 1.0,
            smoothSheet: this.smoothSheet
        }, params);
    }
    getSpline(polymer) {
        return new Spline(polymer, this.getSplineParams());
    }
    getAspectRatio(polymer) {
        return polymer.isCg() ? 1.0 : this.aspectRatio;
    }
    getAtomRadius(atom) {
        return atom.isTrace() ? super.getAtomRadius(atom) : 0;
    }
    createData(sview) {
        let bufferList = [];
        let polymerList = [];
        this.structure.eachPolymer(polymer => {
            if (polymer.residueCount < 4)
                return;
            polymerList.push(polymer);
            const spline = this.getSpline(polymer);
            const aspectRatio = this.getAspectRatio(polymer);
            const subPos = spline.getSubdividedPosition();
            const subOri = spline.getSubdividedOrientation();
            const subCol = spline.getSubdividedColor(this.getColorParams());
            const subPick = spline.getSubdividedPicking();
            const subSize = spline.getSubdividedSize(this.getRadiusParams());
            bufferList.push(new TubeMeshBuffer(Object.assign({}, subPos, subOri, subCol, subPick, subSize), this.getBufferParams({
                radialSegments: this.radialSegments,
                aspectRatio: aspectRatio,
                capped: this.capped
            })));
        }, sview.getSelection());
        return {
            bufferList: bufferList,
            polymerList: polymerList
        };
    }
    updateData(what, data) {
        if (Debug)
            Log.time(this.type + ' repr update');
        what = what || {};
        for (var i = 0, il = data.polymerList.length; i < il; ++i) {
            var bufferData = {};
            var polymer = data.polymerList[i];
            var spline = this.getSpline(polymer);
            var aspectRatio = this.getAspectRatio(polymer);
            Object.assign(data.bufferList[i], { aspectRatio: aspectRatio });
            if (what.position || what.radius) {
                var subPos = spline.getSubdividedPosition();
                var subOri = spline.getSubdividedOrientation();
                var subSize = spline.getSubdividedSize(this.getRadiusParams(aspectRatio));
                bufferData.position = subPos.position;
                bufferData.normal = subOri.normal;
                bufferData.binormal = subOri.binormal;
                bufferData.tangent = subOri.tangent;
                bufferData.size = subSize.size;
            }
            if (what.color) {
                var subCol = spline.getSubdividedColor(this.getColorParams());
                bufferData.color = subCol.color;
            }
            if (what.picking) {
                var subPick = spline.getSubdividedPicking();
                bufferData.picking = subPick.picking;
            }
            data.bufferList[i].setAttributes(bufferData);
        }
        if (Debug)
            Log.timeEnd(this.type + ' repr update');
    }
    setParameters(params) {
        const rebuild = false;
        var what = {};
        if (params && params.aspectRatio) {
            what.radius = true;
        }
        if (params && params.tension) {
            what.position = true;
        }
        super.setParameters(params, what, rebuild);
        return this;
    }
}
RepresentationRegistry.add('cartoon', CartoonRepresentation);

/**
 * @file Contact Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Contact representation.
 */
class ContactRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'contact';
        this.parameters = Object.assign({
            hydrogenBond: {
                type: 'boolean', rebuild: true
            },
            weakHydrogenBond: {
                type: 'boolean', rebuild: true
            },
            waterHydrogenBond: {
                type: 'boolean', rebuild: true
            },
            backboneHydrogenBond: {
                type: 'boolean', rebuild: true
            },
            hydrophobic: {
                type: 'boolean', rebuild: true
            },
            halogenBond: {
                type: 'boolean', rebuild: true
            },
            ionicInteraction: {
                type: 'boolean', rebuild: true
            },
            metalCoordination: {
                type: 'boolean', rebuild: true
            },
            cationPi: {
                type: 'boolean', rebuild: true
            },
            piStacking: {
                type: 'boolean', rebuild: true
            },
            filterSele: {
                type: 'text', rebuild: true
            },
            labelVisible: {
                type: 'boolean', rebuild: true
            },
            labelFixedSize: {
                type: 'boolean', buffer: 'fixedSize'
            },
            labelSize: {
                type: 'number', precision: 3, max: 10.0, min: 0.001, rebuild: true
            },
            labelUnit: {
                type: 'select',
                rebuild: true,
                options: { '': '', angstrom: 'angstrom', nm: 'nm' }
            },
            maxHydrophobicDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxHbondDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxHbondSulfurDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxHbondAccAngle: {
                type: 'integer', max: 180, min: 0, rebuild: true
            },
            maxHbondDonAngle: {
                type: 'integer', max: 180, min: 0, rebuild: true
            },
            maxHbondAccPlaneAngle: {
                type: 'integer', max: 90, min: 0, rebuild: true
            },
            maxHbondDonPlaneAngle: {
                type: 'integer', max: 90, min: 0, rebuild: true
            },
            maxPiStackingDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxPiStackingOffset: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxPiStackingAngle: {
                type: 'integer', max: 180, min: 0, rebuild: true
            },
            maxCationPiDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxCationPiOffset: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxIonicDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxHalogenBondDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            maxHalogenBondAngle: {
                type: 'integer', max: 180, min: 0, rebuild: true
            },
            maxMetalDist: {
                type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
            },
            refineSaltBridges: {
                type: 'boolean', rebuild: true
            },
            masterModelIndex: {
                type: 'integer', max: 1000, min: -1, rebuild: true
            },
            lineOfSightDistFactor: {
                type: 'number', precision: 1, max: 10, min: 0.0, rebuild: true
            },
            radialSegments: true,
            disableImpostor: true
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.radiusSize = defaults(p.radiusSize, 0.05);
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        this.hydrogenBond = defaults(p.hydrogenBond, true);
        this.weakHydrogenBond = defaults(p.weakHydrogenBond, false);
        this.waterHydrogenBond = defaults(p.waterHydrogenBond, false);
        this.backboneHydrogenBond = defaults(p.backboneHydrogenBond, false);
        this.hydrophobic = defaults(p.hydrophobic, false);
        this.halogenBond = defaults(p.halogenBond, true);
        this.ionicInteraction = defaults(p.ionicInteraction, true);
        this.metalCoordination = defaults(p.metalCoordination, true);
        this.cationPi = defaults(p.cationPi, true);
        this.piStacking = defaults(p.piStacking, true);
        this.filterSele = defaults(p.filterSele, '');
        this.labelVisible = defaults(p.labelVisible, false);
        this.labelFixedSize = defaults(p.labelFixedSize, false);
        this.labelSize = defaults(p.labelSize, 2.0);
        this.labelUnit = defaults(p.labelUnit, '');
        this.maxHydrophobicDist = defaults(p.maxHydrophobicDist, 4.0);
        this.maxHbondDist = defaults(p.maxHbondDist, 3.5);
        this.maxHbondSulfurDist = defaults(p.maxHbondSulfurDist, 4.1);
        this.maxHbondAccAngle = defaults(p.maxHbondAccAngle, 45);
        this.maxHbondDonAngle = defaults(p.maxHbondDonAngle, 45);
        this.maxHbondAccPlaneAngle = defaults(p.maxHbondAccPlaneAngle, 90);
        this.maxHbondDonPlaneAngle = defaults(p.maxHbondDonPlaneAngle, 30);
        this.maxPiStackingDist = defaults(p.maxPiStackingDist, 5.5);
        this.maxPiStackingOffset = defaults(p.maxPiStackingOffset, 2.0);
        this.maxPiStackingAngle = defaults(p.maxPiStackingAngle, 30);
        this.maxCationPiDist = defaults(p.maxCationPiDist, 6.0);
        this.maxCationPiOffset = defaults(p.maxCationPiOffset, 2.0);
        this.maxIonicDist = defaults(p.maxIonicDist, 5.0);
        this.maxHalogenBondDist = defaults(p.maxHalogenBondDist, 3.5);
        this.maxHalogenBondAngle = defaults(p.maxHalogenBondAngle, 30);
        this.maxMetalDist = defaults(p.maxMetalDist, 3.0);
        this.refineSaltBridges = defaults(p.refineSaltBridges, true);
        this.masterModelIndex = defaults(p.masterModelIndex, -1);
        this.lineOfSightDistFactor = defaults(p.lineOfSightDistFactor, 1.0);
        super.init(p);
    }
    getAtomRadius() {
        return 0;
    }
    getContactData(sview) {
        const params = {
            maxHydrophobicDist: this.maxHydrophobicDist,
            maxHbondDist: this.maxHbondDist,
            maxHbondSulfurDist: this.maxHbondSulfurDist,
            maxHbondAccAngle: this.maxHbondAccAngle,
            maxHbondDonAngle: this.maxHbondDonAngle,
            maxHbondAccPlaneAngle: this.maxHbondAccPlaneAngle,
            maxHbondDonPlaneAngle: this.maxHbondDonPlaneAngle,
            maxPiStackingDist: this.maxPiStackingDist,
            maxPiStackingOffset: this.maxPiStackingOffset,
            maxPiStackingAngle: this.maxPiStackingAngle,
            maxCationPiDist: this.maxCationPiDist,
            maxCationPiOffset: this.maxCationPiOffset,
            maxIonicDist: this.maxIonicDist,
            maxHalogenBondDist: this.maxHalogenBondDist,
            maxHalogenBondAngle: this.maxHalogenBondAngle,
            maxMetalDist: this.maxMetalDist,
            refineSaltBridges: this.refineSaltBridges,
            masterModelIndex: this.masterModelIndex,
            lineOfSightDistFactor: this.lineOfSightDistFactor
        };
        const dataParams = {
            hydrogenBond: this.hydrogenBond,
            weakHydrogenBond: this.weakHydrogenBond,
            waterHydrogenBond: this.waterHydrogenBond,
            backboneHydrogenBond: this.backboneHydrogenBond,
            hydrophobic: this.hydrophobic,
            halogenBond: this.halogenBond,
            ionicInteraction: this.ionicInteraction,
            metalCoordination: this.metalCoordination,
            cationPi: this.cationPi,
            piStacking: this.piStacking,
            radius: this.radiusSize * this.radiusScale,
            filterSele: this.filterSele
        };
        const contacts = calculateContacts(sview, params);
        return getContactData(contacts, sview, dataParams);
    }
    createData(sview) {
        const contactData = this.getContactData(sview);
        const bufferList = [
            new CylinderBuffer(getFixedCountDashData(contactData), this.getBufferParams({
                sphereDetail: 1,
                dullInterior: true,
                disableImpostor: this.disableImpostor
            }))
        ];
        if (this.labelVisible) {
            const labelParams = {
                size: this.labelSize,
                unit: this.labelUnit
            };
            bufferList.push(new TextBuffer(getLabelData(contactData, labelParams), this.getBufferParams({ fixedSize: this.labelFixedSize })));
        }
        return { bufferList };
    }
}
RepresentationRegistry.add('contact', ContactRepresentation);

/**
 * @file Dihedral Representation
 * @author Fred Ludlow <fred.ludlow@gmail.com>
 * @private
 */
/**
 * Dihedral representation object
 *
 * Reperesentation consists of three parts, visibility can be set for each
 * label - text label indicating dihedral angle
 * line - line indicating four positions that define the dihedral
 * sector - filled arc section
 *
 * @param {Structure} structure - the structure to measure angles in
 * @param {Viewer} viewer - a viewer object
 * @param {AngleRepresentationParameters} params - angle representation parameters
 */
class DihedralRepresentation extends MeasurementRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'dihedral';
        this.parameters = Object.assign({
            atomQuad: {
                type: 'hidden', rebuild: true
            },
            extendLine: {
                type: 'boolean', rebuild: true, default: true
            },
            lineVisible: {
                type: 'boolean', default: true
            },
            planeVisible: {
                type: 'boolean', default: true
            },
            sectorVisible: {
                type: 'boolean', default: true
            }
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.side = defaults(p.side, 'double');
        p.opacity = defaults(p.opacity, 0.5);
        this.atomQuad = defaults(p.atomQuad, []);
        this.extendLine = defaults(p.extendLine, true);
        this.lineVisible = defaults(p.lineVisible, true);
        this.planeVisible = defaults(p.planeVisible, true);
        this.sectorVisible = defaults(p.sectorVisible, true);
        super.init(p);
    }
    createData(sview) {
        if (!sview.atomCount || !this.atomQuad.length)
            return;
        const atomPosition = parseNestedAtoms(sview, this.atomQuad);
        const dihedralData = getDihedralData(atomPosition, {
            extendLine: this.extendLine
        });
        const n = this.n = dihedralData.labelText.length;
        const labelColor = new Color(this.labelColor);
        this.textBuffer = new TextBuffer({
            position: dihedralData.labelPosition,
            size: uniformArray(n, this.labelSize),
            color: uniformArray3(n, labelColor.r, labelColor.g, labelColor.b),
            text: dihedralData.labelText
        }, this.getLabelBufferParams());
        const c = new Color(this.colorValue);
        this.lineLength = dihedralData.linePosition1.length / 3;
        const lineColor = uniformArray3(this.lineLength, c.r, c.g, c.b);
        this.lineBuffer = new WideLineBuffer(getFixedLengthWrappedDashData({
            position1: dihedralData.linePosition1,
            position2: dihedralData.linePosition2,
            color: lineColor,
            color2: lineColor
        }), this.getBufferParams({
            linewidth: this.linewidth,
            visible: this.lineVisible,
            opacity: this.lineOpacity
        }));
        this.planeLength = dihedralData.planePosition.length / 3;
        this.planeBuffer = new MeshBuffer({
            position: dihedralData.planePosition,
            color: uniformArray3(this.planeLength, c.r, c.g, c.b)
        }, this.getBufferParams({
            visible: this.planeVisible
        }));
        this.sectorLength = dihedralData.sectorPosition.length / 3;
        this.sectorBuffer = new MeshBuffer({
            position: dihedralData.sectorPosition,
            color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
        }, this.getBufferParams({
            visible: this.sectorVisible
        }));
        return {
            bufferList: [
                this.textBuffer,
                this.lineBuffer,
                this.planeBuffer,
                this.sectorBuffer
            ]
        };
    }
    updateData(what, data) {
        super.updateData(what, data);
        const lineData = {};
        const planeData = {};
        const sectorData = {};
        if (what.color) {
            const c = new Color(this.colorValue);
            Object.assign(lineData, {
                color: uniformArray3(this.lineLength, c.r, c.g, c.b),
                color2: uniformArray3(this.lineLength, c.r, c.g, c.b)
            });
            Object.assign(planeData, {
                color: uniformArray3(this.planeLength, c.r, c.g, c.b)
            });
            Object.assign(sectorData, {
                color: uniformArray3(this.sectorLength, c.r, c.g, c.b)
            });
        }
        this.lineBuffer.setAttributes(lineData);
        this.planeBuffer.setAttributes(planeData);
        this.sectorBuffer.setAttributes(sectorData);
    }
    setParameters(params) {
        var rebuild = false;
        var what = {};
        super.setParameters(params, what, rebuild);
        if (params && (params.lineVisible !== undefined ||
            params.sectorVisible !== undefined ||
            params.planeVisible !== undefined)) {
            this.setVisibility(this.visible);
        }
        if (params && params.lineOpacity) {
            this.lineBuffer.setParameters({ opacity: params.lineOpacity });
        }
        if (params && params.opacity !== undefined) {
            this.lineBuffer.setParameters({ opacity: this.lineOpacity });
        }
        if (params && params.linewidth) {
            this.lineBuffer.setParameters({ linewidth: params.linewidth });
        }
        return this;
    }
    setVisibility(value, noRenderRequest) {
        super.setVisibility(value, true);
        if (this.lineBuffer) {
            this.lineBuffer.setVisibility(this.lineVisible && this.visible);
        }
        if (this.planeBuffer) {
            this.planeBuffer.setVisibility(this.planeVisible && this.visible);
        }
        if (this.sectorBuffer) {
            this.sectorBuffer.setVisibility(this.sectorVisible && this.visible);
        }
        if (!noRenderRequest)
            this.viewer.requestRender();
        return this;
    }
}
/**
 * Build the data required to create {Buffer} objects, given positions
 * @param  {Float32Array} atomPosition 3*4*nDihedral array of coordinates
 * @return {Object}              Arrays for building buffers
 */
function getDihedralData(position, params = {}) {
    const angleStep = defaults(params.angleStep, Math.PI / 90);
    const nPos = position.length;
    const n = position.length / 12;
    const angles = new Float32Array(n);
    const labelPosition = new Float32Array(n * 3);
    const labelText = new Array(n);
    // Temporary arrays as don't know output length yet
    const lineTmp1 = new Array(n);
    const lineTmp2 = new Array(n);
    const sectorTmp = new Array(n);
    const planeTmp = new Array(n);
    // Eventual sizes of output arrays
    let totalLines = 0;
    let totalSegments = 0;
    let totalPlanes = 0;
    const p1 = v3new();
    const p2 = v3new();
    const p3 = v3new();
    const p4 = v3new();
    const v21 = v3new();
    const v23 = v3new();
    const v34 = v3new();
    const tmp = v3new();
    const mid = v3new();
    const inPlane1 = v3new();
    const inPlane2 = v3new();
    const start = v3new();
    const end = v3new();
    const cross = v3new();
    const arcPoint = v3new();
    let i = 0; // Actual output index (after skipping inappropriate)
    for (var p = 0; p < nPos; p += 12) {
        // Set Positions
        v3fromArray(p1, position, p);
        v3fromArray(p2, position, p + 3);
        v3fromArray(p3, position, p + 6);
        v3fromArray(p4, position, p + 9);
        // Vectors between points
        v3sub(v21, p1, p2);
        v3sub(v23, p3, p2);
        if (v3length(v23) === 0.0) {
            continue; // Can't define axis
        }
        v3sub(v34, p4, p3);
        v3multiplyScalar(tmp, v23, 0.5);
        v3add(mid, p2, tmp);
        v3normalize(v21, v21);
        v3normalize(v23, v23);
        v3normalize(v34, v34);
        // Which side of plane are p1, p4 (are we measuring something that
        // looks more like an improper? e.g. C, CA, CB, N)
        v3sub(tmp, p1, mid);
        const improperStart = v3dot(tmp, v23) > 0.0;
        v3sub(tmp, p4, mid);
        const improperEnd = v3dot(tmp, v23) < 0.0;
        // Calculate vectors perp to v23 (lying in plane (1,2,3) and (2,3,4))
        v3multiplyScalar(tmp, v23, v3dot(v23, v21));
        v3sub(inPlane1, v21, tmp);
        v3multiplyScalar(tmp, v23, v3dot(v23, v34));
        v3sub(inPlane2, v34, tmp);
        if (v3length(inPlane1) === 0.0 || v3length(inPlane2) === 0.0) {
            continue; // Indeterminate angle
        }
        v3normalize(inPlane1, inPlane1);
        v3normalize(inPlane2, inPlane2);
        const angle = angles[i] = v3angle(inPlane1, inPlane2);
        labelText[i] = (RAD2DEG * angle).toFixed(1) + String.fromCharCode(0x00B0);
        v3cross(cross, inPlane1, v23);
        v3normalize(cross, cross);
        if (v3dot(cross, inPlane2) < 0.0) {
            v3negate(cross, cross); // Ensure cp faces correct way
        }
        calcArcPoint(tmp, mid, inPlane1, cross, angle / 2.0);
        v3toArray(tmp, labelPosition, 3 * i);
        const nSegments = Math.ceil(angle / angleStep);
        // For extended display mode, 4 straight lines plus arc/segment edge
        // For non-extended, 2 straight lines plus segment edge
        const nLines = nSegments + ((params.extendLine) ? 4 : 2);
        // Don't draw planes if not extending lines
        const nPlanes = params.extendLine ? 36 : 0;
        const line1 = new Float32Array(nLines * 3);
        const line2 = new Float32Array(nLines * 3);
        const sector = new Float32Array(nSegments * 9);
        // 2 planes, 2 triangles each per dihedral (2*2*9)
        const plane = new Float32Array(nPlanes);
        lineTmp1[i] = line1;
        lineTmp2[i] = line2;
        sectorTmp[i] = sector;
        planeTmp[i] = plane;
        // Start points for lines/planes, only required
        // if extending lines
        if (params.extendLine) {
            if (improperStart) { // We'll start on the v3->1 line (tmp)
                v3sub(tmp, p1, p3);
                v3normalize(tmp, tmp);
                v3multiplyScalar(start, tmp, 1.0 / v3dot(inPlane1, tmp));
                v3add(start, start, p3);
            }
            else { // start on the 2->1 line
                v3multiplyScalar(start, v21, 1.0 / v3dot(inPlane1, v21));
                v3add(start, start, p2);
            }
            if (improperEnd) { // Finish on 2->4 line
                v3sub(tmp, p4, p2);
                v3normalize(tmp, tmp);
                v3multiplyScalar(end, tmp, 1.0 / v3dot(inPlane2, tmp));
                v3add(end, end, p2);
            }
            else { // end on the 3->4 line
                v3multiplyScalar(end, v34, 1.0 / v3dot(inPlane2, v34));
                v3add(end, end, p3);
            }
        }
        v3add(arcPoint, mid, inPlane1);
        // index into line1, line2
        let li = 0;
        // If extending lines, there's a bit of stuff to do here
        // figuring out start and end positions
        if (params.extendLine) {
            v3toArray(p1, line1, li);
            v3toArray(start, line2, li);
            li += 3;
            v3toArray(start, line1, li);
            v3toArray(arcPoint, line2, li);
            li += 3;
            // Construct plane at start, if not extening lines
            // this is skipped
            v3toArray(start, plane, 0);
            v3toArray(arcPoint, plane, 3);
            v3toArray(improperStart ? p3 : p2, plane, 6);
            v3toArray(improperStart ? p3 : p2, plane, 9);
            v3toArray(arcPoint, plane, 12);
            v3toArray(mid, plane, 15);
        }
        else {
            // Not extending lines
            v3toArray(mid, line1, li);
            v3toArray(arcPoint, line2, li);
            li += 3;
        }
        const appendArcSection = function (a, j) {
            const si = j * 9;
            v3toArray(mid, sector, si);
            v3toArray(arcPoint, sector, si + 3);
            v3toArray(arcPoint, line1, li);
            calcArcPoint(arcPoint, mid, inPlane1, cross, a);
            v3toArray(arcPoint, sector, si + 6);
            v3toArray(arcPoint, line2, li);
            li += 3;
        };
        let j = 0;
        for (let a = angleStep; a < angle; a += angleStep) {
            appendArcSection(a, j++);
        }
        appendArcSection(angle, j++);
        if (params.extendLine) {
            v3toArray(arcPoint, line1, (nLines - 2) * 3);
            v3toArray(end, line2, (nLines - 2) * 3);
            v3toArray(end, line1, (nLines - 1) * 3);
            v3toArray(p4, line2, (nLines - 1) * 3);
            // Construct plane at end
            v3toArray(end, plane, 18);
            v3toArray(arcPoint, plane, 21);
            v3toArray(improperEnd ? p2 : p3, plane, 24);
            v3toArray(improperEnd ? p2 : p3, plane, 27);
            v3toArray(arcPoint, plane, 30);
            v3toArray(mid, plane, 33);
        }
        else {
            v3toArray(arcPoint, line1, li);
            v3toArray(mid, line2, li);
            li += 3;
        }
        totalLines += nLines * 3;
        totalSegments += nSegments * 9;
        totalPlanes += nPlanes;
        i += 1;
    }
    const nSuccess = i;
    const linePosition1 = new Float32Array(totalLines);
    const linePosition2 = new Float32Array(totalLines);
    const sectorPosition = new Float32Array(totalSegments);
    const planePosition = new Float32Array(totalPlanes);
    let lineOffset = 0;
    let sectorOffset = 0;
    let planeOffset = 0;
    for (let i = 0; i < nSuccess; i++) {
        const lp1 = lineTmp1[i];
        const lp2 = lineTmp2[i];
        const sp = sectorTmp[i];
        const pp = planeTmp[i];
        copyArray(lp1, linePosition1, 0, lineOffset, lp1.length);
        copyArray(lp2, linePosition2, 0, lineOffset, lp2.length);
        copyArray(sp, sectorPosition, 0, sectorOffset, sp.length);
        copyArray(pp, planePosition, 0, planeOffset, pp.length);
        lineOffset += lp1.length;
        sectorOffset += sp.length;
        planeOffset += pp.length;
    }
    return {
        labelPosition: labelPosition.subarray(0, nSuccess * 3),
        labelText: labelText.slice(0, nSuccess),
        linePosition1,
        linePosition2,
        planePosition,
        sectorPosition
    };
}
RepresentationRegistry.add('dihedral', DihedralRepresentation);

/**
 * @file Dihedral Histogram Representation
 * @author Rudolfs Petrovs <rudolfs.petrovs@astx.com>
 * @private
 */
const pointLength = 3; // One Point Length (number of coordinates of one point in 3D)
const pointsInTriangle = 3;
function createUpdatedObject(o, updateSource) {
    function hasKey(obj, key) {
        return key in obj;
    }
    const result = Object.assign({}, o); // Shallow copy
    for (const key in result) {
        if (hasKey(result, key) && hasKey(updateSource, key)) {
            result[key] = defaults(updateSource[key], result[key]);
        }
    }
    return result;
}
function createColorArray(color, arrayLength) {
    const colorValue = new Color(color);
    const targetArray = new Float32Array(arrayLength * 3);
    uniformArray3(arrayLength, colorValue.r, colorValue.g, colorValue.b, targetArray);
    return targetArray;
}
/**
 * Dihedral Histogram representation object
 *
 * Reperesentation consists of several parts:
 * opaqueMiddleDisc - opaque disc in the middle of the dihedral between front and back histograms
 * frontHistogram - circular histogram from the adjacent bond viewpoint
 * backHistogram - circular histogram from the distant bond viewpoint
 * histogramBinBorder - lines, which separate histogram bins
 * bondArrows - lines, which show the actual angle on the histogram disc
 *
 * @param {Structure} structure - the structure to measure angles in
 * @param {Viewer} viewer - a viewer object
 * @param {DihedralHistogramRepresentationParameters} params - Dihedral histogram representation parameters
 */
class DihedralHistogramRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'dihedral-histogram';
        this.parameters = Object.assign({
            histogramsData: {
                type: 'hidden', rebuild: true
            },
            histogramBinBorderVisible: {
                type: 'boolean', default: true
            },
            scaleBinToSectorArea: {
                type: 'boolean',
                rebuild: true,
                default: false
            }
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        const p = params || {};
        const defaultColorData = {
            histogramBinBorderColor: 'grey',
            adjacentBondArrowColor: 'black',
            distantBondArrowColor: 'magenta',
            frontHistogramColor: 'green',
            backHistogramColor: 'blue',
            opaqueMiddleDiscColor: 'white'
        };
        const colorData = createUpdatedObject(defaultColorData, p);
        Object.assign(this, colorData);
        const defaultParameters = {
            histogramsData: [],
            histogramOpacity: 1.0,
            opaqueMiddleDiscVisible: true,
            opaqueMiddleDiscOpacity: 1.0,
            histogramBinBorderVisible: true,
            histogramBinBorderWidth: 1,
            histogramBinBorderOpacity: 0.5,
            bondArrowVisible: true,
            bondArrowWidth: 2,
            bondArrowOpacity: 1.0,
            scaleBinToSectorArea: false,
        };
        const parameters = createUpdatedObject(defaultParameters, p);
        Object.assign(this, parameters);
        this.histogramsData.forEach(x => {
            const specificColorData = createUpdatedObject(colorData, x);
            Object.assign(x, specificColorData);
        });
        p.side = defaults(p.side, 'double');
        p.opacity = defaults(p.opacity, 0.5);
        p.radiusType = defaults(p.radiusType, 'size');
        p.radiusSize = defaults(p.radiusSize, 0.15);
        super.init(p);
    }
    getHistogramBinBorderBufferParameters() {
        return this.getBufferParams({
            linewidth: this.histogramBinBorderWidth,
            visible: this.histogramBinBorderVisible,
            opacity: this.histogramBinBorderOpacity,
        });
    }
    getBondArrowsBufferParameters() {
        return this.getBufferParams({
            linewidth: this.bondArrowWidth,
            visible: this.bondArrowVisible,
            opacity: this.bondArrowOpacity,
        });
    }
    getOpaqueMiddleDiscBufferParameters() {
        return this.getBufferParams({
            visible: this.opaqueMiddleDiscVisible,
            opacity: this.opaqueMiddleDiscOpacity
        });
    }
    getHistogramBufferParameters() {
        return this.getBufferParams({
            visible: true,
            opacity: this.histogramOpacity,
            side: "double"
        });
    }
    createData(sview) {
        if (!sview.atomCount || !this.histogramsData.length)
            return;
        this.histogramsData.forEach(x => x.atomPositions = parseNestedAtoms(sview, [x.atomQuad]));
        const scaleData = this.scaleBinToSectorArea ? function (y) { return Math.sqrt(y); } : function (y) { return y; };
        this.histogramsData.forEach(x => x.histogram360Scaled = x.histogram360.map(scaleData));
        function Float32Concat(arrays) {
            const lengths = arrays.map(x => x.length);
            const result = new Float32Array(arraySum(lengths));
            let accumulatedOffset = 0;
            for (let i = 0; i < arrays.length; i++) {
                result.set(arrays[i], accumulatedOffset);
                accumulatedOffset += arrays[i].length;
            }
            return result;
        }
        function createWideLineBuffer(linesList, params) {
            return new WideLineBuffer({
                position1: Float32Concat(linesList.map(x => x.startPoints)),
                position2: Float32Concat(linesList.map(x => x.endPoints)),
                color: Float32Concat(linesList.map(x => x.startColors)),
                color2: Float32Concat(linesList.map(x => x.endColors)),
            }, params);
        }
        function createMeshBuffer(mesh, params) {
            return new MeshBuffer({
                position: Float32Concat(mesh.map(x => x.triangles)),
                color: Float32Concat(mesh.map(x => x.triangleColors))
            }, params);
        }
        const dihedralDataArray = [];
        for (let i = 0; i < this.histogramsData.length; i++) {
            let dihedralData = undefined;
            let currentHistogramData = this.histogramsData[i];
            let currentHistogram360 = currentHistogramData.histogram360;
            if (currentHistogram360.length >= 3) {
                dihedralData = calculateDihedralHistogram(currentHistogramData);
            }
            if (typeof dihedralData === "undefined")
                continue;
            dihedralDataArray.push(dihedralData);
        }
        this.frontHistogramBinBordersBuffer = createWideLineBuffer(dihedralDataArray.map(x => x.frontHistogramBinBorders), this.getHistogramBinBorderBufferParameters());
        this.backHistogramBinBordersBuffer = createWideLineBuffer(dihedralDataArray.map(x => x.backHistogramBinBorders), this.getHistogramBinBorderBufferParameters());
        this.adjacentBondArrowsBuffer = createWideLineBuffer(dihedralDataArray.map(x => x.adjacentBondArrows), this.getBondArrowsBufferParameters());
        this.distantBondArrowsBuffer = createWideLineBuffer(dihedralDataArray.map(x => x.distantBondArrows), this.getBondArrowsBufferParameters());
        this.opaqueMiddleDiscBuffer = createMeshBuffer(dihedralDataArray.map(x => x.opaqueMiddleDisc), this.getOpaqueMiddleDiscBufferParameters());
        this.frontHistogramBuffer = createMeshBuffer(dihedralDataArray.map(x => x.frontHistogram), this.getHistogramBufferParameters());
        this.backHistogramBuffer = createMeshBuffer(dihedralDataArray.map(x => x.backHistogram), this.getHistogramBufferParameters());
        return {
            bufferList: [].concat(this.frontHistogramBinBordersBuffer, this.backHistogramBinBordersBuffer, this.adjacentBondArrowsBuffer, this.distantBondArrowsBuffer, this.opaqueMiddleDiscBuffer, this.frontHistogramBuffer, this.backHistogramBuffer)
        };
    }
    setParameters(params) {
        const rebuild = false;
        const what = {};
        super.setParameters(params, what, rebuild);
        if (params && (params.histogramBinBorderVisible !== undefined)) {
            this.setVisibility(this.visible);
        }
        return this;
    }
    setVisibility(value, noRenderRequest) {
        super.setVisibility(value, true);
        if (this.frontHistogramBinBordersBuffer) {
            this.frontHistogramBinBordersBuffer.setVisibility(this.histogramBinBorderVisible);
        }
        if (this.backHistogramBinBordersBuffer) {
            this.backHistogramBinBordersBuffer.setVisibility(this.histogramBinBorderVisible);
        }
        if (!noRenderRequest)
            this.viewer.requestRender();
        return this;
    }
}
/**
 * Calculates the data required to create {Buffer} objects for one histogram, given positions
 * @param  Float32Array positionOfDihedralAtoms 3*4 array of coordinates
 * @param  NumberArray histogram array of coordinates
 * @return Arrays for building buffers
 */
function calculateDihedralHistogram(histogramData) {
    const positionOfDihedralAtoms = histogramData.atomPositions;
    const histogram = histogramData.histogram360Scaled;
    const totalSectorTrianglesInOpaqueMiddleDisc = histogram.length <= 180 ? 360 : histogram.length * 2;
    const frontAndBack = 2;
    const opaqueMiddleDisc = {
        triangles: new Float32Array(totalSectorTrianglesInOpaqueMiddleDisc * pointsInTriangle * pointLength),
        triangleColors: createColorArray(histogramData.opaqueMiddleDiscColor, totalSectorTrianglesInOpaqueMiddleDisc * pointsInTriangle)
    };
    const frontHistogram = {
        triangles: new Float32Array(histogram.length * pointsInTriangle * pointLength),
        triangleColors: createColorArray(histogramData.frontHistogramColor, histogram.length * pointsInTriangle)
    };
    const backHistogram = {
        triangles: new Float32Array(histogram.length * pointsInTriangle * pointLength),
        triangleColors: createColorArray(histogramData.backHistogramColor, histogram.length * pointsInTriangle)
    };
    const frontHistogramBinBorders = {
        startPoints: new Float32Array(histogram.length * pointLength),
        endPoints: new Float32Array(histogram.length * pointLength),
        startColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length),
        endColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length)
    };
    const backHistogramBinBorders = {
        startPoints: new Float32Array(histogram.length * pointLength),
        endPoints: new Float32Array(histogram.length * pointLength),
        startColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length),
        endColors: createColorArray(histogramData.histogramBinBorderColor, histogram.length)
    };
    const adjacentBondArrows = {
        startPoints: new Float32Array(frontAndBack * pointLength),
        endPoints: new Float32Array(frontAndBack * pointLength),
        startColors: createColorArray(histogramData.adjacentBondArrowColor, histogram.length),
        endColors: createColorArray(histogramData.adjacentBondArrowColor, histogram.length)
    };
    const distantBondArrows = {
        startPoints: new Float32Array(frontAndBack * pointLength),
        endPoints: new Float32Array(frontAndBack * pointLength),
        startColors: createColorArray(histogramData.distantBondArrowColor, histogram.length),
        endColors: createColorArray(histogramData.distantBondArrowColor, histogram.length)
    };
    const p1 = v3new();
    const p2 = v3new();
    const p3 = v3new();
    const p4 = v3new();
    const v21 = v3new();
    const v23 = v3new();
    const v32 = v3new();
    const v34 = v3new();
    const mid = v3new();
    const inPlane1 = v3new();
    const inPlane2 = v3new();
    const cross1 = v3new();
    const cross2 = v3new();
    const arcPoint = v3new();
    const tmp = v3new();
    const tmp2 = v3new();
    // Set Atom Coordinates
    const dihedralAtomVectors = [p1, p2, p3, p4];
    for (let i = 0; i < dihedralAtomVectors.length; i++) {
        v3fromArray(dihedralAtomVectors[i], positionOfDihedralAtoms, i * pointLength);
    }
    // Vectors between points
    v3sub(v21, p1, p2);
    v3sub(v23, p3, p2);
    v3sub(v34, p4, p3);
    if (v3length(v23) === 0.0) {
        return; // Can't define axis
    }
    v3multiplyScalar(tmp, v23, 0.5);
    v3add(mid, p2, tmp);
    v3normalize(v21, v21);
    v3normalize(v23, v23);
    v3normalize(v34, v34);
    v3negate(v32, v23);
    // Calculate vectors perp to v23 (lying in plane (1,2,3) and (2,3,4))
    v3multiplyScalar(tmp, v32, v3dot(v32, v21));
    v3sub(inPlane1, v21, tmp);
    v3multiplyScalar(tmp, v23, v3dot(v23, v34));
    v3sub(inPlane2, v34, tmp);
    if (v3length(inPlane1) === 0.0 || v3length(inPlane2) === 0.0) {
        return; // Indeterminate angle
    }
    v3normalize(inPlane1, inPlane1);
    v3normalize(inPlane2, inPlane2);
    // Can use acos as normalized and non-zero
    const absAngle = Math.acos(v3dot(inPlane1, inPlane2));
    v3cross(cross1, v32, inPlane1);
    v3cross(cross2, v23, inPlane2);
    v3normalize(cross1, cross1);
    v3normalize(cross2, cross2);
    let angle = absAngle;
    if (v3dot(cross1, inPlane2) < 0.0) {
        angle = -absAngle;
    }
    v3add(arcPoint, mid, inPlane1);
    // Calculate necessary constants
    const maxHist = Math.max.apply(null, histogram);
    const histBinAngleStep = (Math.PI * 2) / histogram.length;
    function setHistogramBinCoordinates(out, ind, zeroDegreeVector, crossVector, histBinAngleStep) {
        const startOffset = ind * pointsInTriangle * pointLength;
        v3toArray(mid, out, startOffset);
        const scalingFactor = Number(histogram[ind]) / maxHist;
        v3multiplyScalar(tmp, zeroDegreeVector, scalingFactor);
        v3multiplyScalar(tmp2, crossVector, scalingFactor);
        calcArcPoint(arcPoint, mid, tmp, tmp2, ind * histBinAngleStep);
        v3toArray(arcPoint, out, startOffset + 1 * pointLength);
        calcArcPoint(arcPoint, mid, tmp, tmp2, (ind + 1) * histBinAngleStep);
        v3toArray(arcPoint, out, startOffset + 2 * pointLength);
    }
    function setOneSideHistogram(discHistogram, binBorders, ind, zeroDegreeVector, crossVector) {
        // Set Bond Arrows
        copyArray(mid, adjacentBondArrows.startPoints, 0, ind * pointLength, mid.length);
        calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, 0 + histBinAngleStep * 0);
        copyArray(tmp, adjacentBondArrows.endPoints, 0, ind * pointLength, mid.length);
        copyArray(mid, distantBondArrows.startPoints, 0, ind * pointLength, mid.length);
        calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, angle);
        copyArray(tmp, distantBondArrows.endPoints, 0, ind * pointLength, mid.length);
        // Set Histogram Bin Borders
        for (let i = 0; i < histogram.length; i++) {
            copyArray(mid, binBorders.startPoints, 0, i * 3, mid.length);
            calcArcPoint(tmp, mid, zeroDegreeVector, crossVector, 0 + histBinAngleStep * i);
            copyArray(tmp, binBorders.endPoints, 0, i * 3, tmp.length);
        }
        // Set Histogram Bins
        for (let sectionIndex = 0; sectionIndex < histogram.length; sectionIndex++) {
            setHistogramBinCoordinates(discHistogram.triangles, sectionIndex, zeroDegreeVector, crossVector, histBinAngleStep);
        }
    }
    // Opaque disc
    const opaqueCircleSectorAngleStep = Math.PI * 2 / totalSectorTrianglesInOpaqueMiddleDisc;
    for (let sectionIndex = 0; sectionIndex < totalSectorTrianglesInOpaqueMiddleDisc; sectionIndex++) {
        const startOffset = sectionIndex * pointsInTriangle * pointLength;
        v3toArray(mid, opaqueMiddleDisc.triangles, startOffset);
        calcArcPoint(arcPoint, mid, inPlane1, cross1, sectionIndex * opaqueCircleSectorAngleStep);
        v3toArray(arcPoint, opaqueMiddleDisc.triangles, startOffset + 1 * pointLength);
        calcArcPoint(arcPoint, mid, inPlane1, cross1, (sectionIndex + 1) * opaqueCircleSectorAngleStep);
        v3toArray(arcPoint, opaqueMiddleDisc.triangles, startOffset + 2 * pointLength);
    }
    // Front Histogram
    const distanceToOpaqueDisc = 0.01;
    v3multiplyScalar(tmp, v23, -distanceToOpaqueDisc); // Get a vector to move "mid" just a bit from opaque disc
    v3add(mid, mid, tmp);
    setOneSideHistogram(frontHistogram, frontHistogramBinBorders, 0, inPlane1, cross1);
    // Back Histogram
    v3multiplyScalar(tmp, v23, 2 * distanceToOpaqueDisc); // Get a vector to move "mid" back and plus just a bit from opaque disc the other way
    v3add(mid, mid, tmp);
    setOneSideHistogram(backHistogram, backHistogramBinBorders, 1, inPlane2, cross2);
    return {
        opaqueMiddleDisc,
        frontHistogram,
        backHistogram,
        frontHistogramBinBorders,
        backHistogramBinBorders,
        adjacentBondArrows,
        distantBondArrows
    };
}
RepresentationRegistry.add('dihedral-histogram', DihedralHistogramRepresentation);

/**
 * @file Distance Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Fred Ludlow <fred.ludlow@gmail.com>
 * @private
 */
/**
 * Distance representation
 */
class DistanceRepresentation extends MeasurementRepresentation {
    /**
     * Create Distance representation object
     * @example
     * stage.loadFile( "rcsb://1crn" ).then( function( o ){
     *     o.addRepresentation( "cartoon" );
     *     // either give selections (uses first selected atom) ...
     *     var atomPair = [ [ "1.CA", "4.CA" ], [ "7.CA", "13.CA" ] ];
     *     // or atom indices
     *     var atomPair = [ [ 8, 28 ], [ 173, 121 ] ];
     *     o.addRepresentation( "distance", { atomPair: atomPair } );
     *     stage.autoView();
     * } );
     * @param {Structure} structure - the structure to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {DistanceRepresentationParameters} params - distance representation parameters
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'distance';
        this.parameters = Object.assign({
            radialSegments: true,
            openEnded: true,
            disableImpostor: true,
            labelUnit: {
                type: 'select',
                rebuild: true,
                options: { '': '', angstrom: 'angstrom', nm: 'nm' }
            },
            useCylinder: {
                type: 'boolean', rebuild: true
            },
            atomPair: {
                type: 'hidden', rebuild: true
            }
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.linewidth = defaults(p.linewidth, 5.0);
        p.radiusType = defaults(p.radiusType, 'size');
        p.radiusSize = defaults(p.radiusSize, 0.2);
        this.labelUnit = defaults(p.labelUnit, '');
        this.useCylinder = defaults(p.useCylinder, false);
        this.atomPair = defaults(p.atomPair, []);
        super.init(p);
    }
    getDistanceData(sview, atomPair) {
        let n = atomPair.length;
        const text = new Array(n);
        let position = new Float32Array(n * 3);
        const sele1 = new Selection();
        const sele2 = new Selection();
        const bondStore = new BondStore();
        const ap1 = sview.getAtomProxy();
        const ap2 = sview.getAtomProxy();
        let j = 0; // Skipped pairs
        const selected = sview.getAtomSet();
        atomPair.forEach((pair, i) => {
            let v1 = pair[0];
            let v2 = pair[1];
            if (typeof (v1) === 'number' && Number.isInteger(v1) && typeof (v2) === 'number' && Number.isInteger(v2)) {
                if (selected.get(v1) && selected.get(v2)) {
                    ap1.index = v1;
                    ap2.index = v2;
                }
                else {
                    j += 1;
                    return;
                }
            }
            else {
                sele1.setString(v1);
                sele2.setString(v2);
                var atomIndices1 = sview.getAtomIndices(sele1);
                var atomIndices2 = sview.getAtomIndices(sele2);
                if (atomIndices1.length && atomIndices2.length) {
                    ap1.index = atomIndices1[0];
                    ap2.index = atomIndices2[0];
                }
                else {
                    j += 1;
                    return;
                }
            }
            bondStore.addBond(ap1, ap2, 1);
            i -= j;
            var d = ap1.distanceTo(ap2);
            switch (this.labelUnit) {
                case 'angstrom':
                    text[i] = d.toFixed(2) + ' ' + String.fromCharCode(0x212B);
                    break;
                case 'nm':
                    text[i] = (d / 10).toFixed(2) + ' nm';
                    break;
                default:
                    text[i] = d.toFixed(2);
                    break;
            }
            var i3 = i * 3;
            position[i3 + 0] = (ap1.x + ap2.x) / 2;
            position[i3 + 1] = (ap1.y + ap2.y) / 2;
            position[i3 + 2] = (ap1.z + ap2.z) / 2;
        });
        if (j > 0) {
            n -= j;
            position = position.subarray(0, n * 3);
        }
        var bondSet = new BitArray(bondStore.count, true);
        return {
            text: text,
            position: position,
            bondSet: bondSet,
            bondStore: bondStore
        };
    }
    getBondData(sview, what, params) {
        const bondData = sview.getBondData(this.getBondParams(what, params));
        if (bondData.picking) {
            bondData.picking = new DistancePicker(bondData.picking.array, bondData.picking.structure, params.bondStore);
        }
        return bondData;
    }
    createData(sview) {
        if (!sview.atomCount || !this.atomPair.length)
            return;
        const n = this.atomPair.length;
        const c = new Color(this.labelColor);
        const distanceData = this.getDistanceData(sview, this.atomPair);
        this.textBuffer = new TextBuffer({
            position: distanceData.position,
            size: uniformArray(n, this.labelSize),
            color: uniformArray3(n, c.r, c.g, c.b),
            text: distanceData.text
        }, this.getLabelBufferParams());
        const bondParams = {
            bondSet: distanceData.bondSet,
            bondStore: distanceData.bondStore
        };
        const bondData = this.getBondData(sview, { position: true, color: true, picking: true, radius: this.useCylinder }, bondParams);
        if (this.useCylinder) {
            this.distanceBuffer = new CylinderBuffer(bondData, this.getBufferParams({
                openEnded: this.openEnded,
                radialSegments: this.radialSegments,
                disableImpostor: this.disableImpostor,
                dullInterior: true
            }));
        }
        else {
            this.distanceBuffer = new WideLineBuffer(getFixedLengthDashData(bondData), this.getBufferParams({
                linewidth: this.linewidth,
                visible: this.lineVisible,
                opacity: this.lineOpacity
            }));
        }
        return {
            bondSet: distanceData.bondSet,
            bondStore: distanceData.bondStore,
            position: distanceData.position,
            bufferList: [this.textBuffer, this.distanceBuffer]
        };
    }
    updateData(what, data) {
        super.updateData(what, data);
        const bondParams = {
            bondSet: data.bondSet,
            bondStore: data.bondStore
        };
        const bondData = this.getBondData(data.sview, what, bondParams);
        const distanceData = {};
        if (!what || what.color) {
            Object.assign(distanceData, {
                color: bondData.color,
                color2: bondData.color2
            });
        }
        if (!what || what.radius) {
            Object.assign(distanceData, { radius: bondData.radius });
        }
        this.distanceBuffer.setAttributes(distanceData);
    }
    setParameters(params) {
        let rebuild = false;
        const what = {};
        super.setParameters(params, what, rebuild);
        if (!this.useCylinder) {
            if (params && params.lineOpacity) {
                this.distanceBuffer.setParameters({ opacity: params.lineOpacity });
            }
            if (params && params.opacity !== undefined) {
                this.distanceBuffer.setParameters({ opacity: this.lineOpacity });
            }
            if (params && params.linewidth) {
                this.distanceBuffer.setParameters({ linewidth: params.linewidth });
            }
        }
        return this;
    }
}
RepresentationRegistry.add('distance', DistanceRepresentation);

/**
 * @file Vector Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getSize$2(data) {
    const n = data.position.length / 3;
    return n * 2 * 3;
}
const VectorBufferDefaultParameters = Object.assign({
    scale: 1,
    color: 'grey'
}, BufferDefaultParameters);
/**
 * Vector buffer. Draws vectors as lines.
 */
class VectorBuffer extends Buffer$1 {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.vector - vectors
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super({
            position: new Float32Array(getSize$2(data)),
            color: new Float32Array(getSize$2(data))
        }, params);
        this.isLine = true;
        this.vertexShader = 'Line.vert';
        this.fragmentShader = 'Line.frag';
        const color = new Color(this.parameters.color);
        const attributes = this.geometry.attributes; // TODO
        uniformArray3(getSize$2(data) / 3, color.r, color.g, color.b, attributes.color.array);
        this.setAttributes(data);
    }
    get defaultParameters() { return VectorBufferDefaultParameters; }
    setAttributes(data = {}) {
        const attributes = this.geometry.attributes; // TODO
        let position, vector;
        let aPosition;
        if (data.position && data.vector) {
            position = data.position;
            vector = data.vector;
            aPosition = attributes.position.array;
            attributes.position.needsUpdate = true;
        }
        const n = this.size / 2;
        const scale = this.parameters.scale;
        if (position && vector) {
            for (let v = 0; v < n; v++) {
                const i = v * 2 * 3;
                const j = v * 3;
                aPosition[i + 0] = position[j + 0];
                aPosition[i + 1] = position[j + 1];
                aPosition[i + 2] = position[j + 2];
                aPosition[i + 3] = position[j + 0] + vector[j + 0] * scale;
                aPosition[i + 4] = position[j + 1] + vector[j + 1] * scale;
                aPosition[i + 5] = position[j + 2] + vector[j + 2] * scale;
            }
        }
    }
}

/**
 * @file Helixorient Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Helixorient Representation
 */
class HelixorientRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'helixorient';
        this.parameters = Object.assign({
            sphereDetail: true,
            disableImpostor: true
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'sstruc');
        p.radiusType = defaults(p.radiusType, 'size');
        p.radiusSize = defaults(p.radiusSize, 0.15);
        p.radiusScale = defaults(p.radiusScale, 1.0);
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        super.init(p);
    }
    createData(sview) {
        const bufferList = [];
        const polymerList = [];
        this.structure.eachPolymer(polymer => {
            if (polymer.residueCount < 4)
                return;
            polymerList.push(polymer);
            const helixorient = new Helixorient(polymer);
            const position = helixorient.getPosition();
            const color = helixorient.getColor(this.getColorParams());
            const size = helixorient.getSize(this.getRadiusParams());
            const picking = helixorient.getPicking();
            bufferList.push(new SphereBuffer({
                position: position.center,
                color: color.color,
                radius: size.size,
                picking: picking.picking
            }, this.getBufferParams({
                sphereDetail: this.sphereDetail,
                disableImpostor: this.disableImpostor,
                dullInterior: true
            })), new VectorBuffer({
                position: position.center,
                vector: position.axis
            }, this.getBufferParams({
                color: 'skyblue',
                scale: 1
            })), new VectorBuffer({
                position: position.center,
                vector: position.resdir
            }, this.getBufferParams({
                color: 'lightgreen',
                scale: 1
            })));
        }, sview.getSelection());
        return {
            bufferList: bufferList,
            polymerList: polymerList
        };
    }
    updateData(what, data) {
        if (Debug)
            Log.time(this.type + ' repr update');
        what = what || {};
        for (let i = 0, il = data.polymerList.length; i < il; ++i) {
            const j = i * 3;
            const bufferData = {};
            const polymer = data.polymerList[i];
            const helixorient = new Helixorient(polymer);
            if (what.position) {
                const position = helixorient.getPosition();
                Object.assign(bufferData, { position: position.center });
                data.bufferList[j + 1].setAttributes({
                    'position': position.center,
                    'vector': position.axis
                });
                data.bufferList[j + 2].setAttributes({
                    'position': position.center,
                    'vector': position.resdir
                });
            }
            data.bufferList[j].setAttributes(bufferData);
        }
        if (Debug)
            Log.timeEnd(this.type + ' repr update');
    }
}
RepresentationRegistry.add('helixorient', HelixorientRepresentation);

/**
 * @file Licorice Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Licorice representation object ({@link BallAndStickRepresentation} with `aspectRatio` fixed at 1.0)
 */
class LicoriceRepresentation extends BallAndStickRepresentation {
    /**
     * Create Licorice representation object
     * @param {Structure} structure - the structure to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {BallAndStickRepresentationParameters} params - ball and stick representation parameters
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'licorice';
        this.parameters = Object.assign({}, this.parameters, { aspectRatio: null });
    }
    init(params) {
        var p = params || {};
        p.aspectRatio = 1.0;
        super.init(p);
    }
}
RepresentationRegistry.add('licorice', LicoriceRepresentation);

ShaderRegistry.add('shader/HyperballStickImpostor.vert', "\nattribute vec3 mapping;\nattribute float radius;\nattribute float radius2;\nattribute vec3 position1;\nattribute vec3 position2;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform float shrink;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewProjectionMatrixInverse;\nvoid main(){\nvRadius = radius;\nvRadius2 = radius2;\nvec4 spaceposition;\nvec3 position_atom1;\nvec3 position_atom2;\nvec4 vertex_position;\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nfloat radius1 = radius;\nposition_atom1 = position1;\nposition_atom2 = position2;\nfloat distance = distance( position_atom1, position_atom2 );\nspaceposition.z = mapping.z * distance;\nif (radius1 > radius2) {\nspaceposition.y = mapping.y * 1.5 * radius1;\nspaceposition.x = mapping.x * 1.5 * radius1;\n} else {\nspaceposition.y = mapping.y * 1.5 * radius2;\nspaceposition.x = mapping.x * 1.5 * radius2;\n}\nspaceposition.w = 1.0;\nvec4 e3 = vec4( 1.0 );\nvec3 e1, e1_temp, e2, e2_temp;\ne3.xyz = normalize(position_atom1-position_atom2);\nif (e3.z == 0.0) { e3.z = 0.0000000000001;}\nif ( (position_atom1.x - position_atom2.x) == 0.0) { position_atom1.x += 0.001;}\nif ( (position_atom1.y - position_atom2.y) == 0.0) { position_atom1.y += 0.001;}\nif ( (position_atom1.z - position_atom2.z) == 0.0) { position_atom1.z += 0.001;}\nvec4 focus = vec4( 1.0 );\nfocus.x = ( position_atom1.x*position_atom1.x - position_atom2.x*position_atom2.x +\n( radius2*radius2 - radius1*radius1 )*e3.x*e3.x/shrink )/(2.0*(position_atom1.x - position_atom2.x));\nfocus.y = ( position_atom1.y*position_atom1.y - position_atom2.y*position_atom2.y +\n( radius2*radius2 - radius1*radius1 )*e3.y*e3.y/shrink )/(2.0*(position_atom1.y - position_atom2.y));\nfocus.z = ( position_atom1.z*position_atom1.z - position_atom2.z*position_atom2.z +\n( radius2*radius2 - radius1*radius1 )*e3.z*e3.z/shrink )/(2.0*(position_atom1.z - position_atom2.z));\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2_temp = e1.yzx * e3.zxy - e1.zxy * e3.yzx;\ne2 = normalize(e2_temp);\nmat3 R= mat3( e1.xyz, e2.xyz, e3.xyz );\nvertex_position.xyz = R * spaceposition.xyz;\nvertex_position.w = 1.0;\nvertex_position.x += (position_atom1.x+position_atom2.x) / 2.0;\nvertex_position.y += (position_atom1.y+position_atom2.y) / 2.0;\nvertex_position.z += (position_atom1.z+position_atom2.z) / 2.0;\ngl_Position = modelViewProjectionMatrix * vertex_position;\nvec4 i_near, i_far;\nvec4 near = gl_Position;\nnear.z = 0.0 ;\nnear = modelViewProjectionMatrixInverse * near;\ni_near = near;\nvec4 far = gl_Position;\nfar.z = far.w ;\ni_far = modelViewProjectionMatrixInverse * far;\nprime1 = vec4( position_atom1 - (position_atom1 - focus.xyz)*shrink, 1.0 );\nprime2 = vec4( position_atom2 - (position_atom2 - focus.xyz)*shrink, 1.0 );\nfloat Rsquare = (radius1*radius1/shrink) - (\n(position_atom1.x - focus.x)*(position_atom1.x - focus.x) +\n(position_atom1.y - focus.y)*(position_atom1.y - focus.y) +\n(position_atom1.z - focus.z)*(position_atom1.z - focus.z)\n);\nfocus.w = Rsquare;\nmatrix_near = mat4( i_near, i_far, focus, e3 );\ngl_Position.z = 1.0;\n}");

ShaderRegistry.add('shader/HyperballStickImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 interiorColor;\nuniform float interiorDarkening;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float clipNear;\nuniform float shrink;\nuniform mat4 modelViewMatrix;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewMatrixInverseTranspose;\nuniform mat4 projectionMatrix;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars_begin\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat calcClip( vec4 cameraPos ){\nreturn dot( cameraPos, vec4( 0.0, 0.0, 1.0, clipNear - 0.5 ) );\n}\nfloat calcClip( vec3 cameraPos ){\nreturn calcClip( vec4( cameraPos, 1.0 ) );\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nstruct Ray {\nvec3 origin ;\nvec3 direction ;\n};\nbool cutoff_plane (vec3 M, vec3 cutoff, vec3 x3){\nfloat a = x3.x;\nfloat b = x3.y;\nfloat c = x3.z;\nfloat d = -x3.x*cutoff.x-x3.y*cutoff.y-x3.z*cutoff.z;\nfloat l = a*M.x+b*M.y+c*M.z+d;\nif (l<0.0) {return true;}\nelse{return false;}\n}\nvec3 isect_surf(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t1 =(-b-sqrt(delta))/a;\nreturn r.origin+t1*r.direction;\n}\nvec3 isect_surf2(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t2 =(-b+sqrt(delta))/a;\nreturn r.origin+t2*r.direction;\n}\nRay primary_ray(vec4 near1, vec4 far1){\nvec3 near=near1.xyz/near1.w;\nvec3 far=far1.xyz/far1.w;\nreturn Ray(near,far-near);\n}\nfloat update_z_buffer(vec3 M, mat4 ModelViewP){\nfloat depth1;\nvec4 Ms=(ModelViewP*vec4(M,1.0));\nreturn depth1=(1.0+Ms.z/Ms.w)/2.0;\n}\nvoid main(){\nfloat radius = max( vRadius, vRadius2 );\nvec4 i_near, i_far, focus;\nvec3 e3, e1, e1_temp, e2;\ni_near = vec4(matrix_near[0][0],matrix_near[0][1],matrix_near[0][2],matrix_near[0][3]);\ni_far = vec4(matrix_near[1][0],matrix_near[1][1],matrix_near[1][2],matrix_near[1][3]);\nfocus = vec4(matrix_near[2][0],matrix_near[2][1],matrix_near[2][2],matrix_near[2][3]);\ne3 = vec3(matrix_near[3][0],matrix_near[3][1],matrix_near[3][2]);\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2 = normalize(cross(e1,e3));\nvec4 equation = focus;\nfloat shrinkfactor = shrink;\nfloat t1 = -1.0/(1.0-shrinkfactor);\nfloat t2 = 1.0/(shrinkfactor);\nvec4 colonne1, colonne2, colonne3, colonne4;\nmat4 mat;\nvec3 equation1 = vec3(t2,t2,t1);\nfloat A1 = - e1.x*equation.x - e1.y*equation.y - e1.z*equation.z;\nfloat A2 = - e2.x*equation.x - e2.y*equation.y - e2.z*equation.z;\nfloat A3 = - e3.x*equation.x - e3.y*equation.y - e3.z*equation.z;\nfloat A11 = equation1.x*e1.x*e1.x + equation1.y*e2.x*e2.x + equation1.z*e3.x*e3.x;\nfloat A21 = equation1.x*e1.x*e1.y + equation1.y*e2.x*e2.y + equation1.z*e3.x*e3.y;\nfloat A31 = equation1.x*e1.x*e1.z + equation1.y*e2.x*e2.z + equation1.z*e3.x*e3.z;\nfloat A41 = equation1.x*e1.x*A1 + equation1.y*e2.x*A2 + equation1.z*e3.x*A3;\nfloat A22 = equation1.x*e1.y*e1.y + equation1.y*e2.y*e2.y + equation1.z*e3.y*e3.y;\nfloat A32 = equation1.x*e1.y*e1.z + equation1.y*e2.y*e2.z + equation1.z*e3.y*e3.z;\nfloat A42 = equation1.x*e1.y*A1 + equation1.y*e2.y*A2 + equation1.z*e3.y*A3;\nfloat A33 = equation1.x*e1.z*e1.z + equation1.y*e2.z*e2.z + equation1.z*e3.z*e3.z;\nfloat A43 = equation1.x*e1.z*A1 + equation1.y*e2.z*A2 + equation1.z*e3.z*A3;\nfloat A44 = equation1.x*A1*A1 + equation1.y*A2*A2 + equation1.z*A3*A3 - equation.w;\ncolonne1 = vec4(A11,A21,A31,A41);\ncolonne2 = vec4(A21,A22,A32,A42);\ncolonne3 = vec4(A31,A32,A33,A43);\ncolonne4 = vec4(A41,A42,A43,A44);\nmat = mat4(colonne1,colonne2,colonne3,colonne4);\nRay ray = primary_ray(i_near,i_far) ;\nvec3 M;\nM = isect_surf(ray, mat);\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nvec4 M1 = vec4(M,1.0);\nvec4 M2 = mat*M1;\nvec3 _normal = ( modelViewMatrixInverseTranspose * M2 ).xyz;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\n#ifdef NEAR_CLIP\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 ){\nM = isect_surf2(ray, mat);\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 )\ndiscard;\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( clipNear - 0.5 ) ) ) + ( 0.0000001 / radius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix);\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#endif\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\nfloat distance_ratio = ((M.x-prime2.x)*e3.x + (M.y-prime2.y)*e3.y +(M.z-prime2.z)*e3.z) /\ndistance(prime2.xyz,prime1.xyz);\n#ifdef PICKING\nif( opacity < 0.3 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -( modelViewMatrix * vec4( M, 1.0 ) ).xyz;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distance_ratio>0.5 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nvec3 nonPerturbedNormal = normal;\n#include lights_physical_fragment\n#include lights_fragment_begin\n#include lights_fragment_end\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\nif( interior ){\n#ifdef USE_INTERIOR_COLOR\noutgoingLight.xyz = interiorColor;\n#else\n#ifdef DIFFUSE_INTERIOR\noutgoingLight.xyz = vColor;\n#endif\n#endif\noutgoingLight.xyz *= 1.0 - interiorDarkening;\n}\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include colorspace_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Mapped Box Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const mapping = new Float32Array([
    -1.0, -1.0, -1.0,
    1.0, -1.0, -1.0,
    1.0, -1.0, 1.0,
    -1.0, -1.0, 1.0,
    -1.0, 1.0, -1.0,
    1.0, 1.0, -1.0,
    1.0, 1.0, 1.0,
    -1.0, 1.0, 1.0
]);
const mappingIndices = new Uint16Array([
    0, 1, 2,
    0, 2, 3,
    1, 5, 6,
    1, 6, 2,
    4, 6, 5,
    4, 7, 6,
    0, 7, 4,
    0, 3, 7,
    0, 5, 1,
    0, 4, 5,
    3, 2, 6,
    3, 6, 7
]);
/**
 * Mapped Box buffer. Draws boxes. Used to render general imposters.
 * @interface
 */
class MappedBoxBuffer extends MappedBuffer {
    constructor(data, params = {}) {
        super('v3', data, params);
    }
    get mapping() { return mapping; }
    get mappingIndices() { return mappingIndices; }
    get mappingIndicesSize() { return 36; }
    get mappingSize() { return 8; }
    get mappingItemSize() { return 3; }
}

/**
 * @file Hyperball Stick Impostor Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const HyperballStickImpostorBufferDefaultParameters = Object.assign({
    shrink: 0.14
}, BufferDefaultParameters);
const HyperballStickImpostorBufferParameterTypes = Object.assign({
    shrink: { uniform: true }
}, BufferParameterTypes);
/**
 * Hyperball stick impostor buffer.
 *
 * @example
 * var hyperballStickImpostorBuffer = new HyperballStickImpostorBuffer({
 *   position1: new Float32Array([ 0, 0, 0 ]),
 *   position2: new Float32Array([ 2, 2, 2 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   color2: new Float32Array([ 0, 1, 0 ]),
 *   radius: new Float32Array([ 1 ]),
 *   radius2: new Float32Array([ 2 ])
 * });
 */
class HyperballStickImpostorBuffer extends MappedBoxBuffer {
    constructor(data, params = {}) {
        super(data, params);
        this.parameterTypes = HyperballStickImpostorBufferParameterTypes;
        this.isImpostor = true;
        this.vertexShader = 'HyperballStickImpostor.vert';
        this.fragmentShader = 'HyperballStickImpostor.frag';
        this.addUniforms({
            'modelViewProjectionMatrix': { value: new Matrix4() },
            'modelViewProjectionMatrixInverse': { value: new Matrix4() },
            'modelViewMatrixInverseTranspose': { value: new Matrix4() },
            'shrink': { value: this.parameters.shrink }
        });
        this.addAttributes({
            'position1': { type: 'v3', value: null },
            'position2': { type: 'v3', value: null },
            'color2': { type: 'c', value: null },
            'radius': { type: 'f', value: null },
            'radius2': { type: 'f', value: null }
        });
        this.setAttributes(data);
        this.makeMapping();
    }
    get defaultParameters() { return HyperballStickImpostorBufferDefaultParameters; }
}

/**
 * @file Hyperball Stick Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
Object.assign({
    disableImpostor: false
}, CylinderGeometryBufferDefaultParameters, HyperballStickImpostorBufferDefaultParameters);
class HyperballStickBufferImpl {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position1 - from positions
     * @param  {Float32Array} data.position2 - to positions
     * @param  {Float32Array} data.color - from colors
     * @param  {Float32Array} data.color2 - to colors
     * @param  {Float32Array} data.radius - from radii
     * @param  {Float32Array} data.radius2 - to radii
     * @param  {Float32Array} data.picking - picking ids
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        if (!ExtensionFragDepth || (params && params.disableImpostor)) {
            data.radius = calculateMinArray(data.radius, data.radius2);
            return new CylinderGeometryBuffer(data, params);
        }
        else {
            return new HyperballStickImpostorBuffer(data, params);
        }
    }
}
/**
 * Hyperball stick buffer. Depending on the value {@link ExtensionFragDepth} and
 * `params.disableImpostor` the constructor returns either a
 * {@link CylinderGeometryBuffer} or a {@link HyperballStickImpostorBuffer}
 * @implements {Buffer}
 *
 * @example
 * var hyperballStickBuffer = new HyperballStickBuffer({
 *   position1: new Float32Array([ 0, 0, 0 ]),
 *   position2: new Float32Array([ 2, 2, 2 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   color2: new Float32Array([ 0, 1, 0 ]),
 *   radius: new Float32Array([ 1 ]),
 *   radius2: new Float32Array([ 2 ])
 * });
 */
//@ts-expect-error Incompatible constructor signatures
const HyperballStickBuffer = HyperballStickBufferImpl;

/**
 * @file Hyperball Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Hyperball Representation
 */
class HyperballRepresentation extends LicoriceRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'hyperball';
        this.parameters = Object.assign({
            shrink: {
                type: 'number', precision: 3, max: 1.0, min: 0.001, buffer: true
            }
        }, this.parameters, {
            multipleBond: null,
            bondSpacing: null
        });
    }
    init(params) {
        var p = params || {};
        p.radiusScale = defaults(p.radiusScale, 0.2);
        p.radiusType = defaults(p.radiusType, 'vdw');
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        this.shrink = defaults(p.shrink, 0.12);
        super.init(p);
    }
    getBondParams(what, params) {
        if (!what || what.radius) {
            params = Object.assign({ radius2: true }, params);
        }
        return super.getBondParams(what, params);
    }
    createData(sview) {
        var sphereBuffer = new SphereBuffer(sview.getAtomData(this.getAtomParams()), this.getBufferParams({
            sphereDetail: this.sphereDetail,
            disableImpostor: this.disableImpostor,
            dullInterior: true
        }));
        this.__center = new Float32Array(sview.bondCount * 3);
        var stickBuffer = new HyperballStickBuffer(sview.getBondData(this.getBondParams()), this.getBufferParams({
            shrink: this.shrink,
            radialSegments: this.radialSegments,
            disableImpostor: this.disableImpostor,
            dullInterior: true
        }));
        return {
            bufferList: [sphereBuffer, stickBuffer]
        };
    }
    updateData(what, data) {
        var atomData = data.sview.getAtomData(this.getAtomParams());
        var bondData = data.sview.getBondData(this.getBondParams());
        var sphereData = {};
        var stickData = {};
        if (!what || what.position) {
            Object.assign(sphereData, { position: atomData.position });
            var from = bondData.position1;
            var to = bondData.position2;
            Object.assign(stickData, {
                position: calculateCenterArray(from, to, this.__center),
                position1: from,
                position2: to
            });
        }
        if (!what || what.color) {
            Object.assign(sphereData, { color: atomData.color });
            Object.assign(stickData, {
                color: bondData.color,
                color2: bondData.color2
            });
        }
        if (!what || what.radius) {
            Object.assign(sphereData, { radius: atomData.radius });
            Object.assign(stickData, {
                radius: bondData.radius,
                radius2: bondData.radius2
            });
        }
        data.bufferList[0].setAttributes(sphereData);
        data.bufferList[1].setAttributes(stickData);
    }
}
RepresentationRegistry.add('hyperball', HyperballRepresentation);

/**
 * @file Label Factory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const LabelFactoryTypes = {
    '': '',
    'atomname': 'atom name',
    'atomindex': 'atom index',
    'occupancy': 'occupancy',
    'bfactor': 'b-factor',
    'serial': 'serial',
    'element': 'element',
    'atom': 'atom name + index',
    'resname': 'residue name',
    'resno': 'residue no',
    'res': 'one letter code + no',
    'residue': '[residue name] + no + inscode',
    'text': 'text',
    'format': 'format',
    'qualified': 'qualified name'
};
class LabelFactory {
    constructor(type, text = {}, format = '') {
        this.type = type;
        this.text = text;
        this.format = format;
        this.errorLogged = false;
    }
    atomLabel(a) {
        const type = this.type;
        let l;
        switch (type) {
            case 'atomname':
                l = a.atomname;
                break;
            case 'atomindex':
                l = `${a.index}`;
                break;
            case 'occupancy':
                l = a.occupancy.toFixed(2);
                break;
            case 'bfactor':
                l = a.bfactor.toFixed(2);
                break;
            case 'serial':
                l = `${a.serial}`;
                break;
            case 'element':
                l = a.element;
                break;
            case 'atom':
                l = `${a.atomname}|${a.index}`;
                break;
            case 'resname':
                l = a.resname;
                break;
            case 'resno':
                l = `${a.resno}`;
                break;
            case 'res':
                l = `${(AA1[a.resname.toUpperCase()] || a.resname)}${a.resno}`;
                break;
            case 'residue':
                const aa1 = AA1[a.resname.toUpperCase()];
                if (aa1 && !a.inscode) {
                    l = `${aa1}${a.resno}`;
                }
                else {
                    l = `[${a.resname}]${a.resno}${a.inscode}`;
                }
                break;
            case 'text':
                l = this.text[a.index];
                break;
            case 'format':
                try {
                    l = sprintf(this.format, a);
                }
                catch (e) {
                    if (!this.errorLogged) {
                        this.errorLogged = true;
                        console.log(e.message);
                    }
                }
                break;
            // case "qualified":
            default:
                l = a.qualifiedName();
                break;
        }
        return l === undefined ? '' : l;
    }
}
LabelFactory.types = LabelFactoryTypes;

/**
 * @file Label Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Label representation
 */
class LabelRepresentation extends StructureRepresentation {
    /**
     * Create Label representation object
     * @param {Structure} structure - the structure to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {LabelRepresentationParameters} params - label representation parameters
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'label';
        this.parameters = Object.assign({
            labelType: {
                type: 'select', options: LabelFactory.types, rebuild: true
            },
            labelText: {
                type: 'hidden', rebuild: true
            },
            labelFormat: {
                type: 'text', rebuild: true
            },
            labelGrouping: {
                type: 'select',
                options: {
                    'atom': 'atom',
                    'residue': 'residue'
                },
                rebuild: true
            },
            fontFamily: {
                type: 'select',
                options: {
                    'sans-serif': 'sans-serif',
                    'monospace': 'monospace',
                    'serif': 'serif'
                },
                buffer: true
            },
            fontStyle: {
                type: 'select',
                options: {
                    'normal': 'normal',
                    'italic': 'italic'
                },
                buffer: true
            },
            fontWeight: {
                type: 'select',
                options: {
                    'normal': 'normal',
                    'bold': 'bold'
                },
                buffer: true
            },
            xOffset: {
                type: 'number', precision: 1, max: 20, min: -20, buffer: true
            },
            yOffset: {
                type: 'number', precision: 1, max: 20, min: -20, buffer: true
            },
            zOffset: {
                type: 'number', precision: 1, max: 20, min: -20, buffer: true
            },
            attachment: {
                type: 'select',
                options: {
                    'bottom-left': 'bottom-left',
                    'bottom-center': 'bottom-center',
                    'bottom-right': 'bottom-right',
                    'middle-left': 'middle-left',
                    'middle-center': 'middle-center',
                    'middle-right': 'middle-right',
                    'top-left': 'top-left',
                    'top-center': 'top-center',
                    'top-right': 'top-right'
                },
                rebuild: true
            },
            showBorder: {
                type: 'boolean', buffer: true
            },
            borderColor: {
                type: 'color', buffer: true
            },
            borderWidth: {
                type: 'number', precision: 2, max: 0.3, min: 0, buffer: true
            },
            showBackground: {
                type: 'boolean', rebuild: true
            },
            backgroundColor: {
                type: 'color', buffer: true
            },
            backgroundMargin: {
                type: 'number', precision: 2, max: 2, min: 0, rebuild: true
            },
            backgroundOpacity: {
                type: 'range', step: 0.01, max: 1, min: 0, buffer: true
            },
            fixedSize: {
                type: 'boolean', buffer: true
            }
        }, this.parameters, {
            side: null,
            flatShaded: null,
            wireframe: null,
            linewidth: null,
            roughness: null,
            metalness: null,
            diffuse: null
        });
        this.init(params);
    }
    init(params) {
        const p = params || {};
        this.labelType = defaults(p.labelType, 'res');
        this.labelText = defaults(p.labelText, {});
        this.labelFormat = defaults(p.labelFormat, '');
        this.labelGrouping = defaults(p.labelGrouping, 'atom');
        this.fontFamily = defaults(p.fontFamily, 'sans-serif');
        this.fontStyle = defaults(p.fontStyle, 'normal');
        this.fontWeight = defaults(p.fontWeight, 'bold');
        this.xOffset = defaults(p.xOffset, 0.0);
        this.yOffset = defaults(p.yOffset, 0.0);
        this.zOffset = defaults(p.zOffset, 0.5);
        this.attachment = defaults(p.attachment, 'bottom-left');
        this.showBorder = defaults(p.showBorder, false);
        this.borderColor = defaults(p.borderColor, 'lightgrey');
        this.borderWidth = defaults(p.borderWidth, 0.15);
        this.showBackground = defaults(p.showBackground, false);
        this.backgroundColor = defaults(p.backgroundColor, 'lightgrey');
        this.backgroundMargin = defaults(p.backgroundMargin, 0.5);
        this.backgroundOpacity = defaults(p.backgroundOpacity, 1.0);
        this.fixedSize = defaults(p.fixedSize, false);
        super.init(p);
    }
    getTextData(sview, what) {
        const p = this.getAtomParams(what);
        const labelFactory = new LabelFactory(this.labelType, this.labelText, this.labelFormat);
        let position, size, color, text, positionN, sizeN, colorN;
        if (this.labelGrouping === 'atom') {
            const atomData = sview.getAtomData(p);
            position = atomData.position;
            size = atomData.radius;
            color = atomData.color;
            if (!what || what.text) {
                text = [];
                sview.eachAtom(ap => text.push(labelFactory.atomLabel(ap)));
            }
        }
        else if (this.labelGrouping === 'residue') {
            if (!what || what.position)
                positionN = [];
            if (!what || what.color)
                colorN = [];
            if (!what || what.radius)
                sizeN = [];
            if (!what || what.text)
                text = [];
            if (p.colorParams)
                p.colorParams.structure = sview.getStructure();
            const colormaker = ColormakerRegistry.getScheme(p.colorParams);
            const radiusFactory = new RadiusFactory(p.radiusParams);
            const ap1 = sview.getAtomProxy();
            let i = 0;
            sview.eachResidue(rp => {
                const i3 = i * 3;
                if (rp.isProtein() || rp.isNucleic()) {
                    ap1.index = rp.traceAtomIndex;
                    if (!what || what.position) {
                        ap1.positionToArray(positionN, i3);
                    }
                }
                else {
                    ap1.index = rp.atomOffset;
                    if (!what || what.position) {
                        rp.positionToArray(positionN, i3);
                    }
                }
                if (!what || what.color) {
                    colormaker.atomColorToArray(ap1, colorN, i3);
                }
                if (!what || what.radius) {
                    sizeN[i] = radiusFactory.atomRadius(ap1);
                }
                if (!what || what.text) {
                    text.push(labelFactory.atomLabel(ap1));
                }
                ++i;
            });
            if (!what || what.position)
                position = new Float32Array(positionN);
            if (!what || what.color)
                color = new Float32Array(colorN);
            if (!what || what.radius)
                size = new Float32Array(sizeN);
        }
        return { position: position, size: size, color: color, text: text };
    }
    createData(sview) {
        const what = { position: true, color: true, radius: true, text: true };
        const textBuffer = new TextBuffer(this.getTextData(sview, what), this.getBufferParams({
            fontFamily: this.fontFamily,
            fontStyle: this.fontStyle,
            fontWeight: this.fontWeight,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            zOffset: this.zOffset,
            attachment: this.attachment,
            showBorder: this.showBorder,
            borderColor: this.borderColor,
            borderWidth: this.borderWidth,
            showBackground: this.showBackground,
            backgroundColor: this.backgroundColor,
            backgroundMargin: this.backgroundMargin,
            backgroundOpacity: this.backgroundOpacity,
            fixedSize: this.fixedSize
        }));
        return { bufferList: [textBuffer] };
    }
    updateData(what, data) {
        data.bufferList[0].setAttributes(this.getTextData(data.sview, what));
    }
    getAtomRadius() {
        return 0;
    }
}
RepresentationRegistry.add('label', LabelRepresentation);

/**
 * @file Line Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Determine which atoms in  a Structure[View] form no bonds to any other atoms
 * in that Structure.
 *
 * This differs from setting the selection to "nonbonded" as it finds atoms
 * that have no bonds within the current selection.
 * @param  {Structure} structure - The Structure or StructureView object
 * @return {AtomSet} AtomSet of lone atoms
 */
function getLoneAtomSet(structure) {
    const atomSet = structure.getAtomSet();
    const bondSet = structure.getBondSet();
    const bp = structure.getBondProxy();
    bondSet.forEach(function (idx) {
        bp.index = idx;
        atomSet.clear(bp.atomIndex1);
        atomSet.clear(bp.atomIndex2);
    });
    return atomSet;
}
/**
 * Line representation
 */
class LineRepresentation extends StructureRepresentation {
    /**
     * Create Line representation object
     * @param {Structure} structure - the structure to be represented
     * @param {Viewer} viewer - a viewer object
     * @param {RepresentationParameters} params - representation parameters, plus the properties listed below
     * @property {String} multipleBond - one off "off", "symmetric", "offset"
     * @param {Float} params.bondSpacing - spacing for multiple bond rendering
     * @param {Integer} params.linewidth - width of lines
     * @param {Boolean} params.lines - render bonds as lines
     * @param {String} params.crosses - render atoms as crosses: "off", "all" or "lone" (default)
     * @param {Float} params.crossSize - size of cross
     * @param {null} params.flatShaded - not available
     * @param {null} params.side - not available
     * @param {null} params.wireframe - not available
     * @param {null} params.roughness - not available
     * @param {null} params.metalness - not available
     * @param {null} params.diffuse - not available
     */
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'line';
        this.parameters = Object.assign({
            multipleBond: {
                type: 'select',
                rebuild: true,
                options: {
                    'off': 'off',
                    'symmetric': 'symmetric',
                    'offset': 'offset'
                }
            },
            bondSpacing: {
                type: 'number', precision: 2, max: 2.0, min: 0.5
            },
            linewidth: {
                type: 'integer', max: 50, min: 1, buffer: true
            },
            lines: {
                type: 'boolean', rebuild: true
            },
            crosses: {
                type: 'select',
                rebuild: true,
                options: {
                    'off': 'off',
                    'lone': 'lone',
                    'all': 'all'
                }
            },
            crossSize: {
                type: 'number', precision: 2, max: 2.0, min: 0.1
            }
        }, this.parameters, {
            flatShaded: null,
            side: null,
            wireframe: null,
            roughness: null,
            metalness: null
        });
        this.init(params);
    }
    init(params) {
        var p = params || {};
        this.multipleBond = defaults(p.multipleBond, 'off');
        this.bondSpacing = defaults(p.bondSpacing, 1.0);
        this.linewidth = defaults(p.linewidth, 2);
        this.lines = defaults(p.lines, true);
        this.crosses = defaults(p.crosses, 'lone');
        this.crossSize = defaults(p.crossSize, 0.4);
        super.init(p);
    }
    getAtomRadius(atom) {
        return 0.1;
    }
    getBondParams(what, params) {
        params = Object.assign({
            multipleBond: this.multipleBond,
            bondSpacing: this.bondSpacing,
            radiusParams: { 'type': 'size', 'size': 0.1, 'scale': 1 }
        }, params);
        return super.getBondParams(what, params);
    }
    _crossData(what, sview) {
        if (what) {
            if (!what.position && !what.color)
                return;
        }
        const p = {};
        if (this.crosses === 'lone') {
            Object.assign(p, { atomSet: getLoneAtomSet(sview) });
        }
        const atomData = sview.getAtomData(this.getAtomParams(what, p));
        const crossData = {};
        const position = atomData.position;
        const color = atomData.color;
        const picking = atomData.picking;
        const size = (position || color).length;
        const attrSize = size * 3;
        let cPosition1 = new Float32Array(0);
        let cPosition2 = new Float32Array(0);
        let cColor = new Float32Array(0);
        let cColor2 = new Float32Array(0);
        let cOffset = 0;
        let pickingArray = new Float32Array(0);
        if (!what || what.position) {
            cPosition1 = crossData.position1 = new Float32Array(attrSize);
            cPosition2 = crossData.position2 = new Float32Array(attrSize);
            cOffset = this.crossSize / 2;
        }
        if (!what || what.color) {
            cColor = crossData.color = new Float32Array(attrSize);
            cColor2 = crossData.color2 = new Float32Array(attrSize);
        }
        if (!what || what.picking) {
            pickingArray = new Float32Array(atomData.picking.array.length * 3); // Needs padding??
        }
        for (let v = 0; v < size; v++) {
            const j = v * 3;
            const i = j * 3;
            if (!what || what.position) {
                const x = position[j];
                const y = position[j + 1];
                const z = position[j + 2];
                cPosition1[i] = x - cOffset;
                cPosition1[i + 1] = y;
                cPosition1[i + 2] = z;
                cPosition2[i] = x + cOffset;
                cPosition2[i + 1] = y;
                cPosition2[i + 2] = z;
                cPosition1[i + 3] = x;
                cPosition1[i + 4] = y - cOffset;
                cPosition1[i + 5] = z;
                cPosition2[i + 3] = x;
                cPosition2[i + 4] = y + cOffset;
                cPosition2[i + 5] = z;
                cPosition1[i + 6] = x;
                cPosition1[i + 7] = y;
                cPosition1[i + 8] = z - cOffset;
                cPosition2[i + 6] = x;
                cPosition2[i + 7] = y;
                cPosition2[i + 8] = z + cOffset;
            }
            if (!what || what.color) {
                const cimax = i + 9;
                for (let ci = i; ci < cimax; ci += 3) {
                    cColor[ci] = cColor2[ci] = color[j];
                    cColor[ci + 1] = cColor2[ci + 1] = color[j + 1];
                    cColor[ci + 2] = cColor2[ci + 2] = color[j + 2];
                }
            }
            if (!what || what.picking) {
                pickingArray[j] =
                    pickingArray[j + 1] =
                        pickingArray[j + 2] = picking.array[v];
            }
        }
        if (!what || what.picking) {
            crossData.picking = new AtomPicker(pickingArray, picking.structure);
        }
        return crossData;
    }
    createData(sview) {
        const what = { position: true, color: true, picking: true };
        const bufferList = [];
        if (this.lines) {
            const bondData = sview.getBondData(this.getBondParams(what));
            const lineBuffer = new WideLineBuffer(bondData, this.getBufferParams({ linewidth: this.linewidth }));
            bufferList.push(lineBuffer);
        }
        if (this.crosses !== 'off') {
            const crossBuffer = new WideLineBuffer(this._crossData(what, sview), this.getBufferParams({ linewidth: this.linewidth }));
            bufferList.push(crossBuffer);
        }
        return {
            bufferList: bufferList
        };
    }
    updateData(what, data) {
        let bufferIdx = 0;
        if (this.lines) {
            const bondData = data.sview.getBondData(this.getBondParams(what));
            const lineAttributes = {};
            if (!what || what.position) {
                Object.assign(lineAttributes, {
                    position1: bondData.position1,
                    position2: bondData.position2
                });
            }
            if (!what || what.color) {
                Object.assign(lineAttributes, {
                    color: bondData.color,
                    color2: bondData.color2
                });
            }
            data.bufferList[bufferIdx++].setAttributes(lineAttributes);
        }
        if (this.crosses !== 'off') {
            const crossData = this._crossData(what, data.sview);
            const crossAttributes = {};
            if (!what || what.position) {
                Object.assign(crossAttributes, {
                    position1: crossData.position1,
                    position2: crossData.position2
                });
            }
            if (!what || what.color) {
                Object.assign(crossAttributes, {
                    color: crossData.color,
                    color2: crossData.color2
                });
            }
            data.bufferList[bufferIdx++].setAttributes(crossAttributes);
        }
    }
    setParameters(params) {
        var rebuild = false;
        var what = {};
        if (params && (params.bondSpacing || params.crossSize)) {
            Object.assign(what, { position: true });
        }
        super.setParameters(params, what, rebuild);
        return this;
    }
}
RepresentationRegistry.add('line', LineRepresentation);

function makeGrid(length, width, height, DataCtor, elemSize) {
    DataCtor = DataCtor || Int32Array;
    elemSize = elemSize || 1;
    const data = new DataCtor(length * width * height * elemSize);
    function index(x, y, z) {
        return ((((x * width) + y) * height) + z) * elemSize;
    }
    function set(x, y, z, ...args) {
        const i = index(x, y, z);
        for (let j = 0; j < elemSize; ++j) {
            data[i + j] = args[j];
        }
    }
    function toArray(x, y, z, array = [], offset = 0) {
        const i = index(x, y, z);
        for (let j = 0; j < elemSize; ++j) {
            array[offset + j] = data[i + j];
        }
    }
    function fromArray(x, y, z, array, offset = 0) {
        const i = index(x, y, z);
        for (let j = 0; j < elemSize; ++j) {
            data[i + j] = array[offset + j];
        }
    }
    function copy(grid) {
        data.set(grid.data);
    }
    // function clone() {
    //   return makeGrid(
    //     length, width, height, DataCtor, elemSize
    //   ).copy(this)
    // }
    return { data, index, set, toArray, fromArray, copy };
}

/**
 * @file EDT Surface
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function EDTSurface(coordList, radiusList, indexList) {
    // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
    // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
    //
    // Permission to use, copy, modify, and distribute this program for
    // any purpose, with or without fee, is hereby granted, provided that
    // the notices on the head, the reference information, and this
    // copyright notice appear in all copies or substantial portions of
    // the Software. It is provided "as is" without express or implied
    // warranty.
    //
    // ported to JavaScript by biochem_fan (http://webglmol.sourceforge.jp/)
    // refactored by dkoes (https://github.com/dkoes)
    //
    // adapted to NGL by Alexander Rose
    var radiusDict = getRadiusDict(radiusList);
    var bbox = computeBoundingBox(coordList);
    if (coordList.length === 0) {
        bbox[0].set([0, 0, 0]);
        bbox[1].set([0, 0, 0]);
    }
    var min = bbox[0];
    var max = bbox[1];
    var probeRadius, scaleFactor, cutoff;
    var pLength, pWidth, pHeight;
    var matrix, ptran;
    var depty, widxz;
    var cutRadius;
    var setAtomID;
    var vpBits, vpDistance, vpAtomID;
    function init(btype, _probeRadius, _scaleFactor, _cutoff, _setAtomID) {
        probeRadius = _probeRadius || 1.4;
        scaleFactor = _scaleFactor || 2.0;
        setAtomID = _setAtomID || true;
        var maxRadius = 0;
        for (var radius in radiusDict) {
            maxRadius = Math.max(maxRadius, radius);
        }
        var grid = getSurfaceGrid(min, max, maxRadius, scaleFactor, btype ? probeRadius : 0);
        pLength = grid.dim[0];
        pWidth = grid.dim[1];
        pHeight = grid.dim[2];
        matrix = grid.matrix;
        ptran = grid.tran;
        scaleFactor = grid.scaleFactor;
        // boundingatom caches
        depty = {};
        widxz = {};
        boundingatom(btype);
        cutRadius = probeRadius * scaleFactor;
        if (_cutoff) {
            cutoff = _cutoff;
        }
        else {
            // cutoff = Math.max( 0.1, -1.2 + scaleFactor * probeRadius );
            cutoff = probeRadius / scaleFactor;
        }
        vpBits = new Uint8Array(pLength * pWidth * pHeight);
        if (btype) {
            vpDistance = new Float64Array(pLength * pWidth * pHeight);
        }
        if (setAtomID) {
            vpAtomID = new Int32Array(pLength * pWidth * pHeight);
        }
    }
    // constants for vpBits bitmasks
    var INOUT = 1;
    var ISDONE = 2;
    var ISBOUND = 4;
    var nb = [
        new Int32Array([1, 0, 0]), new Int32Array([-1, 0, 0]),
        new Int32Array([0, 1, 0]), new Int32Array([0, -1, 0]),
        new Int32Array([0, 0, 1]), new Int32Array([0, 0, -1]),
        new Int32Array([1, 1, 0]), new Int32Array([1, -1, 0]),
        new Int32Array([-1, 1, 0]), new Int32Array([-1, -1, 0]),
        new Int32Array([1, 0, 1]), new Int32Array([1, 0, -1]),
        new Int32Array([-1, 0, 1]), new Int32Array([-1, 0, -1]),
        new Int32Array([0, 1, 1]), new Int32Array([0, 1, -1]),
        new Int32Array([0, -1, 1]), new Int32Array([0, -1, -1]),
        new Int32Array([1, 1, 1]), new Int32Array([1, 1, -1]),
        new Int32Array([1, -1, 1]), new Int32Array([-1, 1, 1]),
        new Int32Array([1, -1, -1]), new Int32Array([-1, -1, 1]),
        new Int32Array([-1, 1, -1]), new Int32Array([-1, -1, -1])
    ];
    //
    this.getVolume = function (type, probeRadius, scaleFactor, cutoff, setAtomID) {
        console.time('EDTSurface.getVolume');
        var btype = type !== 'vws';
        init(btype, probeRadius, scaleFactor, cutoff, setAtomID);
        fillvoxels(btype);
        buildboundary();
        if (type === 'ms' || type === 'ses') {
            fastdistancemap();
        }
        if (type === 'ses') {
            boundingatom(false);
            fillvoxelswaals();
        }
        marchingcubeinit(type);
        // set atomindex in the volume data
        for (var i = 0, il = vpAtomID.length; i < il; ++i) {
            vpAtomID[i] = indexList[vpAtomID[i]];
        }
        console.timeEnd('EDTSurface.getVolume');
        return {
            data: vpBits,
            nx: pHeight,
            ny: pWidth,
            nz: pLength,
            atomindex: vpAtomID
        };
    };
    this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
        var vd = this.getVolume(type, probeRadius, scaleFactor, cutoff, setAtomID);
        var volsurf = new VolumeSurface(vd.data, vd.nx, vd.ny, vd.nz, vd.atomindex);
        return volsurf.getSurface(1, smooth, undefined, matrix, contour);
    };
    function boundingatom(btype) {
        var r;
        var j;
        var k;
        var txz;
        var tdept;
        var sradius;
        var tradius;
        var widxzR;
        var deptyName;
        var indx;
        for (var name in radiusDict) {
            r = parseFloat(name);
            if (depty[name])
                continue;
            if (!btype) {
                tradius = r * scaleFactor + 0.5;
            }
            else {
                tradius = (r + probeRadius) * scaleFactor + 0.5;
            }
            sradius = tradius * tradius;
            widxzR = Math.floor(tradius) + 1;
            deptyName = new Int32Array(widxzR * widxzR);
            indx = 0;
            for (j = 0; j < widxzR; ++j) {
                for (k = 0; k < widxzR; ++k) {
                    txz = j * j + k * k;
                    if (txz > sradius) {
                        deptyName[indx] = -1;
                    }
                    else {
                        tdept = Math.sqrt(sradius - txz);
                        deptyName[indx] = Math.floor(tdept);
                    }
                    ++indx;
                }
            }
            widxz[name] = widxzR;
            depty[name] = deptyName;
        }
    }
    function fillatom(idx) {
        var ci = idx * 3;
        var ri = idx;
        var cx, cy, cz, ox, oy, oz, mi, mj, mk, i, j, k, si, sj, sk;
        var ii, jj, kk;
        cx = Math.floor(0.5 + scaleFactor * (coordList[ci] + ptran[0]));
        cy = Math.floor(0.5 + scaleFactor * (coordList[ci + 1] + ptran[1]));
        cz = Math.floor(0.5 + scaleFactor * (coordList[ci + 2] + ptran[2]));
        var at = radiusList[ri];
        var deptyAt = depty[at];
        var nind = 0;
        var pWH = pWidth * pHeight;
        var n = widxz[at];
        var deptyAtNind;
        for (i = 0; i < n; ++i) {
            for (j = 0; j < n; ++j) {
                deptyAtNind = deptyAt[nind];
                if (deptyAtNind !== -1) {
                    for (ii = -1; ii < 2; ++ii) {
                        for (jj = -1; jj < 2; ++jj) {
                            for (kk = -1; kk < 2; ++kk) {
                                if (ii !== 0 && jj !== 0 && kk !== 0) {
                                    mi = ii * i;
                                    mk = kk * j;
                                    for (k = 0; k <= deptyAtNind; ++k) {
                                        mj = k * jj;
                                        si = cx + mi;
                                        sj = cy + mj;
                                        sk = cz + mk;
                                        if (si < 0 || sj < 0 || sk < 0 ||
                                            si >= pLength || sj >= pWidth || sk >= pHeight) {
                                            continue;
                                        }
                                        var index = si * pWH + sj * pHeight + sk;
                                        if (!setAtomID) {
                                            vpBits[index] |= INOUT;
                                        }
                                        else {
                                            if (!(vpBits[index] & INOUT)) {
                                                vpBits[index] |= INOUT;
                                                vpAtomID[index] = idx;
                                            }
                                            else if (vpBits[index] & INOUT) {
                                                var ci2 = vpAtomID[index];
                                                if (ci2 !== ci) {
                                                    ox = cx + mi - Math.floor(0.5 + scaleFactor * (coordList[ci2] + ptran[0]));
                                                    oy = cy + mj - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 1] + ptran[1]));
                                                    oz = cz + mk - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 2] + ptran[2]));
                                                    if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                                                        vpAtomID[index] = idx;
                                                    }
                                                }
                                            }
                                        }
                                    } // k
                                } // if
                            } // kk
                        } // jj
                    } // ii
                } // if
                nind++;
            } // j
        } // i
    }
    function fillvoxels(btype) {
        console.time('EDTSurface fillvoxels');
        var i, il;
        for (i = 0, il = vpBits.length; i < il; ++i) {
            vpBits[i] = 0;
            if (btype)
                vpDistance[i] = -1.0;
            if (setAtomID)
                vpAtomID[i] = -1;
        }
        for (i = 0, il = coordList.length / 3; i < il; ++i) {
            fillatom(i);
        }
        for (i = 0, il = vpBits.length; i < il; ++i) {
            if (vpBits[i] & INOUT) {
                vpBits[i] |= ISDONE;
            }
        }
        console.timeEnd('EDTSurface fillvoxels');
    }
    function fillAtomWaals(idx) {
        var ci = idx * 3;
        var ri = idx;
        var cx;
        var cy;
        var cz;
        var ox;
        var oy;
        var oz;
        var nind = 0;
        var mi;
        var mj;
        var mk;
        var si;
        var sj;
        var sk;
        var i;
        var j;
        var k;
        var ii;
        var jj;
        var kk;
        var n;
        cx = Math.floor(0.5 + scaleFactor * (coordList[ci] + ptran[0]));
        cy = Math.floor(0.5 + scaleFactor * (coordList[ci + 1] + ptran[1]));
        cz = Math.floor(0.5 + scaleFactor * (coordList[ci + 2] + ptran[2]));
        var at = radiusList[ri];
        var pWH = pWidth * pHeight;
        for (i = 0, n = widxz[at]; i < n; ++i) {
            for (j = 0; j < n; ++j) {
                if (depty[at][nind] !== -1) {
                    for (ii = -1; ii < 2; ++ii) {
                        for (jj = -1; jj < 2; ++jj) {
                            for (kk = -1; kk < 2; ++kk) {
                                if (ii !== 0 && jj !== 0 && kk !== 0) {
                                    mi = ii * i;
                                    mk = kk * j;
                                    for (k = 0; k <= depty[at][nind]; ++k) {
                                        mj = k * jj;
                                        si = cx + mi;
                                        sj = cy + mj;
                                        sk = cz + mk;
                                        if (si < 0 || sj < 0 || sk < 0 ||
                                            si >= pLength || sj >= pWidth || sk >= pHeight) {
                                            continue;
                                        }
                                        var index = si * pWH + sj * pHeight + sk;
                                        if (!(vpBits[index] & ISDONE)) {
                                            vpBits[index] |= ISDONE;
                                            if (setAtomID)
                                                vpAtomID[index] = idx;
                                        }
                                        else if (setAtomID) {
                                            var ci2 = vpAtomID[index];
                                            ox = Math.floor(0.5 + scaleFactor * (coordList[ci2] + ptran[0]));
                                            oy = Math.floor(0.5 + scaleFactor * (coordList[ci2 + 1] + ptran[1]));
                                            oz = Math.floor(0.5 + scaleFactor * (coordList[ci2 + 2] + ptran[2]));
                                            if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                                                vpAtomID[index] = idx;
                                            }
                                        }
                                    } // k
                                } // if
                            } // kk
                        } // jj
                    } // ii
                } // if
                nind++;
            } // j
        } // i
    }
    function fillvoxelswaals() {
        var i, il;
        for (i = 0, il = vpBits.length; i < il; ++i) {
            vpBits[i] &= ~ISDONE; // not isdone
        }
        for (i = 0, il = coordList.length / 3; i < il; ++i) {
            fillAtomWaals(i);
        }
    }
    function buildboundary() {
        var i, j, k;
        var pWH = pWidth * pHeight;
        for (i = 0; i < pLength; ++i) {
            for (j = 0; j < pHeight; ++j) {
                for (k = 0; k < pWidth; ++k) {
                    var index = i * pWH + k * pHeight + j;
                    if (vpBits[index] & INOUT) {
                        // var flagbound = false;
                        var ii = 0;
                        // while( !flagbound && ii < 26 ){
                        while (ii < 26) {
                            var ti = i + nb[ii][0];
                            var tj = j + nb[ii][2];
                            var tk = k + nb[ii][1];
                            if (ti > -1 && ti < pLength &&
                                tk > -1 && tk < pWidth &&
                                tj > -1 && tj < pHeight &&
                                !(vpBits[ti * pWH + tk * pHeight + tj] & INOUT)) {
                                vpBits[index] |= ISBOUND;
                                // flagbound = true;
                                break;
                            }
                            else {
                                ii++;
                            }
                        }
                    }
                } // k
            } // j
        } // i
    }
    function fastdistancemap() {
        console.time('EDTSurface fastdistancemap');
        var i, j, k, n;
        var boundPoint = makeGrid(pLength, pWidth, pHeight, Uint16Array, 3);
        var pWH = pWidth * pHeight;
        var cutRSq = cutRadius * cutRadius;
        var totalsurfacevox = 0;
        // var totalinnervox = 0;
        var index;
        for (i = 0; i < pLength; ++i) {
            for (j = 0; j < pWidth; ++j) {
                for (k = 0; k < pHeight; ++k) {
                    index = i * pWH + j * pHeight + k;
                    vpBits[index] &= ~ISDONE;
                    if (vpBits[index] & INOUT) {
                        if (vpBits[index] & ISBOUND) {
                            boundPoint.set(i, j, k, i, j, k);
                            vpDistance[index] = 0;
                            vpBits[index] |= ISDONE;
                            totalsurfacevox += 1;
                        } /* else{
                            totalinnervox += 1;
                        } */
                    }
                }
            }
        }
        var inarray = new Int32Array(3 * totalsurfacevox);
        var positin = 0;
        var outarray = new Int32Array(3 * totalsurfacevox);
        var positout = 0;
        for (i = 0; i < pLength; ++i) {
            for (j = 0; j < pWidth; ++j) {
                for (k = 0; k < pHeight; ++k) {
                    index = i * pWH + j * pHeight + k;
                    if (vpBits[index] & ISBOUND) {
                        inarray[positin] = i;
                        inarray[positin + 1] = j;
                        inarray[positin + 2] = k;
                        positin += 3;
                        vpBits[index] &= ~ISBOUND;
                    }
                }
            }
        }
        do {
            positout = fastoneshell(inarray, boundPoint, positin, outarray);
            positin = 0;
            for (i = 0, n = positout; i < n; i += 3) {
                index = pWH * outarray[i] + pHeight * outarray[i + 1] + outarray[i + 2];
                vpBits[index] &= ~ISBOUND;
                if (vpDistance[index] <= 1.0404 * cutRSq) {
                    // if( vpDistance[ index ] <= 1.02 * cutRadius ){
                    inarray[positin] = outarray[i];
                    inarray[positin + 1] = outarray[i + 1];
                    inarray[positin + 2] = outarray[i + 2];
                    positin += 3;
                }
            }
        } while (positin > 0);
        // var cutsf = Math.max( 0, scaleFactor - 0.5 );
        // cutoff = cutRadius - 0.5 / ( 0.1 + cutsf );
        var cutoffSq = cutoff * cutoff;
        var index2;
        var bp = new Uint16Array(3);
        for (i = 0; i < pLength; ++i) {
            for (j = 0; j < pWidth; ++j) {
                for (k = 0; k < pHeight; ++k) {
                    index = i * pWH + j * pHeight + k;
                    vpBits[index] &= ~ISBOUND;
                    // ses solid
                    if (vpBits[index] & INOUT) {
                        if (!(vpBits[index] & ISDONE) ||
                            ((vpBits[index] & ISDONE) && vpDistance[index] >= cutoffSq)) {
                            vpBits[index] |= ISBOUND;
                            if (setAtomID && (vpBits[index] & ISDONE)) {
                                boundPoint.toArray(i, j, k, bp);
                                index2 = bp[0] * pWH + bp[1] * pHeight + bp[2];
                                vpAtomID[index] = vpAtomID[index2];
                            }
                        }
                    }
                }
            }
        }
        console.timeEnd('EDTSurface fastdistancemap');
    }
    function fastoneshell(inarray, boundPoint, positin, outarray) {
        // *allocout,voxel2
        // ***boundPoint, int*
        // outnum, int *elimi)
        var tx, ty, tz;
        var dx, dy, dz;
        var i, j, n;
        var square;
        var index;
        var nbj;
        var bp = new Uint16Array(3);
        var positout = 0;
        if (positin === 0) {
            return positout;
        }
        var tnvix = -1;
        var tnviy = -1;
        var tnviz = -1;
        var pWH = pWidth * pHeight;
        for (i = 0, n = positin; i < n; i += 3) {
            tx = inarray[i];
            ty = inarray[i + 1];
            tz = inarray[i + 2];
            boundPoint.toArray(tx, ty, tz, bp);
            for (j = 0; j < 6; ++j) {
                nbj = nb[j];
                tnvix = tx + nbj[0];
                tnviy = ty + nbj[1];
                tnviz = tz + nbj[2];
                if (tnvix < pLength && tnvix > -1 &&
                    tnviy < pWidth && tnviy > -1 &&
                    tnviz < pHeight && tnviz > -1) {
                    index = tnvix * pWH + pHeight * tnviy + tnviz;
                    if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                        boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                        dx = tnvix - bp[0];
                        dy = tnviy - bp[1];
                        dz = tnviz - bp[2];
                        square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );
                        vpDistance[index] = square;
                        vpBits[index] |= ISDONE;
                        vpBits[index] |= ISBOUND;
                        outarray[positout] = tnvix;
                        outarray[positout + 1] = tnviy;
                        outarray[positout + 2] = tnviz;
                        positout += 3;
                    }
                    else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                        dx = tnvix - bp[0];
                        dy = tnviy - bp[1];
                        dz = tnviz - bp[2];
                        square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );
                        if (square < vpDistance[index]) {
                            boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                            vpDistance[index] = square;
                            if (!(vpBits[index] & ISBOUND)) {
                                vpBits[index] |= ISBOUND;
                                outarray[positout] = tnvix;
                                outarray[positout + 1] = tnviy;
                                outarray[positout + 2] = tnviz;
                                positout += 3;
                            }
                        }
                    }
                }
            }
        }
        for (i = 0, n = positin; i < n; i += 3) {
            tx = inarray[i];
            ty = inarray[i + 1];
            tz = inarray[i + 2];
            boundPoint.toArray(tx, ty, tz, bp);
            for (j = 6; j < 18; j++) {
                nbj = nb[j];
                tnvix = tx + nbj[0];
                tnviy = ty + nbj[1];
                tnviz = tz + nbj[2];
                if (tnvix < pLength && tnvix > -1 &&
                    tnviy < pWidth && tnviy > -1 &&
                    tnviz < pHeight && tnviz > -1) {
                    index = tnvix * pWH + pHeight * tnviy + tnviz;
                    if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                        boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                        dx = tnvix - bp[0];
                        dy = tnviy - bp[1];
                        dz = tnviz - bp[2];
                        square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );
                        vpDistance[index] = square;
                        vpBits[index] |= ISDONE;
                        vpBits[index] |= ISBOUND;
                        outarray[positout] = tnvix;
                        outarray[positout + 1] = tnviy;
                        outarray[positout + 2] = tnviz;
                        positout += 3;
                    }
                    else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                        dx = tnvix - bp[0];
                        dy = tnviy - bp[1];
                        dz = tnviz - bp[2];
                        square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );
                        if (square < vpDistance[index]) {
                            boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                            vpDistance[index] = square;
                            if (!(vpBits[index] & ISBOUND)) {
                                vpBits[index] |= ISBOUND;
                                outarray[positout] = tnvix;
                                outarray[positout + 1] = tnviy;
                                outarray[positout + 2] = tnviz;
                                positout += 3;
                            }
                        }
                    }
                }
            }
        }
        for (i = 0, n = positin; i < n; i += 3) {
            tx = inarray[i];
            ty = inarray[i + 1];
            tz = inarray[i + 2];
            boundPoint.toArray(tx, ty, tz, bp);
            for (j = 18; j < 26; j++) {
                nbj = nb[j];
                tnvix = tx + nbj[0];
                tnviy = ty + nbj[1];
                tnviz = tz + nbj[2];
                if (tnvix < pLength && tnvix > -1 &&
                    tnviy < pWidth && tnviy > -1 &&
                    tnviz < pHeight && tnviz > -1) {
                    index = tnvix * pWH + pHeight * tnviy + tnviz;
                    if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
                        boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                        dx = tnvix - bp[0];
                        dy = tnviy - bp[1];
                        dz = tnviz - bp[2];
                        square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );
                        vpDistance[index] = square;
                        vpBits[index] |= ISDONE;
                        vpBits[index] |= ISBOUND;
                        outarray[positout] = tnvix;
                        outarray[positout + 1] = tnviy;
                        outarray[positout + 2] = tnviz;
                        positout += 3;
                    }
                    else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
                        dx = tnvix - bp[0];
                        dy = tnviy - bp[1];
                        dz = tnviz - bp[2];
                        square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );
                        if (square < vpDistance[index]) {
                            boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
                            vpDistance[index] = square;
                            if (!(vpBits[index] & ISBOUND)) {
                                vpBits[index] |= ISBOUND;
                                outarray[positout] = tnvix;
                                outarray[positout + 1] = tnviy;
                                outarray[positout + 2] = tnviz;
                                positout += 3;
                            }
                        }
                    }
                }
            }
        }
        return positout;
    }
    function marchingcubeinit(stype) {
        var i;
        var n = vpBits.length;
        if (stype === 'vws') {
            for (i = 0; i < n; ++i) {
                vpBits[i] &= ~ISBOUND;
                vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
            }
        }
        else if (stype === 'ms') { // ses without vdw => ms
            for (i = 0; i < n; ++i) {
                vpBits[i] &= ~ISDONE;
                if (vpBits[i] & ISBOUND) {
                    vpBits[i] |= ISDONE;
                }
                vpBits[i] &= ~ISBOUND;
                vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
            }
        }
        else if (stype === 'ses') {
            for (i = 0; i < n; ++i) {
                if ((vpBits[i] & ISBOUND) && (vpBits[i] & ISDONE)) {
                    vpBits[i] &= ~ISBOUND;
                }
                else if ((vpBits[i] & ISBOUND) && !(vpBits[i] & ISDONE)) {
                    vpBits[i] |= ISDONE;
                }
                vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
            }
        }
        else if (stype === 'sas') {
            for (i = 0; i < n; ++i) {
                vpBits[i] &= ~ISBOUND;
                vpBits[i] = (vpBits[i] & ISDONE) ? 1 : 0;
            }
        }
    }
}
Object.assign(EDTSurface, { __deps: [
        getSurfaceGrid, getRadiusDict, VolumeSurface, computeBoundingBox, makeGrid
    ] });

/**
 * @file AV Surface
 * @author Fred Ludlow <fred.ludlow@gmail.com>
 * @private
 */
function makeAVHash(atomsX, atomsY, atomsZ, atomsR, min, max, maxDistance) {
    maxDistance = Math.max(0.1, maxDistance); // Avoid maxDistance of zero, see #802
    var nAtoms = atomsX.length;
    var minX = min[0];
    var minY = min[1];
    var minZ = min[2];
    var maxX = max[0];
    var maxY = max[1];
    var maxZ = max[2];
    function hashFunc(w, minW) {
        return Math.floor((w - minW) / maxDistance);
    }
    var iDim = hashFunc(maxX, minX) + 1;
    var jDim = hashFunc(maxY, minY) + 1;
    var kDim = hashFunc(maxZ, minZ) + 1;
    var nCells = iDim * jDim * kDim;
    var jkDim = jDim * kDim;
    /* Get cellID for cartesian x,y,z */
    var cellID = function (x, y, z) {
        return (((hashFunc(x, minX) * jDim) + hashFunc(y, minY)) * kDim) + hashFunc(z, minZ);
    };
    /* Initial building, could probably be optimized further */
    var preHash = []; // preHash[ cellID ] = [ atomId1, atomId2 ];
    for (var i = 0; i < nAtoms; i++) {
        var cid = cellID(atomsX[i], atomsY[i], atomsZ[i]);
        if (preHash[cid] === undefined) {
            preHash[cid] = [i];
        }
        else {
            preHash[cid].push(i);
        }
    }
    var cellOffsets = new Uint32Array(nCells);
    var cellLengths = new Uint16Array(nCells);
    var data = new Uint32Array(nAtoms);
    var offset = 0;
    var maxCellLength = 0;
    for (i = 0; i < nCells; i++) {
        var start = cellOffsets[i] = offset;
        var subArray = preHash[i];
        if (subArray !== undefined) {
            for (var j = 0; j < subArray.length; j++) {
                data[offset] = subArray[j];
                offset++;
            }
        }
        var cellLength = offset - start;
        cellLengths[i] = cellLength;
        if (cellLength > maxCellLength) {
            maxCellLength = cellLength;
        }
    }
    // Maximum number of neighbours we could ever produce (27 adjacent cells of equal population)
    const neighbourListLength = (27 * maxCellLength) + 1;
    /**
     * Populate the supplied out array with atom indices that are within rAtom + rExtra
     * of x,y,z
     *
     * -1 in out array indicates the end of the list
     *
     * @param  {Float} x - x coordinate
     * @param  {Float} y - y coordinate
     * @param  {Float} z - z coordinate
     * @param  {Float} rExtra - additional radius
     * @param  {Float32Array} out - pre-allocated output array
     * @return {undefined}
     */
    const withinRadii = function (x, y, z, rExtra, out) {
        var outIdx = 0;
        var nearI = hashFunc(x, minX);
        var nearJ = hashFunc(y, minY);
        var nearK = hashFunc(z, minZ);
        var loI = Math.max(0, nearI - 1);
        var loJ = Math.max(0, nearJ - 1);
        var loK = Math.max(0, nearK - 1);
        var hiI = Math.min(iDim, nearI + 2);
        var hiJ = Math.min(jDim, nearJ + 2);
        var hiK = Math.min(kDim, nearK + 2);
        for (var i = loI; i < hiI; ++i) {
            var iOffset = i * jkDim;
            for (var j = loJ; j < hiJ; ++j) {
                var jOffset = j * kDim;
                for (var k = loK; k < hiK; ++k) {
                    var cid = iOffset + jOffset + k;
                    var cellStart = cellOffsets[cid];
                    var cellEnd = cellStart + cellLengths[cid];
                    for (var dataIndex = cellStart; dataIndex < cellEnd; dataIndex++) {
                        var atomIndex = data[dataIndex];
                        var dx = atomsX[atomIndex] - x;
                        var dy = atomsY[atomIndex] - y;
                        var dz = atomsZ[atomIndex] - z;
                        var rSum = atomsR[atomIndex] + rExtra;
                        if ((dx * dx + dy * dy + dz * dz) <= (rSum * rSum)) {
                            out[outIdx++] = data[dataIndex];
                        }
                    }
                }
            }
        }
        // Add terminator
        out[outIdx] = -1;
    };
    return {
        neighbourListLength: neighbourListLength,
        withinRadii: withinRadii
    };
}
function AVSurface(coordList, radiusList, indexList) {
    // Field generation method adapted from AstexViewer (Mike Hartshorn)
    // by Fred Ludlow.
    // Other parts based heavily on NGL (Alexander Rose) EDT Surface class
    //
    // Should work as a drop-in alternative to EDTSurface (though some of
    // the EDT paramters are not relevant in this method).
    const nAtoms = radiusList.length;
    const x = new Float32Array(nAtoms);
    const y = new Float32Array(nAtoms);
    const z = new Float32Array(nAtoms);
    for (let i = 0; i < nAtoms; i++) {
        const ci = 3 * i;
        x[i] = coordList[ci];
        y[i] = coordList[ci + 1];
        z[i] = coordList[ci + 2];
    }
    let bbox = computeBoundingBox(coordList);
    if (coordList.length === 0) {
        bbox[0].set([0, 0, 0]);
        bbox[1].set([0, 0, 0]);
    }
    const min = bbox[0];
    const max = bbox[1];
    let r, r2; // Atom positions, expanded radii (squared)
    let maxRadius;
    // Parameters
    let probeRadius, scaleFactor, setAtomID, probePositions;
    // Cache last value for obscured test
    let lastClip = -1;
    // Grid params
    let dim, matrix, grid, atomIndex;
    // grid indices -> xyz coords
    let gridx, gridy, gridz;
    // Lookup tables:
    let sinTable, cosTable;
    // Spatial Hash
    let hash;
    // Neighbour array to be filled by hash
    let neighbours;
    // Vectors for Torus Projection
    const atob = new Float32Array([0.0, 0.0, 0.0]);
    const mid = new Float32Array([0.0, 0.0, 0.0]);
    const n1 = new Float32Array([0.0, 0.0, 0.0]);
    const n2 = new Float32Array([0.0, 0.0, 0.0]);
    let ngTorus;
    function init(_probeRadius, _scaleFactor, _setAtomID, _probePositions) {
        probeRadius = defaults(_probeRadius, 1.4);
        scaleFactor = defaults(_scaleFactor, 2.0);
        setAtomID = defaults(_setAtomID, true);
        probePositions = defaults(_probePositions, 30);
        r = new Float32Array(nAtoms);
        r2 = new Float32Array(nAtoms);
        for (let i = 0; i < r.length; ++i) {
            var rExt = radiusList[i] + probeRadius;
            r[i] = rExt;
            r2[i] = rExt * rExt;
        }
        maxRadius = 0;
        for (let j = 0; j < r.length; ++j) {
            if (r[j] > maxRadius)
                maxRadius = r[j];
        }
        initializeGrid();
        initializeAngleTables();
        initializeHash();
        lastClip = -1;
    }
    function fillGridDim(a, start, step) {
        for (let i = 0; i < a.length; i++) {
            a[i] = start + (step * i);
        }
    }
    function initializeGrid() {
        const surfGrid = getSurfaceGrid(min, max, maxRadius, scaleFactor, 0.0);
        scaleFactor = surfGrid.scaleFactor;
        dim = surfGrid.dim;
        matrix = surfGrid.matrix;
        ngTorus = Math.max(5, 2 + Math.floor(probeRadius * scaleFactor));
        grid = uniformArray(dim[0] * dim[1] * dim[2], -1001.0);
        atomIndex = new Int32Array(grid.length);
        gridx = new Float32Array(dim[0]);
        gridy = new Float32Array(dim[1]);
        gridz = new Float32Array(dim[2]);
        fillGridDim(gridx, min[0], 1 / scaleFactor);
        fillGridDim(gridy, min[1], 1 / scaleFactor);
        fillGridDim(gridz, min[2], 1 / scaleFactor);
    }
    function initializeAngleTables() {
        var theta = 0.0;
        var step = 2 * Math.PI / probePositions;
        cosTable = new Float32Array(probePositions);
        sinTable = new Float32Array(probePositions);
        for (var i = 0; i < probePositions; i++) {
            cosTable[i] = Math.cos(theta);
            sinTable[i] = Math.sin(theta);
            theta += step;
        }
    }
    function initializeHash() {
        hash = makeAVHash(x, y, z, r, min, max, 2.01 * maxRadius);
        neighbours = new Int32Array(hash.neighbourListLength);
    }
    function obscured(x, y, z, a, b) {
        // Is the point at x,y,z obscured by any of the atoms
        // specifeid by indices in neighbours. Ignore indices
        // a and b (these are the relevant atoms in projectPoints/Torii)
        // Cache the last clipped atom (as very often the same one in
        // subsequent calls)
        let ai;
        if (lastClip !== -1) {
            ai = lastClip;
            if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
                return ai;
            }
            else {
                lastClip = -1;
            }
        }
        var ni = 0;
        ai = neighbours[ni];
        while (ai >= 0) {
            if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
                lastClip = ai;
                return ai;
            }
            ai = neighbours[++ni];
        }
        lastClip = -1;
        return -1;
    }
    function singleAtomObscures(ai, x, y, z) {
        var ci = 3 * ai;
        var ra2 = r2[ai];
        var dx = coordList[ci] - x;
        var dy = coordList[ci + 1] - y;
        var dz = coordList[ci + 2] - z;
        var d2 = dx * dx + dy * dy + dz * dz;
        return d2 < ra2;
    }
    function projectPoints() {
        // For each atom:
        //     Iterate over a subsection of the grid, for each point:
        //         If current value < 0.0, unvisited, set positive
        //
        //         In any case: Project this point onto surface of the atomic sphere
        //         If this projected point is not obscured by any other atom
        //             Calcualte delta distance and set grid value to minimum of
        //             itself and delta
        // Should we alias frequently accessed closure variables??
        // Assume JS engine capable of optimizing this
        // anyway...
        for (var i = 0; i < nAtoms; i++) {
            var ax = x[i];
            var ay = y[i];
            var az = z[i];
            var ar = r[i];
            var ar2 = r2[i];
            hash.withinRadii(ax, ay, az, ar, neighbours);
            // Number of grid points, round this up...
            var ng = Math.ceil(ar * scaleFactor);
            // Center of the atom, mapped to grid points (take floor)
            var iax = Math.floor(scaleFactor * (ax - min[0]));
            var iay = Math.floor(scaleFactor * (ay - min[1]));
            var iaz = Math.floor(scaleFactor * (az - min[2]));
            // Extents of grid to consider for this atom
            var minx = Math.max(0, iax - ng);
            var miny = Math.max(0, iay - ng);
            var minz = Math.max(0, iaz - ng);
            // Add two to these points:
            // - iax are floor'd values so this ensures coverage
            // - these are loop limits (exclusive)
            var maxx = Math.min(dim[0], iax + ng + 2);
            var maxy = Math.min(dim[1], iay + ng + 2);
            var maxz = Math.min(dim[2], iaz + ng + 2);
            for (var ix = minx; ix < maxx; ix++) {
                var dx = gridx[ix] - ax;
                var xoffset = dim[1] * dim[2] * ix;
                for (var iy = miny; iy < maxy; iy++) {
                    var dy = gridy[iy] - ay;
                    var dxy2 = dx * dx + dy * dy;
                    var xyoffset = xoffset + dim[2] * iy;
                    for (var iz = minz; iz < maxz; iz++) {
                        var dz = gridz[iz] - az;
                        var d2 = dxy2 + dz * dz;
                        if (d2 < ar2) {
                            var idx = iz + xyoffset;
                            if (grid[idx] < 0.0) {
                                // Unvisited, make positive
                                grid[idx] = -grid[idx];
                            }
                            // Project on to the surface of the sphere
                            // sp is the projected point ( dx, dy, dz ) * ( ra / d )
                            var d = Math.sqrt(d2);
                            var ap = ar / d;
                            var spx = dx * ap;
                            var spy = dy * ap;
                            var spz = dz * ap;
                            spx += ax;
                            spy += ay;
                            spz += az;
                            if (obscured(spx, spy, spz, i, -1) === -1) {
                                var dd = ar - d;
                                if (dd < grid[idx]) {
                                    grid[idx] = dd;
                                    if (setAtomID)
                                        atomIndex[idx] = i;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function projectTorii() {
        for (var i = 0; i < nAtoms; i++) {
            hash.withinRadii(x[i], y[i], z[i], r[i], neighbours);
            var ia = 0;
            var ni = neighbours[ia];
            while (ni >= 0) {
                if (i < ni) {
                    projectTorus(i, ni);
                }
                ni = neighbours[++ia];
            }
        }
    }
    function projectTorus(a, b) {
        var r1 = r[a];
        var r2 = r[b];
        var dx = atob[0] = x[b] - x[a];
        var dy = atob[1] = y[b] - y[a];
        var dz = atob[2] = z[b] - z[a];
        var d2 = dx * dx + dy * dy + dz * dz;
        // This check now redundant as already done in AVHash.withinRadii
        // if( d2 > (( r1 + r2 ) * ( r1 + r2 )) ){ return; }
        var d = Math.sqrt(d2);
        // Find angle between a->b vector and the circle
        // of their intersection by cosine rule
        var cosA = (r1 * r1 + d * d - r2 * r2) / (2.0 * r1 * d);
        // distance along a->b at intersection
        var dmp = r1 * cosA;
        v3normalize(atob, atob);
        // Create normal to line
        normalToLine(n1, atob);
        v3normalize(n1, n1);
        // Cross together for second normal vector
        v3cross(n2, atob, n1);
        v3normalize(n2, n2);
        // r is radius of circle of intersection
        var rInt = Math.sqrt(r1 * r1 - dmp * dmp);
        v3multiplyScalar(n1, n1, rInt);
        v3multiplyScalar(n2, n2, rInt);
        v3multiplyScalar(atob, atob, dmp);
        mid[0] = atob[0] + x[a];
        mid[1] = atob[1] + y[a];
        mid[2] = atob[2] + z[a];
        lastClip = -1;
        var ng = ngTorus;
        for (var i = 0; i < probePositions; i++) {
            var cost = cosTable[i];
            var sint = sinTable[i];
            var px = mid[0] + cost * n1[0] + sint * n2[0];
            var py = mid[1] + cost * n1[1] + sint * n2[1];
            var pz = mid[2] + cost * n1[2] + sint * n2[2];
            if (obscured(px, py, pz, a, b) === -1) {
                // As above, iterate over our grid...
                // px, py, pz in grid coords
                var iax = Math.floor(scaleFactor * (px - min[0]));
                var iay = Math.floor(scaleFactor * (py - min[1]));
                var iaz = Math.floor(scaleFactor * (pz - min[2]));
                var minx = Math.max(0, iax - ng);
                var miny = Math.max(0, iay - ng);
                var minz = Math.max(0, iaz - ng);
                var maxx = Math.min(dim[0], iax + ng + 2);
                var maxy = Math.min(dim[1], iay + ng + 2);
                var maxz = Math.min(dim[2], iaz + ng + 2);
                for (var ix = minx; ix < maxx; ix++) {
                    dx = px - gridx[ix];
                    var xoffset = dim[1] * dim[2] * ix;
                    for (var iy = miny; iy < maxy; iy++) {
                        dy = py - gridy[iy];
                        var dxy2 = dx * dx + dy * dy;
                        var xyoffset = xoffset + dim[2] * iy;
                        for (var iz = minz; iz < maxz; iz++) {
                            dz = pz - gridz[iz];
                            d2 = dxy2 + dz * dz;
                            var idx = iz + xyoffset;
                            var current = grid[idx];
                            if (current > 0.0 && d2 < (current * current)) {
                                grid[idx] = Math.sqrt(d2);
                                if (setAtomID) {
                                    // Is this grid point closer to a or b?
                                    // Take dot product of atob and gridpoint->p (dx, dy, dz)
                                    const dp = dx * atob[0] + dy * atob[1] + dz * atob[2];
                                    atomIndex[idx] = dp < 0.0 ? b : a;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function normalToLine(out, p) {
        out[0] = out[1] = out[2] = 1.0;
        if (p[0] !== 0) {
            out[0] = (p[1] + p[2]) / -p[0];
        }
        else if (p[1] !== 0) {
            out[1] = (p[0] + p[2]) / -p[1];
        }
        else if (p[2] !== 0) {
            out[2] = (p[0] + p[1]) / -p[2];
        }
        return out;
    }
    function fixNegatives() {
        for (var i = 0; i < grid.length; i++) {
            if (grid[i] < 0)
                grid[i] = 0;
        }
    }
    function fixAtomIDs() {
        for (var i = 0; i < atomIndex.length; i++) {
            atomIndex[i] = indexList[atomIndex[i]];
        }
    }
    function getVolume(probeRadius, scaleFactor, setAtomID) {
        // Basic steps are:
        // 1) Initialize
        // 2) Project points
        // 3) Project torii
        console.time('AVSurface.getVolume');
        console.time('AVSurface.init');
        init(probeRadius, scaleFactor, setAtomID);
        console.timeEnd('AVSurface.init');
        console.time('AVSurface.projectPoints');
        projectPoints();
        console.timeEnd('AVSurface.projectPoints');
        console.time('AVSurface.projectTorii');
        projectTorii();
        console.timeEnd('AVSurface.projectTorii');
        fixNegatives();
        fixAtomIDs();
        console.timeEnd('AVSurface.getVolume');
    }
    this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
        // type and cutoff left in for compatibility with EDTSurface.getSurface
        // function signature
        getVolume(probeRadius, scaleFactor, setAtomID);
        var volsurf = new VolumeSurface(grid, dim[2], dim[1], dim[0], atomIndex);
        return volsurf.getSurface(probeRadius, false, undefined, matrix, contour);
    };
}
Object.assign(AVSurface, { __deps: [
        getSurfaceGrid, VolumeSurface, uniformArray, computeBoundingBox,
        v3multiplyScalar, v3cross, v3normalize,
        makeAVHash,
        defaults
    ] });

/**
 * @file Molecular Surface
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
WorkerRegistry.add('molsurf', function func(e, callback) {
    const a = e.data.args;
    const p = e.data.params;
    if (a && p) {
        const SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
        const surf = new SurfClass(a.coordList, a.radiusList, a.indexList);
        const sd = surf.getSurface(p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour);
        const transferList = [sd.position.buffer, sd.index.buffer];
        if (sd.normal)
            transferList.push(sd.normal.buffer);
        if (sd.atomindex)
            transferList.push(sd.atomindex.buffer);
        const data = {
            sd: sd,
            p: p
        };
        callback(data, transferList);
    }
}, [EDTSurface, AVSurface]);
/**
 * Create Molecular surfaces
 */
class MolecularSurface {
    constructor(structure) {
        this.structure = structure;
    }
    _getAtomData(params) {
        return this.structure.getAtomData({
            what: { position: true, radius: true, index: true },
            radiusParams: defaults(params.radiusParams, {
                type: 'vdw', scale: 1.0
            })
        });
    }
    _makeSurface(sd, p) {
        var surface = new Surface(p.name, '', sd);
        surface.info.type = p.type;
        surface.info.probeRadius = p.probeRadius;
        surface.info.scaleFactor = p.scaleFactor;
        surface.info.smooth = p.smooth;
        surface.info.cutoff = p.cutoff;
        return surface;
    }
    /**
     * Get molecular surface
     * @param {MolecularSurfaceParameters} params - parameters for surface creation
     * @return {Surface} the surface
     */
    getSurface(params) {
        const p = params || {};
        const atomData = this._getAtomData(params);
        const coordList = atomData.position;
        const radiusList = atomData.radius;
        const indexList = atomData.index;
        const SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
        const surf = new SurfClass(coordList, radiusList, indexList);
        const sd = surf.getSurface(p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour);
        return this._makeSurface(sd, p);
    }
    /**
     * Get molecular surface asynchronous
     * @param {MolecularSurfaceParameters} params - parameters for surface creation
     * @param {function(surface: Surface)} callback - function to be called after surface is created
     * @return {undefined}
     */
    getSurfaceWorker(params, callback) {
        const p = Object.assign({}, params);
        if (window.hasOwnProperty('Worker')) {
            if (this.worker === undefined) {
                this.worker = new _Worker('molsurf');
            }
            const atomData = this._getAtomData(params);
            const coordList = atomData.position;
            const radiusList = atomData.radius;
            const indexList = atomData.index;
            const msg = {
                args: {
                    coordList: coordList,
                    radiusList: radiusList,
                    indexList: indexList
                },
                params: p
            };
            const transferList = [
                coordList.buffer, radiusList.buffer, indexList.buffer
            ];
            this.worker.post(msg, transferList, (e) => {
                callback(this._makeSurface(e.data.sd, p));
            }, (e) => {
                console.warn('MolecularSurface.getSurfaceWorker error - trying without worker', e);
                this.worker.terminate();
                this.worker = undefined;
                const surface = this.getSurface(p);
                callback(surface);
            });
        }
        else {
            const surface = this.getSurface(p);
            callback(surface);
        }
    }
    /**
     * Cleanup
     * @return {undefined}
     */
    dispose() {
        if (this.worker)
            this.worker.terminate();
    }
}

/**
 * @file Molecular Surface Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Molecular Surface Representation
 */
class MolecularSurfaceRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'surface';
        this.parameters = Object.assign({
            surfaceType: {
                type: 'select',
                rebuild: true,
                options: {
                    'vws': 'vws',
                    'sas': 'sas',
                    'ms': 'ms',
                    'ses': 'ses',
                    'av': 'av'
                }
            },
            probeRadius: {
                type: 'number',
                precision: 1,
                max: 20,
                min: 0,
                rebuild: true
            },
            smooth: {
                type: 'integer',
                precision: 1,
                max: 10,
                min: 0,
                rebuild: true
            },
            scaleFactor: {
                type: 'number',
                precision: 1,
                max: 5,
                min: 0,
                rebuild: true
            },
            cutoff: {
                type: 'number',
                precision: 2,
                max: 50,
                min: 0,
                rebuild: true
            },
            contour: {
                type: 'boolean', rebuild: true
            },
            background: {
                type: 'boolean', rebuild: true // FIXME
            },
            opaqueBack: {
                type: 'boolean', buffer: true
            },
            filterSele: {
                type: 'text', rebuild: true
            },
            colorVolume: {
                type: 'hidden'
            },
            useWorker: {
                type: 'boolean', rebuild: true
            }
        }, this.parameters, {
            radius: null,
            scale: null
        });
        this.__infoList = [];
        // TODO find a more direct way
        this.structure.signals.refreshed.add(() => {
            this.__forceNewMolsurf = true;
        });
        this.toBePrepared = true;
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'uniform');
        p.colorValue = defaults(p.colorValue, 0xDDDDDD);
        p.disablePicking = defaults(p.disablePicking, true);
        this.surfaceType = defaults(p.surfaceType, 'ms');
        this.probeRadius = defaults(p.probeRadius, 1.4);
        this.smooth = defaults(p.smooth, 2);
        this.scaleFactor = defaults(p.scaleFactor, 2.0);
        this.cutoff = defaults(p.cutoff, 0.0);
        this.contour = defaults(p.contour, false);
        this.background = defaults(p.background, false);
        this.opaqueBack = defaults(p.opaqueBack, true);
        this.filterSele = defaults(p.filterSele, '');
        this.colorVolume = defaults(p.colorVolume, undefined);
        this.useWorker = defaults(p.useWorker, true);
        super.init(params);
    }
    prepareData(sview, i, callback) {
        let info = this.__infoList[i];
        if (!info) {
            info = {};
            this.__infoList[i] = info;
        }
        if (!info.molsurf || info.sele !== sview.selection.string) {
            if (this.filterSele) {
                const sviewFilter = sview.structure.getView(new Selection(this.filterSele));
                const bbSize = sviewFilter.boundingBox.getSize(new Vector3());
                const maxDim = Math.max(bbSize.x, bbSize.y, bbSize.z);
                const asWithin = sview.getAtomSetWithinPoint(sviewFilter.center, (maxDim / 2) + 6.0);
                sview = sview.getView(new Selection(sview.getAtomSetWithinSelection(asWithin, 3).toSeleString()));
                if (sview.atomCount === 0) {
                    callback(i);
                    return;
                }
            }
            info.sele = sview.selection.string;
            info.molsurf = new MolecularSurface(sview);
            const p = this.getSurfaceParams();
            const onSurfaceFinish = (surface) => {
                info.surface = surface;
                callback(i);
            };
            if (this.useWorker) {
                info.molsurf.getSurfaceWorker(p, onSurfaceFinish);
            }
            else {
                onSurfaceFinish(info.molsurf.getSurface(p));
            }
        }
        else {
            callback(i);
        }
    }
    prepare(callback) {
        if (this.__forceNewMolsurf || this.__sele !== this.selection.string ||
            this.__surfaceParams !== JSON.stringify(this.getSurfaceParams())) {
            this.__infoList.forEach((info) => {
                if (info && info.molsurf) {
                    info.molsurf.dispose();
                }
            });
            this.__infoList.length = 0;
        }
        if (this.structureView.atomCount === 0) {
            callback();
            return;
        }
        const after = () => {
            this.__sele = this.selection.string;
            this.__surfaceParams = JSON.stringify(this.getSurfaceParams());
            this.__forceNewMolsurf = false;
            callback();
        };
        const name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
        const assembly = this.structure.biomolDict[name];
        if (assembly) {
            assembly.partList.forEach((part, i) => {
                const sview = part.getView(this.structureView);
                this.prepareData(sview, i, (_i) => {
                    if (_i === assembly.partList.length - 1)
                        after();
                });
            });
        }
        else {
            this.prepareData(this.structureView, 0, after);
        }
    }
    createData(sview, i) {
        const info = this.__infoList[i];
        const surface = info.surface;
        if (!surface) {
            // Surface creation bailed (no surface generated for this sview)
            return;
        }
        const surfaceData = {
            position: surface.getPosition(),
            color: surface.getColor(this.getColorParams()),
            index: surface.getFilteredIndex(this.filterSele, sview)
        };
        const bufferList = [];
        if (surface.contour) {
            const contourBuffer = new ContourBuffer(surfaceData, this.getBufferParams({
                wireframe: false
            }));
            bufferList.push(contourBuffer);
        }
        else {
            Object.assign(surfaceData, {
                normal: surface.getNormal(),
                picking: surface.getPicking(sview.getStructure())
            });
            const surfaceBuffer = new SurfaceBuffer(surfaceData, this.getBufferParams({
                background: this.background,
                opaqueBack: this.opaqueBack,
                dullInterior: false
            }));
            if (this.getBufferParams().side == 'double') {
                const doubleSidedBuffer = new DoubleSidedBuffer(surfaceBuffer);
                bufferList.push(doubleSidedBuffer);
            }
            else {
                bufferList.push(surfaceBuffer);
            }
        }
        return { bufferList, info };
    }
    updateData(what, data) {
        const surfaceData = {};
        if (what.position || what.radius) {
            this.__forceNewMolsurf = true;
            this.build();
            return;
        }
        if (what.color) {
            surfaceData.color = data.info.surface.getColor(this.getColorParams());
        }
        if (what.index) {
            surfaceData.index = data.info.surface.getFilteredIndex(this.filterSele, data.sview);
        }
        data.bufferList[0].setAttributes(surfaceData);
    }
    setParameters(params, what = {}, rebuild) {
        if (params && params.filterSele) {
            what.index = true;
        }
        if (params && params.colorVolume !== undefined) {
            what.color = true;
        }
        // forbid setting wireframe to true when contour is true
        if (params && params.wireframe && (params.contour || (params.contour === undefined && this.contour))) {
            params.wireframe = false;
        }
        super.setParameters(params, what, rebuild);
        return this;
    }
    getSurfaceParams(params = {}) {
        const p = Object.assign({
            type: this.surfaceType,
            probeRadius: this.probeRadius,
            scaleFactor: this.scaleFactor,
            smooth: this.smooth && !this.contour,
            cutoff: this.cutoff,
            contour: this.contour,
            useWorker: this.useWorker,
            radiusParams: this.getRadiusParams()
        }, params);
        return p;
    }
    getColorParams() {
        const p = super.getColorParams();
        p.volume = this.colorVolume;
        return p;
    }
    getAtomRadius() {
        return 0;
    }
    clear() {
        super.clear();
    }
    dispose() {
        this.__infoList.forEach((info) => {
            if (info && info.molsurf) {
                info.molsurf.dispose();
            }
        });
        this.__infoList.length = 0;
        super.dispose();
    }
}
RepresentationRegistry.add('surface', MolecularSurfaceRepresentation);

/**
 * @file Point Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Point Representation
 */
class PointRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'point';
        this.parameters = Object.assign({
            pointSize: {
                type: 'number', precision: 1, max: 100, min: 0, buffer: true
            },
            sizeAttenuation: {
                type: 'boolean', buffer: true
            },
            sortParticles: {
                type: 'boolean', rebuild: true
            },
            useTexture: {
                type: 'boolean', buffer: true
            },
            alphaTest: {
                type: 'range', step: 0.001, max: 1, min: 0, buffer: true
            },
            forceTransparent: {
                type: 'boolean', buffer: true
            },
            edgeBleach: {
                type: 'range', step: 0.001, max: 1, min: 0, buffer: true
            }
        }, this.parameters, {
            flatShaded: null,
            wireframe: null,
            linewidth: null,
            side: null,
            roughness: null,
            metalness: null
        });
        this.init(params);
    }
    init(params) {
        var p = params || {};
        this.pointSize = defaults(p.pointSize, 1);
        this.sizeAttenuation = defaults(p.sizeAttenuation, true);
        this.sortParticles = defaults(p.sortParticles, false);
        this.useTexture = defaults(p.useTexture, false);
        this.alphaTest = defaults(p.alphaTest, 0.5);
        this.forceTransparent = defaults(p.forceTransparent, false);
        this.edgeBleach = defaults(p.edgeBleach, 0.0);
        super.init(p);
    }
    createData(sview) {
        var what = { position: true, color: true, picking: true };
        var atomData = sview.getAtomData(this.getAtomParams(what));
        var pointBuffer = new PointBuffer(atomData, this.getBufferParams({
            pointSize: this.pointSize,
            sizeAttenuation: this.sizeAttenuation,
            sortParticles: this.sortParticles,
            useTexture: this.useTexture,
            alphaTest: this.alphaTest,
            forceTransparent: this.forceTransparent,
            edgeBleach: this.edgeBleach
        }));
        return {
            bufferList: [pointBuffer]
        };
    }
    updateData(what, data) {
        var atomData = data.sview.getAtomData(this.getAtomParams(what));
        var pointData = {};
        if (!what || what.position) {
            Object.assign(pointData, { position: atomData.position });
        }
        if (!what || what.color) {
            Object.assign(pointData, { color: atomData.color });
        }
        data.bufferList[0].setAttributes(pointData);
    }
    getAtomRadius() {
        return 0.1;
    }
}
RepresentationRegistry.add('point', PointRepresentation);

ShaderRegistry.add('shader/Ribbon.vert', "#define STANDARD\nuniform float clipNear;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nattribute vec3 dir;\nattribute float size;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\ntransformed += normalize( dir ) * size;\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

/**
 * @file Ribbon Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const quadIndices = new Uint16Array([
    0, 1, 2,
    1, 3, 2
]);
function getSize$1(data) {
    const n = (data.position.length / 3) - 1;
    const n4 = n * 4;
    const x = n4 * 3;
    return x;
}
/**
 * Ribbon buffer. Draws a thin ribbon.
 */
class RibbonBuffer extends MeshBuffer {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.normal - normals
     * @param  {Float32Array} data.dir - binormals
     * @param  {Float32Array} data.color - colors
     * @param  {Float32Array} data.size - sizes
     * @param  {Picker} data.picking - picking ids
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super({
            position: new Float32Array(getSize$1(data)),
            color: new Float32Array(getSize$1(data)),
            index: getUintArray(getSize$1(data), getSize$1(data) / 3),
            normal: new Float32Array(getSize$1(data)),
            picking: data.picking
        }, params);
        this.vertexShader = 'Ribbon.vert';
        const n = (data.position.length / 3) - 1;
        const n4 = n * 4;
        const x = n4 * 3;
        this.addAttributes({
            'dir': { type: 'v3', value: new Float32Array(x) }
        });
        this.addAttributes({
            'size': { type: 'f', value: new Float32Array(n4) }
        });
        data.primitiveId = serialArray(n);
        this.setAttributes(data);
        this.makeIndex();
    }
    setAttributes(data = {}) {
        const n4 = this.size;
        const n = n4 / 4;
        const attributes = this.geometry.attributes; // TODO
        let position, normal, size, dir, color, primitiveId;
        let aPosition, aNormal, aSize, aDir, aColor, aPrimitiveId;
        if (data.position) {
            position = data.position;
            aPosition = attributes.position.array;
            attributes.position.needsUpdate = true;
        }
        if (data.normal) {
            normal = data.normal;
            aNormal = attributes.normal.array;
            attributes.normal.needsUpdate = true;
        }
        if (data.size) {
            size = data.size;
            aSize = attributes.size.array;
            attributes.size.needsUpdate = true;
        }
        if (data.dir) {
            dir = data.dir;
            aDir = attributes.dir.array;
            attributes.dir.needsUpdate = true;
        }
        if (data.color) {
            color = data.color;
            aColor = attributes.color.array;
            attributes.color.needsUpdate = true;
        }
        if (data.primitiveId) {
            primitiveId = data.primitiveId;
            aPrimitiveId = attributes.primitiveId.array;
            attributes.primitiveId.needsUpdate = true;
        }
        let v, i, k, p, l, v3;
        let currSize;
        let prevSize = size ? size[0] : null;
        for (v = 0; v < n; ++v) {
            v3 = v * 3;
            k = v * 3 * 4;
            l = v * 4;
            if (position) {
                aPosition[k] = aPosition[k + 3] = position[v3];
                aPosition[k + 1] = aPosition[k + 4] = position[v3 + 1];
                aPosition[k + 2] = aPosition[k + 5] = position[v3 + 2];
                aPosition[k + 6] = aPosition[k + 9] = position[v3 + 3];
                aPosition[k + 7] = aPosition[k + 10] = position[v3 + 4];
                aPosition[k + 8] = aPosition[k + 11] = position[v3 + 5];
            }
            if (normal) {
                aNormal[k] = aNormal[k + 3] = -normal[v3];
                aNormal[k + 1] = aNormal[k + 4] = -normal[v3 + 1];
                aNormal[k + 2] = aNormal[k + 5] = -normal[v3 + 2];
                aNormal[k + 6] = aNormal[k + 9] = -normal[v3 + 3];
                aNormal[k + 7] = aNormal[k + 10] = -normal[v3 + 4];
                aNormal[k + 8] = aNormal[k + 11] = -normal[v3 + 5];
            }
            for (i = 0; i < 4; ++i) {
                p = k + 3 * i;
                if (color) {
                    aColor[p] = color[v3];
                    aColor[p + 1] = color[v3 + 1];
                    aColor[p + 2] = color[v3 + 2];
                }
                if (primitiveId) {
                    aPrimitiveId[l + i] = primitiveId[v];
                }
            }
            if (size) {
                currSize = size[v];
                if (prevSize !== size[v]) {
                    aSize[l] = prevSize;
                    aSize[l + 1] = prevSize;
                    aSize[l + 2] = currSize;
                    aSize[l + 3] = currSize;
                }
                else {
                    aSize[l] = currSize;
                    aSize[l + 1] = currSize;
                    aSize[l + 2] = currSize;
                    aSize[l + 3] = currSize;
                }
                prevSize = currSize;
            }
            if (dir) {
                aDir[k] = dir[v3];
                aDir[k + 1] = dir[v3 + 1];
                aDir[k + 2] = dir[v3 + 2];
                aDir[k + 3] = -dir[v3];
                aDir[k + 4] = -dir[v3 + 1];
                aDir[k + 5] = -dir[v3 + 2];
                aDir[k + 6] = dir[v3 + 3];
                aDir[k + 7] = dir[v3 + 4];
                aDir[k + 8] = dir[v3 + 5];
                aDir[k + 9] = -dir[v3 + 3];
                aDir[k + 10] = -dir[v3 + 4];
                aDir[k + 11] = -dir[v3 + 5];
            }
        }
    }
    makeIndex() {
        const index = this.geometry.getIndex();
        if (!index) {
            Log.error('Index is null');
            return;
        }
        const meshIndex = index.array;
        const n = meshIndex.length / 4 / 3;
        for (let v = 0; v < n; ++v) {
            const ix = v * 6;
            const it = v * 4;
            meshIndex.set(quadIndices, ix);
            for (let s = 0; s < 6; ++s) {
                meshIndex[ix + s] += it;
            }
        }
    }
}

/**
 * @file Ribbon Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Ribbon Representation
 */
class RibbonRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'ribbon';
        this.parameters = Object.assign({
            subdiv: {
                type: 'integer', max: 50, min: 1, rebuild: true
            },
            tension: {
                type: 'number', precision: 1, max: 1.0, min: 0.1
            },
            smoothSheet: {
                type: 'boolean', rebuild: true
            }
        }, this.parameters, {
            side: null,
            wireframe: null,
            linewidth: null
        });
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'chainname');
        p.colorScale = defaults(p.colorScale, 'RdYlBu');
        p.radiusType = defaults(p.radiusType, 'sstruc');
        p.radiusScale = defaults(p.radiusScale, 4.0);
        if (p.quality === 'low') {
            this.subdiv = 3;
        }
        else if (p.quality === 'medium') {
            this.subdiv = 6;
        }
        else if (p.quality === 'high') {
            this.subdiv = 12;
        }
        else {
            this.subdiv = defaults(p.subdiv, 6);
        }
        this.tension = defaults(p.tension, NaN);
        this.smoothSheet = defaults(p.smoothSheet, false);
        super.init(p);
    }
    getSplineParams(params) {
        return Object.assign({
            subdiv: this.subdiv,
            tension: this.tension,
            directional: true,
            smoothSheet: this.smoothSheet
        }, params);
    }
    getAtomRadius(atom) {
        return atom.isTrace() ? super.getAtomRadius(atom) : 0;
    }
    createData(sview) {
        var bufferList = [];
        var polymerList = [];
        this.structure.eachPolymer(polymer => {
            if (polymer.residueCount < 4)
                return;
            polymerList.push(polymer);
            var spline = new Spline(polymer, this.getSplineParams());
            var subPos = spline.getSubdividedPosition();
            var subOri = spline.getSubdividedOrientation();
            var subCol = spline.getSubdividedColor(this.getColorParams());
            var subPick = spline.getSubdividedPicking();
            var subSize = spline.getSubdividedSize(this.getRadiusParams());
            bufferList.push(new RibbonBuffer(({
                position: subPos.position,
                normal: subOri.binormal,
                dir: subOri.normal,
                color: subCol.color,
                size: subSize.size,
                picking: subPick.picking
            }), this.getBufferParams()));
        }, sview.getSelection());
        return {
            bufferList: bufferList,
            polymerList: polymerList
        };
    }
    updateData(what, data) {
        what = what || {};
        var i = 0;
        var n = data.polymerList.length;
        for (i = 0; i < n; ++i) {
            var bufferData = {};
            var spline = new Spline(data.polymerList[i], this.getSplineParams());
            if (what.position) {
                var subPos = spline.getSubdividedPosition();
                var subOri = spline.getSubdividedOrientation();
                Object.assign(bufferData, {
                    position: subPos.position,
                    normal: subOri.binormal,
                    dir: subOri.normal
                });
            }
            if (what.radius || what.scale) {
                var subSize = spline.getSubdividedSize(this.getRadiusParams());
                Object.assign(bufferData, { size: subSize.size });
            }
            if (what.color) {
                var subCol = spline.getSubdividedColor(this.getColorParams());
                Object.assign(bufferData, { color: subCol.color });
            }
            data.bufferList[i].setAttributes(bufferData);
        }
    }
    setParameters(params) {
        var rebuild = false;
        var what = {};
        if (params && params.tension) {
            Object.assign(what, { position: true });
        }
        super.setParameters(params, what, rebuild);
        return this;
    }
}
RepresentationRegistry.add('ribbon', RibbonRepresentation);

/**
 * @file Rocket Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Rocket Representation
 */
class RocketRepresentation extends StructureRepresentation {
    // protected helixbundleList: Helixbundle[]
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'rocket';
        this.parameters = Object.assign({
            localAngle: {
                type: 'integer', max: 180, min: 0, rebuild: true
            },
            centerDist: {
                type: 'number', precision: 1, max: 10, min: 0, rebuild: true
            },
            ssBorder: {
                type: 'boolean', rebuild: true
            },
            radialSegments: true,
            openEnded: true,
            disableImpostor: true
        }, this.parameters);
        // this.helixbundleList = []
        this.init(params);
    }
    init(params) {
        let p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'sstruc');
        p.radiusSize = defaults(p.radiusSize, 1.5);
        p.radiusScale = defaults(p.radiusScale, 1.0);
        p.openEnded = defaults(p.openEnded, false);
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        this.localAngle = defaults(p.localAngle, 30);
        this.centerDist = defaults(p.centerDist, 2.5);
        this.ssBorder = defaults(p.ssBorder, false);
        super.init(p);
    }
    createData(sview) {
        let length = 0;
        const axisList = [];
        const helixbundleList = [];
        this.structure.eachPolymer(polymer => {
            if (polymer.residueCount < 4 || polymer.isNucleic())
                return;
            const helixbundle = new Helixbundle(polymer);
            const axis = helixbundle.getAxis(this.localAngle, this.centerDist, this.ssBorder, this.getColorParams(), this.getRadiusParams());
            length += axis.size.length;
            axisList.push(axis);
            helixbundleList.push(helixbundle);
        }, sview.getSelection());
        const axisData = {
            begin: new Float32Array(length * 3),
            end: new Float32Array(length * 3),
            size: new Float32Array(length),
            color: new Float32Array(length * 3),
            picking: {}
        };
        let picking = new Float32Array(length);
        let offset = 0;
        axisList.forEach(function (axis) {
            axisData.begin.set(axis.begin, offset * 3);
            axisData.end.set(axis.end, offset * 3);
            axisData.size.set(axis.size, offset);
            axisData.color.set(axis.color, offset * 3);
            picking.set(axis.picking.array, offset);
            offset += axis.size.length;
        });
        if (length) {
            axisData.picking = new AtomPicker(picking, sview.getStructure());
        }
        const cylinderBuffer = new CylinderBuffer({
            position1: axisData.begin,
            position2: axisData.end,
            color: axisData.color,
            color2: axisData.color,
            radius: axisData.size,
            picking: axisData.picking
        }, this.getBufferParams({
            openEnded: this.openEnded,
            radialSegments: this.radialSegments,
            disableImpostor: this.disableImpostor,
            dullInterior: true
        }));
        return {
            bufferList: [cylinderBuffer],
            axisList: axisList,
            helixbundleList: helixbundleList,
            axisData: axisData
        };
    }
    updateData(what, data) {
        what = what || {};
        if (what.position) {
            this.build();
            return;
        }
        var cylinderData = {};
        if (what.color || what.radius) {
            var offset = 0;
            data.helixbundleList.forEach((helixbundle) => {
                var axis = helixbundle.getAxis(this.localAngle, this.centerDist, this.ssBorder, this.getColorParams(), this.getRadiusParams());
                if (what.color) {
                    data.axisData.color.set(axis.color, offset * 3);
                }
                if (what.radius || what.scale) {
                    data.axisData.size.set(axis.size, offset);
                }
                offset += axis.size.length;
            });
            if (what.color) {
                Object.assign(cylinderData, {
                    color: data.axisData.color,
                    color2: data.axisData.color
                });
            }
            if (what.radius || what.scale) {
                Object.assign(cylinderData, {
                    radius: data.axisData.size
                });
            }
        }
        data.bufferList[0].setAttributes(cylinderData);
    }
}
RepresentationRegistry.add('rocket', RocketRepresentation);

/**
 * @file Rope Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Rope Representation
 */
class RopeRepresentation extends CartoonRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'rope';
        this.parameters = Object.assign({
            smooth: {
                type: 'integer', max: 15, min: 0, rebuild: true
            }
        }, this.parameters, {
            aspectRatio: null,
            smoothSheet: null
        });
    }
    init(params) {
        var p = params || {};
        p.aspectRatio = 1.0;
        p.tension = defaults(p.tension, 0.5);
        p.radiusScale = defaults(p.radiusScale, 5.0);
        p.smoothSheet = false;
        this.smooth = defaults(p.smooth, 2);
        super.init(p);
    }
    getSpline(polymer) {
        var helixorient = new Helixorient(polymer);
        return new Spline(polymer, this.getSplineParams({
            directional: false,
            positionIterator: helixorient.getCenterIterator(this.smooth)
        }));
    }
}
RepresentationRegistry.add('rope', RopeRepresentation);

/**
 * @file Spacefill Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Spacefill Representation
 */
class SpacefillRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'spacefill';
        this.parameters = Object.assign({
            sphereDetail: true,
            disableImpostor: true
        }, this.parameters);
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        super.init(p);
    }
    createData(sview) {
        var sphereBuffer = new SphereBuffer(sview.getAtomData(this.getAtomParams()), this.getBufferParams({
            sphereDetail: this.sphereDetail,
            dullInterior: true,
            disableImpostor: this.disableImpostor
        }));
        return {
            bufferList: [sphereBuffer]
        };
    }
    updateData(what, data) {
        var atomData = data.sview.getAtomData(this.getAtomParams(what));
        var sphereData = {};
        if (!what || what.position) {
            Object.assign(sphereData, { position: atomData.position });
        }
        if (!what || what.color) {
            Object.assign(sphereData, { color: atomData.color });
        }
        if (!what || what.radius) {
            Object.assign(sphereData, { radius: atomData.radius });
        }
        data.bufferList[0].setAttributes(sphereData);
    }
}
RepresentationRegistry.add('spacefill', SpacefillRepresentation);

/**
 * @file Trace Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getSize(data) {
    const n = data.position.length / 3;
    const n1 = n - 1;
    return n1 * 3 * 2;
}
/**
 * Trace buffer. Draws a series of lines.
 */
class TraceBuffer extends Buffer$1 {
    /**
     * @param  {Object} data - attribute object
     * @param  {Float32Array} data.position - positions
     * @param  {Float32Array} data.color - colors
     * @param  {BufferParameters} params - parameter object
     */
    constructor(data, params = {}) {
        super({
            position: new Float32Array(getSize(data)),
            color: new Float32Array(getSize(data))
        }, params);
        this.isLine = true;
        this.vertexShader = 'Line.vert';
        this.fragmentShader = 'Line.frag';
        this.setAttributes(data);
    }
    setAttributes(data) {
        let position, color;
        let linePosition, lineColor;
        const attributes = this.geometry.attributes; // TODO
        if (data.position) {
            position = data.position;
            linePosition = attributes.position.array;
            attributes.position.needsUpdate = true;
        }
        if (data.color) {
            color = data.color;
            lineColor = attributes.color.array;
            attributes.color.needsUpdate = true;
        }
        if (!position && !color) {
            Log.warn('TraceBuffer.prototype.setAttributes no data');
            return;
        }
        let v, v2;
        const n = this.size;
        const n1 = n - 1;
        for (let i = 0; i < n1; ++i) {
            v = 3 * i;
            v2 = 3 * i * 2;
            if (position) {
                linePosition[v2] = position[v];
                linePosition[v2 + 1] = position[v + 1];
                linePosition[v2 + 2] = position[v + 2];
                linePosition[v2 + 3] = position[v + 3];
                linePosition[v2 + 4] = position[v + 4];
                linePosition[v2 + 5] = position[v + 5];
            }
            if (color) {
                lineColor[v2] = color[v];
                lineColor[v2 + 1] = color[v + 1];
                lineColor[v2 + 2] = color[v + 2];
                lineColor[v2 + 3] = color[v + 3];
                lineColor[v2 + 4] = color[v + 4];
                lineColor[v2 + 5] = color[v + 5];
            }
        }
    }
}

/**
 * @file Trace Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Trace Representation
 */
class TraceRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'trace';
        this.parameters = Object.assign({
            subdiv: {
                type: 'integer', max: 50, min: 1, rebuild: true
            },
            tension: {
                type: 'number', precision: 1, max: 1.0, min: 0.1
            },
            smoothSheet: {
                type: 'boolean', rebuild: true
            }
        }, this.parameters, {
            flatShaded: null,
            side: null,
            wireframe: null
        });
        this.init(params);
    }
    init(params) {
        var p = params || {};
        p.colorScheme = defaults(p.colorScheme, 'chainname');
        p.colorScale = defaults(p.colorScale, 'RdYlBu');
        if (p.quality === 'low') {
            this.subdiv = 3;
        }
        else if (p.quality === 'medium') {
            this.subdiv = 6;
        }
        else if (p.quality === 'high') {
            this.subdiv = 12;
        }
        else {
            this.subdiv = defaults(p.subdiv, 6);
        }
        this.tension = defaults(p.tension, NaN);
        this.smoothSheet = defaults(p.smoothSheet, false);
        super.init(p);
    }
    getSplineParams(params) {
        return Object.assign({
            subdiv: this.subdiv,
            tension: this.tension,
            directional: false,
            smoothSheet: this.smoothSheet
        }, params);
    }
    getAtomRadius(atom) {
        return atom.isTrace() ? 0.1 : 0;
    }
    createData(sview) {
        var bufferList = [];
        var polymerList = [];
        this.structure.eachPolymer(polymer => {
            if (polymer.residueCount < 4)
                return;
            polymerList.push(polymer);
            var spline = new Spline(polymer, this.getSplineParams());
            var subPos = spline.getSubdividedPosition();
            var subCol = spline.getSubdividedColor(this.getColorParams());
            bufferList.push(new TraceBuffer(Object.assign({}, subPos, subCol), this.getBufferParams()));
        }, sview.getSelection());
        return {
            bufferList: bufferList,
            polymerList: polymerList
        };
    }
    updateData(what, data) {
        what = what || {};
        var i = 0;
        var n = data.polymerList.length;
        for (i = 0; i < n; ++i) {
            var bufferData = {};
            var spline = new Spline(data.polymerList[i], this.getSplineParams());
            if (what.position) {
                var subPos = spline.getSubdividedPosition();
                Object.assign(bufferData, { position: subPos.position });
            }
            if (what.color) {
                var subCol = spline.getSubdividedColor(this.getColorParams());
                Object.assign(bufferData, { color: subCol.color });
            }
            data.bufferList[i].setAttributes(bufferData);
        }
    }
    setParameters(params) {
        var rebuild = false;
        var what = {};
        if (params && params.tension) {
            Object.assign(what, { position: true });
        }
        super.setParameters(params, what, rebuild);
        return this;
    }
}
RepresentationRegistry.add('trace', TraceRepresentation);

/**
 * @file Tube Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Tube Representation
 */
class TubeRepresentation extends CartoonRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'tube';
        this.parameters = Object.assign({}, this.parameters, { aspectRatio: null });
    }
    init(params) {
        var p = params || {};
        p.aspectRatio = 1.0;
        p.radiusScale = defaults(p.radiusScale, 2.0);
        if (p.quality === 'low') {
            this.radialSegments = 5;
        }
        super.init(p);
    }
    getSplineParams( /* params */) {
        return super.getSplineParams({
            directional: false
        });
    }
}
RepresentationRegistry.add('tube', TubeRepresentation);

/**
 * @file Unitcell Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Unitcell Representation
 */
class UnitcellRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'unitcell';
        this.parameters = Object.assign({
            radiusSize: {
                type: 'number', precision: 3, max: 10.0, min: 0.001
            },
            sphereDetail: true,
            radialSegments: true,
            disableImpostor: true
        }, this.parameters, {
            assembly: null
        });
        this.init(params);
    }
    init(params) {
        const p = params || {};
        let defaultRadius = 0.5;
        if (this.structure.unitcell) {
            defaultRadius = Math.cbrt(this.structure.unitcell.volume) / 200;
        }
        p.radiusSize = defaults(p.radiusSize, defaultRadius);
        p.colorValue = defaults(p.colorValue, 'orange');
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        super.init(p);
    }
    getUnitcellData(structure) {
        return structure.unitcell.getData(structure);
    }
    create() {
        const structure = this.structureView.getStructure();
        if (!structure.unitcell)
            return;
        const unitcellData = this.getUnitcellData(structure);
        this.sphereBuffer = new SphereBuffer(unitcellData.vertex, this.getBufferParams({
            sphereDetail: this.sphereDetail,
            disableImpostor: this.disableImpostor,
            dullInterior: true
        }));
        this.cylinderBuffer = new CylinderBuffer(unitcellData.edge, this.getBufferParams({
            openEnded: true,
            radialSegments: this.radialSegments,
            disableImpostor: this.disableImpostor,
            dullInterior: true
        }));
        this.dataList.push({
            sview: this.structureView,
            bufferList: [this.sphereBuffer, this.cylinderBuffer]
        });
    }
    createData(sview) {
        return;
    }
    updateData(what, data) {
        const structure = data.sview.getStructure();
        if (!structure.unitcell)
            return;
        const unitcellData = this.getUnitcellData(structure);
        const sphereData = {};
        const cylinderData = {};
        if (!what || what.position) {
            Object.assign(sphereData, { position: unitcellData.vertex.position });
            Object.assign(cylinderData, {
                position1: unitcellData.edge.position1,
                position2: unitcellData.edge.position2
            });
        }
        if (!what || what.color) {
            Object.assign(sphereData, { color: unitcellData.vertex.color });
            Object.assign(cylinderData, {
                color: unitcellData.edge.color,
                color2: unitcellData.edge.color2
            });
        }
        if (!what || what.radius) {
            Object.assign(sphereData, { radius: unitcellData.vertex.radius });
            Object.assign(cylinderData, { radius: unitcellData.edge.radius });
        }
        this.sphereBuffer.setAttributes(sphereData);
        this.cylinderBuffer.setAttributes(cylinderData);
    }
}
RepresentationRegistry.add('unitcell', UnitcellRepresentation);

/**
 * @file Validation Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Validation representation
 */
class ValidationRepresentation extends StructureRepresentation {
    constructor(structure, viewer, params) {
        super(structure, viewer, params);
        this.type = 'validation';
        this.parameters = Object.assign({}, this.parameters, {
            radiusType: null,
            radiusSize: null,
            radiusScale: null
        });
        this.init(params);
    }
    init(params) {
        const p = params || {};
        p.colorValue = defaults(p.colorValue, '#f0027f');
        p.useInteriorColor = defaults(p.useInteriorColor, true);
        super.init(p);
    }
    createData(sview) {
        if (!sview.validation)
            return;
        const clashData = sview.validation.getClashData({
            structure: sview,
            color: this.colorValue
        });
        const cylinderBuffer = new CylinderBuffer(clashData, this.getBufferParams({ openEnded: false }));
        return {
            bufferList: [cylinderBuffer]
        };
    }
}
RepresentationRegistry.add('validation', ValidationRepresentation);

/**
 * @file Cone Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale$5 = new Vector3();
const eye$5 = new Vector3();
const target$5 = new Vector3();
const up$5 = new Vector3(0, 1, 0);
function getGeo(params = {}) {
    const geo = new ConeGeometry(1, // radius
    1, // height
    defaults(params.radialSegments, 60), // radialSegments
    1, // heightSegments
    defaults(params.openEnded, false) // openEnded
    );
    geo.applyMatrix4(new Matrix4().makeRotationX(-Math.PI / 2));
    return geo;
}
const ConeBufferDefaultParameters = Object.assign({
    radialSegments: 60,
    openEnded: false
}, BufferDefaultParameters);
/**
 * Cone geometry buffer.
 *
 * @example
 * var coneBuffer = new ConeBuffer({
 *   position1: new Float32Array([ 0, 0, 0 ]),
 *   position2: new Float32Array([ 1, 1, 1 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   color2: new Float32Array([ 0, 1, 0 ]),
 *   radius: new Float32Array([ 1 ])
 * });
 */
class ConeBuffer extends GeometryBuffer {
    /**
     * @param {Object} data - buffer data
     * @param {Float32Array} data.position1 - from positions
     * @param {Float32Array} data.position2 - to positions
     * @param {Float32Array} data.color - colors
     * @param {Float32Array} data.radius - radii
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} [params] - parameters object
     */
    constructor(data, params = {}) {
        super({
            position: new Float32Array(data.position1.length),
            color: data.color,
            picking: data.picking
        }, params, getGeo(params));
        this.updateNormals = true;
        this._position = new Float32Array(data.position1.length);
        this.setAttributes(data, true);
    }
    get defaultParameters() { return ConeBufferDefaultParameters; }
    applyPositionTransform(matrix, i, i3) {
        eye$5.fromArray(this._position1, i3);
        target$5.fromArray(this._position2, i3);
        matrix.lookAt(eye$5, target$5, up$5);
        const r = this._radius[i];
        scale$5.set(r, r, eye$5.distanceTo(target$5));
        matrix.scale(scale$5);
    }
    setAttributes(data = {}, initNormals) {
        if (data.position1 && data.position2) {
            calculateCenterArray(data.position1, data.position2, this._position);
            this._position1 = data.position1;
            this._position2 = data.position2;
            data.position = this._position;
        }
        if (data.radius)
            this._radius = data.radius;
        super.setAttributes(data, initNormals);
    }
}
BufferRegistry.add('cone', ConeBuffer);

/**
 * @file Geometry Group
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class GeometryGroup {
    constructor(geometryList = []) {
        this.geometryList = geometryList;
    }
    computeBoundingBox() {
        if (!this.boundingBox) {
            this.boundingBox = new Box3();
        }
        else {
            this.boundingBox.empty();
        }
        this.geometryList.forEach(geo => {
            if (!geo.boundingBox)
                geo.computeBoundingBox();
            this.boundingBox.union(geo.boundingBox);
        });
    }
}

/**
 * @file Arrow Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const ArrowBufferDefaultParameters = Object.assign({
    aspectRatio: 1.5,
    radialSegments: 50,
    openEnded: false,
    disableImpostor: false
}, BufferDefaultParameters);
/**
 * Arrow buffer. Draws arrows made from a cylinder and a cone.
 * @implements {Buffer}
 *
 * @example
 * var arrowBuffer = new ArrowBuffer({
 *   position1: new Float32Array([ 0, 0, 0 ]),
 *   position2: new Float32Array([ 10, 1, 1 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   radius: new Float32Array([ 1 ])
 * });
 */
class ArrowBuffer {
    /**
     * @param {Object} data - buffer data
     * @param {Float32Array} data.position1 - from positions
     * @param {Float32Array} data.position2 - to positions
     * @param {Float32Array} data.color - colors
     * @param {Float32Array} data.radius - radii
     * @param {Picker} [data.picking] - picking ids
     * @param {BufferParameters} [params] - parameters object
     */
    constructor(data, params = {}) {
        this.group = new Group();
        this.wireframeGroup = new Group();
        this.pickingGroup = new Group();
        this.visible = true;
        this.parameters = createParams(params, this.defaultParameters);
        this.splitPosition = new Float32Array(data.position1.length);
        this.cylinderRadius = new Float32Array(data.radius.length);
        const attr = this.makeAttributes(data);
        const bufferParams = {
            radialSegments: this.parameters.radialSegments,
            openEnded: this.parameters.openEnded,
            disableImpostor: this.parameters.disableImpostor
        };
        this.cylinderBuffer = new CylinderBuffer(attr.cylinder, bufferParams);
        this.coneBuffer = new ConeBuffer(attr.cone, bufferParams);
        this.geometry = new GeometryGroup([
            this.cylinderBuffer.geometry,
            this.coneBuffer.geometry
        ]);
        // requires Group objects to be present
        this.matrix = defaults(params.matrix, new Matrix4());
        this.picking = data.picking;
    }
    get defaultParameters() { return ArrowBufferDefaultParameters; }
    set matrix(m) {
        Buffer$1.prototype.setMatrix.call(this, m);
    }
    get matrix() {
        return this.group.matrix.clone();
    }
    get pickable() {
        return !!this.picking;
    }
    makeAttributes(data = {}) {
        const splitPosition = this.splitPosition;
        const cylinderRadius = this.cylinderRadius;
        const aspectRatio = this.parameters.aspectRatio;
        let i, il;
        const cylinder = {};
        const cone = {};
        if (data.radius) {
            for (i = 0, il = cylinderRadius.length; i < il; ++i) {
                cylinderRadius[i] = data.radius[i] / aspectRatio;
            }
            cylinder.radius = cylinderRadius;
            cone.radius = data.radius;
        }
        if (data.position1 && data.position2) {
            const vFrom = new Vector3();
            const vTo = new Vector3();
            const vDir = new Vector3();
            const vSplit = new Vector3();
            for (i = 0, il = splitPosition.length; i < il; i += 3) {
                vFrom.fromArray(data.position1, i);
                vTo.fromArray(data.position2, i);
                vDir.subVectors(vFrom, vTo);
                const fullLength = vDir.length();
                const coneLength = cylinderRadius[i / 3] * aspectRatio * 2;
                const length = Math.min(fullLength, coneLength);
                vDir.setLength(length);
                vSplit.copy(vTo).add(vDir);
                vSplit.toArray(splitPosition, i);
            }
            cylinder.position1 = data.position1;
            cylinder.position2 = splitPosition;
            cone.position1 = splitPosition;
            cone.position2 = data.position2;
        }
        if (data.color) {
            cylinder.color = data.color;
            cylinder.color2 = data.color;
            cone.color = data.color;
        }
        return {
            cylinder: cylinder,
            cone: cone
        };
    }
    getMesh() {
        return new Group().add(this.cylinderBuffer.getMesh(), this.coneBuffer.getMesh());
    }
    getWireframeMesh() {
        return new Group().add(this.cylinderBuffer.getWireframeMesh(), this.coneBuffer.getWireframeMesh());
    }
    getPickingMesh() {
        return new Group().add(this.cylinderBuffer.getPickingMesh(), this.coneBuffer.getPickingMesh());
    }
    setAttributes(data = {}) {
        const attr = this.makeAttributes(data);
        this.cylinderBuffer.setAttributes(attr.cylinder);
        this.coneBuffer.setAttributes(attr.cone);
    }
    /**
     * Set buffer parameters
     * @param {BufferParameters} params - buffer parameters object
     * @return {undefined}
     */
    setParameters(params = {}) {
        params = Object.assign({}, params);
        if (params && params.matrix !== undefined) {
            this.matrix = params.matrix;
        }
        delete params.matrix;
        if (params && params.wireframe !== undefined) {
            this.parameters.wireframe = params.wireframe;
            this.setVisibility(this.visible);
        }
        this.cylinderBuffer.setParameters(params);
        this.coneBuffer.setParameters(params);
    }
    setVisibility(value) {
        Buffer$1.prototype.setVisibility.call(this, value);
    }
    dispose() {
        this.cylinderBuffer.dispose();
        this.coneBuffer.dispose();
    }
}
BufferRegistry.add('arrow', ArrowBuffer);

/**
 * @file Box Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale$4 = new Vector3();
const target$4 = new Vector3();
const up$4 = new Vector3();
const eye$4 = new Vector3(0, 0, 0);
/**
 * Box buffer. Draws boxes.
 *
 * @example
 * var boxBuffer = new BoxBuffer({
 *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
 *   size: new Float32Array([ 2, 1.5 ]),
 *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
 *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
 * })
 */
class BoxBuffer extends GeometryBuffer {
    constructor(data, params = {}) {
        super(data, params, new BoxGeometry(1, 1, 1));
        this.updateNormals = true;
        this.setAttributes(data, true);
    }
    applyPositionTransform(matrix, i, i3) {
        target$4.fromArray(this._heightAxis, i3);
        up$4.fromArray(this._depthAxis, i3);
        matrix.lookAt(eye$4, target$4, up$4);
        scale$4.set(this._size[i], up$4.length(), target$4.length());
        matrix.scale(scale$4);
    }
    setAttributes(data = {}, initNormals) {
        if (data.size)
            this._size = data.size;
        if (data.heightAxis)
            this._heightAxis = data.heightAxis;
        if (data.depthAxis)
            this._depthAxis = data.depthAxis;
        super.setAttributes(data, initNormals);
    }
}
BufferRegistry.add('box', BoxBuffer);

/**
 * @file Ellipsoid Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale$3 = new Vector3();
const target$3 = new Vector3();
const up$3 = new Vector3();
const eye$3 = new Vector3(0, 0, 0);
const EllipsoidBufferDefaultParameters = Object.assign({
    sphereDetail: 2,
}, BufferDefaultParameters);
/**
 * Ellipsoid buffer. Draws ellipsoids.
 *
 * @example
 * var ellipsoidBuffer = new EllipsoidBuffer({
 *   position: new Float32Array([ 0, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   radius: new Float32Array([ 1 ]),
 *   majorAxis: new Float32Array([ 1, 1, 0 ]),
 *   minorAxis: new Float32Array([ 0.5, 0, 0.5 ]),
 * });
 */
class EllipsoidBuffer extends GeometryBuffer {
    constructor(data, params = {}) {
        super(data, params, new IcosahedronGeometry(1, defaults(params.sphereDetail, 2)));
        this.updateNormals = true;
        this.setAttributes(data, true);
    }
    get defaultParameters() { return EllipsoidBufferDefaultParameters; }
    applyPositionTransform(matrix, i, i3) {
        target$3.fromArray(this._majorAxis, i3);
        up$3.fromArray(this._minorAxis, i3);
        matrix.lookAt(eye$3, target$3, up$3);
        scale$3.set(this._radius[i], up$3.length(), target$3.length());
        matrix.scale(scale$3);
    }
    setAttributes(data = {}, initNormals) {
        if (data.radius)
            this._radius = data.radius;
        if (data.majorAxis)
            this._majorAxis = data.majorAxis;
        if (data.minorAxis)
            this._minorAxis = data.minorAxis;
        super.setAttributes(data, initNormals);
    }
}
BufferRegistry.add('ellipsoid', EllipsoidBuffer);

/**
 * @file Octahedron Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale$2 = new Vector3();
const target$2 = new Vector3();
const up$2 = new Vector3();
const eye$2 = new Vector3(0, 0, 0);
/**
 * Octahedron buffer. Draws octahedrons.
 *
 * @example
 * var octahedronBuffer = new OctahedronBuffer({
 *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
 *   size: new Float32Array([ 2, 1.5 ]),
 *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
 *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
 * })
 */
class OctahedronBuffer extends GeometryBuffer {
    constructor(data, params = {}) {
        super(data, params, new OctahedronGeometry(1, 0));
        this.updateNormals = true;
        this.setAttributes(data, true);
    }
    applyPositionTransform(matrix, i, i3) {
        target$2.fromArray(this._heightAxis, i3);
        up$2.fromArray(this._depthAxis, i3);
        matrix.lookAt(eye$2, target$2, up$2);
        scale$2.set(this._size[i], up$2.length(), target$2.length());
        matrix.scale(scale$2);
    }
    setAttributes(data = {}, initNormals) {
        if (data.size)
            this._size = data.size;
        if (data.heightAxis)
            this._heightAxis = data.heightAxis;
        if (data.depthAxis)
            this._depthAxis = data.depthAxis;
        super.setAttributes(data, initNormals);
    }
}
BufferRegistry.add('octahedron', OctahedronBuffer);

/**
 * @file Tetrahedron Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale$1 = new Vector3();
const target$1 = new Vector3();
const up$1 = new Vector3();
const eye$1 = new Vector3(0, 0, 0);
/**
 * Tetrahedron buffer. Draws tetrahedrons.
 *
 * @example
 * var tetrahedronBuffer = new TetrahedronBuffer({
 *   position: new Float32Array([ 0, 3, 0, -2, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 1, 0, 1, 0 ]),
 *   size: new Float32Array([ 2, 1.5 ]),
 *   heightAxis: new Float32Array([ 0, 1, 1, 0, 2, 0 ]),
 *   depthAxis: new Float32Array([ 1, 0, 1, 0, 0, 2 ])
 * })
 */
class TetrahedronBuffer extends GeometryBuffer {
    constructor(data, params = {}) {
        super(data, params, new TetrahedronGeometry(1, 0));
        this.updateNormals = true;
        this.setAttributes(data, true);
    }
    applyPositionTransform(matrix, i, i3) {
        target$1.fromArray(this._heightAxis, i3);
        up$1.fromArray(this._depthAxis, i3);
        matrix.lookAt(eye$1, target$1, up$1);
        scale$1.set(this._size[i], up$1.length(), target$1.length());
        matrix.scale(scale$1);
    }
    setAttributes(data = {}, initNormals) {
        if (data.size)
            this._size = data.size;
        if (data.heightAxis)
            this._heightAxis = data.heightAxis;
        if (data.depthAxis)
            this._depthAxis = data.depthAxis;
        super.setAttributes(data, initNormals);
    }
}
BufferRegistry.add('tetrahedron', TetrahedronBuffer);

/**
 * @file Tetrahedron Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const scale = new Vector3();
const target = new Vector3();
const up = new Vector3();
const eye = new Vector3(0, 0, 0);
const TorusBufferDefaultParameters = Object.assign({
    radiusRatio: 0.2,
    radialSegments: 16,
    tubularSegments: 32
}, BufferDefaultParameters);
/**
 * Torus geometry buffer. Draws torii.
 *
 * @example
 * var torusBuffer = new TorusBuffer({
 *   position: new Float32Array([ 0, 0, 0 ]),
 *   color: new Float32Array([ 1, 0, 0 ]),
 *   radius: new Float32Array([ 1 ]),
 *   majorAxis: new Float32Array([ 1, 1, 0 ]),
 *   minorAxis: new Float32Array([ 0.5, 0, 0.5 ]),
 * });
 */
class TorusBuffer extends GeometryBuffer {
    constructor(data, params = {}) {
        super(data, params, new TorusGeometry(1, defaults(params.radiusRatio, 0.2), defaults(params.radialSegments, 16), defaults(params.tubularSegments, 32)));
        this.updateNormals = true;
        this.setAttributes(data, true);
    }
    get defaultParameters() { return TorusBufferDefaultParameters; }
    applyPositionTransform(matrix, i, i3) {
        target.fromArray(this._majorAxis, i3);
        up.fromArray(this._minorAxis, i3);
        matrix.lookAt(eye, target, up);
        const r = this._radius[i];
        scale.set(r, r, r);
        matrix.scale(scale);
    }
    setAttributes(data = {}, initNormals) {
        if (data.radius)
            this._radius = data.radius;
        if (data.majorAxis)
            this._majorAxis = data.majorAxis;
        if (data.minorAxis)
            this._minorAxis = data.minorAxis;
        super.setAttributes(data, initNormals);
    }
}
BufferRegistry.add('torus', TorusBuffer);

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function getArrayBounds(rowCount, params) {
    const start = params && typeof params.start !== 'undefined' ? Math.max(Math.min(params.start, rowCount - 1), 0) : 0;
    const end = params && typeof params.end !== 'undefined' ? Math.min(params.end, rowCount) : rowCount;
    return { start, end };
}
function createArray(rowCount, params) {
    const c = params && typeof params.array !== 'undefined' ? params.array : Array;
    const { start, end } = getArrayBounds(rowCount, params);
    return { array: new c(end - start), start, end };
}
function fillArrayValues(value, target, start) {
    for (let i = 0, _e = target.length; i < _e; i++)
        target[i] = value(start + i);
    return target;
}
function createAndFillArray(rowCount, value, params) {
    const { array, start } = createArray(rowCount, params);
    return fillArrayValues(value, array, start);
}
function isTypedArray(data) {
    return !!data.buffer && typeof data.byteLength === 'number' && typeof data.BYTES_PER_ELEMENT === 'number';
}
function typedArrayWindow(data, params) {
    const { constructor, buffer, length, byteOffset, BYTES_PER_ELEMENT } = data;
    const { start, end } = getArrayBounds(length, params);
    if (start === 0 && end === length)
        return data;
    return new constructor(buffer, byteOffset + BYTES_PER_ELEMENT * start, Math.min(length, end - start));
}

/**
 * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/*
 * This code has been modified from https://github.com/toji/gl-matrix/,
 * copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 */
const EPSILON = 0.000001;
function equalEps(a, b, eps) {
    return Math.abs(a - b) <= eps;
}

/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
/** Catmul-Rom spline */
function spline(p0, p1, p2, p3, t, tension) {
    const v0 = (p2 - p0) * tension;
    const v1 = (p3 - p1) * tension;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
function quadraticBezier(p0, p1, p2, t) {
    const k = 1 - t;
    return (k * k * p0) + (2 * k * t * p1) + (t * t * p2);
}

/**
 * Copyright (c) 2017-2023 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
const _isFinite = isFinite;
function Vec3() {
    return Vec3.zero();
}
(function (Vec3) {
    function zero() {
        const out = [0.1, 0.0, 0.0]; // ensure backing array of type double
        out[0] = 0;
        return out;
    }
    Vec3.zero = zero;
    function clone(a) {
        const out = zero();
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    Vec3.clone = clone;
    function isFinite(a) {
        return _isFinite(a[0]) && _isFinite(a[1]) && _isFinite(a[2]);
    }
    Vec3.isFinite = isFinite;
    function hasNaN(a) {
        return isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2]);
    }
    Vec3.hasNaN = hasNaN;
    function setNaN(out) {
        out[0] = NaN;
        out[1] = NaN;
        out[2] = NaN;
        return out;
    }
    Vec3.setNaN = setNaN;
    function fromObj(v) {
        return create(v.x, v.y, v.z);
    }
    Vec3.fromObj = fromObj;
    function toObj(v) {
        return { x: v[0], y: v[1], z: v[2] };
    }
    Vec3.toObj = toObj;
    function fromArray(v, array, offset) {
        v[0] = array[offset + 0];
        v[1] = array[offset + 1];
        v[2] = array[offset + 2];
        return v;
    }
    Vec3.fromArray = fromArray;
    function toArray(v, out, offset) {
        out[offset + 0] = v[0];
        out[offset + 1] = v[1];
        out[offset + 2] = v[2];
        return out;
    }
    Vec3.toArray = toArray;
    function create(x, y, z) {
        const out = zero();
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    Vec3.create = create;
    function ofArray(array) {
        const out = zero();
        out[0] = array[0];
        out[1] = array[1];
        out[2] = array[2];
        return out;
    }
    Vec3.ofArray = ofArray;
    function set(out, x, y, z) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    Vec3.set = set;
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    Vec3.copy = copy;
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        return out;
    }
    Vec3.add = add;
    function sub(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        return out;
    }
    Vec3.sub = sub;
    function mul(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        return out;
    }
    Vec3.mul = mul;
    function div(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        return out;
    }
    Vec3.div = div;
    function scale(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        return out;
    }
    Vec3.scale = scale;
    /** Scales b, then adds a and b together */
    function scaleAndAdd(out, a, b, scale) {
        out[0] = a[0] + (b[0] * scale);
        out[1] = a[1] + (b[1] * scale);
        out[2] = a[2] + (b[2] * scale);
        return out;
    }
    Vec3.scaleAndAdd = scaleAndAdd;
    /** Scales b, then subtracts b from a */
    function scaleAndSub(out, a, b, scale) {
        out[0] = a[0] - (b[0] * scale);
        out[1] = a[1] - (b[1] * scale);
        out[2] = a[2] - (b[2] * scale);
        return out;
    }
    Vec3.scaleAndSub = scaleAndSub;
    function addScalar(out, a, b) {
        out[0] = a[0] + b;
        out[1] = a[1] + b;
        out[2] = a[2] + b;
        return out;
    }
    Vec3.addScalar = addScalar;
    function subScalar(out, a, b) {
        out[0] = a[0] - b;
        out[1] = a[1] - b;
        out[2] = a[2] - b;
        return out;
    }
    Vec3.subScalar = subScalar;
    /**
     * Math.round the components of a Vec3
     */
    function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        return out;
    }
    Vec3.round = round;
    /**
     * Math.ceil the components of a Vec3
     */
    function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        return out;
    }
    Vec3.ceil = ceil;
    /**
     * Math.floor the components of a Vec3
     */
    function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        return out;
    }
    Vec3.floor = floor;
    /**
     * Math.trunc the components of a Vec3
     */
    function trunc(out, a) {
        out[0] = Math.trunc(a[0]);
        out[1] = Math.trunc(a[1]);
        out[2] = Math.trunc(a[2]);
        return out;
    }
    Vec3.trunc = trunc;
    /**
     * Math.abs the components of a Vec3
     */
    function abs(out, a) {
        out[0] = Math.abs(a[0]);
        out[1] = Math.abs(a[1]);
        out[2] = Math.abs(a[2]);
        return out;
    }
    Vec3.abs = abs;
    /**
     * Returns the minimum of two Vec3's
     */
    function min(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        return out;
    }
    Vec3.min = min;
    /**
     * Returns the maximum of two Vec3's
     */
    function max(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        return out;
    }
    Vec3.max = max;
    /**
     * Assumes min < max, componentwise
     */
    function clamp$1(out, a, min, max) {
        out[0] = Math.max(min[0], Math.min(max[0], a[0]));
        out[1] = Math.max(min[1], Math.min(max[1], a[1]));
        out[2] = Math.max(min[2], Math.min(max[2], a[2]));
        return out;
    }
    Vec3.clamp = clamp$1;
    function distance(a, b) {
        const x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
        return Math.sqrt(x * x + y * y + z * z);
    }
    Vec3.distance = distance;
    function squaredDistance(a, b) {
        const x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
        return x * x + y * y + z * z;
    }
    Vec3.squaredDistance = squaredDistance;
    function magnitude(a) {
        const x = a[0], y = a[1], z = a[2];
        return Math.sqrt(x * x + y * y + z * z);
    }
    Vec3.magnitude = magnitude;
    function squaredMagnitude(a) {
        const x = a[0], y = a[1], z = a[2];
        return x * x + y * y + z * z;
    }
    Vec3.squaredMagnitude = squaredMagnitude;
    function setMagnitude(out, a, l) {
        return scale(out, normalize(out, a), l);
    }
    Vec3.setMagnitude = setMagnitude;
    /**
     * Negates the components of a vec3
     */
    function negate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        return out;
    }
    Vec3.negate = negate;
    /**
     * Returns the inverse of the components of a Vec3
     */
    function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        return out;
    }
    Vec3.inverse = inverse;
    function normalize(out, a) {
        const x = a[0], y = a[1], z = a[2];
        let len = x * x + y * y + z * z;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            out[0] = a[0] * len;
            out[1] = a[1] * len;
            out[2] = a[2] * len;
        }
        return out;
    }
    Vec3.normalize = normalize;
    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    Vec3.dot = dot;
    function cross(out, a, b) {
        const ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
        out[0] = ay * bz - az * by;
        out[1] = az * bx - ax * bz;
        out[2] = ax * by - ay * bx;
        return out;
    }
    Vec3.cross = cross;
    /**
     * Performs a linear interpolation between two Vec3's
     */
    function lerp(out, a, b, t) {
        const ax = a[0], ay = a[1], az = a[2];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        return out;
    }
    Vec3.lerp = lerp;
    const slerpRelVec = zero();
    function slerp(out, a, b, t) {
        const d = clamp(dot(a, b), -1, 1);
        const theta = Math.acos(d) * t;
        scaleAndAdd(slerpRelVec, b, a, -d);
        normalize(slerpRelVec, slerpRelVec);
        return add(out, scale(out, a, Math.cos(theta)), scale(slerpRelVec, slerpRelVec, Math.sin(theta)));
    }
    Vec3.slerp = slerp;
    /**
     * Performs a hermite interpolation with two control points
     */
    function hermite(out, a, b, c, d, t) {
        const factorTimes2 = t * t;
        const factor1 = factorTimes2 * (2 * t - 3) + 1;
        const factor2 = factorTimes2 * (t - 2) + t;
        const factor3 = factorTimes2 * (t - 1);
        const factor4 = factorTimes2 * (3 - 2 * t);
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    Vec3.hermite = hermite;
    /**
     * Performs a bezier interpolation with two control points
     */
    function bezier(out, a, b, c, d, t) {
        const inverseFactor = 1 - t;
        const inverseFactorTimesTwo = inverseFactor * inverseFactor;
        const factorTimes2 = t * t;
        const factor1 = inverseFactorTimesTwo * inverseFactor;
        const factor2 = 3 * t * inverseFactorTimesTwo;
        const factor3 = 3 * factorTimes2 * inverseFactor;
        const factor4 = factorTimes2 * t;
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    Vec3.bezier = bezier;
    function quadraticBezier$1(out, a, b, c, t) {
        out[0] = quadraticBezier(a[0], b[0], c[0], t);
        out[1] = quadraticBezier(a[1], b[1], c[1], t);
        out[2] = quadraticBezier(a[2], b[2], c[2], t);
        return out;
    }
    Vec3.quadraticBezier = quadraticBezier$1;
    /**
     * Performs a spline interpolation with two control points and a tension parameter
     */
    function spline$1(out, a, b, c, d, t, tension) {
        out[0] = spline(a[0], b[0], c[0], d[0], t, tension);
        out[1] = spline(a[1], b[1], c[1], d[1], t, tension);
        out[2] = spline(a[2], b[2], c[2], d[2], t, tension);
        return out;
    }
    Vec3.spline = spline$1;
    /**
     * Generates a random vector with the given scale
     */
    function random(out, scale) {
        const r = Math.random() * 2.0 * Math.PI;
        const z = (Math.random() * 2.0) - 1.0;
        const zScale = Math.sqrt(1.0 - z * z) * scale;
        out[0] = Math.cos(r) * zScale;
        out[1] = Math.sin(r) * zScale;
        out[2] = z * scale;
        return out;
    }
    Vec3.random = random;
    /**
     * Transforms the Vec3 with a Mat4. 4th vector component is implicitly '1'
     */
    function transformMat4(out, a, m) {
        const x = a[0], y = a[1], z = a[2], w = 1 / ((m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0);
        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;
        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;
        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;
        return out;
    }
    Vec3.transformMat4 = transformMat4;
    function transformDirection(out, a, m) {
        const x = a[0], y = a[1], z = a[2];
        out[0] = m[0] * x + m[4] * y + m[8] * z;
        out[1] = m[1] * x + m[5] * y + m[9] * z;
        out[2] = m[2] * x + m[6] * y + m[10] * z;
        return normalize(out, out);
    }
    Vec3.transformDirection = transformDirection;
    /**
     * Like `transformMat4` but with offsets into arrays
     */
    function transformMat4Offset(out, a, m, outO, aO, oM) {
        const x = a[0 + aO], y = a[1 + aO], z = a[2 + aO], w = 1 / ((m[3 + oM] * x + m[7 + oM] * y + m[11 + oM] * z + m[15 + oM]) || 1.0);
        out[0 + outO] = (m[0 + oM] * x + m[4 + oM] * y + m[8 + oM] * z + m[12 + oM]) * w;
        out[1 + outO] = (m[1 + oM] * x + m[5 + oM] * y + m[9 + oM] * z + m[13 + oM]) * w;
        out[2 + outO] = (m[2 + oM] * x + m[6 + oM] * y + m[10 + oM] * z + m[14 + oM]) * w;
        return out;
    }
    Vec3.transformMat4Offset = transformMat4Offset;
    /**
     * Transforms the direction vector with a Mat4. 4th vector component is implicitly '0'
     * This means the translation components of the matrix are ignored.
     * Assumes that m is already the transpose of the inverse matrix suitable for normal transformation.
     */
    function transformDirectionOffset(out, a, m, outO, aO, oM) {
        const x = a[0 + aO], y = a[1 + aO], z = a[2 + aO];
        out[0 + outO] = m[0 + oM] * x + m[4 + oM] * y + m[8 + oM] * z;
        out[1 + outO] = m[1 + oM] * x + m[5 + oM] * y + m[9 + oM] * z;
        out[2 + outO] = m[2 + oM] * x + m[6 + oM] * y + m[10 + oM] * z;
        // Normalize the output vector to handle non-uniform scaling
        const len = Math.hypot(out[0 + outO], out[1 + outO], out[2 + outO]);
        if (len > 0) {
            out[0 + outO] /= len;
            out[1 + outO] /= len;
            out[2 + outO] /= len;
        }
        return out;
    }
    Vec3.transformDirectionOffset = transformDirectionOffset;
    /**
     * Transforms the Vec3 with a Mat3.
     */
    function transformMat3(out, a, m) {
        const x = a[0], y = a[1], z = a[2];
        out[0] = x * m[0] + y * m[3] + z * m[6];
        out[1] = x * m[1] + y * m[4] + z * m[7];
        out[2] = x * m[2] + y * m[5] + z * m[8];
        return out;
    }
    Vec3.transformMat3 = transformMat3;
    /** Transforms the Vec3 with a quat */
    function transformQuat(out, a, q) {
        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
        const x = a[0], y = a[1], z = a[2];
        const qx = q[0], qy = q[1], qz = q[2], qw = q[3];
        // calculate quat * vec
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        // calculate result * inverse quat
        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return out;
    }
    Vec3.transformQuat = transformQuat;
    /** Computes the angle between 2 vectors, reports in radians. */
    function angle(a, b) {
        const denominator = Math.sqrt(squaredMagnitude(a) * squaredMagnitude(b));
        if (denominator === 0)
            return Math.PI / 2;
        const theta = dot(a, b) / denominator;
        return Math.acos(clamp(theta, -1, 1)); // clamp to avoid numerical problems
    }
    Vec3.angle = angle;
    const tmp_dh_ab = zero();
    const tmp_dh_cb = zero();
    const tmp_dh_bc = zero();
    const tmp_dh_dc = zero();
    const tmp_dh_abc = zero();
    const tmp_dh_bcd = zero();
    const tmp_dh_cross = zero();
    /**
     * Computes the dihedral angles of 4 points, reports in radians.
     */
    function dihedralAngle(a, b, c, d) {
        sub(tmp_dh_ab, a, b);
        sub(tmp_dh_cb, c, b);
        sub(tmp_dh_bc, b, c);
        sub(tmp_dh_dc, d, c);
        cross(tmp_dh_abc, tmp_dh_ab, tmp_dh_cb);
        cross(tmp_dh_bcd, tmp_dh_bc, tmp_dh_dc);
        const _angle = angle(tmp_dh_abc, tmp_dh_bcd);
        cross(tmp_dh_cross, tmp_dh_abc, tmp_dh_bcd);
        return dot(tmp_dh_cb, tmp_dh_cross) > 0 ? _angle : -_angle;
    }
    Vec3.dihedralAngle = dihedralAngle;
    /**
     * @param inclination in radians [0, PI]
     * @param azimuth in radians [0, 2 * PI]
     * @param radius [0, +Inf]
     */
    function directionFromSpherical(out, inclination, azimuth, radius) {
        return Vec3.set(out, radius * Math.cos(azimuth) * Math.sin(inclination), radius * Math.sin(azimuth) * Math.sin(inclination), radius * Math.cos(inclination));
    }
    Vec3.directionFromSpherical = directionFromSpherical;
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     */
    function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
    }
    Vec3.exactEquals = exactEquals;
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     */
    function equals(a, b) {
        const a0 = a[0], a1 = a[1], a2 = a[2];
        const b0 = b[0], b1 = b[1], b2 = b[2];
        return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));
    }
    Vec3.equals = equals;
    const rotTemp = zero();
    function makeRotation(mat, a, b) {
        const by = angle(a, b);
        if (Math.abs(by) < 0.0001)
            return Mat4.setIdentity(mat);
        if (Math.abs(by - Math.PI) < EPSILON) {
            // here, axis can be [0,0,0] but the rotation is a simple flip
            return Mat4.fromScaling(mat, Vec3.negUnit);
        }
        const axis = cross(rotTemp, a, b);
        return Mat4.fromRotation(mat, by, axis);
    }
    Vec3.makeRotation = makeRotation;
    function isZero(v) {
        return v[0] === 0 && v[1] === 0 && v[2] === 0;
    }
    Vec3.isZero = isZero;
    /** Project `point` onto `vector` starting from `origin` */
    function projectPointOnVector(out, point, vector, origin) {
        sub(out, point, origin);
        const scalar = dot(vector, out) / squaredMagnitude(vector);
        return add(out, scale(out, vector, scalar), origin);
    }
    Vec3.projectPointOnVector = projectPointOnVector;
    const tmpProjectPlane = zero();
    /** Project `point` onto `plane` defined by `normal` starting from `origin` */
    function projectPointOnPlane(out, point, normal, origin) {
        normalize(tmpProjectPlane, normal);
        sub(out, point, origin);
        return sub(out, point, scale(tmpProjectPlane, tmpProjectPlane, dot(out, tmpProjectPlane)));
    }
    Vec3.projectPointOnPlane = projectPointOnPlane;
    function projectOnVector(out, p, vector) {
        const scalar = dot(vector, p) / squaredMagnitude(vector);
        return scale(out, vector, scalar);
    }
    Vec3.projectOnVector = projectOnVector;
    const tmpProject = zero();
    function projectOnPlane(out, p, normal) {
        projectOnVector(tmpProject, p, normal);
        return sub(out, p, tmpProject);
    }
    Vec3.projectOnPlane = projectOnPlane;
    /** Get a vector that is similar to `b` but orthogonal to `a` */
    function orthogonalize(out, a, b) {
        return normalize(out, cross(out, cross(out, a, b), a));
    }
    Vec3.orthogonalize = orthogonalize;
    /**
     * Get a vector like `a` that point into the same general direction as `b`,
     * i.e. where the dot product is > 0
     */
    function matchDirection(out, a, b) {
        if (dot(a, b) > 0)
            copy(out, a);
        else
            negate(out, copy(out, a));
        return out;
    }
    Vec3.matchDirection = matchDirection;
    const triangleNormalTmpAB = zero();
    const triangleNormalTmpAC = zero();
    /** Calculate normal for the triangle defined by `a`, `b` and `c` */
    function triangleNormal(out, a, b, c) {
        sub(triangleNormalTmpAB, b, a);
        sub(triangleNormalTmpAC, c, a);
        return normalize(out, cross(out, triangleNormalTmpAB, triangleNormalTmpAC));
    }
    Vec3.triangleNormal = triangleNormal;
    function toString(a, precision) {
        return `[${a[0].toPrecision(precision)} ${a[1].toPrecision(precision)} ${a[2].toPrecision(precision)}]`;
    }
    Vec3.toString = toString;
    Vec3.origin = create(0, 0, 0);
    Vec3.unit = create(1, 1, 1);
    Vec3.negUnit = create(-1, -1, -1);
    Vec3.unitX = create(1, 0, 0);
    Vec3.unitY = create(0, 1, 0);
    Vec3.unitZ = create(0, 0, 1);
    Vec3.negUnitX = create(-1, 0, 0);
    Vec3.negUnitY = create(0, -1, 0);
    Vec3.negUnitZ = create(0, 0, -1);
})(Vec3 || (Vec3 = {}));

/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
const PiDiv180 = Math.PI / 180;
function degToRad(deg) {
    return deg * PiDiv180; // deg * Math.PI / 180
}

/**
 * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function Mat4() {
    return Mat4.zero();
}
/**
 * Stores a 4x4 matrix in a column major (j * 4 + i indexing) format.
 */
(function (Mat4) {
    function zero() {
        // force double backing array by 0.1.
        const ret = [0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        ret[0] = 0.0;
        return ret;
    }
    Mat4.zero = zero;
    function identity() {
        const out = zero();
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    Mat4.identity = identity;
    function setIdentity(mat) {
        mat[0] = 1;
        mat[1] = 0;
        mat[2] = 0;
        mat[3] = 0;
        mat[4] = 0;
        mat[5] = 1;
        mat[6] = 0;
        mat[7] = 0;
        mat[8] = 0;
        mat[9] = 0;
        mat[10] = 1;
        mat[11] = 0;
        mat[12] = 0;
        mat[13] = 0;
        mat[14] = 0;
        mat[15] = 1;
        return mat;
    }
    Mat4.setIdentity = setIdentity;
    function setZero(mat) {
        for (let i = 0; i < 16; i++)
            mat[i] = 0;
        return mat;
    }
    Mat4.setZero = setZero;
    function ofRows(rows) {
        const out = zero();
        for (let i = 0; i < 4; i++) {
            const r = rows[i];
            for (let j = 0; j < 4; j++) {
                out[4 * j + i] = r[j];
            }
        }
        return out;
    }
    Mat4.ofRows = ofRows;
    const _id = identity();
    function isIdentity(m, eps) {
        return areEqual(m, _id, typeof eps === 'undefined' ? EPSILON : eps);
    }
    Mat4.isIdentity = isIdentity;
    function hasNaN(m) {
        for (let i = 0; i < 16; i++)
            if (isNaN(m[i]))
                return true;
        return false;
    }
    Mat4.hasNaN = hasNaN;
    function areEqual(a, b, eps) {
        for (let i = 0; i < 16; i++) {
            if (Math.abs(a[i] - b[i]) > eps)
                return false;
        }
        return true;
    }
    Mat4.areEqual = areEqual;
    function setValue(a, i, j, value) {
        a[4 * j + i] = value;
    }
    Mat4.setValue = setValue;
    function getValue(a, i, j) {
        return a[4 * j + i];
    }
    Mat4.getValue = getValue;
    function toArray(a, out, offset) {
        out[offset + 0] = a[0];
        out[offset + 1] = a[1];
        out[offset + 2] = a[2];
        out[offset + 3] = a[3];
        out[offset + 4] = a[4];
        out[offset + 5] = a[5];
        out[offset + 6] = a[6];
        out[offset + 7] = a[7];
        out[offset + 8] = a[8];
        out[offset + 9] = a[9];
        out[offset + 10] = a[10];
        out[offset + 11] = a[11];
        out[offset + 12] = a[12];
        out[offset + 13] = a[13];
        out[offset + 14] = a[14];
        out[offset + 15] = a[15];
        return out;
    }
    Mat4.toArray = toArray;
    function fromArray(a, array, offset) {
        a[0] = array[offset + 0];
        a[1] = array[offset + 1];
        a[2] = array[offset + 2];
        a[3] = array[offset + 3];
        a[4] = array[offset + 4];
        a[5] = array[offset + 5];
        a[6] = array[offset + 6];
        a[7] = array[offset + 7];
        a[8] = array[offset + 8];
        a[9] = array[offset + 9];
        a[10] = array[offset + 10];
        a[11] = array[offset + 11];
        a[12] = array[offset + 12];
        a[13] = array[offset + 13];
        a[14] = array[offset + 14];
        a[15] = array[offset + 15];
        return a;
    }
    Mat4.fromArray = fromArray;
    function fromBasis(a, x, y, z) {
        setZero(a);
        setValue(a, 0, 0, x[0]);
        setValue(a, 1, 0, x[1]);
        setValue(a, 2, 0, x[2]);
        setValue(a, 0, 1, y[0]);
        setValue(a, 1, 1, y[1]);
        setValue(a, 2, 1, y[2]);
        setValue(a, 0, 2, z[0]);
        setValue(a, 1, 2, z[1]);
        setValue(a, 2, 2, z[2]);
        setValue(a, 3, 3, 1);
        return a;
    }
    Mat4.fromBasis = fromBasis;
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    Mat4.copy = copy;
    function clone(a) {
        return copy(zero(), a);
    }
    Mat4.clone = clone;
    /**
     * Returns the translation vector component of a transformation matrix.
     */
    function getTranslation(out, mat) {
        out[0] = mat[12];
        out[1] = mat[13];
        out[2] = mat[14];
        return out;
    }
    Mat4.getTranslation = getTranslation;
    /**
     * Returns the scaling factor component of a transformation matrix.
     */
    function getScaling(out, mat) {
        const m11 = mat[0];
        const m12 = mat[1];
        const m13 = mat[2];
        const m21 = mat[4];
        const m22 = mat[5];
        const m23 = mat[6];
        const m31 = mat[8];
        const m32 = mat[9];
        const m33 = mat[10];
        out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
        out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
        out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
        return out;
    }
    Mat4.getScaling = getScaling;
    /**
     * Returns a quaternion representing the rotational component of a transformation matrix.
     */
    function getRotation(out, mat) {
        // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        const trace = mat[0] + mat[5] + mat[10];
        let S = 0;
        if (trace > 0) {
            S = Math.sqrt(trace + 1.0) * 2;
            out[3] = 0.25 * S;
            out[0] = (mat[6] - mat[9]) / S;
            out[1] = (mat[8] - mat[2]) / S;
            out[2] = (mat[1] - mat[4]) / S;
        }
        else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {
            S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
            out[3] = (mat[6] - mat[9]) / S;
            out[0] = 0.25 * S;
            out[1] = (mat[1] + mat[4]) / S;
            out[2] = (mat[8] + mat[2]) / S;
        }
        else if (mat[5] > mat[10]) {
            S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
            out[3] = (mat[8] - mat[2]) / S;
            out[0] = (mat[1] + mat[4]) / S;
            out[1] = 0.25 * S;
            out[2] = (mat[6] + mat[9]) / S;
        }
        else {
            S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
            out[3] = (mat[1] - mat[4]) / S;
            out[0] = (mat[8] + mat[2]) / S;
            out[1] = (mat[6] + mat[9]) / S;
            out[2] = 0.25 * S;
        }
        return out;
    }
    Mat4.getRotation = getRotation;
    function extractRotation(out, mat) {
        const scaleX = 1 / Math.sqrt(mat[0] * mat[0] + mat[1] * mat[1] + mat[2] * mat[2]);
        const scaleY = 1 / Math.sqrt(mat[4] * mat[4] + mat[5] * mat[5] + mat[6] * mat[6]);
        const scaleZ = 1 / Math.sqrt(mat[8] * mat[8] + mat[9] * mat[9] + mat[10] * mat[10]);
        out[0] = mat[0] * scaleX;
        out[1] = mat[1] * scaleX;
        out[2] = mat[2] * scaleX;
        out[3] = 0;
        out[4] = mat[4] * scaleY;
        out[5] = mat[5] * scaleY;
        out[6] = mat[6] * scaleY;
        out[7] = 0;
        out[8] = mat[8] * scaleZ;
        out[9] = mat[9] * scaleZ;
        out[10] = mat[10] * scaleZ;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    Mat4.extractRotation = extractRotation;
    function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            const a01 = a[1], a02 = a[2], a03 = a[3];
            const a12 = a[6], a13 = a[7];
            const a23 = a[11];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a01;
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a02;
            out[9] = a12;
            out[11] = a[14];
            out[12] = a03;
            out[13] = a13;
            out[14] = a23;
        }
        else {
            out[0] = a[0];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a[1];
            out[5] = a[5];
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a[2];
            out[9] = a[6];
            out[10] = a[10];
            out[11] = a[14];
            out[12] = a[3];
            out[13] = a[7];
            out[14] = a[11];
            out[15] = a[15];
        }
        return out;
    }
    Mat4.transpose = transpose;
    function tryInvert(out, a) {
        const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
        // Calculate the determinant
        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return false;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return true;
    }
    Mat4.tryInvert = tryInvert;
    function invert(out, a) {
        if (!tryInvert(out, a)) {
            console.warn('non-invertible matrix.', a);
        }
        return out;
    }
    Mat4.invert = invert;
    function mul(out, a, b) {
        const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        // Cache only the current line of the second matrix
        let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[4];
        b1 = b[5];
        b2 = b[6];
        b3 = b[7];
        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[8];
        b1 = b[9];
        b2 = b[10];
        b3 = b[11];
        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[12];
        b1 = b[13];
        b2 = b[14];
        b3 = b[15];
        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return out;
    }
    Mat4.mul = mul;
    /**
     * Like `mul` but with offsets into arrays
     */
    function mulOffset(out, a, b, oOut, oA, oB) {
        const a00 = a[0 + oA], a01 = a[1 + oA], a02 = a[2 + oA], a03 = a[3 + oA], a10 = a[4 + oA], a11 = a[5 + oA], a12 = a[6 + oA], a13 = a[7 + oA], a20 = a[8 + oA], a21 = a[9 + oA], a22 = a[10 + oA], a23 = a[11 + oA], a30 = a[12 + oA], a31 = a[13 + oA], a32 = a[14 + oA], a33 = a[15 + oA];
        // Cache only the current line of the second matrix
        let b0 = b[0 + oB], b1 = b[1 + oB], b2 = b[2 + oB], b3 = b[3 + oB];
        out[0 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[1 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[2 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[3 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[4 + oB];
        b1 = b[5 + oB];
        b2 = b[6 + oB];
        b3 = b[7 + oB];
        out[4 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[5 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[6 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[7 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[8 + oB];
        b1 = b[9 + oB];
        b2 = b[10 + oB];
        b3 = b[11 + oB];
        out[8 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[9 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[10 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[11 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[12 + oB];
        b1 = b[13 + oB];
        b2 = b[14 + oB];
        b3 = b[15 + oB];
        out[12 + oOut] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[13 + oOut] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[14 + oOut] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[15 + oOut] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return out;
    }
    Mat4.mulOffset = mulOffset;
    function mul3(out, a, b, c) {
        return mul(out, mul(out, a, b), c);
    }
    Mat4.mul3 = mul3;
    /** Translate a Mat4 by the given Vec3 */
    function translate(out, a, v) {
        const x = v[0], y = v[1], z = v[2];
        let a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;
        if (a === out) {
            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        }
        else {
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a03;
            out[4] = a10;
            out[5] = a11;
            out[6] = a12;
            out[7] = a13;
            out[8] = a20;
            out[9] = a21;
            out[10] = a22;
            out[11] = a23;
            out[12] = a00 * x + a10 * y + a20 * z + a[12];
            out[13] = a01 * x + a11 * y + a21 * z + a[13];
            out[14] = a02 * x + a12 * y + a22 * z + a[14];
            out[15] = a03 * x + a13 * y + a23 * z + a[15];
        }
        return out;
    }
    Mat4.translate = translate;
    function fromTranslation(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    Mat4.fromTranslation = fromTranslation;
    function setTranslation(out, v) {
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        return out;
    }
    Mat4.setTranslation = setTranslation;
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     */
    function setAxes(out, view, right, up) {
        out[0] = right[0];
        out[4] = right[1];
        out[8] = right[2];
        out[1] = up[0];
        out[5] = up[1];
        out[9] = up[2];
        out[2] = view[0];
        out[6] = view[1];
        out[10] = view[2];
        return out;
    }
    Mat4.setAxes = setAxes;
    function rotate(out, a, rad, axis) {
        let x = axis[0], y = axis[1], z = axis[2];
        let len = Math.sqrt(x * x + y * y + z * z);
        if (Math.abs(len) < EPSILON) {
            return identity();
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        const t = 1 - c;
        const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        // Construct the elements of the rotation matrix
        const b00 = x * x * t + c, b01 = y * x * t + z * s, b02 = z * x * t - y * s;
        const b10 = x * y * t - z * s, b11 = y * y * t + c, b12 = z * y * t + x * s;
        const b20 = x * z * t + y * s, b21 = y * z * t - x * s, b22 = z * z * t + c;
        // Perform rotation-specific matrix multiplication
        out[0] = a00 * b00 + a10 * b01 + a20 * b02;
        out[1] = a01 * b00 + a11 * b01 + a21 * b02;
        out[2] = a02 * b00 + a12 * b01 + a22 * b02;
        out[3] = a03 * b00 + a13 * b01 + a23 * b02;
        out[4] = a00 * b10 + a10 * b11 + a20 * b12;
        out[5] = a01 * b10 + a11 * b11 + a21 * b12;
        out[6] = a02 * b10 + a12 * b11 + a22 * b12;
        out[7] = a03 * b10 + a13 * b11 + a23 * b12;
        out[8] = a00 * b20 + a10 * b21 + a20 * b22;
        out[9] = a01 * b20 + a11 * b21 + a21 * b22;
        out[10] = a02 * b20 + a12 * b21 + a22 * b22;
        out[11] = a03 * b20 + a13 * b21 + a23 * b22;
        if (a !== out) { // If the source and destination differ, copy the unchanged last row
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        }
        return out;
    }
    Mat4.rotate = rotate;
    function fromRotation(out, rad, axis) {
        let x = axis[0], y = axis[1], z = axis[2];
        let len = Math.sqrt(x * x + y * y + z * z);
        if (Math.abs(len) < EPSILON) {
            return setIdentity(out);
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        const s = Math.sin(rad);
        const c = Math.cos(rad);
        const t = 1 - c;
        // Perform rotation-specific matrix multiplication
        out[0] = x * x * t + c;
        out[1] = y * x * t + z * s;
        out[2] = z * x * t - y * s;
        out[3] = 0;
        out[4] = x * y * t - z * s;
        out[5] = y * y * t + c;
        out[6] = z * y * t + x * s;
        out[7] = 0;
        out[8] = x * z * t + y * s;
        out[9] = y * z * t - x * s;
        out[10] = z * z * t + c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    Mat4.fromRotation = fromRotation;
    function scale(out, a, v) {
        const x = v[0], y = v[1], z = v[2];
        out[0] = a[0] * x;
        out[1] = a[1] * x;
        out[2] = a[2] * x;
        out[3] = a[3] * x;
        out[4] = a[4] * y;
        out[5] = a[5] * y;
        out[6] = a[6] * y;
        out[7] = a[7] * y;
        out[8] = a[8] * z;
        out[9] = a[9] * z;
        out[10] = a[10] * z;
        out[11] = a[11] * z;
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    Mat4.scale = scale;
    function scaleUniformly(out, a, scale) {
        out[0] = a[0] * scale;
        out[1] = a[1] * scale;
        out[2] = a[2] * scale;
        out[3] = a[3] * scale;
        out[4] = a[4] * scale;
        out[5] = a[5] * scale;
        out[6] = a[6] * scale;
        out[7] = a[7] * scale;
        out[8] = a[8] * scale;
        out[9] = a[9] * scale;
        out[10] = a[10] * scale;
        out[11] = a[11] * scale;
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    Mat4.scaleUniformly = scaleUniformly;
    function fromScaling(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = v[1];
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = v[2];
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    Mat4.fromScaling = fromScaling;
    function fromUniformScaling(out, scale) {
        out[0] = scale;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = scale;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = scale;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    Mat4.fromUniformScaling = fromUniformScaling;
    /**
     * Copies the mat3 into upper-left 3x3 values.
     */
    function fromMat3(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[4] = a[3];
        out[5] = a[4];
        out[6] = a[5];
        out[8] = a[6];
        out[9] = a[7];
        out[10] = a[8];
        return out;
    }
    Mat4.fromMat3 = fromMat3;
    function compose(out, position, quaternion, scale) {
        const [x, y, z, w] = quaternion;
        const x2 = x + x, y2 = y + y, z2 = z + z;
        const xx = x * x2, xy = x * y2, xz = x * z2;
        const yy = y * y2, yz = y * z2, zz = z * z2;
        const wx = w * x2, wy = w * y2, wz = w * z2;
        const [sx, sy, sz] = scale;
        out[0] = (1 - (yy + zz)) * sx;
        out[1] = (xy + wz) * sx;
        out[2] = (xz - wy) * sx;
        out[3] = 0;
        out[4] = (xy - wz) * sy;
        out[5] = (1 - (xx + zz)) * sy;
        out[6] = (yz + wx) * sy;
        out[7] = 0;
        out[8] = (xz + wy) * sz;
        out[9] = (yz - wx) * sz;
        out[10] = (1 - (xx + yy)) * sz;
        out[11] = 0;
        out[12] = position[0];
        out[13] = position[1];
        out[14] = position[2];
        out[15] = 1;
        return out;
    }
    Mat4.compose = compose;
    const _v3 = [0, 0, 0];
    const _m4 = zero();
    function decompose(m, position, quaternion, scale) {
        let sx = Vec3.magnitude(Vec3.set(_v3, m[0], m[1], m[2]));
        const sy = Vec3.magnitude(Vec3.set(_v3, m[4], m[5], m[6]));
        const sz = Vec3.magnitude(Vec3.set(_v3, m[8], m[9], m[10]));
        // if determine is negative, we need to invert one scale
        const det = determinant(m);
        if (det < 0)
            sx = -sx;
        position[0] = m[12];
        position[1] = m[13];
        position[2] = m[14];
        // scale the rotation part
        copy(_m4, m);
        const invSX = 1 / sx;
        const invSY = 1 / sy;
        const invSZ = 1 / sz;
        _m4[0] *= invSX;
        _m4[1] *= invSX;
        _m4[2] *= invSX;
        _m4[4] *= invSY;
        _m4[5] *= invSY;
        _m4[6] *= invSY;
        _m4[8] *= invSZ;
        _m4[9] *= invSZ;
        _m4[10] *= invSZ;
        getRotation(quaternion, _m4);
        scale[0] = sx;
        scale[1] = sy;
        scale[2] = sz;
        return m;
    }
    Mat4.decompose = decompose;
    function makeTable(m) {
        let ret = '';
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                ret += m[4 * j + i].toString();
                if (j < 3)
                    ret += ' ';
            }
            if (i < 3)
                ret += '\n';
        }
        return ret;
    }
    Mat4.makeTable = makeTable;
    function determinant(a) {
        const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
        // Calculate the determinant
        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    Mat4.determinant = determinant;
    /**
     * Check if the matrix has the form
     * [ Rotation    Translation ]
     * [ 0           1           ]
     *
     * Allows for improper rotations
     */
    function isRotationAndTranslation(a, eps) {
        return _isRotationAndTranslation(a, typeof eps !== 'undefined' ? eps : EPSILON);
    }
    Mat4.isRotationAndTranslation = isRotationAndTranslation;
    function _isRotationAndTranslation(a, eps) {
        const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a33 = a[15];
        if (!equalEps(a33, 1, eps) || !equalEps(a03, 0, eps) || !equalEps(a13, 0, eps) || !equalEps(a23, 0, eps)) {
            return false;
        }
        // use `abs` to allow for improper rotations
        const det3x3 = Math.abs(a00 * (a11 * a22 - a12 * a21) - a01 * (a10 * a22 - a12 * a20) + a02 * (a10 * a21 - a11 * a20));
        if (!equalEps(det3x3, 1, eps)) {
            return false;
        }
        return true;
    }
    /**
     * Check if the matrix has only translation and uniform scaling
     * [ S  0  0  X ]
     * [ 0  S  0  Y ]
     * [ 0  0  S  Z ]
     * [ 0  0  0  1 ]
     */
    function isTranslationAndUniformScaling(a, eps) {
        return _isTranslationAndUniformScaling(a, typeof eps !== 'undefined' ? eps : EPSILON);
    }
    Mat4.isTranslationAndUniformScaling = isTranslationAndUniformScaling;
    function _isTranslationAndUniformScaling(a, eps) {
        const a00 = a[0];
        return (
        // 0 base scaling
        equalEps(a[1], 0, eps) &&
            equalEps(a[2], 0, eps) &&
            equalEps(a[3], 0, eps) &&
            equalEps(a[4], 0, eps) &&
            equalEps(a[5], a00, eps) &&
            equalEps(a[6], 0, eps) &&
            equalEps(a[7], 0, eps) &&
            equalEps(a[8], 0, eps) &&
            equalEps(a[9], 0, eps) &&
            equalEps(a[10], a00, eps) &&
            equalEps(a[11], 0, eps) &&
            // 12, 13, 14 translation can be anything
            equalEps(a[15], 1, eps));
    }
    function fromQuat(out, q) {
        const x = q[0], y = q[1], z = q[2], w = q[3];
        const x2 = x + x;
        const y2 = y + y;
        const z2 = z + z;
        const xx = x * x2;
        const yx = y * x2;
        const yy = y * y2;
        const zx = z * x2;
        const zy = z * y2;
        const zz = z * z2;
        const wx = w * x2;
        const wy = w * y2;
        const wz = w * z2;
        out[0] = 1 - yy - zz;
        out[1] = yx + wz;
        out[2] = zx - wy;
        out[3] = 0;
        out[4] = yx - wz;
        out[5] = 1 - xx - zz;
        out[6] = zy + wx;
        out[7] = 0;
        out[8] = zx + wy;
        out[9] = zy - wx;
        out[10] = 1 - xx - yy;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    Mat4.fromQuat = fromQuat;
    function fromEuler(out, euler, order) {
        const x = euler[0], y = euler[1], z = euler[2];
        const a = Math.cos(x), b = Math.sin(x);
        const c = Math.cos(y), d = Math.sin(y);
        const e = Math.cos(z), f = Math.sin(z);
        if (order === 'XYZ') {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            out[0] = c * e;
            out[4] = -c * f;
            out[8] = d;
            out[1] = af + be * d;
            out[5] = ae - bf * d;
            out[9] = -b * c;
            out[2] = bf - ae * d;
            out[6] = be + af * d;
            out[10] = a * c;
        }
        else if (order === 'YXZ') {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            out[0] = ce + df * b;
            out[4] = de * b - cf;
            out[8] = a * d;
            out[1] = a * f;
            out[5] = a * e;
            out[9] = -b;
            out[2] = cf * b - de;
            out[6] = df + ce * b;
            out[10] = a * c;
        }
        else if (order === 'ZXY') {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            out[0] = ce - df * b;
            out[4] = -a * f;
            out[8] = de + cf * b;
            out[1] = cf + de * b;
            out[5] = a * e;
            out[9] = df - ce * b;
            out[2] = -a * d;
            out[6] = b;
            out[10] = a * c;
        }
        else if (order === 'ZYX') {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            out[0] = c * e;
            out[4] = be * d - af;
            out[8] = ae * d + bf;
            out[1] = c * f;
            out[5] = bf * d + ae;
            out[9] = af * d - be;
            out[2] = -d;
            out[6] = b * c;
            out[10] = a * c;
        }
        else if (order === 'YZX') {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            out[0] = c * e;
            out[4] = bd - ac * f;
            out[8] = bc * f + ad;
            out[1] = f;
            out[5] = a * e;
            out[9] = -b * e;
            out[2] = -d * e;
            out[6] = ad * f + bc;
            out[10] = ac - bd * f;
        }
        else if (order === 'XZY') {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            out[0] = c * e;
            out[4] = -f;
            out[8] = d * e;
            out[1] = ac * f + bd;
            out[5] = a * e;
            out[9] = ad * f - bc;
            out[2] = bc * f - ad;
            out[6] = b * e;
            out[10] = bd * f + ac;
        }
        // bottom row
        out[3] = 0;
        out[7] = 0;
        out[11] = 0;
        // last column
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    Mat4.fromEuler = fromEuler;
    /**
     * Generates a perspective projection (frustum) matrix with the given bounds
     */
    function perspective(out, left, right, top, bottom, near, far) {
        const x = 2 * near / (right - left);
        const y = 2 * near / (top - bottom);
        const a = (right + left) / (right - left);
        const b = (top + bottom) / (top - bottom);
        const c = -(far + near) / (far - near);
        const d = -2 * far * near / (far - near);
        out[0] = x;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = y;
        out[6] = 0;
        out[7] = 0;
        out[8] = a;
        out[9] = b;
        out[10] = c;
        out[11] = -1;
        out[12] = 0;
        out[13] = 0;
        out[14] = d;
        out[15] = 0;
        return out;
    }
    Mat4.perspective = perspective;
    /**
     * Generates a orthogonal projection matrix with the given bounds
     */
    function ortho(out, left, right, top, bottom, near, far) {
        const w = 1.0 / (right - left);
        const h = 1.0 / (top - bottom);
        const p = 1.0 / (far - near);
        const x = (right + left) * w;
        const y = (top + bottom) * h;
        const z = (far + near) * p;
        out[0] = 2 * w;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 2 * h;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = -2 * p;
        out[11] = 0;
        out[12] = -x;
        out[13] = -y;
        out[14] = -z;
        out[15] = 1;
        return out;
    }
    Mat4.ortho = ortho;
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis
     */
    function lookAt(out, eye, center, up) {
        let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
        const eyex = eye[0];
        const eyey = eye[1];
        const eyez = eye[2];
        const upx = up[0];
        const upy = up[1];
        const upz = up[2];
        const centerx = center[0];
        const centery = center[1];
        const centerz = center[2];
        if (Math.abs(eyex - centerx) < EPSILON &&
            Math.abs(eyey - centery) < EPSILON &&
            Math.abs(eyez - centerz) < EPSILON) {
            return setIdentity(out);
        }
        z0 = eyex - centerx;
        z1 = eyey - centery;
        z2 = eyez - centerz;
        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
        z0 *= len;
        z1 *= len;
        z2 *= len;
        x0 = upy * z2 - upz * z1;
        x1 = upz * z0 - upx * z2;
        x2 = upx * z1 - upy * z0;
        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
        if (!len) {
            x0 = 0;
            x1 = 0;
            x2 = 0;
        }
        else {
            len = 1 / len;
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        y0 = z1 * x2 - z2 * x1;
        y1 = z2 * x0 - z0 * x2;
        y2 = z0 * x1 - z1 * x0;
        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
        if (!len) {
            y0 = 0;
            y1 = 0;
            y2 = 0;
        }
        else {
            len = 1 / len;
            y0 *= len;
            y1 *= len;
            y2 *= len;
        }
        out[0] = x0;
        out[1] = y0;
        out[2] = z0;
        out[3] = 0;
        out[4] = x1;
        out[5] = y1;
        out[6] = z1;
        out[7] = 0;
        out[8] = x2;
        out[9] = y2;
        out[10] = z2;
        out[11] = 0;
        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
        out[15] = 1;
        return out;
    }
    Mat4.lookAt = lookAt;
    /**
     * Generates a matrix that makes something look at something else.
     */
    function targetTo(out, eye, target, up) {
        const eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
        let z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
        let len = z0 * z0 + z1 * z1 + z2 * z2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            z0 *= len;
            z1 *= len;
            z2 *= len;
        }
        let x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
        len = x0 * x0 + x1 * x1 + x2 * x2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        out[0] = x0;
        out[1] = x1;
        out[2] = x2;
        out[3] = 0;
        out[4] = z1 * x2 - z2 * x1;
        out[5] = z2 * x0 - z0 * x2;
        out[6] = z0 * x1 - z1 * x0;
        out[7] = 0;
        out[8] = z0;
        out[9] = z1;
        out[10] = z2;
        out[11] = 0;
        out[12] = eyex;
        out[13] = eyey;
        out[14] = eyez;
        out[15] = 1;
        return out;
    }
    Mat4.targetTo = targetTo;
    /**
     * Perm is 0-indexed permutation
     */
    function fromPermutation(out, perm) {
        setZero(out);
        for (let i = 0; i < 4; i++) {
            const p = perm[i];
            setValue(out, i, p, 1);
        }
        return out;
    }
    Mat4.fromPermutation = fromPermutation;
    function getMaxScaleOnAxis(m) {
        const scaleXSq = m[0] * m[0] + m[1] * m[1] + m[2] * m[2];
        const scaleYSq = m[4] * m[4] + m[5] * m[5] + m[6] * m[6];
        const scaleZSq = m[8] * m[8] + m[9] * m[9] + m[10] * m[10];
        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    Mat4.getMaxScaleOnAxis = getMaxScaleOnAxis;
    const xAxis = [1, 0, 0];
    const yAxis = [0, 1, 0];
    const zAxis = [0, 0, 1];
    /** Rotation matrix for 90deg around x-axis */
    Mat4.rotX90 = fromRotation(zero(), degToRad(90), xAxis);
    /** Rotation matrix for 180deg around x-axis */
    Mat4.rotX180 = fromRotation(zero(), degToRad(180), xAxis);
    /** Rotation matrix for 90deg around y-axis */
    Mat4.rotY90 = fromRotation(zero(), degToRad(90), yAxis);
    /** Rotation matrix for 180deg around y-axis */
    Mat4.rotY180 = fromRotation(zero(), degToRad(180), yAxis);
    /** Rotation matrix for 270deg around y-axis */
    Mat4.rotY270 = fromRotation(zero(), degToRad(270), yAxis);
    /** Rotation matrix for 90deg around z-axis */
    Mat4.rotZ90 = fromRotation(zero(), degToRad(90), zAxis);
    /** Rotation matrix for 180deg around z-axis */
    Mat4.rotZ180 = fromRotation(zero(), degToRad(180), zAxis);
    /** Rotation matrix for 90deg around first x-axis and then y-axis */
    Mat4.rotXY90 = mul(zero(), Mat4.rotX90, Mat4.rotY90);
    /** Rotation matrix for 90deg around first z-axis and then y-axis */
    Mat4.rotZY90 = mul(zero(), Mat4.rotZ90, Mat4.rotY90);
    /** Rotation matrix for 90deg around first z-axis and then y-axis and then z-axis */
    Mat4.rotZYZ90 = mul(zero(), Mat4.rotZY90, Mat4.rotZ90);
    /** Rotation matrix for 90deg around first z-axis and then 180deg around x-axis */
    Mat4.rotZ90X180 = mul(zero(), Mat4.rotZ90, Mat4.rotX180);
    /** Rotation matrix for 90deg around first y-axis and then 180deg around z-axis */
    Mat4.rotY90Z180 = mul(zero(), Mat4.rotY90, Mat4.rotZ180);
    /** Identity matrix */
    Mat4.id = identity();
})(Mat4 || (Mat4 = {}));

/**
 * Copyright (c) 2017-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function Mat3() {
    return Mat3.zero();
}
(function (Mat3) {
    function zero() {
        // force double backing array by 0.1.
        const ret = [0.1, 0, 0, 0, 0, 0, 0, 0, 0];
        ret[0] = 0.0;
        return ret;
    }
    Mat3.zero = zero;
    function identity() {
        const out = zero();
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    Mat3.identity = identity;
    function setIdentity(mat) {
        mat[0] = 1;
        mat[1] = 0;
        mat[2] = 0;
        mat[3] = 0;
        mat[4] = 1;
        mat[5] = 0;
        mat[6] = 0;
        mat[7] = 0;
        mat[8] = 1;
        return mat;
    }
    Mat3.setIdentity = setIdentity;
    function toArray(a, out, offset) {
        out[offset + 0] = a[0];
        out[offset + 1] = a[1];
        out[offset + 2] = a[2];
        out[offset + 3] = a[3];
        out[offset + 4] = a[4];
        out[offset + 5] = a[5];
        out[offset + 6] = a[6];
        out[offset + 7] = a[7];
        out[offset + 8] = a[8];
        return out;
    }
    Mat3.toArray = toArray;
    function fromArray(a, array, offset) {
        a[0] = array[offset + 0];
        a[1] = array[offset + 1];
        a[2] = array[offset + 2];
        a[3] = array[offset + 3];
        a[4] = array[offset + 4];
        a[5] = array[offset + 5];
        a[6] = array[offset + 6];
        a[7] = array[offset + 7];
        a[8] = array[offset + 8];
        return a;
    }
    Mat3.fromArray = fromArray;
    function fromColumns(out, left, middle, right) {
        out[0] = left[0];
        out[1] = left[1];
        out[2] = left[2];
        out[3] = middle[0];
        out[4] = middle[1];
        out[5] = middle[2];
        out[6] = right[0];
        out[7] = right[1];
        out[8] = right[2];
        return out;
    }
    Mat3.fromColumns = fromColumns;
    /**
     * Copies the upper-left 3x3 values into the given mat3.
     */
    function fromMat4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[4];
        out[4] = a[5];
        out[5] = a[6];
        out[6] = a[8];
        out[7] = a[9];
        out[8] = a[10];
        return out;
    }
    Mat3.fromMat4 = fromMat4;
    const _m4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    function fromEuler(out, euler, order) {
        Mat4.fromEuler(_m4, euler, order);
        return fromMat4(out, _m4);
    }
    Mat3.fromEuler = fromEuler;
    function create(a00, a01, a02, a10, a11, a12, a20, a21, a22) {
        const out = zero();
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a10;
        out[4] = a11;
        out[5] = a12;
        out[6] = a20;
        out[7] = a21;
        out[8] = a22;
        return out;
    }
    Mat3.create = create;
    const _id = identity();
    function isIdentity(m, eps) {
        return areEqual(m, _id, typeof eps === 'undefined' ? EPSILON : eps);
    }
    Mat3.isIdentity = isIdentity;
    function hasNaN(m) {
        for (let i = 0; i < 9; i++)
            if (isNaN(m[i]))
                return true;
        return false;
    }
    Mat3.hasNaN = hasNaN;
    /**
     * Creates a new Mat3 initialized with values from an existing matrix
     */
    function clone(a) {
        return copy(zero(), a);
    }
    Mat3.clone = clone;
    function areEqual(a, b, eps) {
        for (let i = 0; i < 9; i++) {
            if (Math.abs(a[i] - b[i]) > eps)
                return false;
        }
        return true;
    }
    Mat3.areEqual = areEqual;
    function setValue(a, i, j, value) {
        a[3 * j + i] = value;
    }
    Mat3.setValue = setValue;
    function getValue(a, i, j) {
        return a[3 * j + i];
    }
    Mat3.getValue = getValue;
    /**
     * Copy the values from one Mat3 to another
     */
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    Mat3.copy = copy;
    /**
     * Transpose the values of a Mat3
     */
    function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            const a01 = a[1], a02 = a[2], a12 = a[5];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a01;
            out[5] = a[7];
            out[6] = a02;
            out[7] = a12;
        }
        else {
            out[0] = a[0];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a[1];
            out[4] = a[4];
            out[5] = a[7];
            out[6] = a[2];
            out[7] = a[5];
            out[8] = a[8];
        }
        return out;
    }
    Mat3.transpose = transpose;
    /**
     * Inverts a Mat3
     */
    function invert(out, a) {
        const a00 = a[0], a01 = a[1], a02 = a[2];
        const a10 = a[3], a11 = a[4], a12 = a[5];
        const a20 = a[6], a21 = a[7], a22 = a[8];
        const b01 = a22 * a11 - a12 * a21;
        const b11 = -a22 * a10 + a12 * a20;
        const b21 = a21 * a10 - a11 * a20;
        // Calculate the determinant
        let det = a00 * b01 + a01 * b11 + a02 * b21;
        if (!det) {
            console.warn('non-invertible matrix.', a);
            return out;
        }
        det = 1.0 / det;
        out[0] = b01 * det;
        out[1] = (-a22 * a01 + a02 * a21) * det;
        out[2] = (a12 * a01 - a02 * a11) * det;
        out[3] = b11 * det;
        out[4] = (a22 * a00 - a02 * a20) * det;
        out[5] = (-a12 * a00 + a02 * a10) * det;
        out[6] = b21 * det;
        out[7] = (-a21 * a00 + a01 * a20) * det;
        out[8] = (a11 * a00 - a01 * a10) * det;
        return out;
    }
    Mat3.invert = invert;
    function symmtricFromUpper(out, a) {
        if (out === a) {
            out[3] = a[1];
            out[6] = a[2];
            out[7] = a[5];
        }
        else {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[1];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[2];
            out[7] = a[5];
            out[8] = a[8];
        }
        return out;
    }
    Mat3.symmtricFromUpper = symmtricFromUpper;
    function symmtricFromLower(out, a) {
        if (out === a) {
            out[1] = a[3];
            out[2] = a[6];
            out[5] = a[7];
        }
        else {
            out[0] = a[0];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[7];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
        }
        return out;
    }
    Mat3.symmtricFromLower = symmtricFromLower;
    function determinant(a) {
        const a00 = a[0], a01 = a[1], a02 = a[2];
        const a10 = a[3], a11 = a[4], a12 = a[5];
        const a20 = a[6], a21 = a[7], a22 = a[8];
        const b01 = a22 * a11 - a12 * a21;
        const b11 = -a22 * a10 + a12 * a20;
        const b21 = a21 * a10 - a11 * a20;
        // Calculate the determinant
        return a00 * b01 + a01 * b11 + a02 * b21;
    }
    Mat3.determinant = determinant;
    function trace(a) {
        return a[0] + a[4] + a[8];
    }
    Mat3.trace = trace;
    function sub(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        return out;
    }
    Mat3.sub = sub;
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        return out;
    }
    Mat3.add = add;
    function mul(out, a, b) {
        const a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
        const b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];
        out[0] = b00 * a00 + b01 * a10 + b02 * a20;
        out[1] = b00 * a01 + b01 * a11 + b02 * a21;
        out[2] = b00 * a02 + b01 * a12 + b02 * a22;
        out[3] = b10 * a00 + b11 * a10 + b12 * a20;
        out[4] = b10 * a01 + b11 * a11 + b12 * a21;
        out[5] = b10 * a02 + b11 * a12 + b12 * a22;
        out[6] = b20 * a00 + b21 * a10 + b22 * a20;
        out[7] = b20 * a01 + b21 * a11 + b22 * a21;
        out[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
    }
    Mat3.mul = mul;
    function subScalar(out, a, s) {
        out[0] = a[0] - s;
        out[1] = a[1] - s;
        out[2] = a[2] - s;
        out[3] = a[3] - s;
        out[4] = a[4] - s;
        out[5] = a[5] - s;
        out[6] = a[6] - s;
        out[7] = a[7] - s;
        out[8] = a[8] - s;
        return out;
    }
    Mat3.subScalar = subScalar;
    function addScalar(out, a, s) {
        out[0] = a[0] + s;
        out[1] = a[1] + s;
        out[2] = a[2] + s;
        out[3] = a[3] + s;
        out[4] = a[4] + s;
        out[5] = a[5] + s;
        out[6] = a[6] + s;
        out[7] = a[7] + s;
        out[8] = a[8] + s;
        return out;
    }
    Mat3.addScalar = addScalar;
    function mulScalar(out, a, s) {
        out[0] = a[0] * s;
        out[1] = a[1] * s;
        out[2] = a[2] * s;
        out[3] = a[3] * s;
        out[4] = a[4] * s;
        out[5] = a[5] * s;
        out[6] = a[6] * s;
        out[7] = a[7] * s;
        out[8] = a[8] * s;
        return out;
    }
    Mat3.mulScalar = mulScalar;
    const piThird = Math.PI / 3;
    const tmpB = zero();
    /**
     * Given a real symmetric 3x3 matrix A, compute the eigenvalues
     *
     * From https://en.wikipedia.org/wiki/Eigenvalue_algorithm#3.C3.973_matrices
     */
    function symmetricEigenvalues(out, a) {
        const p1 = a[1] * a[1] + a[2] * a[2] + a[5] * a[5];
        if (p1 === 0) {
            out[0] = a[0];
            out[1] = a[4];
            out[2] = a[8];
        }
        else {
            const q = trace(a) / 3;
            const a1 = a[0] - q;
            const a2 = a[4] - q;
            const a3 = a[8] - q;
            const p2 = a1 * a1 + a2 * a2 + a3 * a3 + 2 * p1;
            const p = Math.sqrt(p2 / 6);
            mulScalar(tmpB, Mat3.Identity, q);
            sub(tmpB, a, tmpB);
            mulScalar(tmpB, tmpB, (1 / p));
            const r = determinant(tmpB) / 2;
            // In exact arithmetic for a symmetric matrix  -1 <= r <= 1
            // but computation error can leave it slightly outside this range.
            const phi = r <= -1 ? piThird : r >= 1 ?
                0 : Math.acos(r) / 3;
            // the eigenvalues satisfy eig3 <= eig2 <= eig1
            out[0] = q + 2 * p * Math.cos(phi);
            out[2] = q + 2 * p * Math.cos(phi + (2 * piThird));
            out[1] = 3 * q - out[0] - out[2]; // since trace(A) = eig1 + eig2 + eig3
        }
        return out;
    }
    Mat3.symmetricEigenvalues = symmetricEigenvalues;
    const tmpR0 = [0.1, 0.0, 0.0];
    const tmpR1 = [0.1, 0.0, 0.0];
    const tmpR2 = [0.1, 0.0, 0.0];
    const tmpR0xR1 = [0.1, 0.0, 0.0];
    const tmpR0xR2 = [0.1, 0.0, 0.0];
    const tmpR1xR2 = [0.1, 0.0, 0.0];
    /**
     * Calculates the eigenvector for the given eigenvalue `e` of matrix `a`
     */
    function eigenvector(out, a, e) {
        Vec3.set(tmpR0, a[0] - e, a[1], a[2]);
        Vec3.set(tmpR1, a[1], a[4] - e, a[5]);
        Vec3.set(tmpR2, a[2], a[5], a[8] - e);
        Vec3.cross(tmpR0xR1, tmpR0, tmpR1);
        Vec3.cross(tmpR0xR2, tmpR0, tmpR2);
        Vec3.cross(tmpR1xR2, tmpR1, tmpR2);
        const d0 = Vec3.dot(tmpR0xR1, tmpR0xR1);
        const d1 = Vec3.dot(tmpR0xR2, tmpR0xR2);
        const d2 = Vec3.dot(tmpR1xR2, tmpR1xR2);
        let dmax = d0;
        let imax = 0;
        if (d1 > dmax) {
            dmax = d1;
            imax = 1;
        }
        if (d2 > dmax)
            imax = 2;
        if (imax === 0) {
            Vec3.scale(out, tmpR0xR1, 1 / Math.sqrt(d0));
        }
        else if (imax === 1) {
            Vec3.scale(out, tmpR0xR2, 1 / Math.sqrt(d1));
        }
        else {
            Vec3.scale(out, tmpR1xR2, 1 / Math.sqrt(d2));
        }
        return out;
    }
    Mat3.eigenvector = eigenvector;
    /**
     * Get matrix to transform directions, e.g. normals
     */
    function directionTransform(out, t) {
        fromMat4(out, t);
        invert(out, out);
        transpose(out, out);
        return out;
    }
    Mat3.directionTransform = directionTransform;
    Mat3.Identity = identity();
    /** Return the Frobenius inner product of two matrices (= dot product of the flattened matrices).
     * Can be used as a measure of similarity between two rotation matrices. */
    function innerProduct(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
            + a[3] * b[3] + a[4] * b[4] + a[5] * b[5]
            + a[6] * b[6] + a[7] * b[7] + a[8] * b[8];
    }
    Mat3.innerProduct = innerProduct;
})(Mat3 || (Mat3 = {}));

/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function Vec2() {
    return Vec2.zero();
}
(function (Vec2) {
    function zero() {
        // force double backing array by 0.1.
        const ret = [0.1, 0];
        ret[0] = 0.0;
        return ret;
    }
    Vec2.zero = zero;
    function clone(a) {
        const out = zero();
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    Vec2.clone = clone;
    function create(x, y) {
        const out = zero();
        out[0] = x;
        out[1] = y;
        return out;
    }
    Vec2.create = create;
    function hasNaN(a) {
        return isNaN(a[0]) || isNaN(a[1]);
    }
    Vec2.hasNaN = hasNaN;
    function toArray(a, out, offset) {
        out[offset + 0] = a[0];
        out[offset + 1] = a[1];
        return out;
    }
    Vec2.toArray = toArray;
    function fromArray(a, array, offset) {
        a[0] = array[offset + 0];
        a[1] = array[offset + 1];
        return a;
    }
    Vec2.fromArray = fromArray;
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    Vec2.copy = copy;
    function set(out, x, y) {
        out[0] = x;
        out[1] = y;
        return out;
    }
    Vec2.set = set;
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        return out;
    }
    Vec2.add = add;
    function sub(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        return out;
    }
    Vec2.sub = sub;
    function mul(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        return out;
    }
    Vec2.mul = mul;
    function div(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        return out;
    }
    Vec2.div = div;
    function scale(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        return out;
    }
    Vec2.scale = scale;
    /**
     * Math.round the components of a Vec2
     */
    function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        return out;
    }
    Vec2.round = round;
    /**
     * Math.ceil the components of a Vec2
     */
    function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        return out;
    }
    Vec2.ceil = ceil;
    /**
     * Math.floor the components of a Vec2
     */
    function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        return out;
    }
    Vec2.floor = floor;
    function distance(a, b) {
        const x = b[0] - a[0], y = b[1] - a[1];
        return Math.sqrt(x * x + y * y);
    }
    Vec2.distance = distance;
    function squaredDistance(a, b) {
        const x = b[0] - a[0], y = b[1] - a[1];
        return x * x + y * y;
    }
    Vec2.squaredDistance = squaredDistance;
    function magnitude(a) {
        const x = a[0], y = a[1];
        return Math.sqrt(x * x + y * y);
    }
    Vec2.magnitude = magnitude;
    function squaredMagnitude(a) {
        const x = a[0], y = a[1];
        return x * x + y * y;
    }
    Vec2.squaredMagnitude = squaredMagnitude;
    /**
     * Returns the inverse of the components of a Vec2
     */
    function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        return out;
    }
    Vec2.inverse = inverse;
    function areEqual(a, b) {
        return a[0] === b[0] && a[1] === b[1];
    }
    Vec2.areEqual = areEqual;
    function toString(a, precision) {
        return `[${a[0].toPrecision(precision)} ${a[1].toPrecision(precision)}}]`;
    }
    Vec2.toString = toString;
})(Vec2 || (Vec2 = {}));

/**
 * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function Vec4() {
    return Vec4.zero();
}
(function (Vec4) {
    function zero() {
        // force double backing array by 0.1.
        const ret = [0.1, 0, 0, 0];
        ret[0] = 0.0;
        return ret;
    }
    Vec4.zero = zero;
    function clone(a) {
        const out = zero();
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    Vec4.clone = clone;
    function create(x, y, z, w) {
        const out = zero();
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    Vec4.create = create;
    function fromSphere(out, sphere) {
        out[0] = sphere.center[0];
        out[1] = sphere.center[1];
        out[2] = sphere.center[2];
        out[3] = sphere.radius;
        return out;
    }
    Vec4.fromSphere = fromSphere;
    function ofSphere(sphere) {
        return fromSphere(zero(), sphere);
    }
    Vec4.ofSphere = ofSphere;
    function hasNaN(a) {
        return isNaN(a[0]) || isNaN(a[1]) || isNaN(a[2]) || isNaN(a[3]);
    }
    Vec4.hasNaN = hasNaN;
    function toArray(a, out, offset) {
        out[offset + 0] = a[0];
        out[offset + 1] = a[1];
        out[offset + 2] = a[2];
        out[offset + 3] = a[3];
        return out;
    }
    Vec4.toArray = toArray;
    function fromArray(a, array, offset) {
        a[0] = array[offset + 0];
        a[1] = array[offset + 1];
        a[2] = array[offset + 2];
        a[3] = array[offset + 3];
        return a;
    }
    Vec4.fromArray = fromArray;
    function toVec3Array(a, out, offset) {
        out[offset + 0] = a[0];
        out[offset + 1] = a[1];
        out[offset + 2] = a[2];
    }
    Vec4.toVec3Array = toVec3Array;
    function fromVec3Array(a, array, offset) {
        a[0] = array[offset + 0];
        a[1] = array[offset + 1];
        a[2] = array[offset + 2];
        a[3] = 0;
        return a;
    }
    Vec4.fromVec3Array = fromVec3Array;
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    Vec4.copy = copy;
    function set(out, x, y, z, w) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    Vec4.set = set;
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    Vec4.add = add;
    function distance(a, b) {
        const x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    Vec4.distance = distance;
    function scale(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[4] = a[4] * b;
        return out;
    }
    Vec4.scale = scale;
    /**
     * Math.round the components of a Vec4
     */
    function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        out[3] = Math.round(a[3]);
        return out;
    }
    Vec4.round = round;
    /**
     * Math.ceil the components of a Vec4
     */
    function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        out[3] = Math.ceil(a[3]);
        return out;
    }
    Vec4.ceil = ceil;
    /**
     * Math.floor the components of a Vec3
     */
    function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        out[3] = Math.floor(a[3]);
        return out;
    }
    Vec4.floor = floor;
    function squaredDistance(a, b) {
        const x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
        return x * x + y * y + z * z + w * w;
    }
    Vec4.squaredDistance = squaredDistance;
    function norm(a) {
        const x = a[0], y = a[1], z = a[2], w = a[3];
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    Vec4.norm = norm;
    function squaredNorm(a) {
        const x = a[0], y = a[1], z = a[2], w = a[3];
        return x * x + y * y + z * z + w * w;
    }
    Vec4.squaredNorm = squaredNorm;
    function transformMat4(out, a, m) {
        const x = a[0], y = a[1], z = a[2], w = a[3];
        out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
        out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
        out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
        out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
        return out;
    }
    Vec4.transformMat4 = transformMat4;
    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    Vec4.dot = dot;
    /**
     * Returns the inverse of the components of a Vec4
     */
    function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        out[3] = 1.0 / a[3];
        return out;
    }
    Vec4.inverse = inverse;
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     */
    function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    Vec4.exactEquals = exactEquals;
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     */
    function equals(a, b) {
        const a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        const b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));
    }
    Vec4.equals = equals;
    function toString(a, precision) {
        return `[${a[0].toPrecision(precision)} ${a[1].toPrecision(precision)} ${a[2].toPrecision(precision)}  ${a[3].toPrecision(precision)}]`;
    }
    Vec4.toString = toString;
})(Vec4 || (Vec4 = {}));

/**
 * Copyright (c) 2018-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function assertUnreachable(x) {
    throw new Error('unreachable');
}

/**
 * Copyright (c) 2017-2023 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function Quat() {
    return Quat.zero();
}
(function (Quat) {
    function zero() {
        // force double backing array by 0.1.
        const ret = [0.1, 0, 0, 0];
        ret[0] = 0.0;
        return ret;
    }
    Quat.zero = zero;
    function identity() {
        const out = zero();
        out[3] = 1;
        return out;
    }
    Quat.identity = identity;
    function setIdentity(out) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
    }
    Quat.setIdentity = setIdentity;
    function hasNaN(q) {
        return isNaN(q[0]) || isNaN(q[1]) || isNaN(q[2]) || isNaN(q[3]);
    }
    Quat.hasNaN = hasNaN;
    function create(x, y, z, w) {
        const out = identity();
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    Quat.create = create;
    function setAxisAngle(out, axis, rad) {
        rad = rad * 0.5;
        const s = Math.sin(rad);
        out[0] = s * axis[0];
        out[1] = s * axis[1];
        out[2] = s * axis[2];
        out[3] = Math.cos(rad);
        return out;
    }
    Quat.setAxisAngle = setAxisAngle;
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     */
    function getAxisAngle(out_axis, q) {
        const rad = Math.acos(q[3]) * 2.0;
        const s = Math.sin(rad / 2.0);
        if (s !== 0.0) {
            out_axis[0] = q[0] / s;
            out_axis[1] = q[1] / s;
            out_axis[2] = q[2] / s;
        }
        else {
            // If s is zero, return any axis (no rotation - axis does not matter)
            out_axis[0] = 1;
            out_axis[1] = 0;
            out_axis[2] = 0;
        }
        return rad;
    }
    Quat.getAxisAngle = getAxisAngle;
    function multiply(out, a, b) {
        const ax = a[0], ay = a[1], az = a[2], aw = a[3];
        const bx = b[0], by = b[1], bz = b[2], bw = b[3];
        out[0] = ax * bw + aw * bx + ay * bz - az * by;
        out[1] = ay * bw + aw * by + az * bx - ax * bz;
        out[2] = az * bw + aw * bz + ax * by - ay * bx;
        out[3] = aw * bw - ax * bx - ay * by - az * bz;
        return out;
    }
    Quat.multiply = multiply;
    function rotateX(out, a, rad) {
        rad *= 0.5;
        const ax = a[0], ay = a[1], az = a[2], aw = a[3];
        const bx = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + aw * bx;
        out[1] = ay * bw + az * bx;
        out[2] = az * bw - ay * bx;
        out[3] = aw * bw - ax * bx;
        return out;
    }
    Quat.rotateX = rotateX;
    function rotateY(out, a, rad) {
        rad *= 0.5;
        const ax = a[0], ay = a[1], az = a[2], aw = a[3];
        const by = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw - az * by;
        out[1] = ay * bw + aw * by;
        out[2] = az * bw + ax * by;
        out[3] = aw * bw - ay * by;
        return out;
    }
    Quat.rotateY = rotateY;
    function rotateZ(out, a, rad) {
        rad *= 0.5;
        const ax = a[0], ay = a[1], az = a[2], aw = a[3];
        const bz = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + ay * bz;
        out[1] = ay * bw - ax * bz;
        out[2] = az * bw + aw * bz;
        out[3] = aw * bw - az * bz;
        return out;
    }
    Quat.rotateZ = rotateZ;
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     */
    function calculateW(out, a) {
        const x = a[0], y = a[1], z = a[2];
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
        return out;
    }
    Quat.calculateW = calculateW;
    /**
     * Performs a spherical linear interpolation between two quat
     */
    function slerp(out, a, b, t) {
        // benchmarks:
        //    http://jsperf.com/quaternion-slerp-implementations
        const ax = a[0], ay = a[1], az = a[2], aw = a[3];
        let bx = b[0], by = b[1], bz = b[2], bw = b[3];
        let omega, cosom, sinom, scale0, scale1;
        // calc cosine
        cosom = ax * bx + ay * by + az * bz + aw * bw;
        // adjust signs (if necessary)
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        }
        // calculate coefficients
        if ((1.0 - cosom) > 0.000001) {
            // standard case (slerp)
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1.0 - t;
            scale1 = t;
        }
        // calculate final values
        out[0] = scale0 * ax + scale1 * bx;
        out[1] = scale0 * ay + scale1 * by;
        out[2] = scale0 * az + scale1 * bz;
        out[3] = scale0 * aw + scale1 * bw;
        return out;
    }
    Quat.slerp = slerp;
    function invert(out, a) {
        const a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
        const invDot = dot ? 1.0 / dot : 0;
        // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
        out[0] = -a0 * invDot;
        out[1] = -a1 * invDot;
        out[2] = -a2 * invDot;
        out[3] = a3 * invDot;
        return out;
    }
    Quat.invert = invert;
    /**
     * Calculates the conjugate of a quat
     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
     */
    function conjugate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a[3];
        return out;
    }
    Quat.conjugate = conjugate;
    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    Quat.dot = dot;
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     */
    function fromMat3(out, m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        const fTrace = m[0] + m[4] + m[8];
        let fRoot;
        if (fTrace > 0.0) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = Math.sqrt(fTrace + 1.0); // 2w
            out[3] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot; // 1/(4w)
            out[0] = (m[5] - m[7]) * fRoot;
            out[1] = (m[6] - m[2]) * fRoot;
            out[2] = (m[1] - m[3]) * fRoot;
        }
        else {
            // |w| <= 1/2
            let i = 0;
            if (m[4] > m[0])
                i = 1;
            if (m[8] > m[i * 3 + i])
                i = 2;
            const j = (i + 1) % 3;
            const k = (i + 2) % 3;
            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
            out[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
            out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
            out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
        }
        return out;
    }
    Quat.fromMat3 = fromMat3;
    function fromEuler(out, euler, order) {
        const [x, y, z] = euler;
        // http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m
        const c1 = Math.cos(x / 2);
        const c2 = Math.cos(y / 2);
        const c3 = Math.cos(z / 2);
        const s1 = Math.sin(x / 2);
        const s2 = Math.sin(y / 2);
        const s3 = Math.sin(z / 2);
        switch (order) {
            case 'XYZ':
                out[0] = s1 * c2 * c3 + c1 * s2 * s3;
                out[1] = c1 * s2 * c3 - s1 * c2 * s3;
                out[2] = c1 * c2 * s3 + s1 * s2 * c3;
                out[3] = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'YXZ':
                out[0] = s1 * c2 * c3 + c1 * s2 * s3;
                out[1] = c1 * s2 * c3 - s1 * c2 * s3;
                out[2] = c1 * c2 * s3 - s1 * s2 * c3;
                out[3] = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case 'ZXY':
                out[0] = s1 * c2 * c3 - c1 * s2 * s3;
                out[1] = c1 * s2 * c3 + s1 * c2 * s3;
                out[2] = c1 * c2 * s3 + s1 * s2 * c3;
                out[3] = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'ZYX':
                out[0] = s1 * c2 * c3 - c1 * s2 * s3;
                out[1] = c1 * s2 * c3 + s1 * c2 * s3;
                out[2] = c1 * c2 * s3 - s1 * s2 * c3;
                out[3] = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case 'YZX':
                out[0] = s1 * c2 * c3 + c1 * s2 * s3;
                out[1] = c1 * s2 * c3 + s1 * c2 * s3;
                out[2] = c1 * c2 * s3 - s1 * s2 * c3;
                out[3] = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'XZY':
                out[0] = s1 * c2 * c3 - c1 * s2 * s3;
                out[1] = c1 * s2 * c3 - s1 * c2 * s3;
                out[2] = c1 * c2 * s3 + s1 * s2 * c3;
                out[3] = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            default:
                assertUnreachable();
        }
        return out;
    }
    Quat.fromEuler = fromEuler;
    const fromUnitVec3Temp = [0, 0, 0];
    /** Quaternion from two normalized unit vectors. */
    function fromUnitVec3(out, a, b) {
        // assumes a and b are normalized
        let r = Vec3.dot(a, b) + 1;
        if (r < EPSILON) {
            // If u and v are exactly opposite, rotate 180 degrees
            // around an arbitrary orthogonal axis. Axis normalisation
            // can happen later, when we normalise the quaternion.
            r = 0;
            if (Math.abs(a[0]) > Math.abs(a[2])) {
                Vec3.set(fromUnitVec3Temp, -a[1], a[0], 0);
            }
            else {
                Vec3.set(fromUnitVec3Temp, 0, -a[2], a[1]);
            }
        }
        else {
            // Otherwise, build quaternion the standard way.
            Vec3.cross(fromUnitVec3Temp, a, b);
        }
        out[0] = fromUnitVec3Temp[0];
        out[1] = fromUnitVec3Temp[1];
        out[2] = fromUnitVec3Temp[2];
        out[3] = r;
        normalize(out, out);
        return out;
    }
    Quat.fromUnitVec3 = fromUnitVec3;
    function clone(a) {
        const out = zero();
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    Quat.clone = clone;
    function toArray(a, out, offset) {
        out[offset + 0] = a[0];
        out[offset + 1] = a[1];
        out[offset + 2] = a[2];
        out[offset + 3] = a[3];
        return out;
    }
    Quat.toArray = toArray;
    function fromArray(a, array, offset) {
        a[0] = array[offset + 0];
        a[1] = array[offset + 1];
        a[2] = array[offset + 2];
        a[3] = array[offset + 3];
        return a;
    }
    Quat.fromArray = fromArray;
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    Quat.copy = copy;
    function set(out, x, y, z, w) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    Quat.set = set;
    /**
     * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
     */
    function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    Quat.exactEquals = exactEquals;
    /**
     * Returns whether or not the quaternions have approximately the same elements in the same position.
     */
    function equals(a, b) {
        const a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        const b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
            Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
            Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
            Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));
    }
    Quat.equals = equals;
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    Quat.add = add;
    function normalize(out, a) {
        const x = a[0];
        const y = a[1];
        const z = a[2];
        const w = a[3];
        let len = x * x + y * y + z * z + w * w;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            out[0] = x * len;
            out[1] = y * len;
            out[2] = z * len;
            out[3] = w * len;
        }
        return out;
    }
    Quat.normalize = normalize;
    /**
     * Sets a quaternion to represent the shortest rotation from one
     * vector to another.
     *
     * Both vectors are assumed to be unit length.
     */
    const rotTmpVec3 = [0, 0, 0];
    const rotTmpVec3UnitX = [1, 0, 0];
    const rotTmpVec3UnitY = [0, 1, 0];
    function rotationTo(out, a, b) {
        const dot = Vec3.dot(a, b);
        if (dot < -0.999999) {
            Vec3.cross(rotTmpVec3, rotTmpVec3UnitX, a);
            if (Vec3.magnitude(rotTmpVec3) < 0.000001)
                Vec3.cross(rotTmpVec3, rotTmpVec3UnitY, a);
            Vec3.normalize(rotTmpVec3, rotTmpVec3);
            setAxisAngle(out, rotTmpVec3, Math.PI);
            return out;
        }
        else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        }
        else {
            Vec3.cross(rotTmpVec3, a, b);
            out[0] = rotTmpVec3[0];
            out[1] = rotTmpVec3[1];
            out[2] = rotTmpVec3[2];
            out[3] = 1 + dot;
            return normalize(out, out);
        }
    }
    Quat.rotationTo = rotationTo;
    /**
     * Performs a spherical linear interpolation with two control points
     */
    const sqlerpTemp1 = zero();
    const sqlerpTemp2 = zero();
    function sqlerp(out, a, b, c, d, t) {
        slerp(sqlerpTemp1, a, d, t);
        slerp(sqlerpTemp2, b, c, t);
        slerp(out, sqlerpTemp1, sqlerpTemp2, 2 * t * (1 - t));
        return out;
    }
    Quat.sqlerp = sqlerp;
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     */
    const axesTmpMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    function setAxes(out, view, right, up) {
        axesTmpMat[0] = right[0];
        axesTmpMat[3] = right[1];
        axesTmpMat[6] = right[2];
        axesTmpMat[1] = up[0];
        axesTmpMat[4] = up[1];
        axesTmpMat[7] = up[2];
        axesTmpMat[2] = -view[0];
        axesTmpMat[5] = -view[1];
        axesTmpMat[8] = -view[2];
        return normalize(out, fromMat3(out, axesTmpMat));
    }
    Quat.setAxes = setAxes;
    function toString(a, precision) {
        return `[${a[0].toPrecision(precision)} ${a[1].toPrecision(precision)} ${a[2].toPrecision(precision)}  ${a[3].toPrecision(precision)}]`;
    }
    Quat.toString = toString;
    Quat.Identity = identity();
})(Quat || (Quat = {}));

var Tensor;
(function (Tensor) {
    function Layout(dimensions, axisOrderSlowToFast, ctor) {
        // need to reverse the axis order for better access.
        const axisOrderFastToSlow = [];
        for (let i = 0; i < axisOrderSlowToFast.length; i++)
            axisOrderFastToSlow[i] = axisOrderSlowToFast[axisOrderSlowToFast.length - i - 1];
        const accessDimensions = [1];
        for (let i = 1; i < dimensions.length; i++)
            accessDimensions[i] = dimensions[axisOrderFastToSlow[i - 1]];
        return { dimensions, axisOrderFastToSlow, axisOrderSlowToFast, accessDimensions, defaultCtor: ctor || Float64Array };
    }
    function create(space, data) { return { space, data }; }
    Tensor.create = create;
    function Space(dimensions, axisOrderSlowToFast, ctor) {
        const layout = Layout(dimensions, axisOrderSlowToFast, ctor);
        const { get, set, add, dataOffset, getCoords } = accessors(layout);
        return { rank: dimensions.length, dimensions, axisOrderSlowToFast, create: creator(layout), get, set, add, dataOffset, getCoords };
    }
    Tensor.Space = Space;
    function Data1(values) { return values; }
    Tensor.Data1 = Data1;
    function Vector(d, ctor) { return Space([d], [0], ctor); }
    Tensor.Vector = Vector;
    function ColumnMajorMatrix(rows, cols, ctor) { return Space([rows, cols], [1, 0], ctor); }
    Tensor.ColumnMajorMatrix = ColumnMajorMatrix;
    function RowMajorMatrix(rows, cols, ctor) { return Space([rows, cols], [0, 1], ctor); }
    Tensor.RowMajorMatrix = RowMajorMatrix;
    function toMat4(out, space, data) {
        if (space.rank !== 2)
            throw new Error('Invalid tensor rank');
        const d0 = Math.min(4, space.dimensions[0]), d1 = Math.min(4, space.dimensions[1]);
        for (let i = 0; i < d0; i++) {
            for (let j = 0; j < d1; j++)
                Mat4.setValue(out, i, j, space.get(data, i, j));
        }
        return out;
    }
    Tensor.toMat4 = toMat4;
    function toMat3(out, space, data) {
        if (space.rank !== 2)
            throw new Error('Invalid tensor rank');
        const d0 = Math.min(3, space.dimensions[0]), d1 = Math.min(3, space.dimensions[1]);
        for (let i = 0; i < d0; i++) {
            for (let j = 0; j < d1; j++)
                Mat3.setValue(out, i, j, space.get(data, i, j));
        }
        return out;
    }
    Tensor.toMat3 = toMat3;
    function toVec3(out, space, data) {
        if (space.rank !== 1)
            throw new Error('Invalid tensor rank');
        const d0 = Math.min(3, space.dimensions[0]);
        for (let i = 0; i < d0; i++)
            out[i] = data[i];
        return out;
    }
    Tensor.toVec3 = toVec3;
    function toVec4(out, space, data) {
        if (space.rank !== 1)
            throw new Error('Invalid tensor rank');
        const d0 = Math.min(4, space.dimensions[0]);
        for (let i = 0; i < d0; i++)
            out[i] = data[i];
        return out;
    }
    Tensor.toVec4 = toVec4;
    function areEqualExact(a, b) {
        const len = a.length;
        if (len !== b.length)
            return false;
        for (let i = 0; i < len; i++)
            if (a[i] !== b[i])
                return false;
        return true;
    }
    Tensor.areEqualExact = areEqualExact;
    function accessors(layout) {
        const { dimensions, axisOrderFastToSlow: ao } = layout;
        switch (dimensions.length) {
            case 1: return {
                get: (t, d) => t[d],
                set: (t, d, x) => t[d] = x,
                add: (t, d, x) => t[d] += x,
                dataOffset: (d) => d,
                getCoords: (o, c) => {
                    c[0] = o;
                    return c;
                }
            };
            case 2: {
                // column major
                if (ao[0] === 0 && ao[1] === 1) {
                    const rows = dimensions[0];
                    return {
                        get: (t, i, j) => t[j * rows + i],
                        set: (t, i, j, x) => t[j * rows + i] = x,
                        add: (t, i, j, x) => t[j * rows + i] += x,
                        dataOffset: (i, j) => j * rows + i,
                        getCoords: (o, c) => {
                            c[0] = o % rows;
                            c[1] = Math.floor(o / rows);
                            return c;
                        }
                    };
                }
                if (ao[0] === 1 && ao[1] === 0) {
                    const cols = dimensions[1];
                    return {
                        get: (t, i, j) => t[i * cols + j],
                        set: (t, i, j, x) => t[i * cols + j] = x,
                        add: (t, i, j, x) => t[i * cols + j] += x,
                        dataOffset: (i, j) => i * cols + j,
                        getCoords: (o, c) => {
                            c[0] = Math.floor(o / cols);
                            c[1] = o % cols;
                            return c;
                        }
                    };
                }
                throw new Error('bad axis order');
            }
            case 3: {
                if (ao[0] === 0 && ao[1] === 1 && ao[2] === 2) { // 012 ijk
                    const u = dimensions[0], v = dimensions[1], uv = u * v;
                    return {
                        get: (t, i, j, k) => t[i + j * u + k * uv],
                        set: (t, i, j, k, x) => t[i + j * u + k * uv] = x,
                        add: (t, i, j, k, x) => t[i + j * u + k * uv] += x,
                        dataOffset: (i, j, k) => i + j * u + k * uv,
                        getCoords: (o, c) => {
                            const p = Math.floor(o / u);
                            c[0] = o % u;
                            c[1] = p % v;
                            c[2] = Math.floor(p / v);
                            return c;
                        }
                    };
                }
                if (ao[0] === 0 && ao[1] === 2 && ao[2] === 1) { // 021 ikj
                    const u = dimensions[0], v = dimensions[2], uv = u * v;
                    return {
                        get: (t, i, j, k) => t[i + k * u + j * uv],
                        set: (t, i, j, k, x) => t[i + k * u + j * uv] = x,
                        add: (t, i, j, k, x) => t[i + k * u + j * uv] += x,
                        dataOffset: (i, j, k) => i + k * u + j * uv,
                        getCoords: (o, c) => {
                            const p = Math.floor(o / u);
                            c[0] = o % u;
                            c[1] = Math.floor(p / v);
                            c[2] = p % v;
                            return c;
                        }
                    };
                }
                if (ao[0] === 1 && ao[1] === 0 && ao[2] === 2) { // 102 jik
                    const u = dimensions[1], v = dimensions[0], uv = u * v;
                    return {
                        get: (t, i, j, k) => t[j + i * u + k * uv],
                        set: (t, i, j, k, x) => t[j + i * u + k * uv] = x,
                        add: (t, i, j, k, x) => t[j + i * u + k * uv] += x,
                        dataOffset: (i, j, k) => j + i * u + k * uv,
                        getCoords: (o, c) => {
                            const p = Math.floor(o / u);
                            c[0] = p % v;
                            c[1] = o % u;
                            c[2] = Math.floor(p / v);
                            return c;
                        }
                    };
                }
                if (ao[0] === 1 && ao[1] === 2 && ao[2] === 0) { // 120 jki
                    const u = dimensions[1], v = dimensions[2], uv = u * v;
                    return {
                        get: (t, i, j, k) => t[j + k * u + i * uv],
                        set: (t, i, j, k, x) => t[j + k * u + i * uv] = x,
                        add: (t, i, j, k, x) => t[j + k * u + i * uv] += x,
                        dataOffset: (i, j, k) => j + k * u + i * uv,
                        getCoords: (o, c) => {
                            const p = Math.floor(o / u);
                            c[0] = Math.floor(p / v);
                            c[1] = o % u;
                            c[2] = p % v;
                            return c;
                        }
                    };
                }
                if (ao[0] === 2 && ao[1] === 0 && ao[2] === 1) { // 201 kij
                    const u = dimensions[2], v = dimensions[0], uv = u * v;
                    return {
                        get: (t, i, j, k) => t[k + i * u + j * uv],
                        set: (t, i, j, k, x) => t[k + i * u + j * uv] = x,
                        add: (t, i, j, k, x) => t[k + i * u + j * uv] += x,
                        dataOffset: (i, j, k) => k + i * u + j * uv,
                        getCoords: (o, c) => {
                            const p = Math.floor(o / u);
                            c[0] = p % v;
                            c[1] = Math.floor(p / v);
                            c[2] = o % u;
                            return c;
                        }
                    };
                }
                if (ao[0] === 2 && ao[1] === 1 && ao[2] === 0) { // 210 kji
                    const u = dimensions[2], v = dimensions[1], uv = u * v;
                    return {
                        get: (t, i, j, k) => t[k + j * u + i * uv],
                        set: (t, i, j, k, x) => t[k + j * u + i * uv] = x,
                        add: (t, i, j, k, x) => t[k + j * u + i * uv] += x,
                        dataOffset: (i, j, k) => k + j * u + i * uv,
                        getCoords: (o, c) => {
                            const p = Math.floor(o / u);
                            c[0] = Math.floor(p / v);
                            c[1] = p % v;
                            c[2] = o % u;
                            return c;
                        }
                    };
                }
                throw new Error('bad axis order');
            }
            default: return {
                get: (t, ...c) => t[dataOffset(layout, c)],
                set: (t, ...c) => t[dataOffset(layout, c)] = c[c.length - 1],
                add: (t, ...c) => t[dataOffset(layout, c)] += c[c.length - 1],
                dataOffset: (...c) => dataOffset(layout, c),
                getCoords: (o, c) => getCoords(layout, o, c),
            };
        }
    }
    function creator(layout) {
        const { dimensions: ds } = layout;
        let size = 1;
        for (let i = 0, _i = ds.length; i < _i; i++)
            size *= ds[i];
        return ctor => new (ctor || layout.defaultCtor)(size);
    }
    function dataOffset(layout, coord) {
        const { accessDimensions: acc, axisOrderFastToSlow: ao } = layout;
        const d = acc.length - 1;
        let o = acc[d] * coord[ao[d]];
        for (let i = d - 1; i >= 0; i--) {
            o = (o + coord[ao[i]]) * acc[i];
        }
        return o;
    }
    function getCoords(layout, o, coords) {
        const { dimensions: dim, axisOrderFastToSlow: ao } = layout;
        const d = dim.length;
        let c = o;
        for (let i = 0; i < d; i++) {
            const d = dim[ao[i]];
            coords[ao[i]] = c % d;
            c = Math.floor(c / d);
        }
        coords[ao[d + 1]] = c;
        return coords;
    }
    // Convers "slow to fast" axis order to "fast to slow" and vice versa.
    function invertAxisOrder(v) {
        const ret = [];
        for (let i = 0; i < v.length; i++) {
            ret[i] = v[v.length - i - 1];
        }
        return ret;
    }
    Tensor.invertAxisOrder = invertAxisOrder;
    function reorder(xs, indices) {
        const ret = [];
        for (let i = 0; i < xs.length; i++)
            ret[i] = xs[indices[i]];
        return ret;
    }
    function convertToCanonicalAxisIndicesFastToSlow(order) {
        const indices = new Int32Array(order.length);
        for (let i = 0; i < order.length; i++)
            indices[order[i]] = i;
        return (xs) => reorder(xs, indices);
    }
    Tensor.convertToCanonicalAxisIndicesFastToSlow = convertToCanonicalAxisIndicesFastToSlow;
    function convertToCanonicalAxisIndicesSlowToFast(order) {
        const indices = new Int32Array(order.length);
        for (let i = 0; i < order.length; i++)
            indices[order[order.length - i - 1]] = i;
        return (xs) => reorder(xs, indices);
    }
    Tensor.convertToCanonicalAxisIndicesSlowToFast = convertToCanonicalAxisIndicesSlowToFast;
})(Tensor || (Tensor = {}));

/**
 * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 *
 * based in part on https://github.com/dsehnal/CIFTools.js
 */
function parseInt$1(str, start, end) {
    let _start = start, ret = 0, neg = 1;
    if (str.charCodeAt(_start) === 45 /* - */) {
        neg = -1;
        ++_start;
    }
    else if (str.charCodeAt(_start) === 43 /* + */) {
        ++_start;
    }
    for (; _start < end; _start++) {
        const c = str.charCodeAt(_start) - 48;
        if (c > 9 || c < 0)
            return (neg * ret) | 0;
        else
            ret = (10 * ret + c) | 0;
    }
    return neg * ret;
}
function parseScientific(main, str, start, end) {
    // handle + in '1e+1' separately.
    if (str.charCodeAt(start) === 43 /* + */)
        start++;
    return main * Math.pow(10.0, parseInt$1(str, start, end));
}
function parseFloat$1(str, start, end) {
    let _start = start, neg = 1.0, ret = 0.0, point = 0.0, div = 1.0;
    if (str.charCodeAt(_start) === 45 /* - */) {
        neg = -1;
        ++_start;
    }
    else if (str.charCodeAt(_start) === 43 /* + */) {
        ++_start;
    }
    while (_start < end) {
        let c = str.charCodeAt(_start) - 48;
        if (c >= 0 && c < 10) {
            ret = ret * 10 + c;
            ++_start;
        }
        else if (c === -2) { // .
            ++_start;
            while (_start < end) {
                c = str.charCodeAt(_start) - 48;
                if (c >= 0 && c < 10) {
                    point = 10.0 * point + c;
                    div = 10.0 * div;
                    ++_start;
                }
                else if (c === 53 || c === 21) { // 'e'/'E'
                    return parseScientific(neg * (ret + point / div), str, _start + 1, end);
                }
                else {
                    return neg * (ret + point / div);
                }
            }
            return neg * (ret + point / div);
        }
        else if (c === 53 || c === 21) { // 'e'/'E'
            return parseScientific(neg * ret, str, _start + 1, end);
        }
        else {
            break;
        }
    }
    return neg * ret;
}

/**
 * Copyright (c) 2017-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
var Column;
(function (Column) {
    let Schema;
    (function (Schema) {
        // T also serves as a default value for undefined columns
        Schema.str = { '@type': 'str', T: '', valueType: 'str' };
        Schema.ustr = { '@type': 'str', T: '', valueType: 'str', transform: 'uppercase' };
        Schema.lstr = { '@type': 'str', T: '', valueType: 'str', transform: 'lowercase' };
        Schema.int = { '@type': 'int', T: 0, valueType: 'int' };
        Schema.coord = { '@type': 'coord', T: 0, valueType: 'float' };
        Schema.float = { '@type': 'float', T: 0, valueType: 'float' };
        function Str(options) { var _a; return { '@type': 'str', T: (_a = options === null || options === void 0 ? void 0 : options.defaultValue) !== null && _a !== void 0 ? _a : '', transform: options === null || options === void 0 ? void 0 : options.transform, valueType: 'str' }; }
        Schema.Str = Str;
        function Int(defaultValue = 0) { return { '@type': 'int', T: defaultValue, valueType: 'int' }; }
        Schema.Int = Int;
        function Float(defaultValue = 0) { return { '@type': 'float', T: defaultValue, valueType: 'float' }; }
        Schema.Float = Float;
        function Tensor$1(space, baseType = Schema.float) { return { '@type': 'tensor', T: space.create(), space, valueType: 'tensor', baseType }; }
        Schema.Tensor = Tensor$1;
        function Vector(dim, baseType = Schema.float) { return Tensor$1(Tensor.Vector(dim, baseType['@type'] === 'int' ? Int32Array : Float64Array), baseType); }
        Schema.Vector = Vector;
        function Matrix(rows, cols, baseType = Schema.float) { return Tensor$1(Tensor.ColumnMajorMatrix(rows, cols, baseType['@type'] === 'int' ? Int32Array : Float64Array), baseType); }
        Schema.Matrix = Matrix;
        function Aliased(t) {
            return t;
        }
        Schema.Aliased = Aliased;
        function List(separator, itemParse, defaultValue = []) {
            return { '@type': 'list', T: defaultValue, separator, itemParse, valueType: 'list' };
        }
        Schema.List = List;
    })(Schema = Column.Schema || (Column.Schema = {}));
    function is(v) {
        return !!v && !!v.schema && !!v.value;
    }
    Column.is = is;
    Column.ValueKind = {
        /** Defined value (= 0) */
        Present: 0 /* ValueKinds.Present */,
        /** Expressed in CIF as `.` (= 1) */
        NotPresent: 1 /* ValueKinds.NotPresent */,
        /** Expressed in CIF as `?` (= 2) */
        Unknown: 2 /* ValueKinds.Unknown */
    };
    function Undefined(rowCount, schema) {
        return constColumn(schema['T'], rowCount, schema, 1 /* ValueKinds.NotPresent */);
    }
    Column.Undefined = Undefined;
    function ofConst(v, rowCount, type) {
        return constColumn(v, rowCount, type, 0 /* ValueKinds.Present */);
    }
    Column.ofConst = ofConst;
    function ofLambda(spec) {
        return lambdaColumn(spec);
    }
    Column.ofLambda = ofLambda;
    /** values [min, max] (i.e. include both values) */
    function range(min, max) {
        return ofLambda({
            value: i => i + min,
            rowCount: Math.max(max - min + 1, 0),
            schema: Schema.int
        });
    }
    Column.range = range;
    function ofArray(spec) {
        return arrayColumn(spec);
    }
    Column.ofArray = ofArray;
    function ofIntArray(array) {
        return arrayColumn({ array, schema: Schema.int });
    }
    Column.ofIntArray = ofIntArray;
    function ofFloatArray(array) {
        return arrayColumn({ array, schema: Schema.float });
    }
    Column.ofFloatArray = ofFloatArray;
    function ofStringArray(array) {
        return arrayColumn({ array, schema: Schema.str });
    }
    Column.ofStringArray = ofStringArray;
    function ofStringAliasArray(array) {
        return arrayColumn({ array, schema: Schema.Aliased(Schema.str) });
    }
    Column.ofStringAliasArray = ofStringAliasArray;
    function ofStringListArray(array, separator = ',') {
        return arrayColumn({ array, schema: Schema.List(separator, x => x) });
    }
    Column.ofStringListArray = ofStringListArray;
    function ofIntTokens(tokens) {
        const { count, data, indices } = tokens;
        return lambdaColumn({
            value: (row) => parseInt$1(data, indices[2 * row], indices[2 * row + 1]) || 0,
            rowCount: count,
            schema: Schema.int,
        });
    }
    Column.ofIntTokens = ofIntTokens;
    function ofFloatTokens(tokens) {
        const { count, data, indices } = tokens;
        return lambdaColumn({
            value: (row) => parseFloat$1(data, indices[2 * row], indices[2 * row + 1]) || 0,
            rowCount: count,
            schema: Schema.float,
        });
    }
    Column.ofFloatTokens = ofFloatTokens;
    function ofStringTokens(tokens) {
        const { count, data, indices } = tokens;
        return lambdaColumn({
            value: (row) => {
                const ret = data.substring(indices[2 * row], indices[2 * row + 1]);
                if (ret === '.' || ret === '?')
                    return '';
                return ret;
            },
            rowCount: count,
            schema: Schema.str,
        });
    }
    Column.ofStringTokens = ofStringTokens;
    function window(column, start, end) {
        return windowColumn(column, start, end);
    }
    Column.window = window;
    function view(column, indices, checkIndentity = true) {
        return columnView(column, indices, checkIndentity);
    }
    Column.view = view;
    /** A map of the 1st occurence of each value. */
    function createFirstIndexMap(column) {
        return createFirstIndexMapOfColumn(column);
    }
    Column.createFirstIndexMap = createFirstIndexMap;
    function createIndexer(column) {
        return createIndexerOfColumn(column);
    }
    Column.createIndexer = createIndexer;
    function mapToArray(column, f, ctor) {
        return mapToArrayImpl(column, f, ctor || Array);
    }
    Column.mapToArray = mapToArray;
    function areEqual(a, b) {
        return areColumnsEqual(a, b);
    }
    Column.areEqual = areEqual;
    function indicesOf(c, test) {
        return columnIndicesOf(c, test);
    }
    Column.indicesOf = indicesOf;
    /** Makes the column backed by an array. Useful for columns that are accessed often. */
    function asArrayColumn(c, array) {
        if (c.__array)
            return c;
        if (!c.isDefined)
            return Undefined(c.rowCount, c.schema);
        return arrayColumn({ array: c.toArray({ array }), schema: c.schema, valueKind: c.valueKind });
    }
    Column.asArrayColumn = asArrayColumn;
    function copyToArray(c, array, offset = 0) {
        if (!c.isDefined)
            return;
        const cArray = c.__array;
        if (cArray) {
            for (let i = 0, _i = cArray.length; i < _i; i++)
                array[offset + i] = cArray[i];
        }
        else {
            for (let i = 0, _i = c.rowCount; i < _i; i++)
                array[offset + i] = c.value(i);
        }
    }
    Column.copyToArray = copyToArray;
    function isIdentity(c) {
        for (let i = 0, _i = c.rowCount; i < _i; i++) {
            if (i !== c.value(i))
                return false;
        }
        return true;
    }
    Column.isIdentity = isIdentity;
})(Column || (Column = {}));
function createFirstIndexMapOfColumn(c) {
    const map = new Map();
    for (let i = 0, _i = c.rowCount; i < _i; i++) {
        const v = c.value(i);
        if (!map.has(v))
            map.set(c.value(i), i);
    }
    return map;
}
function createIndexerOfColumn(c) {
    const map = new Map();
    for (let i = 0, _i = c.rowCount; i < _i; i++) {
        const v = c.value(i);
        if (!map.has(v))
            map.set(c.value(i), i);
    }
    return v => map.has(v) ? map.get(v) : -1;
}
function constColumn(v, rowCount, schema, valueKind) {
    const value = row => v;
    return {
        schema: schema,
        __array: void 0,
        isDefined: valueKind === 0 /* Column.ValueKinds.Present */,
        rowCount,
        value,
        valueKind: row => valueKind,
        toArray: params => {
            const { array } = createArray(rowCount, params);
            for (let i = 0, _i = array.length; i < _i; i++)
                array[i] = v;
            return array;
        },
        areValuesEqual: (rowA, rowB) => true
    };
}
function lambdaColumn({ value, valueKind, areValuesEqual, rowCount, schema }) {
    return {
        schema: schema,
        __array: void 0,
        isDefined: true,
        rowCount,
        value,
        valueKind: valueKind ? valueKind : row => 0 /* Column.ValueKinds.Present */,
        toArray: params => {
            const { array, start } = createArray(rowCount, params);
            for (let i = 0, _i = array.length; i < _i; i++)
                array[i] = value(i + start);
            return array;
        },
        areValuesEqual: areValuesEqual ? areValuesEqual : (rowA, rowB) => value(rowA) === value(rowB)
    };
}
function arrayColumn({ array, schema, valueKind }) {
    const rowCount = array.length;
    const defaultValue = schema.T;
    const value = schema.valueType === 'str'
        ? schema.transform === 'lowercase'
            ? row => { const v = array[row]; return typeof v === 'string' ? v.toLowerCase() : `${v !== null && v !== void 0 ? v : defaultValue}`.toLowerCase(); }
            : schema.transform === 'uppercase'
                ? row => { const v = array[row]; return typeof v === 'string' ? v.toUpperCase() : `${v !== null && v !== void 0 ? v : defaultValue}`.toUpperCase(); }
                : row => { const v = array[row]; return typeof v === 'string' ? v : `${v !== null && v !== void 0 ? v : defaultValue}`; }
        : row => array[row];
    const isTyped = isTypedArray(array);
    return {
        schema: schema,
        __array: array,
        isDefined: true,
        rowCount,
        value,
        valueKind: valueKind ? valueKind : row => 0 /* Column.ValueKinds.Present */,
        toArray: schema.valueType === 'str'
            ? schema.transform === 'lowercase'
                ? params => {
                    const { start, end } = getArrayBounds(rowCount, params);
                    const ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);
                    for (let i = 0, _i = end - start; i < _i; i++) {
                        const v = array[start + i];
                        ret[i] = typeof v === 'string' ? v.toLowerCase() : `${v !== null && v !== void 0 ? v : defaultValue}`.toLowerCase();
                    }
                    return ret;
                }
                : schema.transform === 'uppercase'
                    ? params => {
                        const { start, end } = getArrayBounds(rowCount, params);
                        const ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);
                        for (let i = 0, _i = end - start; i < _i; i++) {
                            const v = array[start + i];
                            ret[i] = typeof v === 'string' ? v.toUpperCase() : `${v !== null && v !== void 0 ? v : defaultValue}`.toUpperCase();
                        }
                        return ret;
                    }
                    : params => {
                        const { start, end } = getArrayBounds(rowCount, params);
                        const ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);
                        for (let i = 0, _i = end - start; i < _i; i++) {
                            const v = array[start + i];
                            ret[i] = typeof v === 'string' ? v : `${v !== null && v !== void 0 ? v : defaultValue}`;
                        }
                        return ret;
                    }
            : isTyped
                ? params => typedArrayWindow(array, params)
                : params => {
                    const { start, end } = getArrayBounds(rowCount, params);
                    if (start === 0 && end === array.length)
                        return array;
                    const ret = new (params && typeof params.array !== 'undefined' ? params.array : array.constructor)(end - start);
                    for (let i = 0, _i = end - start; i < _i; i++)
                        ret[i] = array[start + i];
                    return ret;
                },
        areValuesEqual: (rowA, rowB) => array[rowA] === array[rowB]
    };
}
function windowColumn(column, start, end) {
    if (!column.isDefined)
        return Column.Undefined(end - start, column.schema);
    if (start === 0 && end === column.rowCount)
        return column;
    if (!!column.__array && isTypedArray(column.__array))
        return windowTyped(column, start, end);
    return windowFull(column, start, end);
}
function windowTyped(c, start, end) {
    const array = typedArrayWindow(c.__array, { start, end });
    const vk = c.valueKind;
    return arrayColumn({ array, schema: c.schema, valueKind: row => vk(start + row) });
}
function windowFull(c, start, end) {
    const v = c.value, vk = c.valueKind, ave = c.areValuesEqual;
    const value = start === 0 ? v : row => v(row + start);
    const rowCount = end - start;
    return {
        schema: c.schema,
        __array: void 0,
        isDefined: c.isDefined,
        rowCount,
        value,
        valueKind: start === 0 ? vk : row => vk(row + start),
        toArray: params => {
            const { array } = createArray(rowCount, params);
            for (let i = 0, _i = array.length; i < _i; i++)
                array[i] = v(i + start);
            return array;
        },
        areValuesEqual: start === 0 ? ave : (rowA, rowB) => ave(rowA + start, rowB + start)
    };
}
function isIdentity(map, rowCount) {
    if (map.length !== rowCount)
        return false;
    for (let i = 0, _i = map.length; i < _i; i++) {
        if (map[i] !== i)
            return false;
    }
    return true;
}
function columnView(c, map, checkIdentity) {
    if (c.rowCount === 0)
        return c;
    if (checkIdentity && isIdentity(map, c.rowCount))
        return c;
    if (!!c.__array && typeof c.value(0) === typeof c.__array[0])
        return arrayView(c, map);
    return viewFull(c, map);
}
function arrayView(c, map) {
    const array = c.__array;
    const ret = new array.constructor(map.length);
    for (let i = 0, _i = map.length; i < _i; i++)
        ret[i] = array[map[i]];
    const vk = c.valueKind;
    return arrayColumn({ array: ret, schema: c.schema, valueKind: row => vk(map[row]) });
}
function viewFull(c, map) {
    const v = c.value, vk = c.valueKind, ave = c.areValuesEqual;
    const value = row => v(map[row]);
    const rowCount = map.length;
    return {
        schema: c.schema,
        __array: void 0,
        isDefined: c.isDefined,
        rowCount,
        value,
        valueKind: row => vk(map[row]),
        toArray: params => {
            const { array } = createArray(rowCount, params);
            for (let i = 0, _i = array.length; i < _i; i++)
                array[i] = v(map[i]);
            return array;
        },
        areValuesEqual: (rowA, rowB) => ave(map[rowA], map[rowB])
    };
}
function mapToArrayImpl(c, f, ctor) {
    const ret = new ctor(c.rowCount);
    for (let i = 0, _i = c.rowCount; i < _i; i++)
        ret[i] = f(c.value(i));
    return ret;
}
function areColumnsEqual(a, b) {
    if (a === b)
        return true;
    if (a.rowCount !== b.rowCount || a.isDefined !== b.isDefined || a.schema.valueType !== b.schema.valueType)
        return false;
    if (!!a.__array && !!b.__array)
        return areArraysEqual(a, b);
    return areValuesEqual(a, b);
}
function areArraysEqual(a, b) {
    const xs = a.__array, ys = b.__array;
    for (let i = 0, _i = a.rowCount; i < _i; i++) {
        if (xs[i] !== ys[i])
            return false;
    }
    return true;
}
function areValuesEqual(a, b) {
    const va = a.value, vb = b.value;
    for (let i = 0, _i = a.rowCount; i < _i; i++) {
        if (va(i) !== vb(i))
            return false;
    }
    return true;
}
function columnIndicesOf(c, test) {
    const ret = [], v = c.value;
    for (let i = 0, _i = c.rowCount; i < _i; i++) {
        if (test(v(i)))
            ret[ret.length] = i;
    }
    return ret;
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function arrayLess(arr, i, j) {
    return arr[i] - arr[j];
}
function arraySwap(arr, i, j) {
    const temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
function medianPivotIndex(data, cmp, l, r) {
    const m = (l + r) >> 1;
    if (cmp(data, l, r) > 0)
        return cmp(data, l, m) > 0 ? cmp(data, m, r) > 0 ? m : r : l;
    else
        return cmp(data, r, m) > 0 ? cmp(data, m, l) > 0 ? m : l : r;
}
function partition(ctx, l, r) {
    const { cmp, swap, data, parts } = ctx;
    let equals = l + 1, tail = r;
    // move the median to the 1st spot
    swap(data, l, medianPivotIndex(data, cmp, l, r));
    while (cmp(data, tail, l) > 0) {
        --tail;
    }
    for (let i = l + 1; i <= tail; i++) {
        const c = cmp(data, i, l);
        if (c > 0) {
            swap(data, i, tail);
            --tail;
            while (cmp(data, tail, l) > 0) {
                --tail;
            }
            i--;
        }
        else if (c === 0) {
            swap(data, i, equals);
            equals++;
        }
    }
    // move the medians to the correct spots
    for (let i = l; i < equals; i++) {
        swap(data, i, l + tail - i);
    }
    parts[0] = tail - equals + l + 1;
    parts[1] = tail;
}
function insertionSort({ data, cmp, swap }, start, end) {
    for (let i = start + 1; i <= end; i++) {
        let j = i - 1;
        while (j >= start && cmp(data, j, j + 1) > 0) {
            swap(data, j, j + 1);
            j = j - 1;
        }
    }
}
function quickSort(ctx, low, high) {
    const { parts } = ctx;
    while (low < high) {
        if (high - low < 16) {
            insertionSort(ctx, low, high);
            return;
        }
        partition(ctx, low, high);
        const li = parts[0], ri = parts[1];
        if (li - low < high - ri) {
            quickSort(ctx, low, li - 1);
            low = ri + 1;
        }
        else {
            quickSort(ctx, ri + 1, high);
            high = li - 1;
        }
    }
}
function partitionArrayAsc(data, parts, l, r) {
    let equals = l + 1, tail = r;
    // move the median to the 1st spot
    arraySwap(data, l, medianPivotIndex(data, arrayLess, l, r));
    const pivot = data[l];
    while (data[tail] > pivot) {
        --tail;
    }
    for (let i = l + 1; i <= tail; i++) {
        const v = data[i];
        if (v > pivot) {
            arraySwap(data, i, tail);
            --tail;
            while (data[tail] > pivot) {
                --tail;
            }
            i--;
        }
        else if (v === pivot) {
            arraySwap(data, i, equals);
            ++equals;
        }
    }
    // move all medians to the correct spots
    for (let i = l; i < equals; i++) {
        arraySwap(data, i, l + tail - i);
    }
    parts[0] = tail - equals + l + 1;
    parts[1] = tail;
}
function insertionSortArrayAsc(data, start, end) {
    for (let i = start + 1; i <= end; i++) {
        const key = data[i];
        let j = i - 1;
        while (j >= start && data[j] > key) {
            data[j + 1] = data[j];
            j = j - 1;
        }
        data[j + 1] = key;
    }
}
function quickSortArrayAsc(data, parts, low, high) {
    while (low < high) {
        if (high - low < 16) {
            insertionSortArrayAsc(data, low, high);
            return;
        }
        partitionArrayAsc(data, parts, low, high);
        const li = parts[0], ri = parts[1];
        if (li - low < high - ri) {
            quickSortArrayAsc(data, parts, low, li - 1);
            low = ri + 1;
        }
        else {
            quickSortArrayAsc(data, parts, ri + 1, high);
            high = li - 1;
        }
    }
}
function sortArray(data, cmp = arrayLess) {
    return sortArrayRange(data, 0, data.length, cmp);
}
function sortArrayRange(data, start, end, cmp = arrayLess) {
    if (cmp === arrayLess)
        quickSortArrayAsc(data, [0, 0], start, end - 1);
    else
        quickSort({ data, cmp, swap: arraySwap, parts: [0, 0] }, start, end - 1);
    return data;
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var BitFlags;
(function (BitFlags) {
    function create(flags) { return flags; }
    BitFlags.create = create;
    function has(flags, flag) { return (flags & flag) !== 0; }
    BitFlags.has = has;
    /** toCheck must be non-zero */
    function hasAll(flags, toCheck) { return !!toCheck && (flags & toCheck) === toCheck; }
    BitFlags.hasAll = hasAll;
})(BitFlags || (BitFlags = {}));

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Adapted from CIFTools.js (https://github.com/dsehnal/CIFTools.js)
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var StringBuilder;
(function (StringBuilder) {
    function create(chunkCapacity = 512) {
        return {
            current: [],
            offset: 0,
            capacity: chunkCapacity,
            chunks: []
        };
    }
    StringBuilder.create = create;
    function getString(builder) {
        if (!builder.chunks.length) {
            if (builder.current.length === builder.offset)
                return builder.current.join('');
            return builder.current.splice(0, builder.offset).join('');
        }
        if (builder.offset > 0) {
            builder.chunks[builder.chunks.length] = builder.current.length === builder.offset
                ? builder.current.join('')
                : builder.current.slice(0, builder.offset).join('');
        }
        return builder.chunks.join('');
    }
    StringBuilder.getString = getString;
    function getSize(builder) {
        let size = 0;
        for (const c of builder.chunks)
            size += c.length;
        for (let i = 0; i < builder.offset; i++)
            size += builder.current[i].length;
        return size;
    }
    StringBuilder.getSize = getSize;
    function getChunks(builder) {
        if (builder.offset > 0) {
            if (builder.current.length === builder.offset)
                builder.chunks[builder.chunks.length] = builder.current.join('');
            else
                builder.chunks[builder.chunks.length] = builder.current.slice(0, builder.offset).join('');
            builder.offset = 0;
        }
        return builder.chunks;
    }
    StringBuilder.getChunks = getChunks;
    const __paddingSpaces = [];
    (function () {
        let s = '';
        for (let i = 0; i < 512 /* PaddingSpaces.Count */; i++) {
            __paddingSpaces[i] = s;
            s = s + ' ';
        }
    })();
    function newline(builder) {
        writeSafe(builder, '\n');
    }
    StringBuilder.newline = newline;
    function whitespace(builder, len) {
        if (len > 0)
            writeSafe(builder, __paddingSpaces[len]);
    }
    StringBuilder.whitespace = whitespace;
    function whitespace1(builder) {
        writeSafe(builder, ' ');
    }
    StringBuilder.whitespace1 = whitespace1;
    function write(builder, val) {
        if (!val)
            return;
        if (builder.offset === builder.capacity) {
            builder.chunks[builder.chunks.length] = builder.current.join('');
            builder.offset = 0;
        }
        builder.current[builder.offset++] = val;
    }
    StringBuilder.write = write;
    /** Write without check. */
    function writeSafe(builder, val) {
        if (builder.offset === builder.capacity) {
            builder.chunks[builder.chunks.length] = builder.current.join('');
            builder.offset = 0;
        }
        builder.current[builder.offset++] = val;
    }
    StringBuilder.writeSafe = writeSafe;
    function writePadLeft(builder, val, totalWidth) {
        if (!val) {
            whitespace(builder, totalWidth);
            return;
        }
        const padding = totalWidth - val.length;
        whitespace(builder, padding);
        writeSafe(builder, val);
    }
    StringBuilder.writePadLeft = writePadLeft;
    function writePadRight(builder, val, totalWidth) {
        if (!val) {
            whitespace(builder, totalWidth);
            return;
        }
        const padding = totalWidth - val.length;
        writeSafe(builder, val);
        whitespace(builder, padding);
    }
    StringBuilder.writePadRight = writePadRight;
    function writeInteger(builder, val) {
        writeSafe(builder, '' + val);
    }
    StringBuilder.writeInteger = writeInteger;
    function writeIntegerAndSpace(builder, val) {
        writeSafe(builder, '' + val + ' ');
    }
    StringBuilder.writeIntegerAndSpace = writeIntegerAndSpace;
    function writeIntegerPadLeft(builder, val, totalWidth) {
        const s = '' + val;
        const padding = totalWidth - s.length;
        whitespace(builder, padding);
        writeSafe(builder, s);
    }
    StringBuilder.writeIntegerPadLeft = writeIntegerPadLeft;
    function writeIntegerPadRight(builder, val, totalWidth) {
        const s = '' + val;
        const padding = totalWidth - s.length;
        writeSafe(builder, s);
        whitespace(builder, padding);
    }
    StringBuilder.writeIntegerPadRight = writeIntegerPadRight;
    /**
     * @example writeFloat(123.2123, 100) -- 2 decim
     */
    function writeFloat(builder, val, precisionMultiplier) {
        writeSafe(builder, '' + Math.round(precisionMultiplier * val) / precisionMultiplier);
    }
    StringBuilder.writeFloat = writeFloat;
    function writeFloatPadLeft(builder, val, precisionMultiplier, totalWidth) {
        const s = '' + Math.round(precisionMultiplier * val) / precisionMultiplier;
        const padding = totalWidth - s.length;
        whitespace(builder, padding);
        writeSafe(builder, s);
    }
    StringBuilder.writeFloatPadLeft = writeFloatPadLeft;
    function writeFloatPadRight(builder, val, precisionMultiplier, totalWidth) {
        const s = '' + Math.round(precisionMultiplier * val) / precisionMultiplier;
        const padding = totalWidth - s.length;
        writeSafe(builder, s);
        whitespace(builder, padding);
    }
    StringBuilder.writeFloatPadRight = writeFloatPadRight;
})(StringBuilder || (StringBuilder = {}));

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
const now = (function () {
    if (typeof window !== 'undefined' && window.performance) {
        const perf = window.performance;
        return () => perf.now();
    }
    else if (typeof process !== 'undefined' && process.hrtime !== 'undefined' && typeof process.hrtime === 'function') {
        return () => {
            const t = process.hrtime();
            return t[0] * 1000 + t[1] / 1000000;
        };
    }
    else if (Date.now) {
        return () => Date.now();
    }
    else {
        return () => +new Date();
    }
}());

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var UUID;
(function (UUID) {
    const _btoa = typeof btoa !== 'undefined' ? btoa : (s) => Buffer.from(s).toString('base64');
    const chars = [];
    /** Creates a 22 characters 'base64' encoded UUID */
    function create22() {
        let d = (+new Date()) + now();
        for (let i = 0; i < 16; i++) {
            chars[i] = String.fromCharCode((d + Math.random() * 0xff) % 0xff | 0);
            d = Math.floor(d / 0xff);
        }
        return _btoa(chars.join('')).replace(/\+/g, '-').replace(/\//g, '_').substr(0, 22);
    }
    UUID.create22 = create22;
    function createv4() {
        let d = (+new Date()) + now();
        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
        return uuid;
    }
    UUID.createv4 = createv4;
    function is(x) {
        return typeof x === 'string';
    }
    UUID.is = is;
})(UUID || (UUID = {}));

/**
 * Copyright (c) 2017 Mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
// TODO check if the removal of FastSet and the removal of the context object for forEach
// have any performance implications
function _ascSort(a, b) {
    return a - b;
}
function sortAsc(array) {
    Array.prototype.sort.call(array, _ascSort);
    return array;
}
var Mask;
(function (Mask) {
    class EmptyMask {
        has(i) { return false; }
        forEach(f, ctx) { return ctx; }
        constructor() {
            this.size = 0;
        }
    }
    class SingletonMask {
        has(i) { return i === this.idx; }
        forEach(f, ctx) { f(this.idx, ctx); return ctx; }
        constructor(idx) {
            this.idx = idx;
            this.size = 1;
        }
    }
    class BitMask {
        has(i) { return i < this.length && !!this.mask[i]; }
        _forEach(f, ctx) {
            for (let i = 0; i < this.length; i++) {
                if (this.mask[i])
                    f(i, ctx);
            }
        }
        forEach(f, ctx) {
            this._forEach(f, ctx);
            return ctx;
        }
        constructor(mask, size) {
            this.mask = mask;
            this.size = size;
            this.length = mask.length;
        }
    }
    class AllMask {
        has(i) { return true; }
        _forEach(f, ctx) {
            for (let i = 0; i < this.size; i++) {
                f(i, ctx);
            }
        }
        forEach(f, ctx) {
            this._forEach(f, ctx);
            return ctx;
        }
        constructor(size) {
            this.size = size;
        }
    }
    class SetMask {
        has(i) { return this.set.has(i); }
        _forEach(f, ctx) {
            for (const idx of this.flatten()) {
                f(idx, ctx);
            }
        }
        flatten() {
            if (this._flat)
                return this._flat;
            const indices = new Int32Array(this.size);
            let offset = 0;
            this.set.forEach(i => indices[offset++] = i);
            sortAsc(indices);
            this._flat = indices;
            return this._flat;
        }
        forEach(f, ctx) {
            this._forEach(f, ctx);
            return ctx;
        }
        constructor(set) {
            this.set = set;
            this._flat = void 0;
            this.size = set.size;
        }
    }
    function always(size) { return new AllMask(size); }
    Mask.always = always;
    Mask.never = new EmptyMask();
    function ofSet(set) {
        return new SetMask(set);
    }
    Mask.ofSet = ofSet;
    function singleton(i) {
        return new SingletonMask(i);
    }
    Mask.singleton = singleton;
    function ofUniqueIndices(indices) {
        const len = indices.length;
        if (len === 0)
            return new EmptyMask();
        if (len === 1)
            return new SingletonMask(indices[0]);
        let max = 0;
        for (const i of indices) {
            if (i > max)
                max = i;
        }
        if (len === max)
            return new AllMask(len);
        const f = len / max;
        if (f < 1 / 12) {
            const set = new Set();
            for (const i of indices)
                set.add(i);
            return new SetMask(set);
        }
        const mask = new Int8Array(max + 1);
        for (const i of indices) {
            mask[i] = 1;
        }
        return new BitMask(mask, indices.length);
    }
    Mask.ofUniqueIndices = ofUniqueIndices;
    function ofMask(mask, size) {
        return new BitMask(mask, size);
    }
    Mask.ofMask = ofMask;
    function hasAny(mask, xs) {
        for (const x of xs) {
            if (mask.has(x))
                return true;
        }
        return false;
    }
    Mask.hasAny = hasAny;
    function complement(mask, against) {
        let count = 0;
        let max = 0;
        against.forEach(i => {
            if (!mask.has(i)) {
                count++;
                if (i > max)
                    max = i;
            }
        });
        if (count / max < 1 / 12) {
            // set based
            const set = new Set();
            against.forEach(i => {
                if (!mask.has(i)) {
                    set.add(i);
                }
            });
            return ofSet(set);
        }
        else {
            // mask based
            const target = new Uint8Array(max + 1);
            against.forEach(i => {
                if (!mask.has(i)) {
                    target[i] = 1;
                }
            });
            return ofMask(target, count);
        }
    }
    Mask.complement = complement;
})(Mask || (Mask = {}));

/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/** Builds id function returning ids within [firstId, maxId) */
function idFactory(firstId = 0, maxId = Number.MAX_SAFE_INTEGER) {
    let _nextId = firstId;
    return () => {
        const ret = _nextId;
        _nextId = (_nextId + 1) % maxId;
        return ret;
    };
}

/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
var ValueRef;
(function (ValueRef) {
    function create(ref) { return { ref }; }
    ValueRef.create = create;
    function set(ref, value) { ref.ref = value; return ref; }
    ValueRef.set = set;
})(ValueRef || (ValueRef = {}));
const getNextId = idFactory(0, 0x7FFFFFFF);
var ValueBox;
(function (ValueBox) {
    function create(value, metadata) {
        return { id: getNextId(), version: 0, value, metadata: metadata };
    }
    ValueBox.create = create;
    /** The box.metadata is carried over from the old box */
    function withValue(box, value) {
        return { id: box.id, version: box.version + 1, value, metadata: box.metadata };
    }
    ValueBox.withValue = withValue;
})(ValueBox || (ValueBox = {}));
var ValueCell;
(function (ValueCell) {
    function create(value, metadata) {
        return ValueRef.create(ValueBox.create(value, metadata));
    }
    ValueCell.create = create;
    /** The box.metadata is carried over from the old box */
    function update(cell, value) {
        return ValueRef.set(cell, ValueBox.withValue(cell.ref, value));
    }
    ValueCell.update = update;
    function set(cell, box) {
        return ValueRef.set(cell, box);
    }
    ValueCell.set = set;
    /** Updates the cell if the value is has changed, comparing by reference */
    function updateIfChanged(cell, value) {
        return cell.ref.value !== value ? update(cell, value) : cell;
    }
    ValueCell.updateIfChanged = updateIfChanged;
})(ValueCell || (ValueCell = {}));

/**
 * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function arrayEqual(arr1, arr2) {
    const length = arr1.length;
    if (length !== arr2.length)
        return false;
    for (let i = 0; i < length; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
/** An immutable table */
var Table;
(function (Table) {
    function is(t) {
        return t && typeof t._rowCount === 'number' && !!t._columns && !!t._schema;
    }
    Table.is = is;
    function pickColumns(schema, table, guard = {}) {
        const ret = Object.create(null);
        const keys = Object.keys(schema);
        ret._rowCount = table._rowCount;
        ret._columns = keys;
        ret._schema = schema;
        for (const k of keys) {
            if (!!table[k])
                ret[k] = table[k];
            else if (!!guard[k])
                ret[k] = guard[k];
            else
                throw Error(`Cannot find column '${k}'.`);
        }
        return ret;
    }
    Table.pickColumns = pickColumns;
    function ofColumns(schema, columns) {
        const _columns = Object.keys(columns);
        const _rowCount = columns[_columns[0]].rowCount;
        return { _rowCount, _columns, _schema: schema, ...columns };
    }
    Table.ofColumns = ofColumns;
    function ofPartialColumns(schema, partialColumns, rowCount) {
        const ret = Object.create(null);
        const columns = Object.keys(schema);
        ret._rowCount = rowCount;
        ret._columns = columns;
        ret._schema = schema;
        for (const k of columns) {
            if (k in partialColumns)
                ret[k] = partialColumns[k];
            else
                ret[k] = Column.Undefined(rowCount, schema[k]);
        }
        return ret;
    }
    Table.ofPartialColumns = ofPartialColumns;
    function ofUndefinedColumns(schema, rowCount) {
        const ret = Object.create(null);
        const columns = Object.keys(schema);
        ret._rowCount = rowCount;
        ret._columns = columns;
        ret._schema = schema;
        for (const k of columns) {
            ret[k] = Column.Undefined(rowCount, schema[k]);
        }
        return ret;
    }
    Table.ofUndefinedColumns = ofUndefinedColumns;
    function ofRows(schema, rows) {
        const ret = Object.create(null);
        const rowCount = rows.length;
        const columns = Object.keys(schema);
        ret._rowCount = rowCount;
        ret._columns = columns;
        ret._schema = schema;
        for (const k of columns) {
            ret[k] = Column.ofLambda({
                rowCount,
                schema: schema[k],
                value: r => rows[r][k],
                valueKind: r => typeof rows[r][k] === 'undefined' ? 1 /* Column.ValueKinds.NotPresent */ : 0 /* Column.ValueKinds.Present */
            });
        }
        return ret;
    }
    Table.ofRows = ofRows;
    function ofArrays(schema, arrays) {
        var _a;
        const ret = Object.create(null);
        const columns = Object.keys(schema);
        ret._rowCount = 0;
        ret._columns = columns;
        ret._schema = schema;
        for (const k of columns) {
            if (typeof arrays[k] !== 'undefined') {
                ret[k] = Column.ofArray({ array: arrays[k], schema: schema[k] });
                ret._rowCount = (_a = arrays[k]) === null || _a === void 0 ? void 0 : _a.length;
            }
            else {
                ret[k] = Column.Undefined(ret._rowCount, schema[k]);
            }
        }
        return ret;
    }
    Table.ofArrays = ofArrays;
    function view(table, schema, view) {
        const ret = Object.create(null);
        const columns = Object.keys(schema);
        ret._rowCount = view.length;
        ret._columns = columns;
        ret._schema = schema;
        for (const k of columns) {
            ret[k] = Column.view(table[k], view);
        }
        return ret;
    }
    Table.view = view;
    function pick(table, schema, test) {
        const _view = [];
        for (let i = 0, il = table._rowCount; i < il; ++i) {
            if (test(i))
                _view.push(i);
        }
        return view(table, schema, _view);
    }
    Table.pick = pick;
    function window(table, schema, start, end) {
        if (start === 0 && end === table._rowCount)
            return table;
        const ret = Object.create(null);
        const columns = Object.keys(schema);
        ret._rowCount = end - start;
        ret._columns = columns;
        ret._schema = schema;
        for (const k of columns) {
            ret[k] = Column.window(table[k], start, end);
        }
        return ret;
    }
    Table.window = window;
    function concat(tables, schema) {
        const ret = Object.create(null);
        const columns = Object.keys(schema);
        ret._rowCount = 0;
        for (const table of tables) {
            ret._rowCount += table._rowCount;
        }
        const arrays = {};
        for (const column of columns) {
            arrays[column] = new Array(ret._rowCount);
        }
        ret._columns = columns;
        ret._schema = schema;
        let offset = 0;
        for (const table of tables) {
            for (const k of columns) {
                Column.copyToArray(table[k], arrays[k], offset);
            }
            offset += table._rowCount;
        }
        for (const k of columns) {
            ret[k] = Column.ofArray({ array: arrays[k], schema: schema[k] });
        }
        return ret;
    }
    Table.concat = concat;
    function columnToArray(table, name, array) {
        table[name] = Column.asArrayColumn(table[name], array);
    }
    Table.columnToArray = columnToArray;
    /** Sort and return a new table */
    function sort(table, cmp) {
        const indices = new Int32Array(table._rowCount);
        for (let i = 0, _i = indices.length; i < _i; i++)
            indices[i] = i;
        sortArray(indices, (_, i, j) => cmp(i, j));
        let isIdentity = true;
        for (let i = 0, _i = indices.length; i < _i; i++) {
            if (indices[i] !== i) {
                isIdentity = false;
                break;
            }
        }
        if (isIdentity)
            return table;
        const ret = Object.create(null);
        ret._rowCount = table._rowCount;
        ret._columns = table._columns;
        ret._schema = table._schema;
        for (const c of table._columns) {
            ret[c] = Column.view(table[c], indices, false);
        }
        return ret;
    }
    Table.sort = sort;
    function areEqual(a, b) {
        if (a._rowCount !== b._rowCount)
            return false;
        if (a._columns.length !== b._columns.length)
            return false;
        for (const c of a._columns) {
            if (!b[c])
                return false;
        }
        for (const c of a._columns) {
            if (!Column.areEqual(a[c], b[c]))
                return false;
        }
        return true;
    }
    Table.areEqual = areEqual;
    /** Allocate a new object with the given row values. */
    function getRow(table, index) {
        const row = Object.create(null);
        const { _columns: cols } = table;
        for (let i = 0; i < cols.length; i++) {
            const c = cols[i];
            row[c] = table[c].value(index);
        }
        return row;
    }
    Table.getRow = getRow;
    /** Pick the first row for which `test` evaluates to true */
    function pickRow(table, test) {
        for (let i = 0, il = table._rowCount; i < il; ++i) {
            if (test(i))
                return getRow(table, i);
        }
    }
    Table.pickRow = pickRow;
    function getRows(table) {
        const ret = [];
        const { _rowCount: c } = table;
        for (let i = 0; i < c; i++) {
            ret[i] = getRow(table, i);
        }
        return ret;
    }
    Table.getRows = getRows;
    function toArrays(table) {
        const arrays = {};
        const { _columns } = table;
        for (let i = 0; i < _columns.length; i++) {
            const c = _columns[i];
            arrays[c] = table[c].toArray();
        }
        return arrays;
    }
    Table.toArrays = toArrays;
    function formatToString(table) {
        const sb = StringBuilder.create();
        const { _columns: cols, _rowCount } = table;
        let headerLength = 1;
        StringBuilder.write(sb, '|');
        for (let i = 0; i < cols.length; i++) {
            StringBuilder.write(sb, cols[i]);
            StringBuilder.write(sb, '|');
            headerLength += cols[i].length + 1;
        }
        StringBuilder.newline(sb);
        StringBuilder.write(sb, new Array(headerLength + 1).join('-'));
        StringBuilder.newline(sb);
        for (let r = 0; r < _rowCount; r++) {
            StringBuilder.write(sb, '|');
            for (let i = 0; i < cols.length; i++) {
                const c = table[cols[i]];
                if (c.valueKind(r) === 0 /* Column.ValueKinds.Present */) {
                    StringBuilder.write(sb, c.value(r));
                    StringBuilder.write(sb, '|');
                }
                else {
                    StringBuilder.write(sb, '.|');
                }
            }
            StringBuilder.newline(sb);
        }
        return StringBuilder.getString(sb);
    }
    Table.formatToString = formatToString;
})(Table || (Table = {}));

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var Database;
(function (Database) {
    function ofTables(name, schema, tables) {
        const keys = Object.keys(tables);
        const ret = Object.create(null);
        const tableNames = [];
        ret._name = name;
        ret._tableNames = tableNames;
        ret._schema = schema;
        for (const k of keys) {
            if (!Table.is(tables[k]))
                continue;
            ret[k] = tables[k];
            tableNames[tableNames.length] = k;
        }
        return ret;
    }
    Database.ofTables = ofTables;
    function getTablesAsRows(database) {
        const ret = {};
        for (const k of database._tableNames) {
            ret[k] = Table.getRows(database[k]);
        }
        return ret;
    }
    Database.getTablesAsRows = getTablesAsRows;
})(Database || (Database = {}));

/**
 * Copyright (c) 2017-2021 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function areValuesEqualProvider(tokens) {
    const { data, indices } = tokens;
    return function (rowA, rowB) {
        const aS = indices[2 * rowA], bS = indices[2 * rowB];
        const len = indices[2 * rowA + 1] - aS;
        if (len !== indices[2 * rowB + 1] - bS)
            return false;
        for (let i = 0; i < len; i++) {
            if (data.charCodeAt(i + aS) !== data.charCodeAt(i + bS)) {
                return false;
            }
        }
        return true;
    };
}

/**
 * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function CifFile(blocks, name) {
    return { name, blocks: blocks };
}
function CifBlock$1(categoryNames, categories, header, saveFrames = []) {
    return {
        categoryNames, header, categories, saveFrames,
        getField(name) {
            const [category, field] = name.split('.');
            return categories[category].getField(field || '');
        }
    };
}
function CifSaveFrame$1(categoryNames, categories, header) {
    return { categoryNames, header, categories };
}
function CifCategory(name, rowCount, fieldNames, fields) {
    return { rowCount, name, fieldNames: [...fieldNames], getField(name) { return fields[name]; } };
}
(function (CifCategory) {
    function empty(name) {
        return { rowCount: 0, name, fieldNames: [], getField(name) { return void 0; } };
    }
    CifCategory.empty = empty;
    function ofFields(name, fields) {
        const fieldNames = Object.keys(fields);
        return {
            rowCount: fieldNames.length > 0 ? fields[fieldNames[0]].rowCount : 0,
            name,
            fieldNames,
            getField(name) { return fields[name]; }
        };
    }
    CifCategory.ofFields = ofFields;
    function ofTable(name, table) {
        const fields = {};
        for (const name of table._columns) {
            fields[name] = CifField.ofColumn(table[name]);
        }
        return ofFields(name, fields);
    }
    CifCategory.ofTable = ofTable;
})(CifCategory || (CifCategory = {}));
var CifField;
(function (CifField) {
    function ofString(value) {
        return ofStrings([value]);
    }
    CifField.ofString = ofString;
    function ofStrings(values) {
        const rowCount = values.length;
        const str = row => { const ret = values[row]; if (!ret || ret === '.' || ret === '?')
            return ''; return ret; };
        const int = row => { const v = values[row]; return parseInt$1(v, 0, v.length) || 0; };
        const float = row => { const v = values[row]; return parseFloat$1(v, 0, v.length) || 0; };
        const valueKind = row => {
            const v = values[row], l = v.length;
            if (l > 1)
                return 0 /* Column.ValueKinds.Present */;
            if (l === 0)
                return 1 /* Column.ValueKinds.NotPresent */;
            const c = v.charCodeAt(0);
            if (c === 46 /* . */)
                return 1 /* Column.ValueKinds.NotPresent */;
            if (c === 63 /* ? */)
                return 2 /* Column.ValueKinds.Unknown */;
            return 0 /* Column.ValueKinds.Present */;
        };
        return {
            __array: void 0,
            binaryEncoding: void 0,
            isDefined: true,
            rowCount,
            str,
            int,
            float,
            valueKind,
            areValuesEqual: (rowA, rowB) => values[rowA] === values[rowB],
            toStringArray: params => params ? createAndFillArray(rowCount, str, params) : values,
            toIntArray: params => createAndFillArray(rowCount, int, params),
            toFloatArray: params => createAndFillArray(rowCount, float, params)
        };
    }
    CifField.ofStrings = ofStrings;
    function ofNumbers(values) {
        const rowCount = values.length;
        const str = row => { return '' + values[row]; };
        const float = row => values[row];
        const valueKind = row => 0 /* Column.ValueKinds.Present */;
        const toFloatArray = (params) => {
            if (!params || params.array && values instanceof params.array) {
                return values;
            }
            else {
                return createAndFillArray(rowCount, float, params);
            }
        };
        return {
            __array: void 0,
            binaryEncoding: void 0,
            isDefined: true,
            rowCount,
            str,
            int: float,
            float,
            valueKind,
            areValuesEqual: (rowA, rowB) => values[rowA] === values[rowB],
            toStringArray: params => createAndFillArray(rowCount, str, params),
            toIntArray: toFloatArray,
            toFloatArray
        };
    }
    CifField.ofNumbers = ofNumbers;
    function ofTokens(tokens) {
        const { data, indices, count: rowCount } = tokens;
        const str = row => {
            const ret = data.substring(indices[2 * row], indices[2 * row + 1]);
            if (ret === '.' || ret === '?')
                return '';
            return ret;
        };
        const int = row => {
            return parseInt$1(data, indices[2 * row], indices[2 * row + 1]) || 0;
        };
        const float = row => {
            return parseFloat$1(data, indices[2 * row], indices[2 * row + 1]) || 0;
        };
        const valueKind = row => {
            const s = indices[2 * row], l = indices[2 * row + 1] - s;
            if (l > 1)
                return 0 /* Column.ValueKinds.Present */;
            if (l === 0)
                return 1 /* Column.ValueKinds.NotPresent */;
            const v = data.charCodeAt(s);
            if (v === 46 /* . */)
                return 1 /* Column.ValueKinds.NotPresent */;
            if (v === 63 /* ? */)
                return 2 /* Column.ValueKinds.Unknown */;
            return 0 /* Column.ValueKinds.Present */;
        };
        return {
            __array: void 0,
            binaryEncoding: void 0,
            isDefined: true,
            rowCount,
            str,
            int,
            float,
            valueKind,
            areValuesEqual: areValuesEqualProvider(tokens),
            toStringArray: params => createAndFillArray(rowCount, str, params),
            toIntArray: params => createAndFillArray(rowCount, int, params),
            toFloatArray: params => createAndFillArray(rowCount, float, params)
        };
    }
    CifField.ofTokens = ofTokens;
    function ofColumn(column) {
        const { rowCount, valueKind, areValuesEqual, isDefined } = column;
        let str;
        let int;
        let float;
        switch (column.schema.valueType) {
            case 'float':
            case 'int':
                str = row => { return '' + column.value(row); };
                int = column.value;
                float = column.value;
                break;
            case 'str':
                str = column.value;
                int = row => { const v = column.value(row); return parseInt$1(v, 0, v.length) || 0; };
                float = row => { const v = column.value(row); return parseFloat$1(v, 0, v.length) || 0; };
                break;
            case 'list':
                const { separator } = column.schema;
                str = row => column.value(row).join(separator);
                int = row => NaN;
                float = row => NaN;
                break;
            default:
                throw new Error(`unsupported valueType '${column.schema.valueType}'`);
        }
        return {
            __array: void 0,
            binaryEncoding: void 0,
            isDefined,
            rowCount,
            str,
            int,
            float,
            valueKind,
            areValuesEqual,
            toStringArray: params => createAndFillArray(rowCount, str, params),
            toIntArray: params => createAndFillArray(rowCount, int, params),
            toFloatArray: params => createAndFillArray(rowCount, float, params)
        };
    }
    CifField.ofColumn = ofColumn;
    function ofUndefined(rowCount, schema) {
        return ofColumn(Column.Undefined(rowCount, schema));
    }
    CifField.ofUndefined = ofUndefined;
})(CifField || (CifField = {}));
function tensorFieldNameGetter(field, rank, zeroIndexed, namingVariant) {
    const offset = zeroIndexed ? 0 : 1;
    switch (rank) {
        case 1:
            return namingVariant === 'brackets'
                ? (i) => `${field}[${i + offset}]`
                : (i) => `${field}_${i + offset}`;
        case 2:
            return namingVariant === 'brackets'
                ? (i, j) => `${field}[${i + offset}][${j + offset}]`
                : (i, j) => `${field}_${i + offset}${j + offset}`;
        case 3:
            return namingVariant === 'brackets'
                ? (i, j, k) => `${field}[${i + offset}][${j + offset}][${k + offset}]`
                : (i, j, k) => `${field}_${i + offset}${j + offset}${k + offset}`;
        default:
            throw new Error('Tensors with rank > 3 or rank 0 are currently not supported.');
    }
}
function getTensor(category, space, row, getName) {
    const ret = space.create();
    if (space.rank === 1) {
        const rows = space.dimensions[0];
        for (let i = 0; i < rows; i++) {
            const f = category.getField(getName(i));
            space.set(ret, i, !!f ? f.float(row) : 0.0);
        }
    }
    else if (space.rank === 2) {
        const rows = space.dimensions[0], cols = space.dimensions[1];
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                const f = category.getField(getName(i, j));
                space.set(ret, i, j, !!f ? f.float(row) : 0.0);
            }
        }
    }
    else if (space.rank === 3) {
        const d0 = space.dimensions[0], d1 = space.dimensions[1], d2 = space.dimensions[2];
        for (let i = 0; i < d0; i++) {
            for (let j = 0; j < d1; j++) {
                for (let k = 0; k < d2; k++) {
                    const f = category.getField(getName(i, j, k));
                    space.set(ret, i, j, k, !!f ? f.float(row) : 0.0);
                }
            }
        }
    }
    else {
        throw new Error('Tensors with rank > 3 or rank 0 are currently not supported.');
    }
    return ret;
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function createImmediateActions() {
    const thisGlobal = (function () {
        const _window = typeof window !== 'undefined' && window;
        const _self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;
        const _global = typeof global !== 'undefined' && global;
        return _window || _global || _self;
    })();
    const tasksByHandle = {};
    const doc = typeof document !== 'undefined' ? document : void 0;
    let nextHandle = 1; // Spec says greater than zero
    let registerImmediate;
    function setImmediate(callback, ...args) {
        // Callback can either be a function or a string
        if (typeof callback !== 'function') {
            callback = new Function('' + callback);
        }
        // Store and register the task
        const task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }
    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }
    function run(task) {
        const callback = task.callback;
        const args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }
    function runIfPresent(handle) {
        const task = tasksByHandle[handle];
        clearImmediate(handle);
        run(task);
    }
    function installNextTickImplementation() {
        registerImmediate = function (handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }
    function canUsePostMessage() {
        if (thisGlobal && thisGlobal.postMessage && !thisGlobal.importScripts) {
            let postMessageIsAsynchronous = true;
            const oldOnMessage = thisGlobal.onmessage;
            thisGlobal.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            thisGlobal.postMessage('', '*');
            thisGlobal.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }
    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
        const messagePrefix = 'setImmediate$' + Math.random() + '$';
        const onGlobalMessage = function (event) {
            if (event.source === thisGlobal &&
                typeof event.data === 'string' &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };
        if (window.addEventListener) {
            window.addEventListener('message', onGlobalMessage, false);
        }
        else {
            window.attachEvent('onmessage', onGlobalMessage);
        }
        registerImmediate = function (handle) {
            window.postMessage(messagePrefix + handle, '*');
        };
    }
    function installMessageChannelImplementation() {
        const channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            const handle = event.data;
            runIfPresent(handle);
        };
        registerImmediate = function (handle) {
            channel.port2.postMessage(handle);
        };
    }
    function installReadyStateChangeImplementation() {
        const html = doc.documentElement;
        registerImmediate = function (handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            let script = doc.createElement('script');
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }
    function installSetTimeoutImplementation() {
        registerImmediate = function (handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }
    // Don't get fooled by e.g. browserify environments.
    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
        // For Node.js before 0.9
        installNextTickImplementation();
    }
    else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();
    }
    else if (typeof MessageChannel !== 'undefined') {
        // For web workers, where supported
        installMessageChannelImplementation();
    }
    else if (doc && 'onreadystatechange' in doc.createElement('script')) {
        // For IE 6–8
        installReadyStateChangeImplementation();
    }
    else {
        // For older browsers
        installSetTimeoutImplementation();
    }
    return {
        setImmediate,
        clearImmediate
    };
}
const immediateActions = (function () {
    if (typeof setImmediate !== 'undefined') {
        if (typeof window !== 'undefined') {
            return {
                setImmediate: (handler, ...args) => window.setImmediate(handler, ...args),
                clearImmediate: (handle) => window.clearImmediate(handle)
            };
        }
        else {
            return { setImmediate, clearImmediate };
        }
    }
    return createImmediateActions();
}());
function resolveImmediate(res) {
    immediateActions.setImmediate(res);
}
const Scheduler = {
    setImmediate: immediateActions.setImmediate,
    clearImmediate: immediateActions.clearImmediate,
    immediatePromise() { return new Promise(resolveImmediate); },
    delay(timeout, value = void 0) { return new Promise(r => setTimeout(r, timeout, value)); }
};

/**
 * Copyright (c) 2019-2023 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/**
 * on node `process.env.NODE_ENV` is available, in webpack build it is automatically set
 * by the DefinePlugin to the webpack `mode` value
 */
(function () {
    try {
        return process.env.NODE_ENV === 'production';
    }
    catch (_a) {
        return false;
    }
})();
/**
 * set to true to enable more comprehensive checks and assertions,
 * mostly used in `mol-gl` and in valence-model calculation
 */
(function getIsDebug() {
    try {
        const val = process.env.DEBUG;
        return val === '*' || val === 'molstar';
    }
    catch (_a) {
        return false;
    }
})();
/**
 * set to true to gather timings, mostly used in `mol-gl`
 */
let isTimingMode = false;

/**
 * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
const hasPerformance = (typeof performance !== 'undefined') && !!performance.mark && performance.measure;
const timingEnabled = hasPerformance && isTimingMode;
var UserTiming;
(function (UserTiming) {
    function startMarkName(task) { return `startTask${task.id}`; }
    function endMarkName(task) { return `endTask${task.id}`; }
    function markStart(task) {
        if (timingEnabled)
            performance.mark(startMarkName(task));
    }
    UserTiming.markStart = markStart;
    function markEnd(task) {
        if (timingEnabled)
            performance.mark(endMarkName(task));
    }
    UserTiming.markEnd = markEnd;
    function measure(task) {
        if (timingEnabled)
            performance.measure(`✳️ ${task.name}`, startMarkName(task), endMarkName(task));
    }
    UserTiming.measure = measure;
})(UserTiming || (UserTiming = {}));

/**
 * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function ExecuteObservable(task, observer, updateRateMs = 250) {
    const info = ProgressInfo(task, observer, updateRateMs);
    const ctx = new ObservableRuntimeContext(info, info.root);
    return execute(task, ctx);
}
function ExecuteInContext(ctx, task) {
    return execute(task, ctx);
}
function ExecuteObservableChild(ctx, task, progress) {
    return ctx.runChild(task, progress);
}
function defaultProgress(task) {
    return {
        taskId: task.id,
        taskName: task.name,
        message: '',
        startedTime: 0,
        canAbort: true,
        isIndeterminate: true,
        current: 0,
        max: 0
    };
}
function ProgressInfo(task, observer, updateRateMs) {
    const abortToken = { abortRequested: false, treeAborted: false, reason: '' };
    return {
        updateRateMs,
        lastNotified: now(),
        observer,
        abortToken,
        taskId: task.id,
        root: { progress: defaultProgress(task), children: [] },
        tryAbort: createAbortFunction(abortToken)
    };
}
function createAbortFunction(token) {
    return (reason) => {
        token.abortRequested = true;
        token.reason = reason || token.reason;
    };
}
function cloneTree(root) {
    return { progress: { ...root.progress }, children: root.children.map(cloneTree) };
}
function canAbort(root) {
    return root.progress.canAbort && root.children.every(canAbort);
}
function snapshotProgress(info) {
    return { root: cloneTree(info.root), canAbort: canAbort(info.root), requestAbort: info.tryAbort };
}
async function execute(task, ctx) {
    UserTiming.markStart(task);
    ctx.node.progress.startedTime = now();
    try {
        const ret = await task.f(ctx);
        UserTiming.markEnd(task);
        UserTiming.measure(task);
        if (ctx.info.abortToken.abortRequested) {
            abort(ctx.info);
        }
        return ret;
    }
    catch (e) {
        if (Task.isAbort(e)) {
            ctx.isAborted = true;
            // wait for all child computations to go thru the abort phase.
            if (ctx.node.children.length > 0) {
                await new Promise(res => { ctx.onChildrenFinished = res; });
            }
            if (task.onAbort) {
                task.onAbort();
            }
        }
        throw e;
    }
}
function abort(info) {
    if (!info.abortToken.treeAborted) {
        info.abortToken.treeAborted = true;
        abortTree(info.root);
        notifyObserver(info, now());
    }
    throw Task.Aborted(info.abortToken.reason);
}
function abortTree(root) {
    const progress = root.progress;
    progress.isIndeterminate = true;
    progress.canAbort = false;
    progress.message = 'Aborting...';
    for (const c of root.children)
        abortTree(c);
}
// function shouldNotify(info: ProgressInfo, time: number) {
//     return time - info.lastNotified > info.updateRateMs;
// }
function notifyObserver(info, time) {
    info.lastNotified = time;
    const snapshot = snapshotProgress(info);
    info.observer(snapshot);
}
class ObservableRuntimeContext {
    checkAborted() {
        if (this.info.abortToken.abortRequested) {
            this.isAborted = true;
            abort(this.info);
        }
    }
    get shouldUpdate() {
        this.checkAborted();
        return now() - this.lastUpdatedTime > this.info.updateRateMs;
    }
    updateProgress(update) {
        this.checkAborted();
        if (!update)
            return;
        const progress = this.node.progress;
        if (typeof update === 'string') {
            progress.message = update;
            progress.isIndeterminate = true;
        }
        else {
            if (typeof update.canAbort !== 'undefined')
                progress.canAbort = update.canAbort;
            if (typeof update.message !== 'undefined')
                progress.message = update.message;
            if (typeof update.current !== 'undefined')
                progress.current = update.current;
            if (typeof update.max !== 'undefined')
                progress.max = update.max;
            progress.isIndeterminate = typeof progress.current === 'undefined' || typeof progress.max === 'undefined';
            if (typeof update.isIndeterminate !== 'undefined')
                progress.isIndeterminate = update.isIndeterminate;
        }
    }
    update(progress, dontNotify) {
        // The progress tracking and observer notification are separated
        // because the computation can have a tree structure.
        // All nodes of the tree should be regualarly updated at the specified frequency,
        // however, the notification should only be invoked once per the whole tree.
        this.lastUpdatedTime = now();
        this.updateProgress(progress);
        // TODO: do the shouldNotify check here?
        if (!!dontNotify /* || !shouldNotify(this.info, this.lastUpdatedTime)*/)
            return;
        notifyObserver(this.info, this.lastUpdatedTime);
        // The computation could have been aborted during the notifycation phase.
        this.checkAborted();
        return Scheduler.immediatePromise();
    }
    async runChild(task, progress) {
        this.updateProgress(progress);
        // Create a new child context and add it to the progress tree.
        // When the child task finishes, remove the tree node.
        const node = { progress: defaultProgress(task), children: [] };
        const children = this.node.children;
        children.push(node);
        const ctx = new ObservableRuntimeContext(this.info, node);
        try {
            return await execute(task, ctx);
        }
        catch (e) {
            if (Task.isAbort(e)) {
                // need to catch the error here because otherwise
                // promises for running child tasks in a tree-like computation
                // will get orphaned and cause "uncaught error in Promise".
                if (this.isAborted)
                    return void 0;
            }
            throw e;
        }
        finally {
            // remove the progress node after the computation has finished.
            const idx = children.indexOf(node);
            if (idx >= 0) {
                for (let i = idx, _i = children.length - 1; i < _i; i++) {
                    children[i] = children[i + 1];
                }
                children.pop();
            }
            if (children.length === 0 && this.onChildrenFinished)
                this.onChildrenFinished();
        }
    }
    constructor(info, node) {
        this.isSynchronous = false;
        this.isExecuting = true;
        this.lastUpdatedTime = 0;
        // used for waiting for cancelled computation trees
        this.onChildrenFinished = void 0;
        this.node = node;
        this.info = info;
    }
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
class SynchronousRuntimeContext {
    constructor() {
        this.shouldUpdate = false;
        this.isSynchronous = true;
    }
    update(progress, dontNotify) { }
}
const SyncRuntimeContext = new SynchronousRuntimeContext();

/**
 * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var Task;
(function (Task) {
    class Impl {
        run(observer, updateRateMs = 250) {
            if (observer)
                return ExecuteObservable(this, observer, updateRateMs);
            return this.f(SyncRuntimeContext);
        }
        runAsChild(ctx, progress) {
            if (ctx.isSynchronous)
                return this.f(SyncRuntimeContext);
            return ExecuteObservableChild(ctx, this, progress);
        }
        runInContext(ctx) {
            if (ctx.isSynchronous)
                return this.f(SyncRuntimeContext);
            return ExecuteInContext(ctx, this);
        }
        constructor(name, f, onAbort) {
            this.name = name;
            this.f = f;
            this.onAbort = onAbort;
            this.id = getNextId();
        }
    }
    function is(t) {
        const _t = t;
        return !!t && typeof _t.id === 'number' && typeof _t.name === 'string' && !!_t.run;
    }
    Task.is = is;
    function isAbort(e) { return !!e && !!e.isAborted; }
    Task.isAbort = isAbort;
    function Aborted(reason) { return { isAborted: true, reason, toString() { return `Aborted${reason ? ': ' + reason : ''}`; } }; }
    Task.Aborted = Aborted;
    function create(name, f, onAbort) {
        return new Impl(name, f, onAbort);
    }
    Task.create = create;
    function constant(name, value) { return create(name, async (ctx) => value); }
    Task.constant = constant;
    function empty() { return create('', async (ctx) => { }); }
    Task.empty = empty;
    function fail(name, reason) { return create(name, async (ctx) => { throw new Error(reason); }); }
    Task.fail = fail;
    function resolveInContext(object, ctx) {
        if (is(object))
            return ctx ? object.runInContext(ctx) : object.run();
        return object;
    }
    Task.resolveInContext = resolveInContext;
    const getNextId = idFactory(0, 0x3fffffff);
})(Task || (Task = {}));

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var RuntimeContext;
(function (RuntimeContext) {
    RuntimeContext.Synchronous = SyncRuntimeContext;
})(RuntimeContext || (RuntimeContext = {}));

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var Progress;
(function (Progress) {
    function _format(root, prefix = '') {
        const p = root.progress;
        if (!root.children.length) {
            if (p.isIndeterminate)
                return `${prefix}${p.taskName}: ${p.message}`;
            return `${prefix}${p.taskName}: [${p.current}/${p.max}] ${p.message}`;
        }
        const newPrefix = prefix + '  |_ ';
        const subTree = root.children.map(c => _format(c, newPrefix));
        if (p.isIndeterminate)
            return `${prefix}${p.taskName}: ${p.message}\n${subTree.join('\n')}`;
        return `${prefix}${p.taskName}: [${p.current}/${p.max}] ${p.message}\n${subTree.join('\n')}`;
    }
    function format(p) { return _format(p.root); }
    Progress.format = format;
})(Progress || (Progress = {}));

/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
async function chunkedSubtask(ctx, initialChunk, state, f, update) {
    let chunkSize = Math.max(initialChunk, 0);
    let globalProcessed = 0, globalTime = 0;
    if (ctx.isSynchronous) {
        f(Number.MAX_SAFE_INTEGER, state);
        return state;
    }
    let start = now();
    let lastSize = 0, currentTime = 0;
    while ((lastSize = f(chunkSize, state)) > 0) {
        globalProcessed += lastSize;
        const delta = now() - start;
        currentTime += delta;
        globalTime += delta;
        if (ctx.shouldUpdate) {
            await update(ctx, state, globalProcessed);
            chunkSize = Math.round(currentTime * globalProcessed / globalTime) + 1;
            start = now();
            currentTime = 0;
        }
    }
    if (ctx.shouldUpdate) {
        await update(ctx, state, globalProcessed);
    }
    return state;
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * mostly from https://github.com/dsehnal/CIFTools.js
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function Tokenizer(data) {
    return {
        data,
        position: 0,
        length: data.length,
        lineNumber: 1,
        tokenStart: 0,
        tokenEnd: 0
    };
}
(function (Tokenizer) {
    function getTokenString(state) {
        return state.data.substring(state.tokenStart, state.tokenEnd);
    }
    Tokenizer.getTokenString = getTokenString;
    /** Resets the state */
    function reset(state) {
        state.position = 0;
        state.lineNumber = 1;
        state.tokenStart = 0;
        state.tokenEnd = 0;
    }
    Tokenizer.reset = reset;
    /**
     * Eat everything until a newline occurs.
     */
    function eatLine(state) {
        const { data } = state;
        while (state.position < state.length) {
            switch (data.charCodeAt(state.position)) {
                case 10: // \n
                    state.tokenEnd = state.position;
                    ++state.position;
                    ++state.lineNumber;
                    return true;
                case 13: // \r
                    state.tokenEnd = state.position;
                    ++state.position;
                    ++state.lineNumber;
                    if (data.charCodeAt(state.position) === 10) {
                        ++state.position;
                    }
                    return true;
                default:
                    ++state.position;
                    break;
            }
        }
        state.tokenEnd = state.position;
        return state.tokenStart !== state.tokenEnd;
    }
    Tokenizer.eatLine = eatLine;
    /** Sets the current token start to the current position */
    function markStart(state) {
        state.tokenStart = state.position;
    }
    Tokenizer.markStart = markStart;
    /** Sets the current token start to current position and moves to the next line. */
    function markLine(state) {
        state.tokenStart = state.position;
        return eatLine(state);
    }
    Tokenizer.markLine = markLine;
    /** Advance the state and return line as string. */
    function readLine(state) {
        markLine(state);
        return getTokenString(state);
    }
    Tokenizer.readLine = readLine;
    /** Advance the state and return trimmed line as string. */
    function readLineTrim(state) {
        markLine(state);
        const position = state.position;
        trim(state, state.tokenStart, state.tokenEnd);
        state.position = position;
        return getTokenString(state);
    }
    Tokenizer.readLineTrim = readLineTrim;
    function readLinesChunk(state, count, tokens) {
        let read = 0;
        for (let i = 0; i < count; i++) {
            if (!markLine(state))
                return read;
            TokenBuilder.addUnchecked(tokens, state.tokenStart, state.tokenEnd);
            read++;
        }
        return read;
    }
    /** Advance the state by the given number of lines and return them*/
    function markLines(state, count) {
        const lineTokens = TokenBuilder.create(state.data, count * 2);
        readLinesChunk(state, count, lineTokens);
        return lineTokens;
    }
    Tokenizer.markLines = markLines;
    /** Advance the state by the given number of lines and return them */
    function readLines(state, count) {
        const ret = [];
        for (let i = 0; i < count; i++) {
            ret.push(Tokenizer.readLine(state));
        }
        return ret;
    }
    Tokenizer.readLines = readLines;
    /** Advance the state by the given number of lines and return line starts/ends as tokens. */
    async function readLinesAsync(state, count, ctx, initialLineCount = 100000) {
        const lineTokens = TokenBuilder.create(state.data, count * 2);
        let linesAlreadyRead = 0;
        await chunkedSubtask(ctx, initialLineCount, state, (chunkSize, state) => {
            const linesToRead = Math.min(count - linesAlreadyRead, chunkSize);
            readLinesChunk(state, linesToRead, lineTokens);
            linesAlreadyRead += linesToRead;
            return linesToRead;
        }, (ctx, state) => ctx.update({ message: 'Parsing...', current: state.position, max: state.length }));
        return lineTokens;
    }
    Tokenizer.readLinesAsync = readLinesAsync;
    function readAllLines(data) {
        const state = Tokenizer(data);
        const tokens = TokenBuilder.create(state.data, Math.max(data.length / 80, 2));
        while (markLine(state)) {
            TokenBuilder.add(tokens, state.tokenStart, state.tokenEnd);
        }
        return tokens;
    }
    Tokenizer.readAllLines = readAllLines;
    function readLinesChunkChecked(state, count, tokens) {
        let read = 0;
        for (let i = 0; i < count; i++) {
            if (!markLine(state))
                return read;
            TokenBuilder.add(tokens, state.tokenStart, state.tokenEnd);
            read++;
        }
        return read;
    }
    async function readAllLinesAsync(data, ctx, chunkSize = 100000) {
        const state = Tokenizer(data);
        const tokens = TokenBuilder.create(state.data, Math.max(data.length / 80, 2));
        await chunkedSubtask(ctx, chunkSize, state, (chunkSize, state) => {
            readLinesChunkChecked(state, chunkSize, tokens);
            return state.position < state.length ? chunkSize : 0;
        }, (ctx, state) => ctx.update({ message: 'Parsing...', current: state.position, max: state.length }));
        return tokens;
    }
    Tokenizer.readAllLinesAsync = readAllLinesAsync;
    /**
     * Eat everything until a whitespace/newline occurs.
     */
    function eatValue(state) {
        while (state.position < state.length) {
            switch (state.data.charCodeAt(state.position)) {
                case 9: // \t
                case 10: // \n
                case 13: // \r
                case 32: // ' '
                    state.tokenEnd = state.position;
                    return;
                default:
                    ++state.position;
                    break;
            }
        }
        state.tokenEnd = state.position;
    }
    Tokenizer.eatValue = eatValue;
    /**
     * Skips all the whitespace - space, tab, newline, CR
     * Handles incrementing line count.
     */
    function skipWhitespace(state) {
        let prev = -1;
        while (state.position < state.length) {
            const c = state.data.charCodeAt(state.position);
            switch (c) {
                case 9: // '\t'
                case 32: // ' '
                    prev = c;
                    ++state.position;
                    break;
                case 10: // \n
                    // handle \r\n
                    if (prev !== 13) {
                        ++state.lineNumber;
                    }
                    prev = c;
                    ++state.position;
                    break;
                case 13: // \r
                    prev = c;
                    ++state.position;
                    ++state.lineNumber;
                    break;
                default:
                    return prev;
            }
        }
        return prev;
    }
    Tokenizer.skipWhitespace = skipWhitespace;
    /** Trims spaces and tabs */
    function trim(state, start, end) {
        const { data } = state;
        let s = start, e = end - 1;
        let c = data.charCodeAt(s);
        while ((c === 9 || c === 32) && s <= e)
            c = data.charCodeAt(++s);
        c = data.charCodeAt(e);
        while ((c === 9 || c === 32) && e >= s)
            c = data.charCodeAt(--e);
        state.tokenStart = s;
        state.tokenEnd = e + 1;
        state.position = end;
        return state;
    }
    Tokenizer.trim = trim;
})(Tokenizer || (Tokenizer = {}));
var TokenBuilder;
(function (TokenBuilder) {
    function resize(builder) {
        // scale the size using golden ratio, because why not.
        const newBuffer = new Uint32Array((1.61 * builder.indices.length) | 0);
        newBuffer.set(builder.indices);
        builder.indices = newBuffer;
        builder.indicesLenMinus2 = (newBuffer.length - 2) | 0;
    }
    function add(tokens, start, end) {
        const builder = tokens;
        if (builder.offset > builder.indicesLenMinus2) {
            resize(builder);
        }
        builder.indices[builder.offset++] = start;
        builder.indices[builder.offset++] = end;
        tokens.count++;
    }
    TokenBuilder.add = add;
    function addToken(tokens, tokenizer) {
        add(tokens, tokenizer.tokenStart, tokenizer.tokenEnd);
    }
    TokenBuilder.addToken = addToken;
    function addUnchecked(tokens, start, end) {
        tokens.indices[tokens.offset++] = start;
        tokens.indices[tokens.offset++] = end;
        tokens.count++;
    }
    TokenBuilder.addUnchecked = addUnchecked;
    function create(data, size) {
        size = Math.max(10, size);
        return {
            data,
            indicesLenMinus2: (size - 2) | 0,
            count: 0,
            offset: 0,
            indices: new Uint32Array(size)
        };
    }
    TokenBuilder.create = create;
})(TokenBuilder || (TokenBuilder = {}));

/*
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * from https://github.com/dsehnal/CIFTools.js
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var ReaderResult;
(function (ReaderResult) {
    function error(message, line = -1) {
        return new Error(message, line);
    }
    ReaderResult.error = error;
    function success(result, warnings = []) {
        return new Success(result, warnings);
    }
    ReaderResult.success = success;
    class Error {
        toString() {
            if (this.line >= 0) {
                return `[Line ${this.line}] ${this.message}`;
            }
            return this.message;
        }
        constructor(message, line) {
            this.message = message;
            this.line = line;
            this.isError = true;
        }
    }
    ReaderResult.Error = Error;
    class Success {
        constructor(result, warnings) {
            this.result = result;
            this.warnings = warnings;
            this.isError = false;
        }
    }
    ReaderResult.Success = Success;
})(ReaderResult || (ReaderResult = {}));

/**
 * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/**
 * Eat everything until a whitespace/newline occurs.
 */
function eatValue(state) {
    while (state.position < state.length) {
        switch (state.data.charCodeAt(state.position)) {
            case 9: // \t
            case 10: // \n
            case 13: // \r
            case 32: // ' '
                state.tokenEnd = state.position;
                return;
            default:
                ++state.position;
                break;
        }
    }
    state.tokenEnd = state.position;
}
/**
 * Eats an escaped value. Handles the "degenerate" cases as well.
 *
 * "Degenerate" cases:
 * - 'xx'x' => xx'x
 * - 'xxxNEWLINE => 'xxx
 *
 */
function eatEscaped(state, esc) {
    let next, c;
    ++state.position;
    while (state.position < state.length) {
        c = state.data.charCodeAt(state.position);
        if (c === esc) {
            next = state.data.charCodeAt(state.position + 1);
            switch (next) {
                case 9: // \t
                case 10: // \n
                case 13: // \r
                case 32: // ' '
                    // get rid of the quotes.
                    state.tokenStart++;
                    state.tokenEnd = state.position;
                    state.isEscaped = true;
                    ++state.position;
                    return;
                default:
                    if (next === void 0) { // = "end of stream"
                        // get rid of the quotes.
                        state.tokenStart++;
                        state.tokenEnd = state.position;
                        state.isEscaped = true;
                        ++state.position;
                        return;
                    }
                    ++state.position;
                    break;
            }
        }
        else {
            // handle 'xxxNEWLINE => 'xxx
            if (c === 10 || c === 13) {
                state.tokenEnd = state.position;
                return;
            }
            ++state.position;
        }
    }
    state.tokenEnd = state.position;
}
/**
 * Eats an escaped value "triple quote" (''') value.
 */
function eatTripleQuote(state) {
    // skip the '''
    state.position += 3;
    while (state.position < state.length) {
        if (state.data.charCodeAt(state.position) === 39 /* ' */ && isTripleQuoteAtPosition(state)) {
            // get rid of the quotes.
            state.tokenStart += 3;
            state.tokenEnd = state.position;
            state.isEscaped = true;
            state.position += 3;
            return;
        }
        ++state.position;
    }
    state.tokenEnd = state.position;
}
/**
 * Eats a multiline token of the form NL;....NL;
 */
function eatMultiline(state) {
    let prev = 59, pos = state.position + 1, c;
    while (pos < state.length) {
        c = state.data.charCodeAt(pos);
        if (c === 59 && (prev === 10 || prev === 13)) { // ;, \n \r
            state.position = pos + 1;
            // get rid of the ;
            state.tokenStart++;
            // remove trailing newlines
            pos--;
            c = state.data.charCodeAt(pos);
            while (c === 10 || c === 13) {
                pos--;
                c = state.data.charCodeAt(pos);
            }
            state.tokenEnd = pos + 1;
            state.isEscaped = true;
            return;
        }
        else {
            // handle line numbers
            if (c === 13) { // \r
                state.lineNumber++;
            }
            else if (c === 10 && prev !== 13) { // \r\n
                state.lineNumber++;
            }
            prev = c;
            ++pos;
        }
    }
    state.position = pos;
    return prev;
}
function eatImportGet(state) {
    // _import.get [{'save':orient_matrix  'file':templ_attr.cif}]
    // skipWhitespace(state)
    while (state.position < state.length) {
        switch (state.data.charCodeAt(state.position)) {
            case 93: // ]
                ++state.position;
                state.tokenEnd = state.position;
                state.isImportGet = false;
                return;
            default:
                ++state.position;
                break;
        }
    }
}
/**
 * Skips until \n or \r occurs -- therefore the newlines get handled by the "skipWhitespace" function.
 */
function skipCommentLine(state) {
    while (state.position < state.length) {
        const c = state.data.charCodeAt(state.position);
        if (c === 10 || c === 13) {
            return;
        }
        ++state.position;
    }
}
/**
 * Skips all the whitespace - space, tab, newline, CR
 * Handles incrementing line count.
 */
function skipWhitespace(state) {
    let prev = 10;
    while (state.position < state.length) {
        const c = state.data.charCodeAt(state.position);
        switch (c) {
            case 9: // '\t'
            case 32: // ' '
                prev = c;
                ++state.position;
                break;
            case 10: // \n
                // handle \r\n
                if (prev !== 13) {
                    ++state.lineNumber;
                }
                prev = c;
                ++state.position;
                break;
            case 13: // \r
                prev = c;
                ++state.position;
                ++state.lineNumber;
                break;
            default:
                return prev;
        }
    }
    return prev;
}
/**
 * Returns true if there are two consecutive ' in +1 and +2 positions.
 */
function isTripleQuoteAtPosition(state) {
    if (state.length - state.position < 2)
        return false;
    if (state.data.charCodeAt(state.position + 1) !== 39)
        return false; // '
    if (state.data.charCodeAt(state.position + 2) !== 39)
        return false; // '
    return true;
}
function isData(state) {
    // here we already assume the 5th char is _ and that the length >= 5
    // d/D
    let c = state.data.charCodeAt(state.tokenStart);
    if (c !== 68 && c !== 100)
        return false;
    // a/A
    c = state.data.charCodeAt(state.tokenStart + 1);
    if (c !== 65 && c !== 97)
        return false;
    // t/t
    c = state.data.charCodeAt(state.tokenStart + 2);
    if (c !== 84 && c !== 116)
        return false;
    // a/A
    c = state.data.charCodeAt(state.tokenStart + 3);
    if (c !== 65 && c !== 97)
        return false;
    return true;
}
function isSave(state) {
    // here we already assume the 5th char is _ and that the length >= 5
    // s/S
    let c = state.data.charCodeAt(state.tokenStart);
    if (c !== 83 && c !== 115)
        return false;
    // a/A
    c = state.data.charCodeAt(state.tokenStart + 1);
    if (c !== 65 && c !== 97)
        return false;
    // v/V
    c = state.data.charCodeAt(state.tokenStart + 2);
    if (c !== 86 && c !== 118)
        return false;
    // e/E
    c = state.data.charCodeAt(state.tokenStart + 3);
    if (c !== 69 && c !== 101)
        return false;
    return true;
}
function isLoop(state) {
    // here we already assume the 5th char is _ and that the length >= 5
    if (state.tokenEnd - state.tokenStart !== 5)
        return false;
    // l/L
    let c = state.data.charCodeAt(state.tokenStart);
    if (c !== 76 && c !== 108)
        return false;
    // o/O
    c = state.data.charCodeAt(state.tokenStart + 1);
    if (c !== 79 && c !== 111)
        return false;
    // o/O
    c = state.data.charCodeAt(state.tokenStart + 2);
    if (c !== 79 && c !== 111)
        return false;
    // p/P
    c = state.data.charCodeAt(state.tokenStart + 3);
    if (c !== 80 && c !== 112)
        return false;
    return true;
}
function isImportGet(state) {
    // _import.get [{'save':orient_matrix  'file':templ_attr.cif}]
    if (state.tokenEnd - state.tokenStart !== 11)
        return false;
    if (state.data.charCodeAt(state.tokenStart + 1) !== 105)
        return false; // i
    if (state.data.charCodeAt(state.tokenStart + 2) !== 109)
        return false; // m
    if (state.data.charCodeAt(state.tokenStart + 3) !== 112)
        return false; // p
    if (state.data.charCodeAt(state.tokenStart + 4) !== 111)
        return false; // o
    if (state.data.charCodeAt(state.tokenStart + 5) !== 114)
        return false; // r
    if (state.data.charCodeAt(state.tokenStart + 6) !== 116)
        return false; // t
    if (state.data.charCodeAt(state.tokenStart + 7) !== 46)
        return false; // .
    if (state.data.charCodeAt(state.tokenStart + 8) !== 103)
        return false; // g
    if (state.data.charCodeAt(state.tokenStart + 9) !== 101)
        return false; // e
    if (state.data.charCodeAt(state.tokenStart + 10) !== 116)
        return false; // t
    return true;
}
/**
 * Checks if the current token shares the namespace with string at <start,end).
 */
function isNamespace(state, start, end) {
    let i;
    const nsLen = end - start;
    const offset = state.tokenStart - start;
    const tokenLen = state.tokenEnd - state.tokenStart;
    if (tokenLen < nsLen)
        return false;
    for (i = start; i < end; ++i) {
        if (state.data.charCodeAt(i) !== state.data.charCodeAt(i + offset))
            return false;
    }
    if (nsLen === tokenLen)
        return true;
    if (state.data.charCodeAt(i + offset) === 46) { // .
        return true;
    }
    return false;
}
/**
 * Returns the index of '.' in the current token. If no '.' is present, returns currentTokenEnd.
 */
function getNamespaceEnd(state) {
    let i;
    for (i = state.tokenStart; i < state.tokenEnd; ++i) {
        if (state.data.charCodeAt(i) === 46)
            return i;
    }
    return i;
}
/**
 * Get the namespace string. endIndex is obtained by the getNamespaceEnd() function.
 */
function getNamespace(state, endIndex) {
    return state.data.substring(state.tokenStart, endIndex);
}
/**
 * Returns true if the current token contain no '.', otherwise returns false.
 */
function isFlatNamespace(state) {
    let i;
    for (i = state.tokenStart; i < state.tokenEnd; ++i) {
        if (state.data.charCodeAt(i) === 46)
            return false;
    }
    return true;
}
/**
 * String representation of the current token.
 */
function getTokenString(state) {
    return state.data.substring(state.tokenStart, state.tokenEnd);
}
/**
 * Move to the next token.
 */
function moveNextInternal(state) {
    const prev = skipWhitespace(state);
    if (state.position >= state.length) {
        state.tokenType = 6 /* CifTokenType.End */;
        return;
    }
    state.tokenStart = state.position;
    state.tokenEnd = state.position;
    state.isEscaped = false;
    const c = state.data.charCodeAt(state.position);
    switch (c) {
        case 35: // #, comment
            skipCommentLine(state);
            state.tokenType = 5 /* CifTokenType.Comment */;
            break;
        case 39: // ', escaped value
            if (isTripleQuoteAtPosition(state)) {
                eatTripleQuote(state);
                state.tokenType = 3 /* CifTokenType.Value */;
                break;
            }
        case 34: // ", escaped value
            eatEscaped(state, c);
            state.tokenType = 3 /* CifTokenType.Value */;
            break;
        case 59: // ;, possible multiline value
            // multiline value must start at the beginning of the line.
            if (prev === 10 || prev === 13) { // /n or /r
                eatMultiline(state);
            }
            else {
                eatValue(state);
            }
            state.tokenType = 3 /* CifTokenType.Value */;
            break;
        default:
            if (state.isImportGet) {
                eatImportGet(state);
            }
            else {
                eatValue(state);
            }
            // escaped is always Value
            if (state.isEscaped) {
                state.tokenType = 3 /* CifTokenType.Value */;
                // _ means column name, including _import.get
            }
            else if (state.data.charCodeAt(state.tokenStart) === 95) { // _
                if (state.inSaveFrame && isImportGet(state)) {
                    state.isImportGet = true;
                }
                state.tokenType = 4 /* CifTokenType.ColumnName */;
                // 5th char needs to be _ for data_, save_ or loop_
            }
            else if (state.tokenEnd - state.tokenStart >= 5 && state.data.charCodeAt(state.tokenStart + 4) === 95) {
                if (isData(state))
                    state.tokenType = 0 /* CifTokenType.Data */;
                else if (isSave(state))
                    state.tokenType = 1 /* CifTokenType.Save */;
                else if (isLoop(state))
                    state.tokenType = 2 /* CifTokenType.Loop */;
                else
                    state.tokenType = 3 /* CifTokenType.Value */;
                // all other tests failed, we are at Value token.
            }
            else {
                state.tokenType = 3 /* CifTokenType.Value */;
            }
            break;
    }
}
/**
 * Moves to the next non-comment token.
 */
function moveNext(state) {
    moveNextInternal(state);
    while (state.tokenType === 5 /* CifTokenType.Comment */)
        moveNextInternal(state);
}
function createTokenizer(data, runtimeCtx) {
    return {
        data,
        length: data.length,
        position: 0,
        tokenStart: 0,
        tokenEnd: 0,
        tokenType: 6 /* CifTokenType.End */,
        lineNumber: 1,
        isEscaped: false,
        isImportGet: false,
        inSaveFrame: false,
        runtimeCtx
    };
}
function FrameContext() {
    return { categoryNames: [], categoryData: Object.create(null) };
}
function CifCategories(categoryNames, categoryData) {
    const categories = Object.create(null);
    for (const name of categoryNames) {
        const d = categoryData[name];
        categories[name] = CifCategory(d.name, d.rowCount, d.fieldNames, d.fields);
    }
    return categories;
}
function CifBlock(ctx, header, saveFrames) {
    return CifBlock$1(ctx.categoryNames, CifCategories(ctx.categoryNames, ctx.categoryData), header, saveFrames);
}
function CifSaveFrame(ctx, header) {
    return CifBlock$1(ctx.categoryNames, CifCategories(ctx.categoryNames, ctx.categoryData), header);
}
function addFields(ctx, name, rowCount, fieldNames, fields) {
    if (name in ctx.categoryData) {
        const cat = ctx.categoryData[name];
        cat.fieldNames.push(...fieldNames);
        Object.assign(cat.fields, fields);
    }
    else {
        ctx.categoryData[name] = { name, rowCount, fieldNames, fields };
        ctx.categoryNames.push(name);
    }
}
/**
 * Reads a category containing a single row.
 */
function handleSingle(tokenizer, ctx) {
    const nsStart = tokenizer.tokenStart, nsEnd = getNamespaceEnd(tokenizer);
    const name = getNamespace(tokenizer, nsEnd);
    const fields = Object.create(null);
    const fieldNames = [];
    let readingNames = true;
    while (readingNames) {
        if (tokenizer.tokenType !== 4 /* CifTokenType.ColumnName */ || !isNamespace(tokenizer, nsStart, nsEnd)) {
            readingNames = false;
            break;
        }
        const fieldName = getTokenString(tokenizer).substring(name.length + 1);
        moveNext(tokenizer);
        if (tokenizer.tokenType !== 3 /* CifTokenType.Value */) {
            return {
                hasError: true,
                errorLine: tokenizer.lineNumber,
                errorMessage: 'Expected value.'
            };
        }
        fields[fieldName] = CifField.ofTokens({ data: tokenizer.data, indices: [tokenizer.tokenStart, tokenizer.tokenEnd], count: 1 });
        fieldNames[fieldNames.length] = fieldName;
        moveNext(tokenizer);
    }
    addFields(ctx, name.substr(1), 1, fieldNames, fields);
    return {
        hasError: false,
        errorLine: 0,
        errorMessage: ''
    };
}
function readLoopChunk(chunkSize, state) {
    const { tokenizer, tokens, fieldCount } = state;
    let tokenCount = state.tokenCount;
    let counter = 0;
    while (tokenizer.tokenType === 3 /* CifTokenType.Value */ && counter < chunkSize) {
        TokenBuilder.add(tokens[(tokenCount++) % fieldCount], tokenizer.tokenStart, tokenizer.tokenEnd);
        moveNext(tokenizer);
        counter++;
    }
    state.tokenCount = tokenCount;
    return counter;
}
function updateLoopChunk(ctx, state) {
    return ctx.update({ message: 'Parsing...', current: state.tokenizer.position, max: state.tokenizer.data.length });
}
// const readLoopChunks = ChunkedSubtask(1000000,
//     (size, state: LoopReadState) => readLoopChunk(state, size),
//     (ctx, state) => ctx.update({ message: 'Parsing...', current: state.tokenizer.position, max: state.tokenizer.data.length }));
/**
 * Reads a loop.
 */
async function handleLoop(tokenizer, ctx) {
    const loopLine = tokenizer.lineNumber;
    moveNext(tokenizer);
    const name = getNamespace(tokenizer, getNamespaceEnd(tokenizer));
    const isFlat = isFlatNamespace(tokenizer);
    const fieldNames = [];
    while (tokenizer.tokenType === 4 /* CifTokenType.ColumnName */) {
        fieldNames[fieldNames.length] = isFlat
            ? getTokenString(tokenizer)
            : getTokenString(tokenizer).substring(name.length + 1);
        moveNext(tokenizer);
    }
    const rowCountEstimate = name === '_atom_site' ? (tokenizer.data.length / 100) | 0 : 32;
    const tokens = [];
    const fieldCount = fieldNames.length;
    for (let i = 0; i < fieldCount; i++)
        tokens[i] = TokenBuilder.create(tokenizer.data, rowCountEstimate);
    const state = {
        fieldCount,
        tokenCount: 0,
        tokenizer,
        tokens
    };
    await chunkedSubtask(tokenizer.runtimeCtx, 1000000, state, readLoopChunk, updateLoopChunk);
    if (state.tokenCount % fieldCount !== 0) {
        return {
            hasError: true,
            errorLine: tokenizer.lineNumber,
            errorMessage: `The number of values for loop starting at line ${loopLine} is not a multiple of the number of columns.`
        };
    }
    const rowCount = (state.tokenCount / fieldCount) | 0;
    if (isFlat) {
        for (let i = 0; i < fieldCount; i++) {
            const fields = { '': CifField.ofTokens(tokens[i]) };
            addFields(ctx, fieldNames[i].substr(1), rowCount, [''], fields);
        }
    }
    else {
        const fields = Object.create(null);
        for (let i = 0; i < fieldCount; i++) {
            fields[fieldNames[i]] = CifField.ofTokens(tokens[i]);
        }
        addFields(ctx, name.substr(1), rowCount, fieldNames, fields);
    }
    return {
        hasError: false,
        errorLine: 0,
        errorMessage: ''
    };
}
/**
 * Creates an error result.
 */
function error(line, message) {
    return ReaderResult.error(message, line);
}
/**
 * Creates a data result.
 */
function result(data) {
    return ReaderResult.success(data);
}
/**
 * Parses an mmCIF file.
 *
 * @returns CifParserResult wrapper of the result.
 */
async function parseInternal(data, runtimeCtx) {
    const dataBlocks = [];
    const tokenizer = createTokenizer(data, runtimeCtx);
    let blockHeader = '';
    let blockCtx = FrameContext();
    // the next three initial values are never used in valid files
    let saveFrames = [];
    let saveCtx = FrameContext();
    const saveFrame = CifSaveFrame$1(saveCtx.categoryNames, CifCategories(saveCtx.categoryNames, saveCtx.categoryData), '');
    let saveHeader = '';
    runtimeCtx.update({ message: 'Parsing...', current: 0, max: data.length });
    moveNext(tokenizer);
    while (tokenizer.tokenType !== 6 /* CifTokenType.End */) {
        const token = tokenizer.tokenType;
        // Data block
        if (token === 0 /* CifTokenType.Data */) {
            if (tokenizer.inSaveFrame) {
                return error(tokenizer.lineNumber, 'Unexpected data block inside a save frame.');
            }
            if (blockCtx.categoryNames.length > 0) {
                dataBlocks.push(CifBlock(blockCtx, blockHeader, saveFrames));
            }
            blockHeader = data.substring(tokenizer.tokenStart + 5, tokenizer.tokenEnd);
            blockCtx = FrameContext();
            saveFrames = [];
            moveNext(tokenizer);
            // Save frame
        }
        else if (token === 1 /* CifTokenType.Save */) {
            if (tokenizer.tokenEnd - tokenizer.tokenStart === 5) { // end of save frame
                if (saveCtx.categoryNames.length > 0) {
                    saveFrames[saveFrames.length] = CifSaveFrame(saveCtx, saveHeader);
                }
                tokenizer.inSaveFrame = false;
            }
            else { // start of save frame
                if (tokenizer.inSaveFrame) {
                    return error(tokenizer.lineNumber, 'Save frames cannot be nested.');
                }
                tokenizer.inSaveFrame = true;
                saveHeader = data.substring(tokenizer.tokenStart + 5, tokenizer.tokenEnd);
                saveCtx = FrameContext();
                // saveFrame = CifSaveFrame(saveCtx, saveHeader);
            }
            moveNext(tokenizer);
            // Loop
        }
        else if (token === 2 /* CifTokenType.Loop */) {
            const cat = await handleLoop(tokenizer, tokenizer.inSaveFrame ? saveCtx : blockCtx);
            if (cat.hasError) {
                return error(cat.errorLine, cat.errorMessage);
            }
            // Single row
        }
        else if (token === 4 /* CifTokenType.ColumnName */) {
            const cat = handleSingle(tokenizer, tokenizer.inSaveFrame ? saveCtx : blockCtx);
            if (cat.hasError) {
                return error(cat.errorLine, cat.errorMessage);
            }
            // Out of options
        }
        else {
            console.log(tokenizer.tokenType, Tokenizer.getTokenString(tokenizer));
            return error(tokenizer.lineNumber, 'Unexpected token. Expected data_, loop_, or data name.');
        }
    }
    // Check if the latest save frame was closed.
    if (tokenizer.inSaveFrame) {
        return error(tokenizer.lineNumber, `Unfinished save frame (${saveFrame.header}).`);
    }
    if (blockCtx.categoryNames.length > 0 || saveFrames.length > 0) {
        dataBlocks.push(CifBlock(blockCtx, blockHeader, saveFrames));
    }
    return result(CifFile(dataBlocks));
}
function parseCifText(data) {
    return Task.create('Parse CIF', async (ctx) => {
        return await parseInternal(data, ctx);
    });
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * From CIFTools.js
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var Encoding;
(function (Encoding) {
    (function (IntDataType) {
        IntDataType[IntDataType["Int8"] = 1] = "Int8";
        IntDataType[IntDataType["Int16"] = 2] = "Int16";
        IntDataType[IntDataType["Int32"] = 3] = "Int32";
        IntDataType[IntDataType["Uint8"] = 4] = "Uint8";
        IntDataType[IntDataType["Uint16"] = 5] = "Uint16";
        IntDataType[IntDataType["Uint32"] = 6] = "Uint32";
    })(Encoding.IntDataType || (Encoding.IntDataType = {}));
    (function (FloatDataType) {
        FloatDataType[FloatDataType["Float32"] = 32] = "Float32";
        FloatDataType[FloatDataType["Float64"] = 33] = "Float64";
    })(Encoding.FloatDataType || (Encoding.FloatDataType = {}));
    function getDataType(data) {
        let srcType;
        if (data instanceof Int8Array)
            srcType = Encoding.IntDataType.Int8;
        else if (data instanceof Int16Array)
            srcType = Encoding.IntDataType.Int16;
        else if (data instanceof Int32Array)
            srcType = Encoding.IntDataType.Int32;
        else if (data instanceof Uint8Array)
            srcType = Encoding.IntDataType.Uint8;
        else if (data instanceof Uint16Array)
            srcType = Encoding.IntDataType.Uint16;
        else if (data instanceof Uint32Array)
            srcType = Encoding.IntDataType.Uint32;
        else if (data instanceof Float32Array)
            srcType = Encoding.FloatDataType.Float32;
        else if (data instanceof Float64Array)
            srcType = Encoding.FloatDataType.Float64;
        else
            srcType = Encoding.IntDataType.Int32; // throw new Error('Unsupported integer data type.');
        return srcType;
    }
    Encoding.getDataType = getDataType;
    function isSignedIntegerDataType(data) {
        if (data instanceof Int8Array || data instanceof Int16Array || data instanceof Int32Array)
            return true;
        for (let i = 0, _i = data.length; i < _i; i++) {
            if (i < 0)
                return false;
        }
        return true;
    }
    Encoding.isSignedIntegerDataType = isSignedIntegerDataType;
})(Encoding || (Encoding = {}));

/**
 * Copyright (c) 2017-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author David Sehnal <david.sehnal@gmail.com>
 */
const IsNativeEndianLittle = new Uint16Array(new Uint8Array([0x12, 0x34]).buffer)[0] === 0x3412;
function flipByteOrder(data, bytes) {
    const buffer = new ArrayBuffer(data.length);
    const ret = new Uint8Array(buffer);
    for (let i = 0, n = data.length; i < n; i += bytes) {
        for (let j = 0; j < bytes; j++) {
            ret[i + bytes - j - 1] = data[i + j];
        }
    }
    return buffer;
}

/**
 * Copyright (c) 2017-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * From CIFTools.js
 * @author David Sehnal <david.sehnal@gmail.com>
 */
/**
 * Fixed point, delta, RLE, integer packing adopted from https://github.com/rcsb/mmtf-javascript/
 * by Alexander Rose <alexander.rose@weirdbyte.de>, MIT License, Copyright (c) 2016
 */
function decode(data) {
    let current = data.data;
    for (let i = data.encoding.length - 1; i >= 0; i--) {
        current = decodeStep(current, data.encoding[i]);
    }
    return current;
}
function decodeStep(data, encoding) {
    switch (encoding.kind) {
        case 'ByteArray': {
            switch (encoding.type) {
                case Encoding.IntDataType.Uint8: return data;
                case Encoding.IntDataType.Int8: return int8(data);
                case Encoding.IntDataType.Int16: return int16(data);
                case Encoding.IntDataType.Uint16: return uint16(data);
                case Encoding.IntDataType.Int32: return int32(data);
                case Encoding.IntDataType.Uint32: return uint32(data);
                case Encoding.FloatDataType.Float32: return float32(data);
                case Encoding.FloatDataType.Float64: return float64(data);
                default: assertUnreachable(encoding.type);
            }
        }
        case 'FixedPoint': return fixedPoint(data, encoding);
        case 'IntervalQuantization': return intervalQuantization(data, encoding);
        case 'RunLength': return runLength(data, encoding);
        case 'Delta': return delta(data, encoding);
        case 'IntegerPacking': return integerPacking(data, encoding);
        case 'StringArray': return stringArray(data, encoding);
    }
}
function getIntArray(type, size) {
    switch (type) {
        case Encoding.IntDataType.Int8: return new Int8Array(size);
        case Encoding.IntDataType.Int16: return new Int16Array(size);
        case Encoding.IntDataType.Int32: return new Int32Array(size);
        case Encoding.IntDataType.Uint8: return new Uint8Array(size);
        case Encoding.IntDataType.Uint16: return new Uint16Array(size);
        case Encoding.IntDataType.Uint32: return new Uint32Array(size);
        default: return new Int32Array(size);
    }
}
function getFloatArray(type, size) {
    switch (type) {
        case Encoding.FloatDataType.Float32: return new Float32Array(size);
        case Encoding.FloatDataType.Float64: return new Float64Array(size);
        default: return new Float64Array(size);
    }
}
function int8(data) { return new Int8Array(data.buffer, data.byteOffset); }
function view(data, byteSize, c) {
    if (IsNativeEndianLittle)
        return new c(data.buffer);
    return new c(flipByteOrder(data, byteSize));
}
function int16(data) { return view(data, 2, Int16Array); }
function uint16(data) { return view(data, 2, Uint16Array); }
function int32(data) { return view(data, 4, Int32Array); }
function uint32(data) { return view(data, 4, Uint32Array); }
function float32(data) { return view(data, 4, Float32Array); }
function float64(data) { return view(data, 8, Float64Array); }
function fixedPoint(data, encoding) {
    const n = data.length;
    const output = getFloatArray(encoding.srcType, n);
    const f = 1 / encoding.factor;
    for (let i = 0; i < n; i++) {
        output[i] = f * data[i];
    }
    return output;
}
function intervalQuantization(data, encoding) {
    const n = data.length;
    const output = getFloatArray(encoding.srcType, n);
    const delta = (encoding.max - encoding.min) / (encoding.numSteps - 1);
    const min = encoding.min;
    for (let i = 0; i < n; i++) {
        output[i] = min + delta * data[i];
    }
    return output;
}
function runLength(data, encoding) {
    const output = getIntArray(encoding.srcType, encoding.srcSize);
    let dataOffset = 0;
    for (let i = 0, il = data.length; i < il; i += 2) {
        const value = data[i]; // value to be repeated
        const length = data[i + 1]; // number of repeats
        for (let j = 0; j < length; ++j) {
            output[dataOffset++] = value;
        }
    }
    return output;
}
function delta(data, encoding) {
    const n = data.length;
    const output = getIntArray(encoding.srcType, n);
    if (!n)
        return data;
    output[0] = data[0] + (encoding.origin | 0);
    for (let i = 1; i < n; ++i) {
        output[i] = data[i] + output[i - 1];
    }
    return output;
}
function integerPackingSigned(data, encoding) {
    const upperLimit = encoding.byteCount === 1 ? 0x7F : 0x7FFF;
    const lowerLimit = -upperLimit - 1;
    const n = data.length;
    const output = new Int32Array(encoding.srcSize);
    let i = 0;
    let j = 0;
    while (i < n) {
        let value = 0, t = data[i];
        while (t === upperLimit || t === lowerLimit) {
            value += t;
            i++;
            t = data[i];
        }
        value += t;
        output[j] = value;
        i++;
        j++;
    }
    return output;
}
function integerPackingUnsigned(data, encoding) {
    const upperLimit = encoding.byteCount === 1 ? 0xFF : 0xFFFF;
    const n = data.length;
    const output = new Int32Array(encoding.srcSize);
    let i = 0;
    let j = 0;
    while (i < n) {
        let value = 0, t = data[i];
        while (t === upperLimit) {
            value += t;
            i++;
            t = data[i];
        }
        value += t;
        output[j] = value;
        i++;
        j++;
    }
    return output;
}
function integerPacking(data, encoding) {
    if (data.length === encoding.srcSize)
        return data;
    return encoding.isUnsigned ? integerPackingUnsigned(data, encoding) : integerPackingSigned(data, encoding);
}
function stringArray(data, encoding) {
    const offsets = decode({ encoding: encoding.offsetEncoding, data: encoding.offsets });
    const indices = decode({ encoding: encoding.dataEncoding, data });
    const str = encoding.stringData;
    const strings = new Array(offsets.length);
    strings[0] = '';
    for (let i = 1, _i = offsets.length; i < _i; i++) {
        strings[i] = str.substring(offsets[i - 1], offsets[i]);
    }
    let offset = 0;
    const result = new Array(indices.length);
    for (let i = 0, _i = indices.length; i < _i; i++) {
        result[offset++] = strings[indices[i] + 1];
    }
    return result;
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * from https://github.com/dsehnal/CIFTools.js
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var ChunkedArray;
(function (ChunkedArray) {
    function is(x) {
        return x.creator && x.chunkSize;
    }
    ChunkedArray.is = is;
    function allocateNext(array) {
        const nextSize = array.growBy * array.elementSize;
        array.currentSize = nextSize;
        array.currentIndex = 0;
        array.currentChunk = new array.ctor(nextSize);
        array.allocatedSize += nextSize;
        array.chunks[array.chunks.length] = array.currentChunk;
    }
    function add4(array, x, y, z, w) {
        if (array.currentIndex >= array.currentSize)
            allocateNext(array);
        const c = array.currentChunk;
        const i = array.currentIndex;
        c[i] = x;
        c[i + 1] = y;
        c[i + 2] = z;
        c[i + 3] = w;
        array.currentIndex += 4;
        return array.elementCount++;
    }
    ChunkedArray.add4 = add4;
    function add3(array, x, y, z) {
        if (array.currentIndex >= array.currentSize)
            allocateNext(array);
        const c = array.currentChunk;
        const i = array.currentIndex;
        c[i] = x;
        c[i + 1] = y;
        c[i + 2] = z;
        array.currentIndex += 3;
        return array.elementCount++;
    }
    ChunkedArray.add3 = add3;
    function add2(array, x, y) {
        if (array.currentIndex >= array.currentSize)
            allocateNext(array);
        const c = array.currentChunk;
        const i = array.currentIndex;
        c[i] = x;
        c[i + 1] = y;
        array.currentIndex += 2;
        return array.elementCount++;
    }
    ChunkedArray.add2 = add2;
    function add(array, x) {
        if (array.currentIndex >= array.currentSize)
            allocateNext(array);
        array.currentChunk[array.currentIndex] = x;
        array.currentIndex += 1;
        return array.elementCount++;
    }
    ChunkedArray.add = add;
    function addRepeat(array, n, x) {
        for (let i = 0; i < n; i++) {
            if (array.currentIndex >= array.currentSize)
                allocateNext(array);
            array.currentChunk[array.currentIndex++] = x;
            array.elementCount++;
        }
        return array.elementCount;
    }
    ChunkedArray.addRepeat = addRepeat;
    function addMany(array, data) {
        const { elementSize } = array;
        for (let i = 0, _i = data.length; i < _i; i += elementSize) {
            if (array.currentIndex >= array.currentSize)
                allocateNext(array);
            const { currentChunk } = array;
            for (let j = 0; j < elementSize; j++) {
                currentChunk[array.currentIndex++] = data[i + j];
            }
            array.elementCount++;
        }
        return array.elementCount;
    }
    ChunkedArray.addMany = addMany;
    /** If doNotResizeSingleton = true and the data fit into a single chunk, do not resize it. */
    function compact(array, doNotResizeSingleton = false) {
        return _compact(array, doNotResizeSingleton);
    }
    ChunkedArray.compact = compact;
    function _compact(array, doNotResizeSingleton) {
        const { ctor, chunks, currentIndex } = array;
        if (!chunks.length)
            return new ctor(0);
        if (chunks.length === 1) {
            if (doNotResizeSingleton || currentIndex === array.allocatedSize) {
                return chunks[0];
            }
        }
        let size = 0;
        for (let i = 0, _i = chunks.length - 1; i < _i; i++)
            size += chunks[i].length;
        size += array.currentIndex;
        const ret = new ctor(size);
        let offset = 0;
        if (ret.buffer) {
            for (let i = 0, _i = chunks.length - 1; i < _i; i++) {
                ret.set(chunks[i], offset);
                offset += chunks[i].length;
            }
        }
        else {
            for (let i = 0, _i = chunks.length - 1; i < _i; i++) {
                const chunk = chunks[i];
                for (let j = 0, _j = chunk.length; j < _j; j++)
                    ret[offset + j] = chunk[j];
                offset += chunk.length;
            }
        }
        const lastChunk = chunks[chunks.length - 1];
        if (ret.buffer && currentIndex >= array.currentSize) {
            ret.set(lastChunk, offset);
        }
        else {
            for (let j = 0, _j = lastChunk.length; j < _j; j++)
                ret[offset + j] = lastChunk[j];
        }
        return ret;
    }
    ChunkedArray._compact = _compact;
    /**
     * The size of the initial chunk is elementSize * initialCount.
     * Use the provided array as the initial chunk. The size of the array must be divisible by the elementSize.
     */
    function create(ctor, elementSize, chunkSize, initialChunkOrCount) {
        const ret = {
            ctor,
            elementSize,
            growBy: Math.max(1, Math.ceil(chunkSize)),
            allocatedSize: 0,
            elementCount: 0,
            currentSize: 0,
            currentChunk: void 0,
            currentIndex: 0,
            chunks: []
        };
        if (typeof initialChunkOrCount === 'undefined')
            return ret;
        if (typeof initialChunkOrCount === 'number') {
            ret.currentChunk = new ctor(initialChunkOrCount * elementSize);
            ret.allocatedSize = initialChunkOrCount * elementSize;
            ret.currentSize = ret.currentChunk.length;
            ret.chunks[0] = ret.currentChunk;
            return ret;
        }
        const initialChunk = initialChunkOrCount;
        if (initialChunk.length % elementSize !== 0)
            throw new Error('initialChunk length must be a multiple of the element size.');
        ret.currentChunk = initialChunk;
        ret.allocatedSize = initialChunk.length;
        ret.currentSize = initialChunk.length;
        ret.chunks[0] = initialChunk;
        return ret;
    }
    ChunkedArray.create = create;
})(ChunkedArray || (ChunkedArray = {}));

/**
 * Copyright (c) 2018-2019 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/**
 * Determine the number of digits in a floating point number
 * Find a number M such that round(M * v) - M * v <= delta.
 * If no such M exists, return -1.
 */
function getMantissaMultiplier(v, maxDigits, delta) {
    let m = 1, i;
    for (i = 0; i < maxDigits; i++) {
        const mv = m * v;
        if (Math.abs(Math.round(mv) - mv) <= delta)
            return i;
        m *= 10;
    }
    return -1;
}
/**
 * Determine the maximum number of digits in a floating point array.
 * Find a number M such that round(M * v) - M * v <= delta.
 * If no such M exists, return -1.
 */
function getArrayDigitCount(xs, maxDigits, delta) {
    let mantissaDigits = 1;
    let integerDigits = 0;
    for (let i = 0, _i = xs.length; i < _i; i++) {
        if (mantissaDigits >= 0) {
            const t = getMantissaMultiplier(xs[i], maxDigits, delta);
            if (t < 0)
                mantissaDigits = -1;
            else if (t > mantissaDigits)
                mantissaDigits = t;
        }
        const abs = Math.abs(xs[i]);
        if (abs > delta) {
            const d = Math.floor(Math.log10(Math.abs(abs))) + 1;
            if (d > integerDigits)
                integerDigits = d;
        }
    }
    return { mantissaDigits, integerDigits };
}

/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function classifyIntArray(xs) {
    return IntClassifier.classify(xs);
}
var IntClassifier;
(function (IntClassifier) {
    function packSize(value, upperLimit) {
        return value >= 0
            ? Math.ceil((value + 1) / upperLimit)
            : Math.ceil((value + 1) / (-upperLimit - 1));
    }
    function getInfo(data) {
        let signed = false;
        for (let i = 0, n = data.length; i < n; i++) {
            if (data[i] < 0) {
                signed = true;
                break;
            }
        }
        return signed ? { signed, limit8: 0x7F, limit16: 0x7FFF } : { signed, limit8: 0xFF, limit16: 0xFFFF };
    }
    function SizeInfo() { return { pack8: 0, pack16: 0, count: 0 }; }
    function incSize({ limit8, limit16 }, info, value) {
        info.pack8 += packSize(value, limit8);
        info.pack16 += packSize(value, limit16);
        info.count += 1;
    }
    function incSizeSigned(info, value) {
        info.pack8 += packSize(value, 0x7F);
        info.pack16 += packSize(value, 0x7FFF);
        info.count += 1;
    }
    function byteSize(info) {
        if (info.count * 4 < info.pack16 * 2)
            return { length: info.count * 4, elem: 4 };
        if (info.pack16 * 2 < info.pack8)
            return { length: info.pack16 * 2, elem: 2 };
        return { length: info.pack8, elem: 1 };
    }
    function packingSize(data, info) {
        const size = SizeInfo();
        for (let i = 0, n = data.length; i < n; i++) {
            incSize(info, size, data[i]);
        }
        return { ...byteSize(size), kind: 'pack' };
    }
    function deltaSize(data, info) {
        const size = SizeInfo();
        let prev = data[0];
        for (let i = 1, n = data.length; i < n; i++) {
            incSizeSigned(size, data[i] - prev);
            prev = data[i];
        }
        return { ...byteSize(size), kind: 'delta' };
    }
    function rleSize(data, info) {
        const size = SizeInfo();
        let run = 1;
        for (let i = 1, n = data.length; i < n; i++) {
            if (data[i - 1] !== data[i]) {
                incSize(info, size, data[i - 1]);
                incSize(info, size, run);
                run = 1;
            }
            else {
                run++;
            }
        }
        incSize(info, size, data[data.length - 1]);
        incSize(info, size, run);
        return { ...byteSize(size), kind: 'rle' };
    }
    function deltaRleSize(data, info) {
        const size = SizeInfo();
        let run = 1, prev = 0, prevValue = 0;
        for (let i = 1, n = data.length; i < n; i++) {
            const v = data[i] - prev;
            if (prevValue !== v) {
                incSizeSigned(size, prevValue);
                incSizeSigned(size, run);
                run = 1;
            }
            else {
                run++;
            }
            prevValue = v;
            prev = data[i];
        }
        incSizeSigned(size, prevValue);
        incSizeSigned(size, run);
        return { ...byteSize(size), kind: 'delta-rle' };
    }
    function getSize(data) {
        const info = getInfo(data);
        const sizes = [packingSize(data, info), rleSize(data, info), deltaSize(data), deltaRleSize(data)];
        sizes.sort((a, b) => a.length - b.length);
        return sizes;
    }
    IntClassifier.getSize = getSize;
    function classify(data) {
        if (data.length < 2)
            return ArrayEncoding.by(ArrayEncoding.byteArray);
        const sizes = getSize(data);
        const size = sizes[0];
        switch (size.kind) {
            case 'pack': return ArrayEncoding.by(ArrayEncoding.integerPacking);
            case 'rle': return ArrayEncoding.by(ArrayEncoding.runLength).and(ArrayEncoding.integerPacking);
            case 'delta': return ArrayEncoding.by(ArrayEncoding.delta).and(ArrayEncoding.integerPacking);
            case 'delta-rle': return ArrayEncoding.by(ArrayEncoding.delta).and(ArrayEncoding.runLength).and(ArrayEncoding.integerPacking);
            default: assertUnreachable();
        }
    }
    IntClassifier.classify = classify;
})(IntClassifier || (IntClassifier = {}));
var FloatClassifier;
(function (FloatClassifier) {
    const delta = 1e-6;
    function classify(data) {
        const maxDigits = 4;
        const { mantissaDigits, integerDigits } = getArrayDigitCount(data, maxDigits, delta);
        // TODO: better check for overflows here?
        if (mantissaDigits < 0 || mantissaDigits + integerDigits > 10)
            return ArrayEncoding.by(ArrayEncoding.byteArray);
        // TODO: this needs a conversion to Int?Array?
        if (mantissaDigits === 0)
            return IntClassifier.classify(data);
        const multiplier = getMultiplier(mantissaDigits);
        const intArray = new Int32Array(data.length);
        for (let i = 0, n = data.length; i < n; i++) {
            intArray[i] = Math.round(multiplier * data[i]);
            // TODO: enable this again?
            // const v = Math.round(multiplier * data[i]);
            // if (Math.abs(Math.round(v) / multiplier - intArray[i] / multiplier) > delta) {
            //     return E.by(E.byteArray);
            // }
        }
        const sizes = IntClassifier.getSize(intArray);
        const size = sizes[0];
        const fp = ArrayEncoding.by(ArrayEncoding.fixedPoint(multiplier));
        switch (size.kind) {
            case 'pack': return fp.and(ArrayEncoding.integerPacking);
            case 'rle': return fp.and(ArrayEncoding.runLength).and(ArrayEncoding.integerPacking);
            case 'delta': return fp.and(ArrayEncoding.delta).and(ArrayEncoding.integerPacking);
            case 'delta-rle': return fp.and(ArrayEncoding.delta).and(ArrayEncoding.runLength).and(ArrayEncoding.integerPacking);
            default: assertUnreachable();
        }
    }
    FloatClassifier.classify = classify;
    function getMultiplier(mantissaDigits) {
        let m = 1;
        for (let i = 0; i < mantissaDigits; i++)
            m *= 10;
        return m;
    }
})(FloatClassifier || (FloatClassifier = {}));

/**
 * Copyright (c) 2017-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Adapted from CIFTools.js (https://github.com/dsehnal/CIFTools.js; MIT) and MMTF (https://github.com/rcsb/mmtf-javascript/; MIT)
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
class ArrayEncoderImpl {
    and(f) {
        return new ArrayEncoderImpl(this.providers.concat([f]));
    }
    encode(data) {
        const encoding = [];
        for (const p of this.providers) {
            const t = p(data);
            if (!t.encodings.length) {
                throw new Error('Encodings must be non-empty.');
            }
            data = t.data;
            for (const e of t.encodings) {
                encoding.push(e);
            }
        }
        if (!(data instanceof Uint8Array)) {
            throw new Error('The encoding must result in a Uint8Array. Fix your encoding chain.');
        }
        return {
            encoding,
            data
        };
    }
    constructor(providers) {
        this.providers = providers;
    }
}
var ArrayEncoder;
(function (ArrayEncoder) {
    function by(f) {
        return new ArrayEncoderImpl([f]);
    }
    ArrayEncoder.by = by;
    function fromEncoding(encoding) {
        let e = by(getProvider(encoding[0]));
        for (let i = 1; i < encoding.length; i++) {
            if (encoding[i - 1].kind === 'IntegerPacking')
                break;
            e = e.and(getProvider(encoding[i]));
        }
        return e;
    }
    ArrayEncoder.fromEncoding = fromEncoding;
    function getProvider(e) {
        switch (e.kind) {
            case 'ByteArray': return ArrayEncoding.byteArray;
            case 'FixedPoint': return ArrayEncoding.fixedPoint(e.factor);
            case 'IntervalQuantization': return ArrayEncoding.intervalQuantizaiton(e.min, e.max, e.numSteps);
            case 'RunLength': return ArrayEncoding.runLength;
            case 'Delta': return ArrayEncoding.delta;
            case 'IntegerPacking': return ArrayEncoding.integerPacking;
            case 'StringArray': return ArrayEncoding.stringArray;
        }
    }
})(ArrayEncoder || (ArrayEncoder = {}));
var ArrayEncoding;
(function (ArrayEncoding) {
    function by(f) {
        return new ArrayEncoderImpl([f]);
    }
    ArrayEncoding.by = by;
    function uint8(data) {
        return {
            encodings: [{ kind: 'ByteArray', type: Encoding.IntDataType.Uint8 }],
            data
        };
    }
    function int8(data) {
        return {
            encodings: [{ kind: 'ByteArray', type: Encoding.IntDataType.Int8 }],
            data: new Uint8Array(data.buffer, data.byteOffset)
        };
    }
    const writers = {
        [Encoding.IntDataType.Int16]: function (v, i, a) { v.setInt16(2 * i, a, true); },
        [Encoding.IntDataType.Uint16]: function (v, i, a) { v.setUint16(2 * i, a, true); },
        [Encoding.IntDataType.Int32]: function (v, i, a) { v.setInt32(4 * i, a, true); },
        [Encoding.IntDataType.Uint32]: function (v, i, a) { v.setUint32(4 * i, a, true); },
        [Encoding.FloatDataType.Float32]: function (v, i, a) { v.setFloat32(4 * i, a, true); },
        [Encoding.FloatDataType.Float64]: function (v, i, a) { v.setFloat64(8 * i, a, true); }
    };
    const byteSizes = {
        [Encoding.IntDataType.Int16]: 2,
        [Encoding.IntDataType.Uint16]: 2,
        [Encoding.IntDataType.Int32]: 4,
        [Encoding.IntDataType.Uint32]: 4,
        [Encoding.FloatDataType.Float32]: 4,
        [Encoding.FloatDataType.Float64]: 8
    };
    function byteArray(data) {
        const type = Encoding.getDataType(data);
        if (type === Encoding.IntDataType.Int8)
            return int8(data);
        else if (type === Encoding.IntDataType.Uint8)
            return uint8(data);
        const result = new Uint8Array(data.length * byteSizes[type]);
        const w = writers[type];
        const view = new DataView(result.buffer);
        for (let i = 0, n = data.length; i < n; i++) {
            w(view, i, data[i]);
        }
        return {
            encodings: [{ kind: 'ByteArray', type }],
            data: result
        };
    }
    ArrayEncoding.byteArray = byteArray;
    function _fixedPoint(data, factor) {
        const srcType = Encoding.getDataType(data);
        const result = new Int32Array(data.length);
        for (let i = 0, n = data.length; i < n; i++) {
            result[i] = Math.round(data[i] * factor);
        }
        return {
            encodings: [{ kind: 'FixedPoint', factor, srcType }],
            data: result
        };
    }
    function fixedPoint(factor) { return data => _fixedPoint(data, factor); }
    ArrayEncoding.fixedPoint = fixedPoint;
    function _intervalQuantizaiton(data, min, max, numSteps, arrayType) {
        const srcType = Encoding.getDataType(data);
        if (!data.length) {
            return {
                encodings: [{ kind: 'IntervalQuantization', min, max, numSteps, srcType }],
                data: new Int32Array(0)
            };
        }
        if (max < min) {
            const t = min;
            min = max;
            max = t;
        }
        const delta = (max - min) / (numSteps - 1);
        const output = new arrayType(data.length);
        for (let i = 0, n = data.length; i < n; i++) {
            const v = data[i];
            if (v <= min)
                output[i] = 0;
            else if (v >= max)
                output[i] = numSteps - 1;
            else
                output[i] = (Math.round((v - min) / delta)) | 0;
        }
        return {
            encodings: [{ kind: 'IntervalQuantization', min, max, numSteps, srcType }],
            data: output
        };
    }
    function intervalQuantizaiton(min, max, numSteps, arrayType = Int32Array) {
        return data => _intervalQuantizaiton(data, min, max, numSteps, arrayType);
    }
    ArrayEncoding.intervalQuantizaiton = intervalQuantizaiton;
    function runLength(data) {
        let srcType = Encoding.getDataType(data);
        if (srcType === void 0) {
            data = new Int32Array(data);
            srcType = Encoding.IntDataType.Int32;
        }
        if (!data.length) {
            return {
                encodings: [{ kind: 'RunLength', srcType, srcSize: 0 }],
                data: new Int32Array(0)
            };
        }
        // calculate output size
        let fullLength = 2;
        for (let i = 1, il = data.length; i < il; i++) {
            if (data[i - 1] !== data[i]) {
                fullLength += 2;
            }
        }
        const output = new Int32Array(fullLength);
        let offset = 0;
        let runLength = 1;
        for (let i = 1, il = data.length; i < il; i++) {
            if (data[i - 1] !== data[i]) {
                output[offset] = data[i - 1];
                output[offset + 1] = runLength;
                runLength = 1;
                offset += 2;
            }
            else {
                ++runLength;
            }
        }
        output[offset] = data[data.length - 1];
        output[offset + 1] = runLength;
        return {
            encodings: [{ kind: 'RunLength', srcType, srcSize: data.length }],
            data: output
        };
    }
    ArrayEncoding.runLength = runLength;
    function delta(data) {
        if (!Encoding.isSignedIntegerDataType(data)) {
            throw new Error('Only signed integer types can be encoded using delta encoding.');
        }
        let srcType = Encoding.getDataType(data);
        if (srcType === void 0) {
            data = new Int32Array(data);
            srcType = Encoding.IntDataType.Int32;
        }
        if (!data.length) {
            return {
                encodings: [{ kind: 'Delta', origin: 0, srcType }],
                data: new data.constructor(0)
            };
        }
        const output = new data.constructor(data.length);
        const origin = data[0];
        output[0] = data[0];
        for (let i = 1, n = data.length; i < n; i++) {
            output[i] = data[i] - data[i - 1];
        }
        output[0] = 0;
        return {
            encodings: [{ kind: 'Delta', origin, srcType }],
            data: output
        };
    }
    ArrayEncoding.delta = delta;
    function isSigned(data) {
        for (let i = 0, n = data.length; i < n; i++) {
            if (data[i] < 0)
                return true;
        }
        return false;
    }
    function packingSizeUnsigned(data, upperLimit) {
        let size = 0;
        for (let i = 0, n = data.length; i < n; i++) {
            size += (data[i] / upperLimit) | 0;
        }
        size += data.length;
        return size;
    }
    function packingSizeSigned(data, upperLimit) {
        const lowerLimit = -upperLimit - 1;
        let size = 0;
        for (let i = 0, n = data.length; i < n; i++) {
            const value = data[i];
            if (value >= 0) {
                size += (value / upperLimit) | 0;
            }
            else {
                size += (value / lowerLimit) | 0;
            }
        }
        size += data.length;
        return size;
    }
    function determinePacking(data) {
        const signed = isSigned(data);
        const size8 = signed ? packingSizeSigned(data, 0x7F) : packingSizeUnsigned(data, 0xFF);
        const size16 = signed ? packingSizeSigned(data, 0x7FFF) : packingSizeUnsigned(data, 0xFFFF);
        if (data.length * 4 < size16 * 2) {
            // 4 byte packing is the most effective
            return {
                isSigned: signed,
                size: data.length,
                bytesPerElement: 4
            };
        }
        else if (size16 * 2 < size8) {
            // 2 byte packing is the most effective
            return {
                isSigned: signed,
                size: size16,
                bytesPerElement: 2
            };
        }
        else {
            // 1 byte packing is the most effective
            return {
                isSigned: signed,
                size: size8,
                bytesPerElement: 1
            };
        }
    }
    function _integerPacking(data, packing) {
        const upperLimit = packing.isSigned
            ? (packing.bytesPerElement === 1 ? 0x7F : 0x7FFF)
            : (packing.bytesPerElement === 1 ? 0xFF : 0xFFFF);
        const lowerLimit = -upperLimit - 1;
        const n = data.length;
        const packed = packing.isSigned
            ? packing.bytesPerElement === 1 ? new Int8Array(packing.size) : new Int16Array(packing.size)
            : packing.bytesPerElement === 1 ? new Uint8Array(packing.size) : new Uint16Array(packing.size);
        let j = 0;
        for (let i = 0; i < n; i++) {
            let value = data[i];
            if (value >= 0) {
                while (value >= upperLimit) {
                    packed[j] = upperLimit;
                    ++j;
                    value -= upperLimit;
                }
            }
            else {
                while (value <= lowerLimit) {
                    packed[j] = lowerLimit;
                    ++j;
                    value -= lowerLimit;
                }
            }
            packed[j] = value;
            ++j;
        }
        const result = byteArray(packed);
        return {
            encodings: [{
                    kind: 'IntegerPacking',
                    byteCount: packing.bytesPerElement,
                    isUnsigned: !packing.isSigned,
                    srcSize: n
                },
                result.encodings[0]
            ],
            data: result.data
        };
    }
    /**
     * Packs Int32 array. The packing level is determined automatically to either 1-, 2-, or 4-byte words.
     */
    function integerPacking(data) {
        // if (!(data instanceof Int32Array)) {
        //     throw new Error('Integer packing can only be applied to Int32 data.');
        // }
        const packing = determinePacking(data);
        if (packing.bytesPerElement === 4) {
            // no packing done, Int32 encoding will be used
            return byteArray(data);
        }
        return _integerPacking(data, packing);
    }
    ArrayEncoding.integerPacking = integerPacking;
    function stringArray(data) {
        const map = Object.create(null);
        const strings = [];
        const output = new Int32Array(data.length);
        const offsets = ChunkedArray.create(Int32Array, 1, Math.min(1024, data.length < 32 ? data.length + 1 : Math.round(data.length / 8) + 1));
        ChunkedArray.add(offsets, 0);
        let accLength = 0;
        let i = 0;
        for (const s of data) {
            // handle null strings.
            if (s === null || s === void 0) {
                output[i++] = -1;
                continue;
            }
            let index = map[s];
            if (index === void 0) {
                // increment the length
                accLength += s.length;
                // store the string and index
                index = strings.length;
                strings[index] = s;
                map[s] = index;
                // write the offset
                ChunkedArray.add(offsets, accLength);
            }
            output[i++] = index;
        }
        const offsetArray = ChunkedArray.compact(offsets);
        const offsetEncoding = classifyIntArray(offsetArray);
        const encodedOddsets = offsetEncoding.encode(offsetArray);
        const dataEncoding = classifyIntArray(output);
        const encodedData = dataEncoding.encode(output);
        return {
            encodings: [{ kind: 'StringArray', dataEncoding: encodedData.encoding, stringData: strings.join(''), offsetEncoding: encodedOddsets.encoding, offsets: encodedOddsets.data }],
            data: encodedData.data
        };
    }
    ArrayEncoding.stringArray = stringArray;
})(ArrayEncoding || (ArrayEncoding = {}));

/**
 * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function Field(column) {
    const mask = column.mask ? decode(column.mask) : void 0;
    const data = decode(column.data);
    const isNumeric = isTypedArray(data);
    const str = isNumeric
        ? mask
            ? row => mask[row] === 0 /* Column.ValueKinds.Present */ ? '' + data[row] : ''
            : row => '' + data[row]
        : mask
            ? row => mask[row] === 0 /* Column.ValueKinds.Present */ ? data[row] : ''
            : row => data[row];
    const int = isNumeric
        ? row => data[row]
        : row => { const v = data[row]; return parseInt$1(v, 0, v.length); };
    const float = isNumeric
        ? row => data[row]
        : row => { const v = data[row]; return parseFloat$1(v, 0, v.length); };
    const valueKind = mask
        ? row => mask[row]
        : row => 0 /* Column.ValueKinds.Present */;
    const rowCount = data.length;
    return {
        __array: data,
        binaryEncoding: column.data.encoding,
        isDefined: true,
        rowCount,
        str,
        int,
        float,
        valueKind,
        areValuesEqual: (rowA, rowB) => data[rowA] === data[rowB],
        toStringArray: params => createAndFillArray(rowCount, str, params),
        toIntArray: isNumeric
            ? params => typedArrayWindow(data, params)
            : params => createAndFillArray(rowCount, int, params),
        toFloatArray: isNumeric
            ? params => typedArrayWindow(data, params)
            : params => createAndFillArray(rowCount, float, params)
    };
}

/**
 * Copyright (c) 2017-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Adapted from https://github.com/rcsb/mmtf-javascript
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author David Sehnal <david.sehnal@gmail.com>
 */
const __chars = function () {
    const data = [];
    for (let i = 0; i < 1024; i++)
        data[i] = String.fromCharCode(i);
    return data;
}();
function throwError(err) {
    throw new Error(err);
}
function _utf8Read(data, offset, length) {
    const chars = __chars;
    let str = void 0, chunkOffset = 0;
    const chunk = [], chunkSize = 512;
    for (let i = offset, end = offset + length; i < end; i++) {
        const byte = data[i];
        if ((byte & 0x80) === 0x00) {
            // One byte character
            chunk[chunkOffset++] = chars[byte];
        }
        else if ((byte & 0xe0) === 0xc0) {
            // Two byte character
            chunk[chunkOffset++] = chars[((byte & 0x0f) << 6) | (data[++i] & 0x3f)];
        }
        else if ((byte & 0xf0) === 0xe0) {
            // Three byte character
            chunk[chunkOffset++] = String.fromCharCode(((byte & 0x0f) << 12) |
                ((data[++i] & 0x3f) << 6) |
                ((data[++i] & 0x3f) << 0));
        }
        else if ((byte & 0xf8) === 0xf0) {
            // Four byte character
            chunk[chunkOffset++] = String.fromCharCode(((byte & 0x07) << 18) |
                ((data[++i] & 0x3f) << 12) |
                ((data[++i] & 0x3f) << 6) |
                ((data[++i] & 0x3f) << 0));
        }
        else
            throwError('Invalid byte ' + byte.toString(16));
        if (chunkOffset === chunkSize) {
            str = str || [];
            str[str.length] = chunk.join('');
            chunkOffset = 0;
        }
    }
    if (!str)
        return chunk.slice(0, chunkOffset).join('');
    if (chunkOffset > 0) {
        str[str.length] = chunk.slice(0, chunkOffset).join('');
    }
    return str.join('');
}
const utf8Decoder = (typeof TextDecoder !== 'undefined') ? new TextDecoder() : undefined;
function utf8Read(data, offset, length) {
    if (utf8Decoder) {
        const input = (offset || length !== data.length) ? data.subarray(offset, offset + length) : data;
        return utf8Decoder.decode(input);
    }
    else {
        return _utf8Read(data, offset, length);
    }
}

/*
 * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Adapted from https://github.com/rcsb/mmtf-javascript
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function decodeMsgPack(buffer) {
    return parse({ buffer, offset: 0, dataView: new DataView(buffer.buffer) });
}
/**
 * decode all key-value pairs of a map into an object
 */
function map(state, length) {
    const value = {};
    for (let i = 0; i < length; i++) {
        const key = parse(state);
        value[key] = parse(state);
    }
    return value;
}
/**
 * decode binary array
 */
function bin(state, length) {
    // This approach to binary parsing wastes a bit of memory to trade for speed compared to:
    //
    //   let value = buffer.subarray(offset, offset + length); //new Uint8Array(buffer.buffer, offset, length);
    //
    // It turns out that using the view created by subarray probably uses DataView
    // in the background, which causes the element access to be several times slower
    // than creating the new byte array.
    const value = new Uint8Array(length);
    const o = state.offset;
    for (let i = 0; i < length; i++)
        value[i] = state.buffer[i + o];
    state.offset += length;
    return value;
}
/**
 * decode string
 */
function str$6(state, length) {
    const value = utf8Read(state.buffer, state.offset, length);
    state.offset += length;
    return value;
}
/**
 * decode array
 */
function array(state, length) {
    const value = new Array(length);
    for (let i = 0; i < length; i++) {
        value[i] = parse(state);
    }
    return value;
}
/**
 * recursively parse the MessagePack data and return decoded MessagePack data
 */
function parse(state) {
    const type = state.buffer[state.offset];
    let value, length;
    // Positive FixInt
    if ((type & 0x80) === 0x00) {
        state.offset++;
        return type;
    }
    // FixMap
    if ((type & 0xf0) === 0x80) {
        length = type & 0x0f;
        state.offset++;
        return map(state, length);
    }
    // FixArray
    if ((type & 0xf0) === 0x90) {
        length = type & 0x0f;
        state.offset++;
        return array(state, length);
    }
    // FixStr
    if ((type & 0xe0) === 0xa0) {
        length = type & 0x1f;
        state.offset++;
        return str$6(state, length);
    }
    // Negative FixInt
    if ((type & 0xe0) === 0xe0) {
        value = state.dataView.getInt8(state.offset);
        state.offset++;
        return value;
    }
    switch (type) {
        // nil
        case 0xc0:
            state.offset++;
            return null;
        // false
        case 0xc2:
            state.offset++;
            return false;
        // true
        case 0xc3:
            state.offset++;
            return true;
        // bin 8
        case 0xc4:
            length = state.dataView.getUint8(state.offset + 1);
            state.offset += 2;
            return bin(state, length);
        // bin 16
        case 0xc5:
            length = state.dataView.getUint16(state.offset + 1);
            state.offset += 3;
            return bin(state, length);
        // bin 32
        case 0xc6:
            length = state.dataView.getUint32(state.offset + 1);
            state.offset += 5;
            return bin(state, length);
        // float 32
        case 0xca:
            value = state.dataView.getFloat32(state.offset + 1);
            state.offset += 5;
            return value;
        // float 64
        case 0xcb:
            value = state.dataView.getFloat64(state.offset + 1);
            state.offset += 9;
            return value;
        // uint8
        case 0xcc:
            value = state.buffer[state.offset + 1];
            state.offset += 2;
            return value;
        // uint 16
        case 0xcd:
            value = state.dataView.getUint16(state.offset + 1);
            state.offset += 3;
            return value;
        // uint 32
        case 0xce:
            value = state.dataView.getUint32(state.offset + 1);
            state.offset += 5;
            return value;
        // int 8
        case 0xd0:
            value = state.dataView.getInt8(state.offset + 1);
            state.offset += 2;
            return value;
        // int 16
        case 0xd1:
            value = state.dataView.getInt16(state.offset + 1);
            state.offset += 3;
            return value;
        // int 32
        case 0xd2:
            value = state.dataView.getInt32(state.offset + 1);
            state.offset += 5;
            return value;
        // str 8
        case 0xd9:
            length = state.dataView.getUint8(state.offset + 1);
            state.offset += 2;
            return str$6(state, length);
        // str 16
        case 0xda:
            length = state.dataView.getUint16(state.offset + 1);
            state.offset += 3;
            return str$6(state, length);
        // str 32
        case 0xdb:
            length = state.dataView.getUint32(state.offset + 1);
            state.offset += 5;
            return str$6(state, length);
        // array 16
        case 0xdc:
            length = state.dataView.getUint16(state.offset + 1);
            state.offset += 3;
            return array(state, length);
        // array 32
        case 0xdd:
            length = state.dataView.getUint32(state.offset + 1);
            state.offset += 5;
            return array(state, length);
        // map 16:
        case 0xde:
            length = state.dataView.getUint16(state.offset + 1);
            state.offset += 3;
            return map(state, length);
        // map 32
        case 0xdf:
            length = state.dataView.getUint32(state.offset + 1);
            state.offset += 5;
            return map(state, length);
    }
    throw new Error('Unknown type 0x' + type.toString(16));
}

/**
 * Copyright (c) 2017 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
function checkVersions(min, current) {
    for (let i = 0; i < 2; i++) {
        if (min[i] > current[i])
            return false;
    }
    return true;
}
function Category(data) {
    const map = Object.create(null);
    const cache = Object.create(null);
    for (const col of data.columns)
        map[col.name] = col;
    return {
        rowCount: data.rowCount,
        name: data.name.substr(1),
        fieldNames: data.columns.map(c => c.name),
        getField(name) {
            const col = map[name];
            if (!col)
                return void 0;
            if (!!cache[name])
                return cache[name];
            cache[name] = Field(col);
            return cache[name];
        }
    };
}
function parseCifBinary(data) {
    return Task.create('Parse BinaryCIF', async (ctx) => {
        const minVersion = [0, 3];
        try {
            const unpacked = decodeMsgPack(data);
            if (!checkVersions(minVersion, unpacked.version.match(/(\d)\.(\d)\.\d/).slice(1).map(v => +v))) {
                return ReaderResult.error(`Unsupported format version. Current ${unpacked.version}, required ${minVersion.join('.')}.`);
            }
            const file = CifFile(unpacked.dataBlocks.map(block => {
                const cats = Object.create(null);
                for (const cat of block.categories)
                    cats[cat.name.substr(1)] = Category(cat);
                return CifBlock$1(block.categories.map(c => c.name.substr(1)), cats, block.header);
            }));
            return ReaderResult.success(file);
        }
        catch (e) {
            return ReaderResult.error('' + e);
        }
    });
}

/**
 * Copyright (c) 2017-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
var FieldPath;
(function (FieldPath) {
    function canonical(path) {
        return path.replace('.', '_').replace(/\[/, '_').replace(/(\[|\])/g, '');
    }
    FieldPath.canonical = canonical;
    function equal(pathA, pathB) {
        return canonical(pathA) === canonical(pathB);
    }
    FieldPath.equal = equal;
    function create(category, field, asCanonical = false) {
        const p = `${category}${field ? `.${field}` : ''}`;
        return asCanonical ? canonical(p) : p;
    }
    FieldPath.create = create;
})(FieldPath || (FieldPath = {}));
function toDatabaseCollection(schema, file, aliases) {
    const dbc = {};
    for (const data of file.blocks) {
        dbc[data.header] = toDatabase(schema, data, aliases);
    }
    return dbc;
}
function toDatabase(schema, frame, aliases) {
    return createDatabase(schema, frame, aliases);
}
function getColumnCtor(t) {
    switch (t.valueType) {
        case 'str': return (f, c, k) => createStringColumn(t, f, f.str, f.toStringArray);
        case 'int': return (f, c, k) => createColumn(t, f, f.int, f.toIntArray);
        case 'float': return (f, c, k) => createColumn(t, f, f.float, f.toFloatArray);
        case 'list': throw new Error('Use createListColumn instead.');
        case 'tensor': throw new Error('Use createTensorColumn instead.');
    }
}
function createStringColumn(schema, field, value, toArray) {
    return {
        schema,
        __array: field.__array,
        isDefined: field.isDefined,
        rowCount: field.rowCount,
        value: schema.transform === 'lowercase'
            ? row => value(row).toLowerCase()
            : schema.transform === 'uppercase'
                ? row => value(row).toUpperCase()
                : value,
        valueKind: field.valueKind,
        areValuesEqual: field.areValuesEqual,
        toArray: schema.transform === 'lowercase'
            ? p => Array.from(toArray(p)).map(x => x.toLowerCase())
            : schema.transform === 'uppercase'
                ? p => Array.from(toArray(p)).map(x => x.toUpperCase())
                : toArray,
    };
}
function createColumn(schema, field, value, toArray) {
    return {
        schema,
        __array: field.__array,
        isDefined: field.isDefined,
        rowCount: field.rowCount,
        value,
        valueKind: field.valueKind,
        areValuesEqual: field.areValuesEqual,
        toArray
    };
}
function createListColumn(schema, category, key) {
    const separator = schema.separator;
    const itemParse = schema.itemParse;
    const f = category.getField(key);
    const value = f ? (row) => f.str(row).split(separator).map(x => itemParse(x.trim())).filter(x => !!x) : (row) => [];
    const toArray = params => createAndFillArray(category.rowCount, value, params);
    return {
        schema,
        __array: void 0,
        isDefined: !!f,
        rowCount: category.rowCount,
        value,
        valueKind: f ? f.valueKind : () => 1 /* Column.ValueKinds.NotPresent */,
        areValuesEqual: (rowA, rowB) => arrayEqual(value(rowA), value(rowB)),
        toArray
    };
}
function createTensorColumn(schema, category, key) {
    const space = schema.space;
    const zeroOffset = (category.fieldNames.includes(`${key}[0]`) ||
        category.fieldNames.includes(`${key}[0][0]`) ||
        category.fieldNames.includes(`${key}[0][0][0]`));
    const fst = zeroOffset ? 0 : 1;
    const namingVariant = (category.fieldNames.includes(`${key}_1`) ||
        category.fieldNames.includes(`${key}_11`) ||
        category.fieldNames.includes(`${key}_111`)) ? 'underscore' : 'brackets';
    const getName = tensorFieldNameGetter(key, space.rank, zeroOffset, namingVariant);
    const first = category.getField(getName(fst, fst, fst)) || Column.Undefined(category.rowCount, schema);
    const value = (row) => getTensor(category, space, row, getName);
    const toArray = params => createAndFillArray(category.rowCount, value, params);
    return {
        schema,
        __array: void 0,
        isDefined: first.isDefined,
        rowCount: category.rowCount,
        value,
        valueKind: first.valueKind,
        areValuesEqual: (rowA, rowB) => Tensor.areEqualExact(value(rowA), value(rowB)),
        toArray
    };
}
class CategoryTable {
    constructor(category, schema, _isDefined) {
        this._isDefined = _isDefined;
        const fieldKeys = Object.keys(schema);
        this._rowCount = category.rowCount;
        this._columns = fieldKeys;
        this._schema = schema;
        const cache = Object.create(null);
        for (const k of fieldKeys) {
            Object.defineProperty(this, k, {
                get: function () {
                    if (cache[k])
                        return cache[k];
                    const fType = schema[k];
                    if (fType.valueType === 'list') {
                        cache[k] = createListColumn(fType, category, k);
                    }
                    else if (fType.valueType === 'tensor') {
                        cache[k] = createTensorColumn(fType, category, k);
                    }
                    else {
                        const ctor = getColumnCtor(fType);
                        const field = category.getField(k);
                        cache[k] = !!field ? ctor(field, category, k) : Column.Undefined(category.rowCount, fType);
                    }
                    return cache[k];
                },
                enumerable: true,
                configurable: false
            });
        }
    }
}
function createDatabase(schema, frame, aliases) {
    const tables = Object.create(null);
    for (const k of Object.keys(schema)) {
        tables[k] = createTable(k, schema[k], frame, aliases);
    }
    return Database.ofTables(frame.header, schema, tables);
}
function flattenFrame(frame) {
    const flatFrame = Object.create(null);
    for (const c of Object.keys(frame.categories)) {
        for (const f of frame.categories[c].fieldNames) {
            const p = FieldPath.create(c, f, true);
            flatFrame[p] = frame.categories[c].getField(f);
        }
    }
    return flatFrame;
}
function getField(field, category, flatFrame, aliases) {
    const path = FieldPath.create(category, field);
    const canonicalPath = FieldPath.canonical(path);
    if (canonicalPath in flatFrame)
        return flatFrame[canonicalPath];
    if (aliases && path in aliases) {
        for (const aliased of aliases[path]) {
            const canonicalAliased = FieldPath.canonical(aliased);
            if (canonicalAliased in flatFrame)
                return flatFrame[canonicalAliased];
        }
    }
}
function createTable(key, schema, frame, aliases) {
    let cat = frame.categories[key];
    if (aliases) {
        const flatFrame = flattenFrame(frame);
        const fields = Object.create(null);
        const fieldNames = [];
        let rowCount = 0;
        for (const k of Object.keys(schema)) {
            const field = getField(k, key, flatFrame, aliases);
            if (field) {
                fields[k] = field;
                fieldNames.push(k);
                rowCount = field.rowCount;
            }
        }
        cat = {
            rowCount,
            name: key,
            fieldNames: [...fieldNames],
            getField(name) {
                return fields[name];
            }
        };
    }
    return new CategoryTable(cat || CifCategory.empty(key), schema, !!cat);
}

/**
 * Copyright (c) 2017-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Code-generated 'mmCIF' schema file. Dictionary versions: mmCIF 5.391, IHM 1.25, MA 1.4.6.
 *
 * @author molstar/ciftools package
 */
var Schema$6 = Column.Schema;
const str$5 = Schema$6.str;
const int$5 = Schema$6.int;
const float$5 = Schema$6.float;
const coord$1 = Schema$6.coord;
const Aliased$3 = Schema$6.Aliased;
const Matrix$1 = Schema$6.Matrix;
const Vector$1 = Schema$6.Vector;
const lstr$2 = Schema$6.lstr;
const List$1 = Schema$6.List;
const mmCIF_Schema = {
    /**
     * Data items in the ATOM_SITE category record details about
     * the atom sites in a macromolecular crystal structure, such as
     * the positional coordinates, atomic displacement parameters,
     * magnetic moments and directions.
     *
     * The data items for describing anisotropic atomic
     * displacement factors are only used if the corresponding items
     * are not given in the ATOM_SITE_ANISOTROP category.
     *
     * wwPDB recommends wwPDB-assigned residue number, residue ID,
     * and chain ID, _atom_site.auth_seq_id _atom_site.auth_comp_id, and
     * _atom_site.auth_asym_id, respectively, to be used for publication
     * materials.
     */
    atom_site: {
        /**
         * An alternative identifier for _atom_site.label_asym_id that
         * may be provided by an author in order to match the identification
         * used in the publication that describes the structure.
         */
        auth_asym_id: str$5,
        /**
         * An alternative identifier for _atom_site.label_atom_id that
         * may be provided by an author in order to match the identification
         * used in the publication that describes the structure.
         */
        auth_atom_id: str$5,
        /**
         * An alternative identifier for _atom_site.label_comp_id that
         * may be provided by an author in order to match the identification
         * used in the publication that describes the structure.
         */
        auth_comp_id: str$5,
        /**
         * An alternative identifier for _atom_site.label_seq_id that
         * may be provided by an author in order to match the identification
         * used in the publication that describes the structure.
         *
         * Note that this is not necessarily a number, that the values do
         * not have to be positive, and that the value does not have to
         * correspond to the value of _atom_site.label_seq_id. The value
         * of _atom_site.label_seq_id is required to be a sequential list
         * of positive integers.
         *
         * The author may assign values to _atom_site.auth_seq_id in any
         * desired way. For instance, the values may be used to relate
         * this structure to a numbering scheme in a homologous structure,
         * including sequence gaps or insertion codes. Alternatively, a
         * scheme may be used for a truncated polymer that maintains the
         * numbering scheme of the full length polymer. In all cases, the
         * scheme used here must match the scheme used in the publication
         * that describes the structure.
         */
        auth_seq_id: int$5,
        /**
         * Isotropic atomic displacement parameter, or equivalent isotropic
         * atomic displacement parameter, B~eq~, calculated from the
         * anisotropic displacement parameters.
         *
         * B~eq~ = (1/3) sum~i~[sum~j~(B^ij^ A~i~ A~j~ a*~i~ a*~j~)]
         *
         * A     = the real space cell lengths
         * a*    = the reciprocal space cell lengths
         * B^ij^ = 8 pi^2^ U^ij^
         *
         * Ref: Fischer, R. X. & Tillmanns, E. (1988). Acta Cryst. C44,
         * 775-776.
         *
         * The IUCr Commission on Nomenclature recommends against the use
         * of B for reporting atomic displacement parameters. U, being
         * directly proportional to B, is preferred.
         *
         * Note -
         *
         * The particular type of ADP stored in this item is qualified
         * by item _refine.pdbx_adp_type.
         */
        B_iso_or_equiv: float$5,
        /**
         * The x atom-site coordinate in angstroms specified according to
         * a set of orthogonal Cartesian axes related to the cell axes as
         * specified by the description given in
         * _atom_sites.Cartn_transform_axes.
         */
        Cartn_x: coord$1,
        /**
         * The y atom-site coordinate in angstroms specified according to
         * a set of orthogonal Cartesian axes related to the cell axes as
         * specified by the description given in
         * _atom_sites.Cartn_transform_axes.
         */
        Cartn_y: coord$1,
        /**
         * The z atom-site coordinate in angstroms specified according to
         * a set of orthogonal Cartesian axes related to the cell axes as
         * specified by the description given in
         * _atom_sites.Cartn_transform_axes.
         */
        Cartn_z: coord$1,
        /**
         * The group of atoms to which the atom site belongs. This data
         * item is provided for compatibility with the original Protein
         * Data Bank format, and only for that purpose.
         */
        group_PDB: Aliased$3(str$5),
        /**
         * The value of _atom_site.id must uniquely identify a record in the
         * ATOM_SITE list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         *
         * This data item was introduced to provide compatibility between
         * small-molecule and macromolecular CIFs. In a small-molecule
         * CIF, _atom_site_label is the identifier for the atom. In a
         * macromolecular CIF, the atom identifier is the aggregate of
         * _atom_site.label_alt_id, _atom_site.label_asym_id,
         * _atom_site.label_atom_id, _atom_site.label_comp_id and
         * _atom_site.label_seq_id. For the two types of files to be
         * compatible, a formal identifier for the category had to be
         * introduced that was independent of the different modes of
         * identifying the atoms. For compatibility with older CIFs,
         * _atom_site_label is aliased to _atom_site.id.
         *
         * In general, this aggregate identifier does not uniquely
         * identify an atom site as for non-polymers _atom_site.label_seq_id
         * is '.'.
         */
        id: int$5,
        /**
         * A place holder to indicate alternate conformation. The alternate conformation
         * can be an entire polymer chain, or several residues or
         * partial residue (several atoms within one residue). If
         * an atom is provided in more than one position, then a
         * non-blank alternate location indicator must be used for
         * each of the atomic positions.
         */
        label_alt_id: str$5,
        /**
         * A component of the identifier for this atom site.
         * For further details, see the definition of the STRUCT_ASYM
         * category.
         *
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        label_asym_id: str$5,
        /**
         * A component of the identifier for this atom site.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        label_atom_id: str$5,
        /**
         * A component of the identifier for this atom site.
         *
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        label_comp_id: str$5,
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        label_entity_id: str$5,
        /**
         * This data item is a pointer to _entity_poly_seq.num in the
         * ENTITY_POLY_SEQ category.
         */
        label_seq_id: int$5,
        /**
         * The fraction of the atom type present at this site.
         * The sum of the occupancies of all the atom types at this site
         * may not exceed 1.0 unless it is a dummy site.
         */
        occupancy: float$5,
        /**
         * This data item is a pointer to _atom_type.symbol in the
         * ATOM_TYPE category.
         */
        type_symbol: str$5,
        /**
         * PDB insertion code.
         */
        pdbx_PDB_ins_code: str$5,
        /**
         * PDB model number.
         */
        pdbx_PDB_model_num: int$5,
        /**
         * The net integer charge assigned to this atom. This is the
         * formal charge assignment normally found in chemical diagrams.
         */
        pdbx_formal_charge: int$5,
        /**
         * This data item is an ordinal which identifies distinct chemical components in the atom_site category, both
         * polymeric and non-polymeric.
         */
        pdbx_label_index: int$5,
        /**
         * The name of additional external databases with residue level mapping.
         */
        pdbx_sifts_xref_db_name: str$5,
        /**
         * The accession code related to the additional external database entry.
         */
        pdbx_sifts_xref_db_acc: str$5,
        /**
         * The sequence position of the external database entry that corresponds
         * to the residue mapping defined by the SIFTS process.
         */
        pdbx_sifts_xref_db_num: str$5,
        /**
         * Describes the residue type of the given UniProt match
         */
        pdbx_sifts_xref_db_res: str$5,
        /**
         * The model id corresponding to the atom site.
         * This data item is a pointer to _ihm_model_list.model_id
         * in the IHM_MODEL_LIST category.
         */
        ihm_model_id: int$5,
    },
    /**
     * Data items in the ATOM_SITE_ANISOTROP category record details
     * about anisotropic displacement parameters.
     * If the ATOM_SITE_ANISOTROP category is used for storing these
     * data, the corresponding ATOM_SITE data items are not used.
     */
    atom_site_anisotrop: {
        /**
         * This data item is a pointer to _atom_site.id in the ATOM_SITE
         * category.
         */
        id: int$5,
        /**
         * This data item is a pointer to _atom_type.symbol in the
         * ATOM_TYPE category.
         */
        type_symbol: str$5,
        /**
         * The elements of the standard anisotropic atomic
         * displacement matrix U, which appears in the structure-factor
         * term as:
         *
         * T = exp{-2 pi^2^ sum~i~[sum~j~(U^ij^ h~i~ h~j~ a*~i~ a*~j~)]}
         *
         * h  = the Miller indices
         * a* = the reciprocal space cell lengths
         *
         * These matrix elements may appear with atomic coordinates
         * in the ATOM_SITE category, or they may appear in the separate
         * ATOM_SITE_ANISOTROP category, but they may not appear in both
         * places. Similarly, anisotropic displacements may appear as
         * either B's or U's, but not as both.
         *
         * The unique elements of the real symmetric matrix are
         * entered by row.
         */
        U: Matrix$1(3, 3),
        /**
         * The standard uncertainty (estimated standard deviation)
         * of _atom_site_anisotrop.U.
         */
        U_esd: Matrix$1(3, 3),
        /**
         * Pointer to _atom_site.auth_seq_id
         */
        pdbx_auth_seq_id: str$5,
        /**
         * Pointer to _atom_site.auth_asym_id
         */
        pdbx_auth_asym_id: str$5,
        /**
         * Pointer to _atom_site.auth_atom_id
         */
        pdbx_auth_atom_id: str$5,
        /**
         * Pointer to _atom_site.auth_comp_id
         */
        pdbx_auth_comp_id: str$5,
        /**
         * Pointer to _atom_site.label_seq_id
         */
        pdbx_label_seq_id: int$5,
        /**
         * Pointer to _atom_site.label_alt_id.
         */
        pdbx_label_alt_id: str$5,
        /**
         * Pointer to _atom_site.label_asym_id
         */
        pdbx_label_asym_id: str$5,
        /**
         * Pointer to _atom_site.label_atom_id
         */
        pdbx_label_atom_id: str$5,
        /**
         * Pointer to _atom_site.label_comp_id
         */
        pdbx_label_comp_id: str$5,
        /**
         * Pointer to _atom_site.pdbx_PDB_ins_code
         */
        pdbx_PDB_ins_code: str$5,
    },
    /**
     * Data items in the ATOM_SITES category record details about
     * the crystallographic cell and cell transformations, which are
     * common to all atom sites.
     */
    atom_sites: {
        /**
         * This data item is a pointer to _entry.id in the ENTRY category.
         */
        entry_id: str$5,
        /**
         * The elements of the 3x3 matrix used to transform Cartesian
         * coordinates in the ATOM_SITE category to fractional coordinates
         * in the same category. The axial alignments of this
         * transformation are described in _atom_sites.Cartn_transform_axes.
         * The 3x1 translation is defined in
         * _atom_sites.fract_transf_vector[].
         *
         * |x'|               |11 12 13| |x|              |1|
         * |y'|~fractional~ = |21 22 23| |y|~Cartesian~ + |2|
         * |z'|               |31 32 33| |z|              |3|
         */
        fract_transf_matrix: Matrix$1(3, 3),
        /**
         * The elements of the three-element vector used to transform
         * Cartesian coordinates in the ATOM_SITE category to fractional
         * coordinates in the same category. The axial alignments of this
         * transformation are described in _atom_sites.Cartn_transform_axes.
         * The 3x3 rotation is defined in
         * _atom_sites.fract_transf_matrix[][].
         *
         * |x'|               |11 12 13| |x|              |1|
         * |y'|~fractional~ = |21 22 23| |y|~Cartesian~ + |2|
         * |z'|               |31 32 33| |z|              |3|
         */
        fract_transf_vector: Vector$1(3),
    },
    /**
     * Data items in the AUDIT_AUTHOR category record details about
     * the author(s) of the data block.
     */
    audit_author: {
        /**
         * The name of an author of this data block. If there are multiple
         * authors, _audit_author.name is looped with _audit_author.address.
         * The family name(s), followed by a comma and including any
         * dynastic components, precedes the first name(s) or initial(s).
         */
        name: str$5,
        /**
         * This data item defines the order of the author's name in the
         * list of audit authors.
         */
        pdbx_ordinal: int$5,
        /**
         * The Open Researcher and Contributor ID (ORCID).
         */
        identifier_ORCID: str$5,
    },
    /**
     * Data items in the AUDIT_CONFORM category describe the
     * dictionary versions against which the data names appearing in
     * the current data block are conformant.
     */
    audit_conform: {
        /**
         * A file name or uniform resource locator (URL) for the
         * dictionary to which the current data block conforms.
         */
        dict_location: str$5,
        /**
         * The string identifying the highest-level dictionary defining
         * data names used in this file.
         */
        dict_name: str$5,
        /**
         * The version number of the dictionary to which the current
         * data block conforms.
         */
        dict_version: str$5,
    },
    /**
     * Data items in the CELL category record details about the
     * crystallographic cell parameters.
     */
    cell: {
        /**
         * Unit-cell angle alpha of the reported structure in degrees.
         */
        angle_alpha: float$5,
        /**
         * Unit-cell angle beta of the reported structure in degrees.
         */
        angle_beta: float$5,
        /**
         * Unit-cell angle gamma of the reported structure in degrees.
         */
        angle_gamma: float$5,
        /**
         * This data item is a pointer to _entry.id in the ENTRY category.
         */
        entry_id: str$5,
        /**
         * Unit-cell length a corresponding to the structure reported in
         * angstroms.
         */
        length_a: float$5,
        /**
         * Unit-cell length b corresponding to the structure reported in
         * angstroms.
         */
        length_b: float$5,
        /**
         * Unit-cell length c corresponding to the structure reported in
         * angstroms.
         */
        length_c: float$5,
        /**
         * The number of the polymeric chains in a unit cell. In the case
         * of heteropolymers, Z is the number of occurrences of the most
         * populous chain.
         *
         * This data item is provided for compatibility with the original
         * Protein Data Bank format, and only for that purpose.
         */
        Z_PDB: int$5,
        /**
         * To further identify unique axis if necessary.  E.g., P 21 with
         * an unique C axis will have 'C' in this field.
         */
        pdbx_unique_axis: str$5,
    },
    /**
     * Data items in the CHEM_COMP category give details about each
     * of the chemical components from which the relevant chemical
     * structures can be constructed, such as name, mass or charge.
     *
     * The related categories CHEM_COMP_ATOM, CHEM_COMP_BOND,
     * CHEM_COMP_ANGLE etc. describe the detailed geometry of these
     * chemical components.
     */
    chem_comp: {
        /**
         * The formula for the chemical component. Formulae are written
         * according to the following rules:
         *
         * (1) Only recognized element symbols may be used.
         *
         * (2) Each element symbol is followed by a 'count' number. A count
         * of '1' may be omitted.
         *
         * (3) A space or parenthesis must separate each cluster of
         * (element symbol + count), but in general parentheses are
         * not used.
         *
         * (4) The order of elements depends on whether carbon is
         * present or not. If carbon is present, the order should be:
         * C, then H, then the other elements in alphabetical order
         * of their symbol. If carbon is not present, the elements
         * are listed purely in alphabetic order of their symbol. This
         * is the 'Hill' system used by Chemical Abstracts.
         */
        formula: str$5,
        /**
         * Formula mass in daltons of the chemical component.
         */
        formula_weight: float$5,
        /**
         * The value of _chem_comp.id must uniquely identify each item in
         * the CHEM_COMP list.
         *
         * For protein polymer entities, this is the three-letter code for
         * the amino acid.
         *
         * For nucleic acid polymer entities, this is the one-letter code
         * for the base.
         */
        id: str$5,
        /**
         * 'yes' indicates that this is a 'standard' monomer, 'no'
         * indicates that it is 'nonstandard'. Nonstandard monomers
         * should be described in more detail using the
         * _chem_comp.mon_nstd_parent, _chem_comp.mon_nstd_class and
         * _chem_comp.mon_nstd_details data items.
         */
        mon_nstd_flag: Aliased$3(lstr$2),
        /**
         * The full name of the component.
         */
        name: str$5,
        /**
         * For standard polymer components, the type of the monomer.
         * Note that monomers that will form polymers are of three types:
         * linking monomers, monomers with some type of N-terminal (or 5')
         * cap and monomers with some type of C-terminal (or 3') cap.
         */
        type: Aliased$3(lstr$2),
        /**
         * Synonym list for the component.
         */
        pdbx_synonyms: List$1(';', x => x),
    },
    /**
     * Data items in the CHEM_COMP_BOND category record details about
     * the bonds between atoms in a chemical component. Target values
     * may be specified as bond orders, as a distance between the two
     * atoms, or both.
     */
    chem_comp_bond: {
        /**
         * The ID of the first of the two atoms that define the bond.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        atom_id_1: str$5,
        /**
         * The ID of the second of the two atoms that define the bond.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        atom_id_2: str$5,
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        comp_id: str$5,
        /**
         * The value that should be taken as the target for the chemical
         * bond associated with the specified atoms, expressed as a bond
         * order.
         */
        value_order: Aliased$3(lstr$2),
        /**
         * Ordinal index for the component bond list.
         */
        pdbx_ordinal: int$5,
        /**
         * Stereochemical configuration across a double bond.
         */
        pdbx_stereo_config: Aliased$3(lstr$2),
        /**
         * A flag indicating an aromatic bond.
         */
        pdbx_aromatic_flag: Aliased$3(lstr$2),
    },
    /**
     * Data items in the CITATION category record details about the
     * literature cited as being relevant to the contents of the data
     * block.
     */
    citation: {
        /**
         * The name of the publisher of the citation; relevant
         * for books or book chapters.
         */
        book_publisher: str$5,
        /**
         * The country/region of publication; relevant for books
         * and book chapters.
         */
        country: str$5,
        /**
         * The value of _citation.id must uniquely identify a record in the
         * CITATION list.
         *
         * The _citation.id 'primary' should be used to indicate the
         * citation that the author(s) consider to be the most pertinent to
         * the contents of the data block.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * Abbreviated name of the cited journal as given in the
         * Chemical Abstracts Service Source Index.
         */
        journal_abbrev: str$5,
        /**
         * The American Society for Testing and Materials (ASTM) code
         * assigned to the journal cited (also referred to as the CODEN
         * designator of the Chemical Abstracts Service); relevant for
         * journal articles.
         */
        journal_id_ASTM: str$5,
        /**
         * The Cambridge Structural Database (CSD) code assigned to the
         * journal cited; relevant for journal articles. This is also the
         * system used at the Protein Data Bank (PDB).
         */
        journal_id_CSD: str$5,
        /**
         * The International Standard Serial Number (ISSN) code assigned to
         * the journal cited; relevant for journal articles.
         */
        journal_id_ISSN: str$5,
        /**
         * Volume number of the journal cited; relevant for journal
         * articles.
         */
        journal_volume: str$5,
        /**
         * The first page of the citation; relevant for journal
         * articles, books and book chapters.
         */
        page_first: str$5,
        /**
         * The last page of the citation; relevant for journal
         * articles, books and book chapters.
         */
        page_last: str$5,
        /**
         * The title of the citation; relevant for journal articles, books
         * and book chapters.
         */
        title: str$5,
        /**
         * The year of the citation; relevant for journal articles, books
         * and book chapters.
         */
        year: int$5,
        /**
         * Document Object Identifier used by doi.org to uniquely
         * specify bibliographic entry.
         */
        pdbx_database_id_DOI: str$5,
        /**
         * Ascession number used by PubMed to categorize a specific
         * bibliographic entry.
         */
        pdbx_database_id_PubMed: int$5,
    },
    /**
     * Data items in the CITATION_AUTHOR category record details
     * about the authors associated with the citations in the
     * CITATION list.
     */
    citation_author: {
        /**
         * This data item is a pointer to _citation.id in the CITATION
         * category.
         */
        citation_id: str$5,
        /**
         * Name of an author of the citation; relevant for journal
         * articles, books and book chapters.
         *
         * The family name(s), followed by a comma and including any
         * dynastic components, precedes the first name(s) or initial(s).
         */
        name: str$5,
        /**
         * This data item defines the order of the author's name in the
         * list of authors of a citation.
         */
        ordinal: int$5,
    },
    /**
     * Data items in the DATABASE_2 category record details about the
     * database identifiers of the data block.
     *
     * These data items are assigned by database managers and should
     * only appear in a data block if they originate from that source.
     *
     * The name of this category, DATABASE_2, arose because the
     * category name DATABASE was already in use in the core CIF
     * dictionary, but was used differently from the way it needed
     * to be used in the mmCIF dictionary. Since CIF data names
     * cannot be changed once they have been adopted, a new category
     * had to be created.
     */
    database_2: {
        /**
         * An abbreviation that identifies the database.
         */
        database_id: Aliased$3(lstr$2),
        /**
         * The code assigned by the database identified in
         * _database_2.database_id.
         */
        database_code: str$5,
    },
    /**
     * Data items in the ENTITY category record details (such as
     * chemical composition, name and source) about the molecular
     * entities that are present in the crystallographic structure.
     *
     * Items in the various ENTITY subcategories provide a full
     * chemical description of these molecular entities.
     *
     * Entities are of three types:  polymer, non-polymer and water.
     * Note that the water category includes only water;  ordered
     * solvent such as sulfate ion or acetone would be described as
     * individual non-polymer entities.
     *
     * The ENTITY category is specific to macromolecular CIF
     * applications and replaces the function of the CHEMICAL category
     * in the CIF core.
     *
     * It is important to remember that the ENTITY data are not the
     * result of the crystallographic experiment;  those results are
     * represented by the ATOM_SITE data items. ENTITY data items
     * describe the chemistry of the molecules under investigation
     * and can most usefully be thought of as the ideal groups to which
     * the structure is restrained or constrained during refinement.
     *
     * It is also important to remember that entities do not correspond
     * directly to the enumeration of the contents of the asymmetric
     * unit. Entities are described only once, even in those structures
     * that contain multiple observations of an entity. The
     * STRUCT_ASYM data items, which reference the entity list,
     * describe and label the contents of the asymmetric unit.
     */
    entity: {
        /**
         * A description of special aspects of the entity.
         */
        details: str$5,
        /**
         * Formula mass in daltons of the entity.
         */
        formula_weight: float$5,
        /**
         * The value of _entity.id must uniquely identify a record in the
         * ENTITY list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * The method by which the sample for the entity was produced.
         * Entities isolated directly from natural sources (tissues, soil
         * samples etc.) are expected to have further information in the
         * ENTITY_SRC_NAT category. Entities isolated from genetically
         * manipulated sources are expected to have further information in
         * the ENTITY_SRC_GEN category.
         */
        src_method: Aliased$3(lstr$2),
        /**
         * Defines the type of the entity.
         *
         * Polymer entities are expected to have corresponding
         * ENTITY_POLY and associated entries.
         *
         * Non-polymer entities are expected to have corresponding
         * CHEM_COMP and associated entries.
         *
         * Water entities are not expected to have corresponding
         * entries in the ENTITY category.
         */
        type: Aliased$3(lstr$2),
        /**
         * A description of the entity.
         *
         * Corresponds to the compound name in the PDB format.
         */
        pdbx_description: List$1(',', x => x),
        /**
         * A place holder for the number of molecules of the entity in
         * the entry.
         */
        pdbx_number_of_molecules: int$5,
        /**
         * Details about any entity mutation(s).
         */
        pdbx_mutation: str$5,
        /**
         * Entity fragment description(s).
         */
        pdbx_fragment: str$5,
        /**
         * Enzyme Commission (EC) number(s)
         */
        pdbx_ec: List$1(',', x => x),
    },
    /**
     * Data items in the ENTITY_POLY category record details about the
     * polymer, such as the type of the polymer, the number of
     * monomers and whether it has nonstandard features.
     */
    entity_poly: {
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * A flag to indicate whether the polymer contains at least
         * one monomer-to-monomer link different from that implied by
         * _entity_poly.type.
         */
        nstd_linkage: Aliased$3(lstr$2),
        /**
         * A flag to indicate whether the polymer contains at least
         * one monomer that is not considered standard.
         */
        nstd_monomer: Aliased$3(lstr$2),
        /**
         * The type of the polymer.
         */
        type: Aliased$3(str$5),
        /**
         * The PDB strand/chain id(s) corresponding to this polymer entity.
         */
        pdbx_strand_id: List$1(',', x => x),
        /**
         * Sequence of protein or nucleic acid polymer in standard one-letter
         * codes of amino acids or nucleotides. Non-standard amino
         * acids/nucleotides are represented by their Chemical
         * Component Dictionary (CCD) codes in
         * parenthesis. Deoxynucleotides are represented by the
         * specially-assigned 2-letter CCD codes in parenthesis,
         * with 'D' prefix added to their ribonucleotide
         * counterparts. For hybrid polymer, each residue is
         * represented by the code of its individual type. A
         * cyclic polymer is represented in linear sequence from
         * the chosen start to end.
         *
         * A for Alanine or Adenosine-5'-monophosphate
         * C for Cysteine or Cytidine-5'-monophosphate
         * D for Aspartic acid
         * E for Glutamic acid
         * F for Phenylalanine
         * G for Glycine or Guanosine-5'-monophosphate
         * H for Histidine
         * I for Isoleucine or Inosinic Acid
         * L for Leucine
         * K for Lysine
         * M for Methionine
         * N for Asparagine  or Unknown ribonucleotide
         * O for Pyrrolysine
         * P for Proline
         * Q for Glutamine
         * R for Arginine
         * S for Serine
         * T for Threonine
         * U for Selenocysteine or Uridine-5'-monophosphate
         * V for Valine
         * W for Tryptophan
         * Y for Tyrosine
         * (DA) for 2'-deoxyadenosine-5'-monophosphate
         * (DC) for 2'-deoxycytidine-5'-monophosphate
         * (DG) for 2'-deoxyguanosine-5'-monophosphate
         * (DT) for Thymidine-5'-monophosphate
         * (MSE) for Selenomethionine
         * (SEP) for Phosphoserine
         * (PTO) for Phosphothreonine
         * (PTR) for Phosphotyrosine
         * (PCA) for Pyroglutamic acid
         * (UNK) for Unknown amino acid
         * (ACE) for Acetylation cap
         * (NH2) for Amidation cap
         */
        pdbx_seq_one_letter_code: str$5,
        /**
         * Canonical sequence of protein or nucleic acid polymer in standard
         * one-letter codes of amino acids or nucleotides,
         * corresponding to the sequence in
         * _entity_poly.pdbx_seq_one_letter_code. Non-standard
         * amino acids/nucleotides are represented by the codes of
         * their parents if parent is specified in
         * _chem_comp.mon_nstd_parent_comp_id, or by letter 'X' if
         * parent is not specified. Deoxynucleotides are
         * represented by their canonical one-letter codes of A,
         * C, G, or T.
         *
         * For modifications with several parent amino acids,
         * all corresponding parent amino acid codes will be listed
         * (ex. chromophores).
         */
        pdbx_seq_one_letter_code_can: str$5,
        /**
         * For Structural Genomics entries, the sequence's target identifier registered at the TargetTrack database.
         */
        pdbx_target_identifier: str$5,
    },
    /**
     * Data items in the ENTITY_POLY_SEQ category specify the sequence
     * of monomers in a polymer. Allowance is made for the possibility
     * of microheterogeneity in a sample by allowing a given sequence
     * number to be correlated with more than one monomer ID. The
     * corresponding ATOM_SITE entries should reflect this
     * heterogeneity.
     */
    entity_poly_seq: {
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * A flag to indicate whether this monomer in the polymer is
         * heterogeneous in sequence.
         */
        hetero: Aliased$3(lstr$2),
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        mon_id: str$5,
        /**
         * The value of _entity_poly_seq.num must uniquely and sequentially
         * identify a record in the ENTITY_POLY_SEQ list.
         *
         * Note that this item must be a number and that the sequence
         * numbers must progress in increasing numerical order.
         */
        num: int$5,
    },
    /**
     * There is only one item in the ENTRY category, _entry.id. This
     * data item gives a name to this entry and is indirectly a key to
     * the categories (such as CELL, GEOM, EXPTL) that describe
     * information pertinent to the entire data block.
     */
    entry: {
        /**
         * The value of _entry.id identifies the data block.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
    },
    /**
     * Data items in the EXPTL category record details about the
     * experimental work prior to the intensity measurements and
     * details about the absorption-correction technique employed.
     */
    exptl: {
        /**
         * This data item is a pointer to _entry.id in the ENTRY category.
         */
        entry_id: str$5,
        /**
         * The method used in the experiment.
         */
        method: Aliased$3(str$5),
    },
    /**
     * Data items in the SOFTWARE category record details about
     * the software used in the structure analysis, which implies
     * any software used in the generation of any data items
     * associated with the structure determination and
     * structure representation.
     *
     * These data items allow computer programs to be referenced
     * in more detail than data items in the COMPUTING category do.
     */
    software: {
        /**
         * The classification of the program according to its
         * major function.
         */
        classification: str$5,
        /**
         * The date the software was released.
         */
        date: str$5,
        /**
         * Description of the software.
         */
        description: str$5,
        /**
         * The name of the software.
         */
        name: str$5,
        /**
         * The classification of the software according to the most
         * common types.
         */
        type: Aliased$3(lstr$2),
        /**
         * The version of the software.
         */
        version: str$5,
        /**
         * An ordinal index for this category
         */
        pdbx_ordinal: int$5,
    },
    /**
     * Data items in the STRUCT category record details about the
     * description of the crystallographic structure.
     */
    struct: {
        /**
         * This data item is a pointer to _entry.id in the ENTRY category.
         */
        entry_id: str$5,
        /**
         * A title for the data block. The author should attempt to convey
         * the essence of the structure archived in the CIF in the title,
         * and to distinguish this structural result from others.
         */
        title: str$5,
        /**
         * An automatically generated descriptor for an NDB structure or
         * the unstructured content of the PDB COMPND record.
         */
        pdbx_descriptor: str$5,
    },
    /**
     * Data items in the STRUCT_ASYM category record details about the
     * structural elements in the asymmetric unit.
     */
    struct_asym: {
        /**
         * A description of special aspects of this portion of the contents
         * of the asymmetric unit.
         */
        details: str$5,
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * The value of _struct_asym.id must uniquely identify a record in
         * the STRUCT_ASYM list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * This data item indicates whether the structural elements are modified.
         */
        pdbx_modified: str$5,
        /**
         * A flag indicating that this entity was originally labeled
         * with a blank PDB chain id.
         */
        pdbx_blank_PDB_chainid_flag: Aliased$3(str$5),
    },
    /**
     * Data items in the STRUCT_CONF category record details about
     * the backbone conformation of a segment of polymer.
     *
     * Data items in the STRUCT_CONF_TYPE category define the
     * criteria used to identify the backbone conformations.
     */
    struct_conf: {
        /**
         * A component of the identifier for the residue at which the
         * conformation segment begins.
         *
         * This data item is a pointer to _atom_site.label_asym_id in the
         * ATOM_SITE category.
         */
        beg_label_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment begins.
         *
         * This data item is a pointer to _atom_site.label_comp_id in
         * the ATOM_SITE category.
         */
        beg_label_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment begins.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        beg_label_seq_id: int$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment begins.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        beg_auth_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment begins.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in
         * the ATOM_SITE category.
         */
        beg_auth_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment begins.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        beg_auth_seq_id: int$5,
        /**
         * This data item is a pointer to _struct_conf_type.id in the
         * STRUCT_CONF_TYPE category.
         */
        conf_type_id: Aliased$3(lstr$2),
        /**
         * A description of special aspects of the conformation assignment.
         */
        details: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment ends.
         *
         * This data item is a pointer to _atom_site.label_asym_id in the
         * ATOM_SITE category.
         */
        end_label_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment ends.
         *
         * This data item is a pointer to _atom_site.label_comp_id in the
         * ATOM_SITE category.
         */
        end_label_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment ends.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        end_label_seq_id: int$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment ends.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        end_auth_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment ends.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        end_auth_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment ends.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        end_auth_seq_id: int$5,
        /**
         * The value of _struct_conf.id must uniquely identify a record in
         * the STRUCT_CONF list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment starts.
         */
        pdbx_beg_PDB_ins_code: str$5,
        /**
         * A component of the identifier for the residue at which the
         * conformation segment ends.
         */
        pdbx_end_PDB_ins_code: str$5,
        /**
         * This item is a place holder for the helix class used in the PDB
         * HELIX record.
         */
        pdbx_PDB_helix_class: str$5,
        /**
         * A placeholder for the lengths of the helix of the PDB
         * HELIX record.
         */
        pdbx_PDB_helix_length: int$5,
        /**
         * A placeholder for the helix identifier of the PDB
         * HELIX record.
         */
        pdbx_PDB_helix_id: str$5,
    },
    /**
     * Data items in the STRUCT_CONN category record details about
     * the connections between portions of the structure. These can be
     * hydrogen bonds, salt bridges, disulfide bridges and so on.
     *
     * The STRUCT_CONN_TYPE records define the criteria used to
     * identify these connections.
     */
    struct_conn: {
        /**
         * This data item is a pointer to _struct_conn_type.id in the
         * STRUCT_CONN_TYPE category.
         */
        conn_type_id: Aliased$3(lstr$2),
        /**
         * A description of special aspects of the connection.
         */
        details: str$5,
        /**
         * The value of _struct_conn.id must uniquely identify a record in
         * the STRUCT_CONN list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.label_asym_id in the
         * ATOM_SITE category.
         */
        ptnr1_label_asym_id: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        ptnr1_label_atom_id: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.label_comp_id in the
         * ATOM_SITE category.
         */
        ptnr1_label_comp_id: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        ptnr1_label_seq_id: int$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        ptnr1_auth_asym_id: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        ptnr1_auth_comp_id: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        ptnr1_auth_seq_id: int$5,
        /**
         * Describes the symmetry operation that should be applied to the
         * atom set specified by _struct_conn.ptnr1_label* to generate the
         * first partner in the structure connection.
         */
        ptnr1_symmetry: str$5,
        /**
         * A component of the identifier for partner 2 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.label_asym_id in the
         * ATOM_SITE category.
         */
        ptnr2_label_asym_id: str$5,
        /**
         * A component of the identifier for partner 2 of the structure
         * connection.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        ptnr2_label_atom_id: str$5,
        /**
         * A component of the identifier for partner 2 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.label_comp_id in the
         * ATOM_SITE category.
         */
        ptnr2_label_comp_id: str$5,
        /**
         * A component of the identifier for partner 2 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        ptnr2_label_seq_id: int$5,
        /**
         * A component of the identifier for partner 2 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        ptnr2_auth_asym_id: str$5,
        /**
         * A component of the identifier for partner 2 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        ptnr2_auth_comp_id: str$5,
        /**
         * A component of the identifier for partner 2 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        ptnr2_auth_seq_id: int$5,
        /**
         * Describes the symmetry operation that should be applied to the
         * atom set specified by _struct_conn.ptnr2_label* to generate the
         * second partner in the structure connection.
         */
        ptnr2_symmetry: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.pdbx_PDB_ins_code in the
         * ATOM_SITE category.
         */
        pdbx_ptnr1_PDB_ins_code: str$5,
        /**
         * A component of the identifier for partner 1 of the
         * structure connection. This data item is a pointer to
         * _atom_site.label_alt_id in the ATOM_SITE category.
         */
        pdbx_ptnr1_label_alt_id: str$5,
        /**
         * A placeholder for the standard residue name found in
         * the MODRES record of a PDB file.
         */
        pdbx_ptnr1_standard_comp_id: str$5,
        /**
         * A component of the identifier for partner 1 of the structure
         * connection.
         *
         * This data item is a pointer to _atom_site.pdbx_PDB_ins_code in the
         * ATOM_SITE category.
         */
        pdbx_ptnr2_PDB_ins_code: str$5,
        /**
         * A component of the identifier for partner 2 of the
         * structure connection. This data item is a pointer to
         * _atom_site.label_alt_id in the ATOM_SITE category.
         */
        pdbx_ptnr2_label_alt_id: str$5,
        /**
         * A component of the identifier for partner 3 of the
         * structure connection. This data item is a pointer to
         * _atom_site.pdbx_PDB_ins_code in the ATOM_SITE category.
         */
        pdbx_ptnr3_PDB_ins_code: str$5,
        /**
         * A component of the identifier for partner 3 of the
         * structure connection. This data item is a pointer to
         * _atom_site.label_alt_id in the ATOM_SITE category.
         */
        pdbx_ptnr3_label_alt_id: str$5,
        /**
         * A component of the identifier for partner 3 of the
         * structure connection. This data item is a pointer to
         * _atom_site.label_asym_id in the ATOM_SITE category.
         */
        pdbx_ptnr3_label_asym_id: str$5,
        /**
         * A component of the identifier for partner 3 of the
         * structure connection. This data item is a pointer to
         * _atom_site.label_atom_id in the ATOM_SITE category.
         */
        pdbx_ptnr3_label_atom_id: str$5,
        /**
         * A component of the identifier for partner 3 of the
         * structure connection. This data item is a pointer to
         * _atom_site.label_comp_id in the ATOM_SITE category.
         */
        pdbx_ptnr3_label_comp_id: str$5,
        /**
         * A component of the identifier for partner 1 of the
         * structure connection. This data item is a pointer to
         * _atom_site.label_seq_id in the ATOM_SITE category.
         */
        pdbx_ptnr3_label_seq_id: int$5,
        /**
         * A placeholder for the PDB id in the case the category
         * is used to hold the information of the MODRES record of
         * a PDB file.
         */
        pdbx_PDB_id: str$5,
        /**
         * Distance value for this contact.
         */
        pdbx_dist_value: float$5,
        /**
         * The chemical bond order associated with the specified atoms in
         * this contact.
         */
        pdbx_value_order: Aliased$3(lstr$2),
    },
    /**
     * Data items in the STRUCT_CONN_TYPE category record details
     * about the criteria used to identify interactions between
     * portions of the structure.
     */
    struct_conn_type: {
        /**
         * The criteria used to define the interaction.
         */
        criteria: str$5,
        /**
         * The chemical or structural type of the interaction.
         */
        id: Aliased$3(lstr$2),
        /**
         * A reference that specifies the criteria used to define the
         * interaction.
         */
        reference: str$5,
    },
    /**
     * Data items in the STRUCT_KEYWORDS category specify keywords
     * that describe the chemical structure in this entry.
     */
    struct_keywords: {
        /**
         * This data item is a pointer to _entry.id in the ENTRY category.
         */
        entry_id: str$5,
        /**
         * Keywords describing this structure.
         */
        text: List$1(',', x => x),
        /**
         * Terms characterizing the macromolecular structure.
         */
        pdbx_keywords: str$5,
    },
    /**
     * Data items in the STRUCT_NCS_OPER category describe the
     * noncrystallographic symmetry operations.
     *
     * Each operator is specified as a matrix and a subsequent
     * translation vector. Operators need not represent proper
     * rotations.
     */
    struct_ncs_oper: {
        /**
         * A code to indicate whether this operator describes a
         * relationship between coordinates all of which are given in the
         * data block (in which case the value of code is 'given'), or
         * whether the operator is used to generate new coordinates from
         * those that are given in the data block (in which case the value
         * of code is 'generate').
         */
        code: Aliased$3(str$5),
        /**
         * A description of special aspects of the noncrystallographic
         * symmetry operator.
         */
        details: str$5,
        /**
         * The value of _struct_ncs_oper.id must uniquely identify a
         * record in the STRUCT_NCS_OPER list.
         *
         * Note that for PDB _struct_ncs_oper.id must be a number.
         */
        id: int$5,
        /**
         * The elements of the 3x3 matrix component of a
         * noncrystallographic symmetry operation.
         */
        matrix: Matrix$1(3, 3),
        /**
         * The elements of the three-element vector component of a
         * noncrystallographic symmetry operation.
         */
        vector: Vector$1(3),
    },
    /**
     * Data items in the STRUCT_SHEET_RANGE category record details
     * about the residue ranges that form a beta-sheet. Residues are
     * included in a range if they made beta-sheet-type hydrogen-bonding
     * interactions with at least one adjacent strand and if there are
     * at least two residues in the range.
     */
    struct_sheet_range: {
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range begins.
         *
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        beg_label_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range begins.
         *
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        beg_label_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range begins.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        beg_label_seq_id: int$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range ends.
         *
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        end_label_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range ends.
         *
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        end_label_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range ends.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        end_label_seq_id: int$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range begins.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        beg_auth_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range begins.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in
         * the ATOM_SITE category.
         */
        beg_auth_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range begins.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        beg_auth_seq_id: int$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range ends.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        end_auth_asym_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range ends.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        end_auth_comp_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta-sheet range ends.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        end_auth_seq_id: int$5,
        /**
         * The value of _struct_sheet_range.id must uniquely identify a
         * range in a given sheet in the STRUCT_SHEET_RANGE list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * This data item is a pointer to _struct_sheet.id in the
         * STRUCT_SHEET category.
         */
        sheet_id: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta sheet range begins.  Insertion code.
         */
        pdbx_beg_PDB_ins_code: str$5,
        /**
         * A component of the identifier for the residue at which the
         * beta sheet range ends. Insertion code.
         */
        pdbx_end_PDB_ins_code: str$5,
    },
    /**
     * Data items in the STRUCT_SITE category record details about
     * portions of the structure that contribute to structurally
     * relevant sites (e.g. active sites, substrate-binding subsites,
     * metal-coordination sites).
     */
    struct_site: {
        /**
         * A description of special aspects of the site.
         */
        details: str$5,
        /**
         * The value of _struct_site.id must uniquely identify a record in
         * the STRUCT_SITE list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * Number of residues in the site.
         */
        pdbx_num_residues: int$5,
        /**
         * Source of evidence supporting the assignment of this site.
         */
        pdbx_evidence_code: str$5,
        /**
         * A component of the identifier for the ligand in the site.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        pdbx_auth_asym_id: str$5,
        /**
         * A component of the identifier for the ligand in the site.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        pdbx_auth_comp_id: str$5,
        /**
         * A component of the identifier for the ligand in the site.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        pdbx_auth_seq_id: str$5,
        /**
         * PDB insertion code for the ligand in the site.
         */
        pdbx_auth_ins_code: str$5,
    },
    /**
     * Data items in the STRUCT_SITE_GEN category record details about
     * the generation of portions of the structure that contribute to
     * structurally relevant sites.
     */
    struct_site_gen: {
        /**
         * A description of special aspects of the symmetry generation of
         * this portion of the structural site.
         */
        details: str$5,
        /**
         * The value of _struct_site_gen.id must uniquely identify a record
         * in the STRUCT_SITE_GEN list.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        id: str$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _atom_sites_alt.id in the
         * ATOM_SITES_ALT category.
         */
        label_alt_id: str$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _atom_site.label_asym_id in the
         * ATOM_SITE category.
         */
        label_asym_id: str$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        label_atom_id: str$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _atom_site.label_comp_id in the
         * ATOM_SITE category.
         */
        label_comp_id: str$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        label_seq_id: int$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        auth_asym_id: str$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        auth_comp_id: str$5,
        /**
         * A component of the identifier for participants in the site.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        auth_seq_id: str$5,
        /**
         * This data item is a pointer to _struct_site.id in the STRUCT_SITE
         * category.
         */
        site_id: str$5,
        /**
         * Describes the symmetry operation that should be applied to the
         * atom set specified by _struct_site_gen.label* to generate a
         * portion of the site.
         */
        symmetry: str$5,
        /**
         * PDB insertion code.
         */
        pdbx_auth_ins_code: str$5,
        /**
         * Number of residues in the site.
         */
        pdbx_num_res: int$5,
    },
    /**
     * Data items in the SYMMETRY category record details about the
     * space-group symmetry.
     */
    symmetry: {
        /**
         * This data item is a pointer to _entry.id in the ENTRY category.
         */
        entry_id: str$5,
        /**
         * The cell settings for this space-group symmetry.
         */
        cell_setting: Aliased$3(lstr$2),
        /**
         * Space-group number from International Tables for Crystallography
         * Vol. A (2002).
         */
        Int_Tables_number: int$5,
        /**
         * Space-group symbol as described by Hall (1981). This symbol
         * gives the space-group setting explicitly. Leave spaces between
         * the separate components of the symbol.
         *
         * Ref: Hall, S. R. (1981). Acta Cryst. A37, 517-525; erratum
         * (1981) A37, 921.
         */
        space_group_name_Hall: str$5,
        /**
         * Hermann-Mauguin space-group symbol. Note that the
         * Hermann-Mauguin symbol does not necessarily contain complete
         * information about the symmetry and the space-group origin. If
         * used, always supply the FULL symbol from International Tables
         * for Crystallography Vol. A (2002) and indicate the origin and
         * the setting if it is not implicit. If there is any doubt that
         * the equivalent positions can be uniquely deduced from this
         * symbol, specify the  _symmetry_equiv.pos_as_xyz or
         * _symmetry.space_group_name_Hall  data items as well. Leave
         * spaces between symbols referring to
         * different axes.
         */
        'space_group_name_H-M': str$5,
    },
    /**
     * These are internal RCSB records to keep track of data processing
     * and status of the entry.
     */
    pdbx_database_status: {
        /**
         * Code for status of file.
         */
        status_code: Aliased$3(str$5),
        /**
         * Code for status of structure factor file.
         */
        status_code_sf: Aliased$3(str$5),
        /**
         * Code for status of NMR constraints file.
         */
        status_code_mr: Aliased$3(str$5),
        /**
         * The value of _pdbx_database_status.entry_id identifies the data block.
         */
        entry_id: str$5,
        /**
         * The date of initial deposition.  (The first message for
         * deposition has been received.)
         */
        recvd_initial_deposition_date: str$5,
        /**
         * This code indicates whether the entry belongs to
         * Structural Genomics Project.
         */
        SG_entry: Aliased$3(lstr$2),
        /**
         * The site where the file was deposited.
         */
        deposit_site: Aliased$3(str$5),
        /**
         * The site where the file was deposited.
         */
        process_site: Aliased$3(str$5),
        /**
         * Code for status of chemical shift data file.
         */
        status_code_cs: Aliased$3(str$5),
        /**
         * The methods development category in which this
         * entry has been placed.
         */
        methods_development_category: Aliased$3(str$5),
        /**
         * A flag indicating that the entry is compatible with the PDB format.
         *
         * A value of 'N' indicates that the no PDB format data file is
         * corresponding to this entry is available in the PDB archive.
         */
        pdb_format_compatible: Aliased$3(lstr$2),
    },
    /**
     * The PDBX_NONPOLY_SCHEME category provides residue level nomenclature
     * mapping for non-polymer entities.
     */
    pdbx_nonpoly_scheme: {
        /**
         * Pointer to _atom_site.label_asym_id.
         */
        asym_id: str$5,
        /**
         * Pointer to _atom_site.label_entity_id.
         */
        entity_id: str$5,
        /**
         * Pointer to _atom_site.label_comp_id.
         */
        mon_id: str$5,
        /**
         * PDB strand/chain id.
         */
        pdb_strand_id: str$5,
        /**
         * NDB/RCSB residue number.
         */
        ndb_seq_num: str$5,
        /**
         * PDB residue number.
         */
        pdb_seq_num: str$5,
        /**
         * Author provided residue numbering.   This value may differ from the PDB residue
         * number and may not correspond to residue numbering within the coordinate records.
         */
        auth_seq_num: str$5,
        /**
         * PDB residue identifier.
         */
        pdb_mon_id: str$5,
        /**
         * Author provided residue identifier.   This value may differ from the PDB residue
         * identifier and may not correspond to residue identification within the coordinate records.
         */
        auth_mon_id: str$5,
        /**
         * PDB insertion code.
         */
        pdb_ins_code: str$5,
    },
    /**
     * Data items in PDBX_DATABASE_RELATED contain references to entries
     * that are related to the this entry.
     */
    pdbx_database_related: {
        /**
         * The name of the database containing the related entry.
         */
        db_name: str$5,
        /**
         * A description of the related entry.
         */
        details: str$5,
        /**
         * The identifying code in the related database.
         */
        db_id: str$5,
        /**
         * The identifying content type of the related entry.
         */
        content_type: Aliased$3(str$5),
    },
    /**
     * The PDBX_ENTITY_NONPOLY category provides a mapping between
     * entity and the nonpolymer component
     */
    pdbx_entity_nonpoly: {
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP category.
         */
        comp_id: str$5,
        /**
         * A name for the non-polymer entity
         */
        name: str$5,
    },
    /**
     * PDBX_CHEM_COMP_SYNONYMS holds chemical name and synonym correspondences.
     */
    pdbx_chem_comp_synonyms: {
        /**
         * The synonym of this particular chemical component.
         */
        name: str$5,
        /**
         * The chemical component for which this synonym applies.
         */
        comp_id: str$5,
        /**
         * The provenance of this synonym.
         */
        provenance: Aliased$3(str$5),
    },
    /**
     * Data items in the CHEM_COMP_IDENTIFIER category provide
     * identifiers for chemical components.
     */
    pdbx_chem_comp_identifier: {
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        comp_id: str$5,
        /**
         * This data item contains the identifier value for this
         * component.
         */
        identifier: str$5,
        /**
         * This data item contains the identifier type.
         */
        type: Aliased$3(str$5),
        /**
         * This data item contains the name of the program
         * or library used to compute the identifier.
         */
        program: str$5,
        /**
         * This data item contains the version of the program
         * or library used to compute the identifier.
         */
        program_version: str$5,
    },
    /**
     * Data items in the PDBX_UNOBS_OR_ZERO_OCC_RESIDUES category list the
     * residues within the entry that are not observed or have zero occupancy.
     */
    pdbx_unobs_or_zero_occ_residues: {
        /**
         * The value of _pdbx_unobs_or_zero_occ_residues.id must uniquely identify
         * each item in the PDBX_UNOBS_OR_ZERO_OCC_RESIDUES list.
         *
         * This is an integer serial number.
         */
        id: int$5,
        /**
         * The value of polymer flag indicates whether the unobserved or
         * zero occupancy residue is part of a polymer chain or not
         */
        polymer_flag: Aliased$3(lstr$2),
        /**
         * The value of occupancy flag indicates whether the residue
         * is unobserved (= 1) or the coordinates have an occupancy of zero (=0)
         */
        occupancy_flag: Aliased$3(int$5),
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.pdbx_PDB_model_num in the
         * ATOM_SITE category.
         */
        PDB_model_num: int$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        auth_asym_id: str$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        auth_comp_id: str$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        auth_seq_id: str$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.pdbx_PDB_ins_code in the
         * ATOM_SITE category.
         */
        PDB_ins_code: str$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.label_asym_id in the
         * ATOM_SITE category.
         */
        label_asym_id: str$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.label_comp_id in the
         * ATOM_SITE category.
         */
        label_comp_id: str$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        label_seq_id: int$5,
    },
    /**
     * Data items in the PDBX_STRUCT_MOD_RESIDUE category list the
     * modified polymer components in the entry and provide some
     * details describing the nature of the modification.
     */
    pdbx_struct_mod_residue: {
        /**
         * The value of _pdbx_struct_mod_residue.id must uniquely identify
         * each item in the PDBX_STRUCT_MOD_RESIDUE list.
         *
         * This is an integer serial number.
         */
        id: int$5,
        /**
         * Part of the identifier for the modified polymer component.
         *
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        auth_asym_id: str$5,
        /**
         * Part of the identifier for the modified polymer component.
         *
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        auth_comp_id: str$5,
        /**
         * Part of the identifier for the modified polymer component.
         *
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        auth_seq_id: int$5,
        /**
         * Part of the identifier for the modified polymer component.
         *
         * This data item is a pointer to _atom_site.pdbx_PDB_ins_code in the
         * ATOM_SITE category.
         */
        PDB_ins_code: str$5,
        /**
         * Part of the identifier for the modified polymer component.
         *
         * This data item is a pointer to _atom_site.label_asym_id in the
         * ATOM_SITE category.
         */
        label_asym_id: str$5,
        /**
         * Part of the identifier for the modified polymer component.
         *
         * This data item is a pointer to _atom_site.label_comp_id in the
         * ATOM_SITE category.
         */
        label_comp_id: str$5,
        /**
         * Part of the identifier for the unobserved or zero occupancy residue.
         *
         * This data item is a pointer to _atom_site.label_seq_id in the
         * ATOM_SITE category.
         */
        label_seq_id: int$5,
        /**
         * The parent component identifier for this modified polymer component.
         */
        parent_comp_id: str$5,
        /**
         * Details of the modification for this polymer component.
         */
        details: str$5,
    },
    /**
     * Data items in the PDBX_STRUCT_OPER_LIST category describe
     * Cartesian rotation and translation operations required to
     * generate or transform the coordinates deposited with this entry.
     */
    pdbx_struct_oper_list: {
        /**
         * This identifier code must uniquely identify a
         * record in the PDBX_STRUCT_OPER_LIST list.
         */
        id: str$5,
        /**
         * A code to indicate the type of operator.
         */
        type: Aliased$3(str$5),
        /**
         * A descriptive name for the transformation operation.
         */
        name: str$5,
        /**
         * The symmetry operation corresponding to the transformation operation.
         */
        symmetry_operation: str$5,
        /**
         * The elements of the 3x3 matrix component of the
         * transformation operation.
         */
        matrix: Matrix$1(3, 3),
        /**
         * The elements of the three-element vector component of the
         * transformation operation.
         */
        vector: Vector$1(3),
    },
    /**
     * Data items in the PDBX_STRUCT_ASSEMBLY category record details about
     * the structural elements that form macromolecular assemblies.
     */
    pdbx_struct_assembly: {
        /**
         * Provides details of the method used to determine or
         * compute the assembly.
         */
        method_details: str$5,
        /**
         * Provides the details of the oligomeric state of the assembly.
         */
        oligomeric_details: str$5,
        /**
         * The number of polymer molecules in the assembly.
         */
        oligomeric_count: int$5,
        /**
         * A description of special aspects of the macromolecular assembly.
         *
         * In the PDB, 'representative helical assembly', 'complete point assembly',
         * 'complete icosahedral assembly', 'software_defined_assembly', 'author_defined_assembly',
         * and 'author_and_software_defined_assembly' are considered "biologically relevant assemblies.
         */
        details: str$5,
        /**
         * The value of _pdbx_struct_assembly.id must uniquely identify a record in
         * the PDBX_STRUCT_ASSEMBLY list.
         */
        id: str$5,
    },
    /**
     * Data items in the PDBX_STRUCT_ASSEMBLY_GEN category record details about
     * the generation of each macromolecular assemblies. The PDBX_STRUCT_ASSEMBLY_GEN
     * data items provide the specifications of the components that
     * constitute that assembly in terms of cartesian transformations.
     */
    pdbx_struct_assembly_gen: {
        /**
         * This data item is a pointer to _struct_asym.id in
         * the STRUCT_ASYM category.
         *
         * This item may be expressed as a comma separated list of identifiers.
         */
        asym_id_list: List$1(',', x => x),
        /**
         * This data item is a pointer to _pdbx_struct_assembly.id in the
         * PDBX_STRUCT_ASSEMBLY category.
         */
        assembly_id: str$5,
        /**
         * Identifies the operation of collection of operations
         * from category PDBX_STRUCT_OPER_LIST.
         *
         * Operation expressions may have the forms:
         *
         * (1)        the single operation 1
         * (1,2,5)    the operations 1, 2, 5
         * (1-4)      the operations 1,2,3 and 4
         * (1,2)(3,4) the combinations of operations
         * 3 and 4 followed by 1 and 2 (i.e.
         * the cartesian product of parenthetical
         * groups applied from right to left)
         */
        oper_expression: str$5,
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_LIST category record
     * the list of entities within each reference molecule.
     */
    pdbx_reference_entity_list: {
        /**
         * The value of _pdbx_reference_entity_list.prd_id is a reference
         * _pdbx_reference_molecule.prd_id in the PDBX_REFERENCE_MOLECULE category.
         */
        prd_id: str$5,
        /**
         * The value of _pdbx_reference_entity_list.ref_entity_id is a unique identifier
         * the a constituent entity within this reference molecule.
         */
        ref_entity_id: str$5,
        /**
         * Defines the polymer characteristic of the entity.
         */
        type: Aliased$3(lstr$2),
        /**
         * Additional details about this entity.
         */
        details: str$5,
        /**
         * The component number of this entity within the molecule.
         */
        component_id: int$5,
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_LINK category give details about
     * the linkages between entities within reference molecules.
     */
    pdbx_reference_entity_link: {
        /**
         * The value of _pdbx_reference_entity_link.link_id uniquely identifies
         * linkages between entities with a molecule.
         */
        link_id: int$5,
        /**
         * The value of _pdbx_reference_entity_link.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the PDBX_REFERENCE_ENTITY_LIST category.
         */
        prd_id: str$5,
        /**
         * A description of special aspects of a linkage between
         * chemical components in the structure.
         */
        details: str$5,
        /**
         * The reference entity id of the first of the two entities joined by the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_list.ref_entity_id
         * in the PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id_1: str$5,
        /**
         * The reference entity id of the second of the two entities joined by the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_list.ref_entity_id
         * in the PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id_2: str$5,
        /**
         * For a polymer entity, the sequence number in the first of
         * the two entities containing the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_1: int$5,
        /**
         * For a polymer entity, the sequence number in the second of
         * the two entities containing the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_2: int$5,
        /**
         * The component identifier in the first of the two entities containing the linkage.
         *
         * For polymer entities, this data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         *
         * For non-polymer entities, this data item is a pointer to
         * _pdbx_reference_entity_nonpoly.chem_comp_id in the
         * PDBX_REFERENCE_ENTITY_NONPOLY category.
         */
        comp_id_1: str$5,
        /**
         * The component identifier in the second of the two entities containing the linkage.
         *
         * For polymer entities, this data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         *
         * For non-polymer entities, this data item is a pointer to
         * _pdbx_reference_entity_nonpoly.chem_comp_id in the
         * PDBX_REFERENCE_ENTITY_NONPOLY category.
         */
        comp_id_2: str$5,
        /**
         * The atom identifier/name in the first of the two entities containing the linkage.
         */
        atom_id_1: str$5,
        /**
         * The atom identifier/name in the second of the two entities containing the linkage.
         */
        atom_id_2: str$5,
        /**
         * The bond order target for the chemical linkage.
         */
        value_order: Aliased$3(lstr$2),
        /**
         * The entity component identifier for the first of two entities containing the linkage.
         */
        component_1: int$5,
        /**
         * The entity component identifier for the second of two entities containing the linkage.
         */
        component_2: int$5,
        /**
         * A code indicating the entity types involved in the linkage.
         */
        link_class: Aliased$3(str$5),
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_POLY_LINK category give details about
     * polymer linkages including both standard and non-standard linkages between
     * polymer componnents.
     */
    pdbx_reference_entity_poly_link: {
        /**
         * The value of _pdbx_reference_entity_poly_link.link_id uniquely identifies
         * a linkage within a polymer entity.
         */
        link_id: int$5,
        /**
         * The value of _pdbx_reference_entity_poly_link.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the PDBX_REFERENCE_ENTITY_POLY category.
         */
        prd_id: str$5,
        /**
         * The reference entity id of the polymer entity containing the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly.ref_entity_id
         * in the PDBX_REFERENCE_ENTITY_POLY category.
         */
        ref_entity_id: str$5,
        /**
         * The entity component identifier entity containing the linkage.
         */
        component_id: int$5,
        /**
         * For a polymer entity, the sequence number in the first of
         * the two components making the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_1: int$5,
        /**
         * For a polymer entity, the sequence number in the second of
         * the two components making the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_2: int$5,
        /**
         * The component identifier in the first of the two components making the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        comp_id_1: str$5,
        /**
         * The component identifier in the second of the two components making the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        comp_id_2: str$5,
        /**
         * The atom identifier/name in the first of the two components making
         * the linkage.
         */
        atom_id_1: str$5,
        /**
         * The atom identifier/name in the second of the two components making
         * the linkage.
         */
        atom_id_2: str$5,
        /**
         * The bond order target for the non-standard linkage.
         */
        value_order: Aliased$3(lstr$2),
    },
    /**
     * Data items in the PDBX_MOLECULE category identify reference molecules
     * within a PDB entry.
     */
    pdbx_molecule: {
        /**
         * The value of _pdbx_molecule.prd_id is the PDB accession code for this
         * reference molecule.
         */
        prd_id: str$5,
        /**
         * The value of _pdbx_molecule.instance_id is identifies a particular molecule
         * in the molecule list.
         */
        instance_id: int$5,
        /**
         * A reference to _struct_asym.id in the STRUCT_ASYM category.
         */
        asym_id: str$5,
    },
    /**
     * Data items in the PDBX_MOLECULE_FEATURES category record features of molecules
     * within a PDB entry.
     */
    pdbx_molecule_features: {
        /**
         * The value of _pdbx_molecule_features.prd_id is the accession code for this
         * reference molecule.
         */
        prd_id: str$5,
        /**
         * Broadly defines the function of the molecule.
         */
        class: Aliased$3(lstr$2),
        /**
         * Defines the structural classification of the molecule.
         */
        type: Aliased$3(lstr$2),
        /**
         * A name of the molecule.
         */
        name: str$5,
        /**
         * Additional details describing the molecule.
         */
        details: str$5,
    },
    /**
     * Data items in the ENTITY_SRC_NAT category record details of
     * the source from which the entity was obtained in cases
     * where the entity was isolated directly from a natural tissue.
     */
    entity_src_nat: {
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * Scientific name of the organism of the natural source.
         */
        pdbx_organism_scientific: str$5,
        /**
         * The plasmid containing the gene.
         */
        pdbx_plasmid_name: str$5,
        /**
         * This data item is an ordinal identifier for entity_src_nat data records.
         */
        pdbx_src_id: int$5,
        /**
         * The beginning polymer sequence position for the polymer section corresponding
         * to this source.
         *
         * A reference to the sequence position in the entity_poly category.
         */
        pdbx_beg_seq_num: int$5,
        /**
         * The ending polymer sequence position for the polymer section corresponding
         * to this source.
         *
         * A reference to the sequence position in the entity_poly category.
         */
        pdbx_end_seq_num: int$5,
    },
    /**
     * Data items in the ENTITY_SRC_GEN category record details of
     * the source from which the entity was obtained in cases
     * where the source was genetically manipulated.  The
     * following are treated separately:  items pertaining to the tissue
     * from which the gene was obtained, items pertaining to the host
     * organism for gene expression and items pertaining to the actual
     * producing organism (plasmid).
     */
    entity_src_gen: {
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * Identifies the gene.
         */
        pdbx_gene_src_gene: List$1(',', x => x),
        /**
         * Scientific name of the organism.
         */
        pdbx_gene_src_scientific_name: str$5,
        /**
         * The name of the plasmid that produced the entity in the host
         * organism. Where full details of the protein production are available
         * it would be expected that this item would be derived from
         * _pdbx_construct.name of the construct pointed to from
         * _entity_src_gen_express.plasmid_id.
         */
        plasmid_name: str$5,
        /**
         * This data item is an ordinal identifier for entity_src_gen data records.
         */
        pdbx_src_id: int$5,
        /**
         * The beginning polymer sequence position for the polymer section corresponding
         * to this source.
         *
         * A reference to the sequence position in the entity_poly category.
         */
        pdbx_beg_seq_num: int$5,
        /**
         * The ending polymer sequence position for the polymer section corresponding
         * to this source.
         *
         * A reference to the sequence position in the entity_poly category.
         */
        pdbx_end_seq_num: int$5,
    },
    /**
     * The data items in category PDBX_ENTITY_SRC_SYN record the source details
     * about chemically synthesized molecules.
     */
    pdbx_entity_src_syn: {
        /**
         * The scientific name of the organism from which the sequence of
         * the synthetic entity was derived.
         */
        organism_scientific: str$5,
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * This data item is an ordinal identifier for pdbx_entity_src_syn data records.
         */
        pdbx_src_id: int$5,
        /**
         * The beginning polymer sequence position for the polymer section corresponding
         * to this source.
         *
         * A reference to the sequence position in the entity_poly category.
         */
        pdbx_beg_seq_num: int$5,
        /**
         * The ending polymer sequence position for the polymer section corresponding
         * to this source.
         *
         * A reference to the sequence position in the entity_poly category.
         */
        pdbx_end_seq_num: int$5,
    },
    /**
     * Data items in the PDBX_ENTITY_BRANCH_DESCRIPTOR category provide
     * string descriptors of entity chemical structure.
     */
    pdbx_entity_branch_descriptor: {
        /**
         * This data item is a pointer to _entity_poly.entity_id in the ENTITY
         * category.
         */
        entity_id: str$5,
        /**
         * This data item contains the descriptor value for this
         * entity.
         */
        descriptor: str$5,
        /**
         * This data item contains the descriptor type.
         */
        type: Aliased$3(lstr$2),
        /**
         * This data item contains the name of the program
         * or library used to compute the descriptor.
         */
        program: str$5,
        /**
         * This data item contains the version of the program
         * or library used to compute the descriptor.
         */
        program_version: str$5,
        /**
         * Ordinal index for this category.
         */
        ordinal: int$5,
    },
    /**
     * Data items in the pdbx_entity_instance_feature category records
     * special features of selected entity instances.
     */
    pdbx_entity_instance_feature: {
        /**
         * Special structural details about this entity instance.
         */
        details: str$5,
        /**
         * A feature type associated with entity instance.
         */
        feature_type: Aliased$3(str$5),
        /**
         * Author instance identifier (formerly PDB Chain ID)
         */
        auth_asym_id: str$5,
        /**
         * Instance identifier for this entity.
         */
        asym_id: str$5,
        /**
         * Author provided residue number.
         */
        auth_seq_num: str$5,
        /**
         * Position in the sequence.
         */
        seq_num: int$5,
        /**
         * Chemical component identifier
         */
        comp_id: str$5,
        /**
         * The author provided chemical component identifier
         */
        auth_comp_id: str$5,
        /**
         * An ordinal index for this category
         */
        ordinal: int$5,
    },
    /**
     * Data items in the PDBX_ENTITY_BRANCH_LIST category specify the list
     * of monomers in a branched entity.  Allowance is made for the possibility
     * of microheterogeneity in a sample by allowing a given sequence
     * number to be correlated with more than one monomer ID. The
     * corresponding ATOM_SITE entries should reflect this
     * heterogeneity.
     */
    pdbx_entity_branch_list: {
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * A flag to indicate whether this monomer in the entity is
         * heterogeneous in sequence.
         */
        hetero: Aliased$3(lstr$2),
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        comp_id: str$5,
        /**
         * The value pair  _pdbx_entity_branch_list.num and _pdbx_entity_branch_list.comp_id
         * must uniquely identify a record in the PDBX_ENTITY_BRANCH_LIST list.
         */
        num: int$5,
    },
    /**
     * Data items in the PDBX_ENTITY_BRANCH_LINK category give details about
     * the linkages between components within a branched entity.
     */
    pdbx_entity_branch_link: {
        /**
         * The value of _pdbx_entity_branch_link.link_id uniquely identifies
         * linkages within the branched entity.
         */
        link_id: int$5,
        /**
         * A description of special aspects of this linkage.
         */
        details: str$5,
        /**
         * The entity id for this branched entity.
         *
         * This data item is a pointer to _pdbx_entity_branch_list.entity_id
         * in the PDBX_ENTITY_BRANCH_LIST category.
         */
        entity_id: str$5,
        /**
         * The component number for the first component making the linkage.
         *
         * This data item is a pointer to _pdbx_entity_branch_list.num
         * in the PDBX_ENTITY_BRANCH_LIST category.
         */
        entity_branch_list_num_1: int$5,
        /**
         * The component number for the second component making the linkage.
         *
         * This data item is a pointer to _pdbx_entity_branch_list.num
         * in the PDBX_ENTITY_BRANCH_LIST category.
         */
        entity_branch_list_num_2: int$5,
        /**
         * The component identifier for the first component making the linkage.
         *
         * This data item is a pointer to _pdbx_entity_branch_list.comp_id
         * in the PDBX_ENTITY_BRANCH_LIST category.
         */
        comp_id_1: str$5,
        /**
         * The component identifier for the second component making the linkage.
         *
         * This data item is a pointer to _pdbx_entity_branch_list.comp_id
         * in the PDBX_ENTITY_BRANCH_LIST category.
         */
        comp_id_2: str$5,
        /**
         * The atom identifier/name for the first atom making the linkage.
         */
        atom_id_1: str$5,
        /**
         * The leaving atom identifier/name bonded to the first atom making the linkage.
         */
        leaving_atom_id_1: str$5,
        /**
         * The chiral configuration of the first atom making the linkage.
         */
        atom_stereo_config_1: Aliased$3(lstr$2),
        /**
         * The atom identifier/name for the second atom making the linkage.
         */
        atom_id_2: str$5,
        /**
         * The leaving atom identifier/name bonded to the second atom making the linkage.
         */
        leaving_atom_id_2: str$5,
        /**
         * The chiral configuration of the second atom making the linkage.
         */
        atom_stereo_config_2: Aliased$3(lstr$2),
        /**
         * The bond order target for the chemical linkage.
         */
        value_order: Aliased$3(lstr$2),
    },
    /**
     * Data items in the PDBX_ENTITY_BRANCH category specify the list
     * of branched entities and the type.
     */
    pdbx_entity_branch: {
        /**
         * The entity id for this branched entity.
         *
         * This data item is a pointer to _entity.id
         */
        entity_id: str$5,
        /**
         * The type of this branched oligosaccharide.
         */
        type: Aliased$3(str$5),
    },
    /**
     * The PDBX_BRANCH_SCHEME category provides residue level nomenclature
     * mapping for branch chain entities.
     */
    pdbx_branch_scheme: {
        /**
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * A flag to indicate whether this monomer in the entity is
         * heterogeneous in sequence.
         */
        hetero: Aliased$3(lstr$2),
        /**
         * Pointer to _atom_site.label_asym_id.
         */
        asym_id: str$5,
        /**
         * This data item is a pointer to _atom_site.label_comp_id in the
         * PDBX_ENTITY_BRANCH_LIST category.
         */
        mon_id: str$5,
        /**
         * This data item is a pointer to _pdbx_entity_branch_list.num in the
         * PDBX_ENTITY_BRANCH_LIST category.
         */
        num: int$5,
        /**
         * This data item is a pointer to _atom_site.auth_asym_id in the
         * ATOM_SITE category.
         */
        pdb_asym_id: str$5,
        /**
         * This data item is a pointer to _atom_site.auth_seq_id in the
         * ATOM_SITE category.
         */
        pdb_seq_num: str$5,
        /**
         * This data item is a pointer to _atom_site.auth_comp_id in the
         * ATOM_SITE category.
         */
        pdb_mon_id: str$5,
        /**
         * This data item is a pointer to _atom_site.pdbx_auth_asym_id in the
         * ATOM_SITE category.
         */
        auth_asym_id: str$5,
        /**
         * This data item is a pointer to _atom_site.pdbx_auth_seq_id in the
         * ATOM_SITE category.
         */
        auth_seq_num: str$5,
        /**
         * This data item is a pointer to _atom_site.pdbx_auth_comp_id in the
         * ATOM_SITE category.
         */
        auth_mon_id: str$5,
    },
    /**
     * PDBX_CHEM_COMP_RELATED describes the relationship between two chemical components.
     */
    pdbx_chem_comp_related: {
        /**
         * The chemical component for which this relationship applies.
         */
        comp_id: str$5,
        /**
         * The related chemical component for which this chemical component is based.
         */
        related_comp_id: str$5,
        /**
         * Describes the type of relationship
         */
        relationship_type: Aliased$3(str$5),
        /**
         * Describes the type of relationship
         */
        details: str$5,
    },
    /**
     * Data items in the IHM_STARTING_MODEL_DETAILS category records the
     * details about structural models used as starting inputs in
     * the integrative model building process.
     */
    ihm_starting_model_details: {
        /**
         * A unique identifier for the starting structural model.
         */
        starting_model_id: str$5,
        /**
         * A unique identifier for the distinct molecular entities.
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * A text description of the molecular entity
         */
        entity_description: str$5,
        /**
         * An asym/strand identifier for the entity molecule.
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The identifier for the polymeric segment modeled using this starting model.
         * This data item is a pointer to _ihm_entity_poly_segment.id in the
         * IHM_ENTITY_POLY_SEGMENT category.
         */
        entity_poly_segment_id: int$5,
        /**
         * The source of the starting model.
         */
        starting_model_source: Aliased$3(str$5),
        /**
         * The author assigned chainId/auth_asym_id corresponding to this starting model.
         * This corresponds to the chainId/auth_asym_id of the experimental models in the
         * PDB or comparative models in the Model Archive or the starting models referenced
         * via a DOI. If starting models are included in IHM_STARTING_MODEL_COORD, then
         * this will be the same as _ihm_starting_model_details.asym_id.
         */
        starting_model_auth_asym_id: str$5,
        /**
         * The offset in residue numbering between the starting model and the deposited I/H model, if applicable.
         * I/H model residue number = Starting model residue number + offset
         */
        starting_model_sequence_offset: int$5,
        /**
         * Identifier to the starting model (comparative, experimental or integrative)
         * used as input in the integrative modeling.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
    },
    /**
     * Data items in the IHM_STARTING_COMPARATIVE_MODELS category records
     * additional details about comparative models used as starting inputs in
     * the integrative model building process.
     */
    ihm_starting_comparative_models: {
        /**
         * A unique identifier for the starting comparative model.
         */
        id: int$5,
        /**
         * The identifier for the starting structural model.
         * This data item is a pointer to _ihm_starting_model_details.starting_model_id
         * in the IHM_STARTING_MODEL_DETAILS category.
         */
        starting_model_id: str$5,
        /**
         * The chainId/auth_asym_id corresponding to the starting model.
         */
        starting_model_auth_asym_id: str$5,
        /**
         * The starting residue index of the starting model.
         */
        starting_model_seq_id_begin: int$5,
        /**
         * The ending residue index of the starting model.
         */
        starting_model_seq_id_end: int$5,
        /**
         * The chainId/auth_asym_id corresponding to the template.
         */
        template_auth_asym_id: str$5,
        /**
         * The starting residue index of the template.
         */
        template_seq_id_begin: int$5,
        /**
         * The ending residue index of the template.
         */
        template_seq_id_end: int$5,
        /**
         * The percentage sequence identity between the template sequence and the comparative model sequence.
         */
        template_sequence_identity: float$5,
        /**
         * The denominator used while calculating the sequence identity provided in
         * _ihm_starting_comparative_models.template_sequence_identity.
         */
        template_sequence_identity_denominator: Aliased$3(int$5),
        /**
         * The dataset list id corresponding to the template used to obtain the comparative model.
         * This data item is a pointer to _ihm_dataset_list.id in the IHM_DATASET_LIST category.
         */
        template_dataset_list_id: int$5,
        /**
         * The file id corresponding to the sequence alignment of the template sequence and the comparative model sequence.
         * This data item is a pointer to _ihm_external_files.id in the IHM_EXTERNAL_FILES category.
         */
        alignment_file_id: int$5,
    },
    /**
     * Data items in the IHM_STARTING_MODEL_SEQ_DIF category provide a
     * mechanism for indicating and annotating point differences
     * between the sequence of the entity or biological unit described
     * in the data block and the sequence of the starting model used in
     * the integrative modeling referenced from a database. The point
     * differences may be due to point mutations introduced in the
     * starting model or the presence of modified amino acid residues.
     */
    ihm_starting_model_seq_dif: {
        /**
         * A unique identifier for the entry.
         */
        id: int$5,
        /**
         * A unique identifier for the distinct molecular entities.
         * This data item is a pointer to _entity_poly_seq.entity_id in the ENTITY_POLY category.
         */
        entity_id: str$5,
        /**
         * An asym/strand identifier for the entity molecule.
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The residue index.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id: int$5,
        /**
         * The component identifier for the residue.
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category.
         */
        comp_id: str$5,
        /**
         * Unique identifier for the starting model record.
         * This data item is a pointer to _ihm_starting_model_details.starting_model_id in the
         * IHM_STARTING_MODEL_DETAILS category.
         */
        starting_model_id: str$5,
        /**
         * The asym/strand identifier for the entity molecule of the database starting model.
         */
        db_asym_id: str$5,
        /**
         * The corresponding residue index of the database starting model.
         */
        db_seq_id: int$5,
        /**
         * The correspinding component identifier for the residue in the database starting model.
         */
        db_comp_id: str$5,
        /**
         * A description of special aspects of the point differences
         * between the sequence of the entity or biological unit described
         * in the data block and that in the starting model referenced
         * from a database.
         */
        details: str$5,
    },
    /**
     * Data items in the IHM_MODEL_REPRESENTATION category lists the
     * various mono or multi-scale model representations used in the
     * integrative modeling study.
     */
    ihm_model_representation: {
        /**
         * A unique identifier for the model representation.
         */
        id: int$5,
        /**
         * Name/brief description for the model representation.
         */
        name: str$5,
        /**
         * Additional details about the model representation.
         */
        details: str$5,
    },
    /**
     * Data items in the IHM_MODEL_REPRESENTATION_DETAILS category records the
     * details about the architecture and representation of structural
     * models involved in the integrative modeling study.
     */
    ihm_model_representation_details: {
        /**
         * A unique identifier for the category.
         */
        id: int$5,
        /**
         * An identifier that collects or groups together a set of representations.
         * This data item is a pointer to _ihm_model_representation.id in the
         * IHM_MODEL_REPRESENTATION category.
         */
        representation_id: int$5,
        /**
         * The identifier for the polymeric segment in the representation.
         * This data item is a pointer to _ihm_entity_poly_segment.id in the
         * IHM_ENTITY_POLY_SEGMENT category.
         */
        entity_poly_segment_id: int$5,
        /**
         * A unique identifier distinct molecular entities.
         * This data item is a pointer to _entity.id in the
         * ENTITY category.
         */
        entity_id: str$5,
        /**
         * A text description of the molecular entity
         */
        entity_description: str$5,
        /**
         * An asym/strand identifier for the entity molecule.
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        entity_asym_id: str$5,
        /**
         * The primitive object used to model this segment.
         */
        model_object_primitive: Aliased$3(str$5),
        /**
         * The identifier for the starting structural model.
         * This data item is a pointer to _ihm_starting_model_details.starting_model_id
         * in the IHM_STARTING_MODEL_DETAILS category.
         */
        starting_model_id: str$5,
        /**
         * The manner in which the segment is modeled.
         */
        model_mode: Aliased$3(str$5),
        /**
         * The level of detail at which model primitive objects are applied to the structure.
         */
        model_granularity: Aliased$3(str$5),
        /**
         * The number of primitive objects used to model a feature in the case of 'by-feature' granularity.
         */
        model_object_count: int$5,
    },
    /**
     * Data items in the IHM_STRUCT_ASSEMBLY_DETAILS category records
     * the details of the structural assemblies and used in the
     * integrative modeling.
     */
    ihm_struct_assembly_details: {
        /**
         * A unique identifier for the structural assembly description.
         */
        id: int$5,
        /**
         * An identifier for the structural assembly.
         * This data item will remain the same for all components
         * of an assembly.
         * This data item is a pointer to _ihm_struct_assembly.id
         * in the IHM_STRUCT_ASSEMBLY category.
         */
        assembly_id: int$5,
        /**
         * The parent of this assembly in a hierarchy.
         * This data item is a pointer to _ihm_struct_assembly.id in the
         * IHM_STRUCT_ASSEMBLY category.
         * This data item should point to the assembly id of the immediate
         * parent in a hierarchy.
         * By convention, the full assembly (top of hierarchy) is assigned parent id 0 (zero).
         * In case of assemblies that do not conform to a hierarchy,
         * _ihm_struct_assembly_details.parent_assembly_id is the same as
         * _ihm_struct_assembly_details.assembly_id indicating a self-parent.
         */
        parent_assembly_id: int$5,
        /**
         * A text description of the molecular entity
         */
        entity_description: str$5,
        /**
         * A unique identifier for distinct molecular entities.
         * This data item is a pointer to _entity.id in the
         * ENTITY category.
         */
        entity_id: str$5,
        /**
         * An asym/strand identifier for the component in the assembly.
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The identifier for the polymeric segment in the assembly.
         * This data item is a pointer to _ihm_entity_poly_segment.id in the
         * IHM_ENTITY_POLY_SEGMENT category.
         */
        entity_poly_segment_id: int$5,
    },
    /**
     * Data items in the IHM_STRUCT_ASSEMBLY category lists
     * all the structural assemblies used in the integrative
     * modeling study.
     */
    ihm_struct_assembly: {
        /**
         * A unique identifier for the structural assembly.
         */
        id: int$5,
        /**
         * A name for the structural assembly.
         */
        name: str$5,
        /**
         * Description of the structural assembly.
         */
        description: str$5,
    },
    /**
     * Data items in the IHM_MODELING_PROTOCOL category lists all
     * modeling protocols used in the integrative modeling study.
     */
    ihm_modeling_protocol: {
        /**
         * A unique identifier for the modeling protocol.
         */
        id: int$5,
        /**
         * Number of independent steps in the modeling protocol.
         */
        num_steps: int$5,
        /**
         * The name for the modeling protocol.
         */
        protocol_name: str$5,
    },
    /**
     * Data items in the IHM_MODELING_PROTOCOL_DETAILS category records the
     * step-wise details of the integrative modeling workflow.
     */
    ihm_modeling_protocol_details: {
        /**
         * A unique identifier for the modeling protocol/step combination.
         */
        id: int$5,
        /**
         * An index for the modeling protocol carried out.
         * This data item is a pointer to _ihm_modeling_protocol.id in the
         * IHM_MODELING_PROTOCOL category.
         */
        protocol_id: int$5,
        /**
         * An index for a particular step within the modeling protocol.
         */
        step_id: int$5,
        /**
         * An index for the structural assembly being modeled.
         * This is an indicator to whether the whole assembly is modeled
         * or if only a subset of the structural assembly is modeled.
         * This data item is a pointer to _ihm_struct_assembly.id in the
         * IHM_STRUCT_ASSEMBLY category. The IHM_STRUCT_ASSEMBLY category provides the
         * details regarding the different structural assemblies used in the modeling.
         * The default value for this data item is "1", indicating that the entire
         * assembly is being modeled.
         */
        struct_assembly_id: int$5,
        /**
         * An index for the dataset group being used in the modeling protocol.
         * This data item is a pointer to the _ihm_dataset_group.id in the
         * IHM_DATASET_GROUP category.
         */
        dataset_group_id: int$5,
        /**
         * A textual description of the structural assembly being modeled.
         */
        struct_assembly_description: str$5,
        /**
         * The name or type of the modeling step.
         */
        step_name: str$5,
        /**
         * Description of the method involved in the modeling step.
         */
        step_method: str$5,
        /**
         * The number of models in the beginning of the step.
         */
        num_models_begin: int$5,
        /**
         * The number of models at the end of the step.
         */
        num_models_end: int$5,
        /**
         * A flag to indicate if the modeling is multi scale.
         */
        multi_scale_flag: Aliased$3(lstr$2),
        /**
         * A flag to indicate if the modeling is multi state.
         */
        multi_state_flag: Aliased$3(lstr$2),
        /**
         * A flag to indicate if the modeling involves an ensemble ordered by time or other order.
         */
        ordered_flag: Aliased$3(lstr$2),
        /**
         * The file id corresponding to the script used in the modeling protocol step.
         * This data item is a pointer to _ihm_external_files.id in the IHM_EXTERNAL_FILES category.
         */
        script_file_id: int$5,
        /**
         * Identifier to the software used in the modeling protocol step.
         * This data item is a pointer to the _software.pdbx_ordinal in the
         * SOFTWARE category.
         */
        software_id: int$5,
    },
    /**
     * Data items in the IHM_MULTI_STATE_MODELING category records the
     * details of the multi-state modeling protocol, if applicable.
     */
    ihm_multi_state_modeling: {
        /**
         * A unique identifier for a particular state in the multi-state modeling.
         */
        state_id: int$5,
        /**
         * An identifier for a collections of states in the multi-state modeling.
         * This data item can be used when structural models belong to diffent
         * multi-state modeling types.
         */
        state_group_id: int$5,
        /**
         * A fraction representing the population of the particular state.
         */
        population_fraction: float$5,
        /**
         * The standard deviation of the population fraction.
         */
        population_fraction_sd: float$5,
        /**
         * The type that the multiple states being modeled belong to.
         */
        state_type: str$5,
        /**
         * A descriptive name for the state.
         */
        state_name: str$5,
        /**
         * The type of multi-state modeling experiment carried out.
         */
        experiment_type: Aliased$3(str$5),
        /**
         * Additional textual details of the multi-state modeling, if required.
         */
        details: str$5,
    },
    /**
     * Data items in the IHM_MODELING_POST_PROCESS category records
     * the details of the post processing of the models/results of
     * the modeling protocol.
     */
    ihm_modeling_post_process: {
        /**
         * A unique identifier for the post modeling analysis/step combination.
         */
        id: int$5,
        /**
         * An identifier for the modeling protocol, whose post modeling analysis
         * is being carried out.
         * This data item is a pointer to the _ihm_modeling_protocol.id
         * in the IHM_MODELING_PROTOCOL category.
         */
        protocol_id: int$5,
        /**
         * An identifier for the post modeling analysis. This data item accounts for
         * multiple post-modeling analyses that can be carried out.
         */
        analysis_id: int$5,
        /**
         * In a multi-step process, this identifier denotes the particular
         * step in the post modeling analysis.
         */
        step_id: int$5,
        /**
         * The type of post modeling analysis being carried out.
         */
        type: Aliased$3(str$5),
        /**
         * The parameter/feature used in the post modeling analysis.
         */
        feature: Aliased$3(str$5),
        /**
         * The number of models at the beginning of the post processing step.
         */
        num_models_begin: int$5,
        /**
         * The number of models the the end of the post processing step.
         */
        num_models_end: int$5,
    },
    /**
     * Data items in the IHM_ENSEMBLE_INFO category records the
     * details of the model clusters or ensembles obtained after
     * sampling.
     */
    ihm_ensemble_info: {
        /**
         * A unique id for the ensemble.
         */
        ensemble_id: int$5,
        /**
         * An optional name for the cluster or ensemble for better description.
         */
        ensemble_name: str$5,
        /**
         * An identifier for the post modeling analyses carried out.
         * This data item is a pointer to _ihm_modeling_post_process.id in
         * the IHM_MODELING_POST_PROCESS category.
         */
        post_process_id: int$5,
        /**
         * An identifier for the cluster or group of models being deposited.
         * This data item is a pointer to the _ihm_model_group.id
         * in the IHM_MODEL_GROUP category.
         */
        model_group_id: int$5,
        /**
         * The clustering method used to obtain the ensemble, if applicable.
         */
        ensemble_clustering_method: Aliased$3(str$5),
        /**
         * The parameter/feature used for clustering the models, if applicable.
         */
        ensemble_clustering_feature: Aliased$3(str$5),
        /**
         * The number of models in the current ensemble being described.
         */
        num_ensemble_models: int$5,
        /**
         * The number of models from the current ensemble that is deposited.
         */
        num_ensemble_models_deposited: int$5,
        /**
         * The precision of each cluster or ensemble is calculated as dRMSD, which
         * is the average C-alpha distance root mean square deviation (dRMSD)
         * between the individual models in the cluster and the cluster centroid.
         * The cluster centroid is defined as the model with the minimal sum of
         * dRMSDs to the other models in the cluster or ensemble.
         */
        ensemble_precision_value: float$5,
        /**
         * A reference to the external file containing the structural models
         * in the ensemble. The number of models in the external file should
         * correspond to the number of models in the ensemble. This data item
         * is a pointer to _ihm_external_files.id in the IHM_EXTERNAL_FILES
         * category.
         * It is recommended that the large ensemble files be stored as separate
         * zip files within the same DOI. It is also recommended that large sphere
         * model ensembles be in binary format, which facilitates faster access.
         * Currently, a binary dump of co-ordinates in dcd format is suggested.
         * The topology can be inferred from the IHM_SPHERE_OBJ_SITE and the
         * ATOM_SITE categories in the corresponding mmCIF file.
         */
        ensemble_file_id: int$5,
    },
    /**
     * Data items in the IHM_MODEL_LIST category record the
     * details of the models being deposited.
     */
    ihm_model_list: {
        /**
         * A unique identifier for the structural model being deposited.
         */
        model_id: int$5,
        /**
         * A decsriptive name for the model.
         */
        model_name: str$5,
        /**
         * An identifier to the structure assembly corresponding to the model.
         * This data item is a pointer to the _ihm_struct_assembly.id
         * in the IHM_STRUCT_ASSEMBLY category.
         */
        assembly_id: int$5,
        /**
         * An identifier to the modeling protocol that produced the model.
         * This data item is a pointer to the _ihm_modeling_protocol.id
         * in the IHM_MODELING_PROTOCOL category.
         */
        protocol_id: int$5,
        /**
         * An identifier to the multi-scale model representation id of the model.
         * This data item is a pointer to the _ihm_model_representation.id
         * in the IHM_MODEL_REPRESENTATION category.
         */
        representation_id: int$5,
    },
    /**
     * IHM_MODEL_GROUP category defines collections or groups of integrative
     * structural models.
     */
    ihm_model_group: {
        /**
         * A unique identifier for a collection or group of structural models.
         * This data item can be used to group models into structural clusters
         * or using other criteria based on experimental data or other
         * relationships such as those belonging to the same state or time stamp.
         * An ensemble of models and its representative can either be grouped together
         * or can be separate groups in the ihm_model_group table. The choice between
         * the two options should be decided based on how the modeling was carried out
         * and how the representative was chosen. If the representative is a member of
         * the ensemble (i.e., best scoring model), then it is recommended that the
         * representative and the ensemble belong to the same model group. If the
         * representative is calculated from the ensemble (i.e., centroid), then it is
         * recommended that the representative be separated into a different group.
         */
        id: int$5,
        /**
         * A name for the collection of models.
         */
        name: str$5,
        /**
         * Additional details about the collection of models.
         */
        details: str$5,
    },
    /**
     * IHM_MODEL_GROUP_LINK category provides the list of models present in
     * a particular model group.
     */
    ihm_model_group_link: {
        /**
         * An identifier for the structural model.
         * This data item is a pointer to _ihm_model_list.model_id in the
         * IHM_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * An identifier for the structural model group.
         * This data item is a pointer to _ihm_model_group.id in the
         * IHM_MODEL_GROUP category.
         */
        group_id: int$5,
    },
    /**
     * Data items in the IHM_MODEL_REPRESENTATIVE category record the
     * details of the representative model in an ensemble or cluster.
     */
    ihm_model_representative: {
        /**
         * A unique identifier for the representative of the model group.
         */
        id: int$5,
        /**
         * The model group identifier corresponding to the representative model.
         * This data item is a pointer to _ihm_model_group.id in the
         * IHM_MODEL_GROUP category.
         */
        model_group_id: int$5,
        /**
         * The model identifier corresponding to the representative model.
         * This data item is a pointer to _ihm_model_list.model_id in the
         * IHM_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * The selection criteria based on which the representative is chosen.
         */
        selection_criteria: Aliased$3(str$5),
    },
    /**
     * Category holds the list of all datasets used in the IHM modeling.
     * These can be datasets archived in other related databases such as
     * BMRB, EMDB, EMPIAR, SASBDB, PRIDE etc., or can be hosted in other
     * places such as the authors website, github etc. These datasets are
     * elaborated in detail in the IHM_DATASET_RELATED_DB_REFERENCE and/or
     * the IHM_DATASET_EXTERNAL_REFERENCE categories. This category
     * holds the list of all datasets used.
     */
    ihm_dataset_list: {
        /**
         * A unique identifier for the dataset.
         */
        id: int$5,
        /**
         * The type of data held in the dataset.
         */
        data_type: Aliased$3(str$5),
        /**
         * A flag that indicates whether the dataset is archived in
         * an IHM related database or elsewhere.
         */
        database_hosted: Aliased$3(lstr$2),
    },
    /**
     * Category to define groups or collections of input datasets.
     */
    ihm_dataset_group: {
        /**
         * A unique identifier for the dataset group.
         */
        id: int$5,
        /**
         * A name for the dataset group.
         */
        name: str$5,
        /**
         * The application / utilization of the dataset group in modeling.
         */
        application: Aliased$3(str$5),
        /**
         * Additional details regarding the dataset group.
         */
        details: str$5,
    },
    /**
     * IHM_DATASET_GROUP_LINK category provides the list of datasets present in
     * a particular group.
     */
    ihm_dataset_group_link: {
        /**
         * An identifier for the dataset.
         * This data item is a pointer to _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
        /**
         * An identifier for the dataset group.
         * This data item is a pointer to _ihm_dataset_group.id in the
         * IHM_DATASET_GROUP category.
         */
        group_id: int$5,
    },
    /**
     * Category holds information about related datasets, where one is derived from the other.
     */
    ihm_related_datasets: {
        /**
         * The dataset list id corresponding to the derived dataset.
         * This data item is a pointer to _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id_derived: int$5,
        /**
         * The primary dataset list id from which the corresponding derived dataset is obtained.
         * This data item is a pointer to _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id_primary: int$5,
    },
    /**
     * Category holds information related to data sources for the entry.
     * These can be datasets archived in other related databases such as
     * BMRB, EMDB, EMPIAR, SASBDB, PRIDE etc.
     */
    ihm_dataset_related_db_reference: {
        /**
         * A unique identifier for the related database entry.
         */
        id: int$5,
        /**
         * Identifier to the dataset list used in the IHM modeling.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
        /**
         * The name of the database containing the dataset entry.
         */
        db_name: Aliased$3(str$5),
        /**
         * The accession code for the database entry.
         */
        accession_code: str$5,
        /**
         * Version of the database entry, if the database allows versioning.
         */
        version: str$5,
        /**
         * Details regarding the dataset entry.
         */
        details: str$5,
    },
    /**
     * Category holds links to other external data sources for the I/H model entry.
     * Input datasets held in other databases such as EMDB, BMRB, SASBDB etc.
     * are referenced in the IHM_DATASET_RELATED_DB_REFERENCE category.
     * This data category, along with IHM_EXTERNAL_FILES category, holds information
     * regarding other non-database external data sources, such as  DOIs (digital
     * object identifiers) or supplementary files stored locally. The DOIs can either
     * lead to the external data file(s) directly (as in case of DOIs provided by the PDB)
     * or might lead to an HTML landing page (as provided by Zenodo). In the latter case,
     * additional URL (Uniform Resource Locator) information is required to retrieve
     * the external data file(s).
     */
    ihm_external_reference_info: {
        /**
         * A unique identifier for the external reference.
         */
        reference_id: int$5,
        /**
         * The name of the reference provider.
         */
        reference_provider: str$5,
        /**
         * The type of external reference.
         * Currently, only Digital Object Identifiers (DOIs) and supplementary files
         * stored locally are supported.
         */
        reference_type: Aliased$3(str$5),
        /**
         * The external reference or the Digital Object Identifier (DOI).
         * This field is not relevant for local files.
         */
        reference: str$5,
        /**
         * The type of object that the external reference points to, usually
         * a single file or an archive.
         */
        refers_to: Aliased$3(str$5),
        /**
         * The Uniform Resource Locator (URL) corresponding to the external reference (DOI).
         * This URL should link to the corresponding downloadable file or archive and is provided
         * to enable automated software to download the referenced file or archive.
         */
        associated_url: str$5,
    },
    /**
     * Category provides details regarding external files. The IHM_EXTERNAL_REFERENCE_INFO
     * category captures the top-level details regarding external data sources.
     * This category captures the specific details regarding externally stored files
     * related to the particular I/H model entry.
     */
    ihm_external_files: {
        /**
         * A unique identifier for each external file.
         */
        id: int$5,
        /**
         * A pointer to the source of the external file - either DOI or locally stored.
         * This data item is a pointer to _ihm_external_reference_info.reference_id in the
         * IHM_EXTERNAL_REFERENCE_INFO category.
         */
        reference_id: int$5,
        /**
         * The relative path (including filename) for each external file.
         * Absolute paths (starting with "/") are not permitted.
         * This is required for identifying individual files from within
         * a tar-zipped archive file or for identifying supplementary local
         * files organized within a directory structure.
         * This data item assumes a POSIX-like directory structure or file path.
         */
        file_path: str$5,
        /**
         * The type of content in the file.
         */
        content_type: Aliased$3(str$5),
        /**
         * Storage size of the external file in bytes.
         */
        file_size_bytes: float$5,
        /**
         * Additional textual details regarding the external file.
         */
        details: str$5,
    },
    /**
     * Category provides additional details regarding input data hosted externally
     * at other resources.
     */
    ihm_dataset_external_reference: {
        /**
         * A unique identifier for the external data.
         */
        id: int$5,
        /**
         * Identifier to the dataset list used in the I/H modeling.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
        /**
         * The file id corresponding to this external data file.
         * This data item is a pointer to _ihm_external_files.id
         * in the IHM_EXTERNAL_FILES category.
         */
        file_id: int$5,
    },
    /**
     * Data items in the IHM_LOCALIZATION_DENSITY_FILES category records the
     * details of files that provide information regarding localization densities
     * of ensembles. These may be stored externally as local files or linked via
     * DOI and can be in any accepted format that provides volume information
     * (CCP4, MRC, etc.).
     */
    ihm_localization_density_files: {
        /**
         * A unique identifier.
         */
        id: int$5,
        /**
         * The file id for the externally stored localization density file.
         * This data item is a pointer to _ihm_external_files.id
         * in the IHM_EXTERNAL_FILES category.
         */
        file_id: int$5,
        /**
         * The ensemble identifier for the ensemble, for which the localization density is provided.
         * This data item is a pointer to _ihm_ensemble_info.ensemble_id in the IHM_ENSEMBLE_INFO category.
         */
        ensemble_id: int$5,
        /**
         * The entity identifier corresponding to this localization density.
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * The identifier for the polymeric segment corresponding to this
         * localization density.
         * This data item is a pointer to _ihm_entity_poly_segment.id in the
         * IHM_ENTITY_POLY_SEGMENT category.
         */
        entity_poly_segment_id: int$5,
        /**
         * An asym/strand identifier corresponding to this localization density.
         * This data item is a pointer to _struct_asym.id in the STRUCT_ASYM category.
         */
        asym_id: str$5,
    },
    /**
     * Data items in the IHM_PREDICTED_CONTACT_RESTRAINT category records the
     * list of predicted contacts used in the integrative modeling experiment.
     * This has been adapted from the widely used CASP RR format
     * (http://www.predictioncenter.org/casp8/index.cgi?page=format#RR).
     * These contacts may be derived from various computational tools.
     * The software information can be provided in the SOFTWARE category.
     */
    ihm_predicted_contact_restraint: {
        /**
         * A unique identifier for the predicted contact restraint.
         */
        id: int$5,
        /**
         * An identifier to group the predicted contacts.
         */
        group_id: int$5,
        /**
         * The entity identifier for the first monomer partner in the predicted contact.
         * This data item is a pointer to _entity_poly_seq.entity_id in the ENTITY_POLY_SEQ category.
         */
        entity_id_1: str$5,
        /**
         * The entity identifier for the second monomer partner in the predicted contact.
         * This data item is a pointer to _entity_poly_seq.entity_id in the ENTITY_POLY_SEQ category.
         */
        entity_id_2: str$5,
        /**
         * An asym/strand identifier for the first monomer partner in the predicted contact.
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id_1: str$5,
        /**
         * An asym/strand identifier for the second monomer partner in the predicted contact.
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id_2: str$5,
        /**
         * The component identifier for the first monomer partner in the predicted contact.
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category.
         */
        comp_id_1: str$5,
        /**
         * The component identifier for the second monomer partner in the predicted contact.
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category.
         */
        comp_id_2: str$5,
        /**
         * The sequence index for the first monomer partner in the predicted contact.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_1: int$5,
        /**
         * The sequence index for the second monomer partner in the predicted contact.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_2: int$5,
        /**
         * If _ihm_predicted_contact_restraint.model_granularity is by-residue, then indicate the atom
         * used to represent the first monomer partner in three-dimension. Default is the C-alpha atom.
         */
        rep_atom_1: Aliased$3(str$5),
        /**
         * If _ihm_predicted_contact_restraint.model_granularity is by-residue, then indicate the atom
         * used to represent the second monomer partner in three-dimension. Default is the C-alpha atom.
         */
        rep_atom_2: Aliased$3(str$5),
        /**
         * The lower limit to the distance threshold applied to this predicted contact restraint
         * in the integrative modeling task.
         */
        distance_lower_limit: float$5,
        /**
         * The upper limit to the distance threshold applied to this predicted contact restraint
         * in the integrative modeling task.
         */
        distance_upper_limit: float$5,
        /**
         * The real number that indicates the probability that the predicted distance restraint
         * is correct. This number should fall between 0.0 and 1.0.
         */
        probability: float$5,
        /**
         * The type of distance restraint applied.
         */
        restraint_type: Aliased$3(str$5),
        /**
         * The granularity of the predicted contact as applied to the multi-scale model.
         */
        model_granularity: Aliased$3(str$5),
        /**
         * Identifier to the predicted contacts dataset.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
        /**
         * Identifier to the software used to obtain the predicted contacts dataset.
         * This data item is a pointer to the _software.pdbx_ordinal in the
         * SOFTWARE category.
         */
        software_id: int$5,
    },
    /**
     * Data items in the IHM_CROSS_LINK_LIST category records the
     * list of spatial restraints derived from chemical crosslinking
     * experiment.
     */
    ihm_cross_link_list: {
        /**
         * A unique identifier for the cross link restraint.
         */
        id: int$5,
        /**
         * An identifier for a set of ambiguous crosslink restraints.
         * Handles experimental uncertainties in the identities of
         * crosslinked residues.
         */
        group_id: int$5,
        /**
         * A text description of molecular entity 1.
         */
        entity_description_1: str$5,
        /**
         * A text description of molecular entity 2.
         */
        entity_description_2: str$5,
        /**
         * The entity identifier for the first monomer partner in the cross link
         * This data item is a pointer to _entity_poly_seq.entity_id in the ENTITY_POLY_SEQ category.
         */
        entity_id_1: str$5,
        /**
         * The entity identifier for the second monomer partner in the cross link
         *
         * This data item is a pointer to _entity_poly_seq.entity_id in the ENTITY_POLY_SEQ category.
         */
        entity_id_2: str$5,
        /**
         * The component identifier for the first monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category.
         */
        comp_id_1: str$5,
        /**
         * The component identifier for the second monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category.
         */
        comp_id_2: str$5,
        /**
         * The sequence index for the first monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_1: int$5,
        /**
         * The sequence index for the second monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_2: int$5,
        /**
         * The type of crosslinker used.
         */
        linker_type: Aliased$3(str$5),
        /**
         * Identifier to the crosslinking dataset.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
    },
    /**
     * Data items in the IHM_CROSS_LINK_RESTRAINT category enumerates the
     * implementation details of the chemical crosslinking restraints in
     * the integrative modeling. This category holds the details of how
     * the experimentally derived crosslinks are applied in the modeling.
     */
    ihm_cross_link_restraint: {
        /**
         * A unique identifier for the cross link record.
         */
        id: int$5,
        /**
         * An identifier for a set of ambiguous cross-links.
         * Handles implementation uncertainties related to multiple copies of subunit.
         * This data item is a pointer to _ihm_cross_link_list.id in the
         * IHM_CROSS_LINK_LIST category.
         */
        group_id: int$5,
        /**
         * The entity identifier for the first monomer partner in the cross link
         *
         * This data item is a pointer to _entity_poly_seq.entity_id in the ENTITY_POLY_SEQ category
         * and the _ihm_cross_link_restraint.entity_id_1 in the IHM_CROSS_LINK_RESTRAINT category.
         */
        entity_id_1: str$5,
        /**
         * The entity identifier for the second monomer partner in the cross link
         *
         * This data item is a pointer to _entity_poly_seq.entity_id in the ENTITY_POLY_SEQ category
         * and the _ihm_cross_link_restraint.entity_id_2 in the IHM_CROSS_LINK_RESTRAINT category.
         */
        entity_id_2: str$5,
        /**
         * An asym/strand identifier for the first monomer partner in the cross-link.
         *
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id_1: str$5,
        /**
         * An asym/strand identifier for the second monomer partner in the cross-link.
         *
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id_2: str$5,
        /**
         * The component identifier for the first monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category
         * and the _ihm_cross_link_restraint.comp_id_1 in the IHM_CROSS_LINK_RESTRAINT category.
         */
        comp_id_1: str$5,
        /**
         * The component identifier for the second monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category
         * and the _ihm_cross_link_restraint.comp_id_2 in the IHM_CROSS_LINK_RESTRAINT category.
         */
        comp_id_2: str$5,
        /**
         * The sequence index for the first monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category
         * and the _ihm_cross_link_restraint.seq_id_1 in the IHM_CROSS_LINK_RESTRAINT category.
         */
        seq_id_1: int$5,
        /**
         * The sequence index for the second monomer partner in the cross link.
         *
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category
         * and the _ihm_cross_link_restraint.seq_id_2 in the IHM_CROSS_LINK_RESTRAINT category.
         */
        seq_id_2: int$5,
        /**
         * The atom identifier for the first monomer partner in the cross link.
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        atom_id_1: str$5,
        /**
         * The atom identifier for the second monomer partner in the cross link.
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        atom_id_2: str$5,
        /**
         * The type of the cross link restraint applied.
         */
        restraint_type: Aliased$3(str$5),
        /**
         * The cross link conditionality.
         */
        conditional_crosslink_flag: Aliased$3(str$5),
        /**
         * The coarse-graining information for the crosslink implementation.
         */
        model_granularity: Aliased$3(str$5),
        /**
         * The distance threshold applied to this crosslink in the integrative modeling task.
         */
        distance_threshold: float$5,
        /**
         * The uncertainty in the crosslinking experimental data;
         * may be approximated to the false positive rate.
         */
        psi: float$5,
        /**
         * The uncertainty in the position of residue 1 in the crosslink
         * arising due to the multi-scale nature of the model represention.
         */
        sigma_1: float$5,
        /**
         * The uncertainty in the position of residue 2 in the crosslink
         * arising due to the multi-scale nature of the model represention.
         */
        sigma_2: float$5,
    },
    /**
     * Data items in the IHM_CROSS_LINK_RESULT_PARAMETERS category records the
     * results of the crosslinking restraint parameters in the IHM modeling.
     */
    ihm_cross_link_result_parameters: {
        /**
         * A unique identifier for the restraint/model combination.
         */
        id: int$5,
        /**
         * An identifier for the crosslink restraint between a pair of residues.
         * This data item is a pointer to _ihm_cross_link_restraint.id in the
         * IHM_CROSS_LINK_RESTRAINT category.
         */
        restraint_id: int$5,
        /**
         * The model number corresponding to the cross link result presented.
         * This data item is a pointer to _ihm_model_list.model_id in the
         * IHM_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * The uncertainty in the crosslinking experimental data;
         * May be approximated to the false positive rate.
         */
        psi: float$5,
        /**
         * The uncertainty in the position of residue 1 in the crosslink
         * arising due to the multi-scale nature of the model represention.
         */
        sigma_1: float$5,
        /**
         * The uncertainty in the position of residue 2 in the crosslink
         * arising due to the multi-scale nature of the model represention.
         */
        sigma_2: float$5,
    },
    /**
     * Data items in the IHM_2DEM_CLASS_AVERAGE_RESTRAINT category records the
     * details of the 2DEM class averages used in the IHM modeling.
     */
    ihm_2dem_class_average_restraint: {
        /**
         * A unique identifier for the 2dem class average.
         */
        id: int$5,
        /**
         * Identifier to the 2dem class average dataset.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
        /**
         * The number of raw micrographs used to obtain the class average.
         */
        number_raw_micrographs: int$5,
        /**
         * Pixel size width of the 2dem class average image.
         * While fitting the model to the image, _ihm_2dem_class_average_restraint.pixel_size_width
         * is used along with _ihm_2dem_class_average_restraint.pixel_size_height to scale the image.
         */
        pixel_size_width: float$5,
        /**
         * Pixel size height of the 2dem class average image.
         * While fitting the model to the image, _ihm_2dem_class_average_restraint.pixel_size_height
         * is used along with _ihm_2dem_class_average_restraint.pixel_size_width to scale the image.
         */
        pixel_size_height: float$5,
        /**
         * Resolution of the 2dem class average.
         */
        image_resolution: float$5,
        /**
         * A flag that indicates whether or not the 2DEM class average image is segmented i.e.,
         * whether the whole image is used or only a portion of it is used (by masking
         * or by other means) as restraint in the modeling.
         */
        image_segment_flag: Aliased$3(lstr$2),
        /**
         * Number of 2D projections of the model used in the fitting.
         */
        number_of_projections: int$5,
        /**
         * An indicator to whether the whole assembly that is modeled is fit into the image
         * or if only a subset of the structural assembly is fit into the image.
         * This data item is a pointer to _ihm_struct_assembly.id in the
         * IHM_STRUCT_ASSEMBLY category. The IHM_STRUCT_ASSEMBLY category provides the
         * details regarding the different structural assemblies used in the modeling.
         * The default value for this data item is "1" indicating that the entire assembly
         * being modeled is fit into the EM data.
         */
        struct_assembly_id: int$5,
        /**
         * Details of how the 2DEM restraint is applied in the modeling algorithm.
         */
        details: str$5,
    },
    /**
     * Data items in the IHM_2DEM_CLASS_AVERAGE_FITTING category records the
     * details of the fitting of the model to the 2DEM class averages
     * used in the IHM modeling. The following conventions are recommended
     * while generating the rotation matrix and translation vector for
     * transformation.
     *
     * - The model is rotated and translated to fit to the 2DEM image.
     * - The 2DEM image should be in the XY plane.
     * - The lower left image corner (image pixel index 0,0) should be at x,y,z = (0,0,0).
     * - The 2D image is scaled by the _ihm_2dem_class_average_restraint.pixel_size_width
     * and _ihm_2dem_class_average_restraint.pixel_size_height from the
     * IHM_2DEM_CLASS_AVERAGE_RESTRAINT table.
     * - The transformation is applied after the scaling and hence the translation vector
     * should account for the scaling.
     * - There are no specifications for Z translations i.e., how far the image should be
     * from the model while projecting. It may be set to zero.
     */
    ihm_2dem_class_average_fitting: {
        /**
         * A unique identifier for the 2dem class average fitting data.
         */
        id: int$5,
        /**
         * Identifier to the 2dem class average restraint.
         * This data item is a pointer to the _ihm_2dem_class_average_restraint.id in the
         * IHM_2DEM_CLASS_AVERAGE_RESTRAINT category.
         */
        restraint_id: int$5,
        /**
         * The model number corresponding to the 2DEM fitting result presented.
         * This data item is a pointer to _ihm_model_list.model_id in the
         * IHM_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * The cross correlation coefficient corresponding to the model to image fitting.
         */
        cross_correlation_coefficient: float$5,
        /**
         * Data item  of the rotation matrix used in the fitting of the model to the image.
         */
        rot_matrix: Matrix$1(3, 3),
        /**
         * Data item  of the tranlation vector used in the fitting of the model to the image.
         */
        tr_vector: Vector$1(3),
    },
    /**
     * Data items in the IHM_3DEM_RESTRAINT category records the
     * details of the 3DEM maps used as restraints in the
     * IHM modeling.
     */
    ihm_3dem_restraint: {
        /**
         * A unique identifier for the 3DEM restraint description.
         */
        id: int$5,
        /**
         * Identifier to the 3DEM map used.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
        /**
         * The model number corresponding to the 3DEM fitting result presented.
         * This data item is a pointer to _ihm_model_list.model_id in the
         * IHM_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * An indicator to whether the whole assembly that is modeled is fit into the 3DEM map
         * or if only a subset of the structural assembly is fit into the map.
         * This data item is a pointer to _ihm_struct_assembly.id in the
         * IHM_STRUCT_ASSEMBLY category. The IHM_STRUCT_ASSEMBLY category provides the
         * details regarding the different structural assemblies used in the modeling.
         * The default value for this data item is "1" indicating that the entire assembly
         * being modeled is fit into the EM map.
         */
        struct_assembly_id: int$5,
        /**
         * Method used to fit the model to the 3DEM map.
         */
        fitting_method: str$5,
        /**
         * In case of Gaussian mixture models, the number of gaussians
         * is a parameter used to covert the 3DEM maps and models into
         * GMMs. This captures the level of granularity used in
         * representing the maps and/or models as 3D Gaussians.
         */
        number_of_gaussians: int$5,
        /**
         * The cross correlation coefficient corresponding to the model to map fitting.
         */
        cross_correlation_coefficient: float$5,
    },
    /**
     * Data items in the IHM_SAS_RESTRAINT category records the
     * details of the SAS data used as restraints in the
     * IHM modeling.
     */
    ihm_sas_restraint: {
        /**
         * A unique identifier for the SAS restraint description.
         */
        id: int$5,
        /**
         * Identifier to the SAS data used.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         */
        dataset_list_id: int$5,
        /**
         * The model number corresponding to the SAS fitting result presented.
         * This data item is a pointer to _ihm_model_list.model_id in the
         * IHM_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * An indicator to whether the whole assembly that is modeled is fit into the SAS data
         * or if only a subset of the structural assembly is fit into the data.
         * This data item is a pointer to _ihm_struct_assembly.id in the
         * IHM_STRUCT_ASSEMBLY category. The IHM_STRUCT_ASSEMBLY category provides the
         * details regarding the different structural assemblies used in the modeling.
         * The default value for this data item is "1" indicating that the entire assembly
         * being modeled is fit into the SAS data.
         */
        struct_assembly_id: int$5,
        /**
         * A flag that indicates whether or not the SAS profile is segmented i.e.,
         * whether the whole SAS profile is used or only a portion of it is used
         * (by masking or by other means) as restraint in the modeling.
         */
        profile_segment_flag: Aliased$3(lstr$2),
        /**
         * The type of atoms in the model fit to the SAS data.
         */
        fitting_atom_type: str$5,
        /**
         * The method used for fitting the model to the SAS data.
         */
        fitting_method: str$5,
        /**
         * An indicator to single or multiple state fitting.
         */
        fitting_state: Aliased$3(str$5),
        /**
         * Radius of gyration obtained from the SAS profile, if used as input restraint.
         */
        radius_of_gyration: float$5,
        /**
         * The chi value resulting from fitting the model to the SAS data.
         */
        chi_value: float$5,
        /**
         * Additional details regarding the SAS restraint used.
         */
        details: str$5,
    },
    /**
     * Data items in the IHM_STARTING_MODEL_COORD category records the coordinates
     * for structural templates used as starting inputs in the integrative model
     * building tasks.
     */
    ihm_starting_model_coord: {
        /**
         * A unique identifier for this coordinate position.
         */
        ordinal_id: int$5,
        /**
         * The identifier for the starting structural model.
         * This data item is a pointer to _ihm_starting_model_details.starting_model_id
         * in the IHM_STARTING_MODEL_DETAILS category.
         */
        starting_model_id: str$5,
        /**
         * The group of atoms to which the atom site in the starting model belongs. This data
         * item is provided for compatibility with the original Protein Data Bank format,
         * and only for that purpose.
         */
        group_PDB: Aliased$3(str$5),
        /**
         * The serial number for this coordinate position.
         */
        id: int$5,
        /**
         * The atom type symbol(element symbol) corresponding to this coordinate position.
         */
        type_symbol: str$5,
        /**
         * The entity identifier corresponding to this coordinate position.
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * The atom identifier/name corresponding to this coordinate position.
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        atom_id: str$5,
        /**
         * The component identifier corresponding to this coordinate position.
         * This data item is a pointer to _chem_comp.id in the
         * CHEM_COMP category.
         */
        comp_id: str$5,
        /**
         * The sequence index corresponding this to coordinate position.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id: int$5,
        /**
         * The asym/strand id corresponding to this coordinate position.
         *
         * This data item is a pointer to _struct_asym.id in the STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The Cartesian X component corresponding to this coordinate position.
         */
        Cartn_x: float$5,
        /**
         * The Cartesian Y component corresponding to this coordinate position.
         */
        Cartn_y: float$5,
        /**
         * The Cartesian Z component corresponding to this coordinate position.
         */
        Cartn_z: float$5,
        /**
         * The isotropic temperature factor corresponding to this coordinate position.
         */
        B_iso_or_equiv: float$5,
    },
    /**
     * Data items in the IHM_SPHERE_OBJ_SITE category records the details
     * of the spherical objects modeled in the integrative structural model.
     */
    ihm_sphere_obj_site: {
        /**
         * A unique identifier for this pseudo atom / sphere object.
         */
        id: int$5,
        /**
         * The entity identifier corresponding to this sphere object.
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * The leading sequence index corresponding to this sphere object.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_begin: int$5,
        /**
         * The trailing sequence index corresponding to this sphere object.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_end: int$5,
        /**
         * An asym/strand identifier corresponding to this sphere object.
         * This data item is a pointer to _struct_asym.id in the STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The Cartesian X component corresponding to this sphere object.
         */
        Cartn_x: float$5,
        /**
         * The Cartesian Y component corresponding to this sphere object.
         */
        Cartn_y: float$5,
        /**
         * The Cartesian Z component corresponding to this sphere object.
         */
        Cartn_z: float$5,
        /**
         * The radius associated with the primitive sphere object at this position.
         */
        object_radius: float$5,
        /**
         * The Root Mean Square Fluctuation (RMSF) observed in the primitive
         * sphere object at this position.
         */
        rmsf: float$5,
        /**
         * The model id corresponding to the sphere object.
         * This data item is a pointer to _ihm_model_list.model_id
         * in the IHM_MODEL_LIST category.
         */
        model_id: int$5,
    },
    /**
     * Data items in the IHM_GAUSSIAN_OBJ_SITE category records the details
     * of the gaussian objects modeled in the integrative structural model.
     */
    ihm_gaussian_obj_site: {
        /**
         * A unique identifier for this gaussian object in the model.
         */
        id: int$5,
        /**
         * The entity identifier corresponding to this gaussian object.
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * The leading sequence index corresponding to this gaussian object.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_begin: int$5,
        /**
         * The trailing sequence index corresponding to this gaussian object.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_end: int$5,
        /**
         * An asym/strand identifier corresponding to this gaussian object.
         * This data item is a pointer to _struct_asym.id in the STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The mean Cartesian X component corresponding to this gaussian object.
         */
        mean_Cartn_x: float$5,
        /**
         * The mean Cartesian Y component corresponding to this gaussian object.
         */
        mean_Cartn_y: float$5,
        /**
         * The mean Cartesian Z component corresponding to this gaussian object.
         */
        mean_Cartn_z: float$5,
        /**
         * The weight of the gaussian object.
         */
        weight: float$5,
        /**
         * Data item  of the covariance matrix representing the Gaussian object.
         */
        covariance_matrix: Matrix$1(3, 3),
        /**
         * The model id corresponding to the gaussian object.
         * This data item is a pointer to _ihm_model_list.model_id
         * in the IHM_MODEL_LIST category.
         */
        model_id: int$5,
    },
    /**
     * Data items in the IHM_GAUSSIAN_OBJ_ENSEMBLE category records the details
     * of the gaussian objects representing an ensemble or cluster of models.
     */
    ihm_gaussian_obj_ensemble: {
        /**
         * A unique identifier for this gaussian object.
         */
        id: int$5,
        /**
         * The entity identifier corresponding to this gaussian object.
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * The leading sequence index corresponding to this gaussian object.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_begin: int$5,
        /**
         * The trailing sequence index corresponding to this gaussian object.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_end: int$5,
        /**
         * An asym/strand identifier corresponding to this gaussian object.
         * This data item is a pointer to _struct_asym.id in the STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The mean Cartesian X component corresponding to this gaussian object.
         */
        mean_Cartn_x: float$5,
        /**
         * The mean Cartesian Y component corresponding to this gaussian object.
         */
        mean_Cartn_y: float$5,
        /**
         * The mean Cartesian Z component corresponding to this gaussian object.
         */
        mean_Cartn_z: float$5,
        /**
         * The weight of the gaussian object.
         */
        weight: float$5,
        /**
         * Data item  of the covariance matrix representing the Gaussian object.
         */
        covariance_matrix: Matrix$1(3, 3),
        /**
         * The ensemble id corresponding to the gaussian object.
         * This data item is a pointer to _ihm_ensemble_info.ensemble_id
         * in the IHM_ENSEMBLE_INFO category.
         */
        ensemble_id: int$5,
    },
    /**
     * IHM_FEATURE_LIST is the high level category that provides defintions
     * to select atoms/residues from polymeric and non-polymeric entities.
     */
    ihm_feature_list: {
        /**
         * A unique identifier for the feature.
         */
        feature_id: int$5,
        /**
         * The type of feature.
         */
        feature_type: Aliased$3(str$5),
        /**
         * The type of entity.
         */
        entity_type: Aliased$3(str$5),
    },
    /**
     * Data items in the IHM_POLY_RESIDUE_FEATURE category provides the defintions
     * required to select a specific residue or a set of residues that may or may not be
     * in a contiguous range.
     */
    ihm_poly_residue_feature: {
        /**
         * A unique identifier for the category.
         */
        ordinal_id: int$5,
        /**
         * An identifier for the selected residue / residue range feature.
         * This data item is a pointer to _ihm_feature_list.feature_id in the
         * IHM_FEATURE_LIST category.
         */
        feature_id: int$5,
        /**
         * The entity identifier for residue / residue range.
         * This data item is a pointer to _entity_poly_seq.entity_id in the
         * ENTITY_POLY_SEQ category.
         */
        entity_id: str$5,
        /**
         * An asym/strand identifier for the residue / residue range, if applicable.
         * This data item is a pointer to _struct_asym.id in the
         * STRUCT_ASYM category.
         */
        asym_id: str$5,
        /**
         * The component identifier of the beginning residue / residue range.
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category.
         */
        comp_id_begin: str$5,
        /**
         * The component identifier of the ending residue / residue range.
         * This data item is a pointer to _entity_poly_seq.mon_id in the ENTITY_POLY_SEQ category.
         */
        comp_id_end: str$5,
        /**
         * The sequence index of the beginning residue / residue range.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_begin: int$5,
        /**
         * The sequence index of the ending residue / residue range.
         * This data item is a pointer to _entity_poly_seq.num in the ENTITY_POLY_SEQ category.
         */
        seq_id_end: int$5,
    },
    /**
     * Data items in the IHM_DERIVED_DISTANCE_RESTRAINT category records the
     * list of distance restraints used in the integrative modeling experiment.
     * These distance redistance restraints may be derived from various kinds of experiments.
     */
    ihm_derived_distance_restraint: {
        /**
         * A unique identifier for the derived distance restraint.
         */
        id: int$5,
        /**
         * An identifier to group the distance restraints.
         * This can be the same as the _ihm_derived_distance_restraint.id in case
         * the some of the restraints are not grouped.
         */
        group_id: int$5,
        /**
         * The feature identifier for the first partner in the distance restraint.
         * This data item is a pointer to _ihm_feature_list.feature_id in the
         * IHM_FEATURE_LIST category.
         */
        feature_id_1: int$5,
        /**
         * The feature identifier for the second partner in the distance restraint.
         * This data item is a pointer to _ihm_feature_list.feature_id in the
         * IHM_FEATURE_LIST category.
         */
        feature_id_2: int$5,
        /**
         * If a group of atoms or residues are restrained, this data item defines
         * the conditionality based on which the restraint is applied in the modeling.
         */
        group_conditionality: Aliased$3(str$5),
        /**
         * The fraction of randomly excluded distance restraints during modeling.
         * In HADDOCK, this is used along with ambiguous interface restraints (AIRs)
         * to account for uncertainties in AIRs.
         */
        random_exclusion_fraction: float$5,
        /**
         * The upper limit to the distance threshold applied to this distance restraint
         * in the integrative modeling task.
         */
        distance_upper_limit: float$5,
        /**
         * The type of distance restraint applied.
         */
        restraint_type: Aliased$3(str$5),
        /**
         * Identifier to the input data from which the distance restraint is derived.
         * This data item is a pointer to the _ihm_dataset_list.id in the
         * IHM_DATASET_LIST category.
         * This data item may not be applicable for all cases. For example, in case of
         * ambiguous interface restraints where the interface residues are identified
         * from multiple experiments, the reference to the _ihm_dataset_list.id is
         * handled in the IHM_INTERFACE_RESIDUE_FEATURE category rather than here.
         */
        dataset_list_id: int$5,
    },
    /**
     * Data items in the MA_MODEL_LIST category record the
     * details of the models being deposited.
     */
    ma_model_list: {
        /**
         * A unique identifier for the model / model group combination.
         */
        ordinal_id: int$5,
        /**
         * A unique identifier for the structural model being deposited.
         */
        model_id: int$5,
        /**
         * An identifier to group structural models into collections or sets.
         * A cluster of models and its representative can either be grouped together
         * or can be separate groups in the ma_model_list table. The choice between
         * the two options should be decided based on how the modeling was carried out
         * and how the representative was chosen. If the representative is a member of
         * the ensemble (i.e., best scoring model), then it is recommended that the
         * representative and the ensemble belong to the same model group. If the
         * representative is calculated from the ensemble (i.e., centroid), then it is
         * recommended that the representative be separated into a different group.
         * If the models do not need to be grouped into collections, then the
         * _ma_model_list.model_group_id is the same as _ma_model_list.model_id.
         */
        model_group_id: int$5,
        /**
         * A decsriptive name for the model.
         */
        model_name: str$5,
        /**
         * A decsriptive name for the model group.
         */
        model_group_name: str$5,
        /**
         * The type of model.
         */
        model_type: Aliased$3(str$5),
        /**
         * The data_id identifier. This data item is a pointer to
         * _ma_data.id in the MA_DATA category.
         */
        data_id: int$5,
    },
    /**
     * Data items in the MA_TARGET_ENTITY category record details about
     * the target entities. The details are provided for each entity
     * being modeled.
     */
    ma_target_entity: {
        /**
         * A unique identifier for the distinct molecular entity of the target.
         * This data item is a pointer to _entity.id in the ENTITY category.
         */
        entity_id: str$5,
        /**
         * The data_id identifier. This data item is a pointer to
         * _ma_data.id in the MA_DATA category.
         */
        data_id: int$5,
        /**
         * The origin of the target entity.
         */
        origin: Aliased$3(str$5),
    },
    /**
     * Data items in the MA_TARGET_ENTITY_INSTANCE category record details about
     * the instances of target entities modeled.
     */
    ma_target_entity_instance: {
        /**
         * A unique identifier for the instance of the entity.
         */
        asym_id: str$5,
        /**
         * A unique identifier for the distinct molecular entity of the target.
         * This data item is a pointer to _ma_target_entity.entity_id in the
         * MA_TARGET_ENTITY category.
         */
        entity_id: str$5,
        /**
         * Additional details about the entity instance.
         */
        details: str$5,
    },
    /**
     * Data items in the MA_TARGET_REF_DB_DETAILS category record details about
     * the reference databases for the target sequences.
     */
    ma_target_ref_db_details: {
        /**
         * An identifier for the target entity.
         */
        target_entity_id: str$5,
        /**
         * The name of the database containing reference information about
         * this entity or biological unit.
         */
        db_name: Aliased$3(str$5),
        /**
         * The code for this entity or biological unit or for a closely
         * related entity or biological unit in the named database.
         * This can include the version number.
         */
        db_code: str$5,
        /**
         * Accession code assigned by the reference database.
         */
        db_accession: str$5,
        /**
         * Database code assigned by the reference database for a sequence isoform.   An isoform sequence is an
         * alternative protein sequence that can be generated from the same gene by a single or by a combination of
         * biological events such as: alternative promoter usage, alternative splicing, alternative initiation
         * and ribosomal frameshifting.
         */
        seq_db_isoform: str$5,
        /**
         * Beginning index in the chemical sequence from the
         * reference database.
         */
        seq_db_align_begin: str$5,
        /**
         * Ending index in the chemical sequence from the
         * reference database.
         */
        seq_db_align_end: str$5,
        /**
         * Taxonomy identifier provided by NCBI.
         */
        ncbi_taxonomy_id: str$5,
        /**
         * Scientific name of the organism.
         */
        organism_scientific: str$5,
    },
    /**
     * Data items in the MA_DATA category capture the different kinds of
     * data used in the modeling. These can be multiple sequence
     * alignments, spatial restraints, template structures etc.
     */
    ma_data: {
        /**
         * A unique identifier for the data.
         */
        id: int$5,
        /**
         * The type of data held in the dataset.
         */
        content_type: Aliased$3(str$5),
        /**
         * Details for other content types.
         */
        content_type_other_details: str$5,
        /**
         * An author-given name for the content held in the dataset.
         */
        name: str$5,
    },
    /**
     * Data items in the MA_SOFTWARE_GROUP category describes the
     * collection of software into groups so that they can be used
     * efficiently in the MA_PROTOCOL_STEP category.
     */
    ma_software_group: {
        /**
         * A unique identifier for the category.
         */
        ordinal_id: int$5,
        /**
         * An identifier for the group entry.
         * If data does not need to be grouped, then _ma_software_group.group_id
         * is the same as _ma_software_group.software_id.
         */
        group_id: int$5,
        /**
         * The identifier for the software.
         * This data item is a pointer to _software.pdbx_ordinal
         * in the SOFTWARE category.
         */
        software_id: int$5,
    },
    /**
     * Data items in the MA_QA_METRIC category record the
     * details of the metrics use to assess model quality.
     */
    ma_qa_metric: {
        /**
         * An identifier for the QA metric.
         */
        id: int$5,
        /**
         * Name of the QA metric.
         */
        name: str$5,
        /**
         * The type of QA metric.
         */
        type: Aliased$3(str$5),
        /**
         * The mode of calculation of the QA metric.
         */
        mode: Aliased$3(str$5),
        /**
         * Identifier to the set of software used to calculate the QA metric.
         * This data item is a pointer to the _ma_software_group.group_id in the
         * MA_SOFTWARE_GROUP category.
         */
        software_group_id: int$5,
    },
    /**
     * Data items in the MA_QA_METRIC_GLOBAL category captures the
     * details of the global QA metrics, calculated at the model-level.
     */
    ma_qa_metric_global: {
        /**
         * A unique identifier for the category.
         */
        ordinal_id: int$5,
        /**
         * The identifier for the structural model, for which global QA metric is provided.
         * This data item is a pointer to _ma_model_list.model_id
         * in the MA_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * The identifier for the QA metric.
         * This data item is a pointer to _ma_qa_metric.id in the
         * MA_QA_METRIC category.
         */
        metric_id: int$5,
        /**
         * The value of the global QA metric.
         */
        metric_value: float$5,
    },
    /**
     * Data items in the MA_QA_METRIC_LOCAL category captures the
     * details of the local QA metrics, calculated at the residue-level.
     */
    ma_qa_metric_local: {
        /**
         * A unique identifier for the category.
         */
        ordinal_id: int$5,
        /**
         * The identifier for the structural model, for which local QA metric is provided.
         * This data item is a pointer to _ma_model_list.model_id
         * in the MA_MODEL_LIST category.
         */
        model_id: int$5,
        /**
         * The identifier for the asym id of the residue in the
         * structural model, for which local QA metric is provided.
         * This data item is a pointer to _atom_site.label_asym_id
         * in the ATOM_SITE category.
         */
        label_asym_id: str$5,
        /**
         * The identifier for the sequence index of the residue
         * in the structural model, for which local QA metric is provided.
         * This data item is a pointer to _atom_site.label_seq_id
         * in the ATOM_SITE category.
         */
        label_seq_id: int$5,
        /**
         * The component identifier for the residue in the
         * structural model, for which local QA metric is provided.
         * This data item is a pointer to _atom_site.label_comp_id
         * in the ATOM_SITE category.
         */
        label_comp_id: str$5,
        /**
         * The identifier for the QA metric.
         * This data item is a pointer to _ma_qa_metric.id in the
         * MA_QA_METRIC category.
         */
        metric_id: int$5,
        /**
         * The value of the local QA metric.
         */
        metric_value: float$5,
    },
};

/**
 * Copyright (c) 2017-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Code-generated 'CCD' schema file. Dictionary versions: mmCIF 5.391, IHM 1.25, MA 1.4.6.
 *
 * @author molstar/ciftools package
 */
var Schema$5 = Column.Schema;
const str$4 = Schema$5.str;
const float$4 = Schema$5.float;
const List = Schema$5.List;
const lstr$1 = Schema$5.lstr;
const Aliased$2 = Schema$5.Aliased;
const int$4 = Schema$5.int;
const coord = Schema$5.coord;
const CCD_Schema = {
    /**
     * Data items in the CHEM_COMP category give details about each
     * of the chemical components from which the relevant chemical
     * structures can be constructed, such as name, mass or charge.
     *
     * The related categories CHEM_COMP_ATOM, CHEM_COMP_BOND,
     * CHEM_COMP_ANGLE etc. describe the detailed geometry of these
     * chemical components.
     */
    chem_comp: {
        /**
         * The formula for the chemical component. Formulae are written
         * according to the following rules:
         *
         * (1) Only recognized element symbols may be used.
         *
         * (2) Each element symbol is followed by a 'count' number. A count
         * of '1' may be omitted.
         *
         * (3) A space or parenthesis must separate each cluster of
         * (element symbol + count), but in general parentheses are
         * not used.
         *
         * (4) The order of elements depends on whether carbon is
         * present or not. If carbon is present, the order should be:
         * C, then H, then the other elements in alphabetical order
         * of their symbol. If carbon is not present, the elements
         * are listed purely in alphabetic order of their symbol. This
         * is the 'Hill' system used by Chemical Abstracts.
         */
        formula: str$4,
        /**
         * Formula mass in daltons of the chemical component.
         */
        formula_weight: float$4,
        /**
         * The value of _chem_comp.id must uniquely identify each item in
         * the CHEM_COMP list.
         *
         * For protein polymer entities, this is the three-letter code for
         * the amino acid.
         *
         * For nucleic acid polymer entities, this is the one-letter code
         * for the base.
         */
        id: str$4,
        /**
         * The identifier for the parent component of the nonstandard
         * component. May be be a comma separated list if this component
         * is derived from multiple components.
         *
         * Items in this indirectly point to _chem_comp.id in
         * the CHEM_COMP category.
         */
        mon_nstd_parent_comp_id: List(',', x => x),
        /**
         * The full name of the component.
         */
        name: str$4,
        /**
         * For standard polymer components, the one-letter code for
         * the component.   For non-standard polymer components, the
         * one-letter code for parent component if this exists;
         * otherwise, the one-letter code should be given as 'X'.
         *
         * Components that derived from multiple parents components
         * are described by a sequence of one-letter-codes.
         */
        one_letter_code: str$4,
        /**
         * For standard polymer components, the common three-letter code for
         * the component.   Non-standard polymer components and non-polymer
         * components are also assigned three-letter-codes.
         *
         * For ambiguous polymer components three-letter code should
         * be given as 'UNK'.  Ambiguous ions are assigned the code 'UNX'.
         * Ambiguous non-polymer components are assigned the code 'UNL'.
         */
        three_letter_code: str$4,
        /**
         * For standard polymer components, the type of the monomer.
         * Note that monomers that will form polymers are of three types:
         * linking monomers, monomers with some type of N-terminal (or 5')
         * cap and monomers with some type of C-terminal (or 3') cap.
         */
        type: Aliased$2(lstr$1),
        /**
         * Synonym list for the component.
         */
        pdbx_synonyms: List(';', x => x),
        /**
         * A preliminary classification used by PDB.
         */
        pdbx_type: str$4,
        /**
         * A preliminary classification used by PDB to indicate
         * that the chemistry of this component while described
         * as clearly as possible is still ambiguous.  Software
         * tools may not be able to process this component
         * definition.
         */
        pdbx_ambiguous_flag: str$4,
        /**
         * Identifies the _chem_comp.id of the component that
         * has replaced this component.
         */
        pdbx_replaced_by: str$4,
        /**
         * Identifies the _chem_comp.id's of the components
         * which have been replaced by this component.
         * Multiple id codes should be separated by commas.
         */
        pdbx_replaces: str$4,
        /**
         * The net integer charge assigned to this component. This is the
         * formal charge assignment normally found in chemical diagrams.
         */
        pdbx_formal_charge: int$4,
        /**
         * This data item provides additional details about the model coordinates
         * in the component definition.
         */
        pdbx_model_coordinates_details: str$4,
        /**
         * This data item identifies the PDB database code from which the heavy
         * atom model coordinates were obtained.
         */
        pdbx_model_coordinates_db_code: str$4,
        /**
         * This data item identifies the source of the ideal coordinates in the
         * component definition.
         */
        pdbx_ideal_coordinates_details: str$4,
        /**
         * This data item identifies if ideal coordinates are missing in this definition.
         */
        pdbx_ideal_coordinates_missing_flag: Aliased$2(lstr$1),
        /**
         * This data item identifies if model coordinates are missing in this definition.
         */
        pdbx_model_coordinates_missing_flag: Aliased$2(lstr$1),
        /**
         * Date component was added to database.
         */
        pdbx_initial_date: str$4,
        /**
         * Date component was last modified.
         */
        pdbx_modified_date: str$4,
        /**
         * This data item holds the current release status for the component.
         */
        pdbx_release_status: Aliased$2(str$4),
        /**
         * This data item identifies the deposition site that processed
         * this chemical component defintion.
         */
        pdbx_processing_site: Aliased$2(str$4),
    },
    /**
     * Data items in the CHEM_COMP_ATOM category record details about
     * the atoms in a chemical component. Specifying the atomic
     * coordinates for the components in this category is an
     * alternative to specifying the structure of the component
     * via bonds, angles, planes etc. in the appropriate
     * CHEM_COMP subcategories.
     */
    chem_comp_atom: {
        /**
         * An alternative identifier for the atom. This data item would be
         * used in cases where alternative nomenclatures exist for labelling
         * atoms in a group.
         */
        alt_atom_id: str$4,
        /**
         * The value of _chem_comp_atom.atom_id must uniquely identify
         * each atom in each monomer in the CHEM_COMP_ATOM list.
         *
         * The atom identifiers need not be unique over all atoms in the
         * data block; they need only be unique for each atom in a
         * component.
         *
         * Note that this item need not be a number; it can be any unique
         * identifier.
         */
        atom_id: str$4,
        /**
         * The net integer charge assigned to this atom. This is the
         * formal charge assignment normally found in chemical diagrams.
         */
        charge: int$4,
        /**
         * The x component of the coordinates for this atom in this
         * component specified as orthogonal angstroms. The choice of
         * reference axis frame for the coordinates is arbitrary.
         *
         * The set of coordinates input for the entity here is intended to
         * correspond to the atomic model used to generate restraints for
         * structure refinement, not to atom sites in the ATOM_SITE
         * list.
         */
        model_Cartn_x: coord,
        /**
         * The y component of the coordinates for this atom in this
         * component specified as orthogonal angstroms. The choice of
         * reference axis frame for the coordinates is arbitrary.
         *
         * The set of coordinates input for the entity here is intended to
         * correspond to the atomic model used to generate restraints for
         * structure refinement, not to atom sites in the ATOM_SITE
         * list.
         */
        model_Cartn_y: coord,
        /**
         * The z component of the coordinates for this atom in this
         * component specified as orthogonal angstroms. The choice of
         * reference axis frame for the coordinates is arbitrary.
         *
         * The set of coordinates input for the entity here is intended to
         * correspond to the atomic model used to generate restraints for
         * structure refinement, not to atom sites in the ATOM_SITE
         * list.
         */
        model_Cartn_z: coord,
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        comp_id: str$4,
        /**
         * The code used to identify the atom species representing
         * this atom type. Normally this code is the element
         * symbol.
         */
        type_symbol: str$4,
        /**
         * Atom name alignment offset in PDB atom field.
         */
        pdbx_align: int$4,
        /**
         * Ordinal index for the component atom list.
         */
        pdbx_ordinal: int$4,
        /**
         * An alternative x component of the coordinates for this atom in this
         * component specified as orthogonal angstroms.
         */
        pdbx_model_Cartn_x_ideal: coord,
        /**
         * An alternative y component of the coordinates for this atom in this
         * component specified as orthogonal angstroms.
         */
        pdbx_model_Cartn_y_ideal: coord,
        /**
         * An alternative z component of the coordinates for this atom in this
         * component specified as orthogonal angstroms.
         */
        pdbx_model_Cartn_z_ideal: coord,
        /**
         * The chiral configuration of the atom that is a chiral center.
         */
        pdbx_stereo_config: Aliased$2(lstr$1),
        /**
         * A flag indicating an aromatic atom.
         */
        pdbx_aromatic_flag: Aliased$2(lstr$1),
        /**
         * A flag indicating a leaving atom.
         */
        pdbx_leaving_atom_flag: Aliased$2(lstr$1),
    },
    /**
     * Data items in the CHEM_COMP_BOND category record details about
     * the bonds between atoms in a chemical component. Target values
     * may be specified as bond orders, as a distance between the two
     * atoms, or both.
     */
    chem_comp_bond: {
        /**
         * The ID of the first of the two atoms that define the bond.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        atom_id_1: str$4,
        /**
         * The ID of the second of the two atoms that define the bond.
         *
         * This data item is a pointer to _chem_comp_atom.atom_id in the
         * CHEM_COMP_ATOM category.
         */
        atom_id_2: str$4,
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        comp_id: str$4,
        /**
         * The value that should be taken as the target for the chemical
         * bond associated with the specified atoms, expressed as a bond
         * order.
         */
        value_order: Aliased$2(lstr$1),
        /**
         * Ordinal index for the component bond list.
         */
        pdbx_ordinal: int$4,
        /**
         * Stereochemical configuration across a double bond.
         */
        pdbx_stereo_config: Aliased$2(lstr$1),
        /**
         * A flag indicating an aromatic bond.
         */
        pdbx_aromatic_flag: Aliased$2(lstr$1),
    },
    /**
     * Data items in the CHEM_COMP_DESCRIPTOR category provide
     * string descriptors of component chemical structure.
     */
    pdbx_chem_comp_descriptor: {
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        comp_id: str$4,
        /**
         * This data item contains the descriptor value for this
         * component.
         */
        descriptor: str$4,
        /**
         * This data item contains the descriptor type.
         */
        type: Aliased$2(lstr$1),
        /**
         * This data item contains the name of the program
         * or library used to compute the descriptor.
         */
        program: str$4,
        /**
         * This data item contains the version of the program
         * or library used to compute the descriptor.
         */
        program_version: str$4,
    },
    /**
     * Data items in the CHEM_COMP_IDENTIFIER category provide
     * identifiers for chemical components.
     */
    pdbx_chem_comp_identifier: {
        /**
         * This data item is a pointer to _chem_comp.id in the CHEM_COMP
         * category.
         */
        comp_id: str$4,
        /**
         * This data item contains the identifier value for this
         * component.
         */
        identifier: str$4,
        /**
         * This data item contains the identifier type.
         */
        type: Aliased$2(str$4),
        /**
         * This data item contains the name of the program
         * or library used to compute the identifier.
         */
        program: str$4,
        /**
         * This data item contains the version of the program
         * or library used to compute the identifier.
         */
        program_version: str$4,
    },
};

/**
 * Copyright (c) 2017-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Code-generated 'BIRD' schema file. Dictionary versions: mmCIF 5.391, IHM 1.25, MA 1.4.6.
 *
 * @author molstar/ciftools package
 */
var Schema$4 = Column.Schema;
const str$3 = Schema$4.str;
const float$3 = Schema$4.float;
const lstr = Schema$4.lstr;
const Aliased$1 = Schema$4.Aliased;
const int$3 = Schema$4.int;
const BIRD_Schema = {
    /**
     * Data items in the PDBX_REFERENCE_MOLECULE category record
     * reference information about small polymer molecules.
     */
    pdbx_reference_molecule: {
        /**
         * The value of _pdbx_reference_molecule.prd_id is the unique identifier
         * for the reference molecule in this family.
         *
         * By convention this ID uniquely identifies the reference molecule in
         * in the PDB reference dictionary.
         *
         * The ID has the template form PRD_dddddd (e.g. PRD_000001)
         */
        prd_id: str$3,
        /**
         * Formula mass in daltons of the entity.
         */
        formula_weight: float$3,
        /**
         * The formula for the reference entity. Formulae are written
         * according to the rules:
         *
         * 1. Only recognised element symbols may be used.
         *
         * 2. Each element symbol is followed by a 'count' number. A count
         * of '1' may be omitted.
         *
         * 3. A space or parenthesis must separate each element symbol and
         * its count, but in general parentheses are not used.
         *
         * 4. The order of elements depends on whether or not carbon is
         * present. If carbon is present, the order should be: C, then
         * H, then the other elements in alphabetical order of their
         * symbol. If carbon is not present, the elements are listed
         * purely in alphabetic order of their symbol. This is the
         * 'Hill' system used by Chemical Abstracts.
         */
        formula: str$3,
        /**
         * Defines the structural classification of the entity.
         */
        type: Aliased$1(lstr),
        /**
         * Evidence for the assignment of _pdbx_reference_molecule.type
         */
        type_evidence_code: str$3,
        /**
         * Broadly defines the function of the entity.
         */
        class: Aliased$1(lstr),
        /**
         * Evidence for the assignment of _pdbx_reference_molecule.class
         */
        class_evidence_code: str$3,
        /**
         * A name of the entity.
         */
        name: str$3,
        /**
         * Defines how this entity is represented in PDB data files.
         */
        represent_as: Aliased$1(lstr),
        /**
         * For entities represented as single molecules, the identifier
         * corresponding to the chemical definition for the molecule.
         */
        chem_comp_id: str$3,
        /**
         * Special details about this molecule.
         */
        compound_details: str$3,
        /**
         * Description of this molecule.
         */
        description: str$3,
        /**
         * The PDB accession code for the entry containing a representative example of this molecule.
         */
        representative_PDB_id_code: str$3,
        /**
         * Defines the current PDB release status for this molecule definition.
         */
        release_status: Aliased$1(lstr),
        /**
         * Assigns the identifier for the reference molecule which have been replaced
         * by this reference molecule.
         * Multiple molecule identifier codes should be separated by commas.
         */
        replaces: str$3,
        /**
         * Assigns the identifier of the reference molecule that has replaced this molecule.
         */
        replaced_by: str$3,
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_LIST category record
     * the list of entities within each reference molecule.
     */
    pdbx_reference_entity_list: {
        /**
         * The value of _pdbx_reference_entity_list.prd_id is a reference
         * _pdbx_reference_molecule.prd_id in the PDBX_REFERENCE_MOLECULE category.
         */
        prd_id: str$3,
        /**
         * The value of _pdbx_reference_entity_list.ref_entity_id is a unique identifier
         * the a constituent entity within this reference molecule.
         */
        ref_entity_id: str$3,
        /**
         * Defines the polymer characteristic of the entity.
         */
        type: Aliased$1(lstr),
        /**
         * Additional details about this entity.
         */
        details: str$3,
        /**
         * The component number of this entity within the molecule.
         */
        component_id: int$3,
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_NONPOLY category record
     * the list of entities within each reference molecule.
     */
    pdbx_reference_entity_nonpoly: {
        /**
         * The value of _pdbx_reference_entity_nonpoly.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the PDBX_REFERENCE_ENTITY_LIST category.
         */
        prd_id: str$3,
        /**
         * The value of _pdbx_reference_entity_nonpoly.ref_entity_id is a reference
         * to _pdbx_reference_entity_list.ref_entity_id in PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id: str$3,
        /**
         * A name of the non-polymer entity.
         */
        name: str$3,
        /**
         * For non-polymer entities, the identifier corresponding
         * to the chemical definition for the molecule.
         */
        chem_comp_id: str$3,
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_LINK category give details about
     * the linkages between entities within reference molecules.
     */
    pdbx_reference_entity_link: {
        /**
         * The value of _pdbx_reference_entity_link.link_id uniquely identifies
         * linkages between entities with a molecule.
         */
        link_id: int$3,
        /**
         * The value of _pdbx_reference_entity_link.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the PDBX_REFERENCE_ENTITY_LIST category.
         */
        prd_id: str$3,
        /**
         * A description of special aspects of a linkage between
         * chemical components in the structure.
         */
        details: str$3,
        /**
         * The reference entity id of the first of the two entities joined by the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_list.ref_entity_id
         * in the PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id_1: str$3,
        /**
         * The reference entity id of the second of the two entities joined by the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_list.ref_entity_id
         * in the PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id_2: str$3,
        /**
         * For a polymer entity, the sequence number in the first of
         * the two entities containing the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_1: int$3,
        /**
         * For a polymer entity, the sequence number in the second of
         * the two entities containing the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_2: int$3,
        /**
         * The component identifier in the first of the two entities containing the linkage.
         *
         * For polymer entities, this data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         *
         * For non-polymer entities, this data item is a pointer to
         * _pdbx_reference_entity_nonpoly.chem_comp_id in the
         * PDBX_REFERENCE_ENTITY_NONPOLY category.
         */
        comp_id_1: str$3,
        /**
         * The component identifier in the second of the two entities containing the linkage.
         *
         * For polymer entities, this data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         *
         * For non-polymer entities, this data item is a pointer to
         * _pdbx_reference_entity_nonpoly.chem_comp_id in the
         * PDBX_REFERENCE_ENTITY_NONPOLY category.
         */
        comp_id_2: str$3,
        /**
         * The atom identifier/name in the first of the two entities containing the linkage.
         */
        atom_id_1: str$3,
        /**
         * The atom identifier/name in the second of the two entities containing the linkage.
         */
        atom_id_2: str$3,
        /**
         * The bond order target for the chemical linkage.
         */
        value_order: Aliased$1(lstr),
        /**
         * The entity component identifier for the first of two entities containing the linkage.
         */
        component_1: int$3,
        /**
         * The entity component identifier for the second of two entities containing the linkage.
         */
        component_2: int$3,
        /**
         * A code indicating the entity types involved in the linkage.
         */
        link_class: Aliased$1(str$3),
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_POLY_LINK category give details about
     * polymer linkages including both standard and non-standard linkages between
     * polymer componnents.
     */
    pdbx_reference_entity_poly_link: {
        /**
         * The value of _pdbx_reference_entity_poly_link.link_id uniquely identifies
         * a linkage within a polymer entity.
         */
        link_id: int$3,
        /**
         * The value of _pdbx_reference_entity_poly_link.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the PDBX_REFERENCE_ENTITY_POLY category.
         */
        prd_id: str$3,
        /**
         * The reference entity id of the polymer entity containing the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly.ref_entity_id
         * in the PDBX_REFERENCE_ENTITY_POLY category.
         */
        ref_entity_id: str$3,
        /**
         * The entity component identifier entity containing the linkage.
         */
        component_id: int$3,
        /**
         * For a polymer entity, the sequence number in the first of
         * the two components making the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_1: int$3,
        /**
         * For a polymer entity, the sequence number in the second of
         * the two components making the linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.num
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        entity_seq_num_2: int$3,
        /**
         * The component identifier in the first of the two components making the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        comp_id_1: str$3,
        /**
         * The component identifier in the second of the two components making the
         * linkage.
         *
         * This data item is a pointer to _pdbx_reference_entity_poly_seq.mon_id
         * in the PDBX_REFERENCE_ENTITY_POLY_SEQ category.
         */
        comp_id_2: str$3,
        /**
         * The atom identifier/name in the first of the two components making
         * the linkage.
         */
        atom_id_1: str$3,
        /**
         * The atom identifier/name in the second of the two components making
         * the linkage.
         */
        atom_id_2: str$3,
        /**
         * The bond order target for the non-standard linkage.
         */
        value_order: Aliased$1(lstr),
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_POLY category record details about
     * the polymer, such as the type of the polymer, the number of
     * monomers and whether it has nonstandard features.
     */
    pdbx_reference_entity_poly: {
        /**
         * The value of _pdbx_reference_entity_poly.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the  PDBX_REFERENCE_ENTITY_LIST category.
         */
        prd_id: str$3,
        /**
         * The value of _pdbx_reference_entity_poly.ref_entity_id is a reference
         * to _pdbx_reference_entity_list.ref_entity_id in PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id: str$3,
        /**
         * The type of the polymer.
         */
        type: Aliased$1(str$3),
        /**
         * The database code for this source information
         */
        db_code: str$3,
        /**
         * The database name for this source information
         */
        db_name: str$3,
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_POLY_SEQ category specify the sequence
     * of monomers in a polymer.
     */
    pdbx_reference_entity_poly_seq: {
        /**
         * The value of _pdbx_reference_entity_poly_seq.prd_id is a reference
         * _pdbx_reference_entity_poly.prd_id in the  PDBX_REFERENCE_ENTITY_POLY category.
         */
        prd_id: str$3,
        /**
         * The value of _pdbx_reference_entity_poly_seq.ref_entity_id is a reference
         * to _pdbx_reference_entity_poly.ref_entity_id in PDBX_REFERENCE_ENTITY_POLY category.
         */
        ref_entity_id: str$3,
        /**
         * This data item is the chemical component identifier of monomer.
         */
        mon_id: str$3,
        /**
         * This data item is the chemical component identifier for the parent component corresponding to this monomer.
         */
        parent_mon_id: str$3,
        /**
         * The value of _pdbx_reference_entity_poly_seq.num must uniquely and sequentially
         * identify a record in the PDBX_REFERENCE_ENTITY_POLY_SEQ list.
         *
         * This value is conforms to author numbering conventions and does not map directly
         * to the numbering conventions used for _entity_poly_seq.num.
         */
        num: int$3,
        /**
         * A flag to indicate that this monomer is observed in the instance example.
         */
        observed: Aliased$1(lstr),
        /**
         * A flag to indicate that sequence heterogeneity at this monomer position.
         */
        hetero: Aliased$1(lstr),
    },
    /**
     * Additional features associated with the reference entity.
     */
    pdbx_reference_entity_sequence: {
        /**
         * The value of _pdbx_reference_entity_sequence.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the  PDBX_REFERENCE_ENTITY_LIST category.
         */
        prd_id: str$3,
        /**
         * The value of _pdbx_reference_entity_sequence.ref_entity_id is a reference
         * to _pdbx_reference_entity_list.ref_entity_id in PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id: str$3,
        /**
         * The monomer type for the sequence.
         */
        type: Aliased$1(str$3),
        /**
         * A flag to indicate a non-ribosomal entity.
         */
        NRP_flag: Aliased$1(str$3),
        /**
         * The one-letter-code sequence for this entity.  Non-standard monomers are represented as 'X'.
         */
        one_letter_codes: str$3,
    },
    /**
     * Data items in the PDBX_REFERENCE_ENTITY_SRC_NAT category record
     * details of the source from which the entity was obtained.
     */
    pdbx_reference_entity_src_nat: {
        /**
         * The value of _pdbx_reference_entity_src_nat.prd_id is a reference
         * _pdbx_reference_entity_list.prd_id in the  PDBX_REFERENCE_ENTITY_LIST category.
         */
        prd_id: str$3,
        /**
         * The value of _pdbx_reference_entity_src_nat.ref_entity_id is a reference
         * to _pdbx_reference_entity_list.ref_entity_id in PDBX_REFERENCE_ENTITY_LIST category.
         */
        ref_entity_id: str$3,
        /**
         * The value of _pdbx_reference_entity_src_nat.ordinal distinguishes
         * source details for this entity.
         */
        ordinal: int$3,
        /**
         * The scientific name of the organism from which the entity was isolated.
         */
        organism_scientific: str$3,
        /**
         * The NCBI TaxId of the organism from which the entity was isolated.
         */
        taxid: str$3,
        /**
         * The database code for this source information
         */
        db_code: str$3,
        /**
         * The database name for this source information
         */
        db_name: str$3,
    },
    /**
     * Data items in the PDBX_PRD_AUDIT category records
     * the status and tracking information for this molecule.
     */
    pdbx_prd_audit: {
        /**
         * This data item is a pointer to _pdbx_reference_molecule.prd_id in the
         * pdbx_reference_molecule category.
         */
        prd_id: str$3,
        /**
         * The date associated with this audit record.
         */
        date: str$3,
        /**
         * An identifier for the wwPDB site creating or modifying the molecule.
         */
        processing_site: Aliased$1(str$3),
        /**
         * The action associated with this audit record.
         */
        action_type: Aliased$1(str$3),
    },
};

/**
 * Copyright (c) 2017-2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
var Schema$3 = Column.Schema;
const str$2 = Schema$3.str;
const float$2 = Schema$3.float;
const datablock = {
    id: str$2,
    description: str$2
};
const dictionary = {
    title: str$2,
    datablock_id: str$2,
    version: str$2
};
const dictionary_history = {
    version: str$2,
    update: str$2,
    revision: str$2
};
const sub_category = {
    id: str$2,
    description: str$2
};
const category_group_list = {
    id: str$2,
    parent_id: str$2,
    description: str$2
};
const item_type_list = {
    code: str$2,
    primitive_code: str$2,
    construct: str$2,
    detail: str$2
};
const item_units_list = {
    code: str$2,
    detail: str$2
};
const item_units_conversion = {
    from_code: str$2,
    to_code: str$2,
    operator: str$2,
    factor: float$2
};
// TODO save frame dic schema
const dic_Schema = {
    datablock,
    dictionary,
    dictionary_history,
    sub_category,
    category_group_list,
    item_type_list,
    item_units_list,
    item_units_conversion
};

/**
 * Copyright (c) 2018 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
var Schema$2 = Column.Schema;
const str$1 = Schema$2.str;
const int$2 = Schema$2.int;
const float$1 = Schema$2.float;
const Aliased = Schema$2.Aliased;
const Vector = Schema$2.Vector;
({
    density_server_result: {
        'server_version': str$1,
        'datetime_utc': str$1,
        'guid': str$1,
        'is_empty': Aliased(str$1),
        'has_error': Aliased(str$1),
        'error': str$1,
        'query_source_id': str$1,
        'query_type': Aliased(str$1),
        'query_box_type': Aliased(str$1),
        'query_box_a': Vector(3),
        'query_box_b': Vector(3)
    }
});
const DensityServer_Data_Schema = {
    volume_data_3d_info: {
        'name': str$1,
        // zero indexed axis order of the data
        'axis_order': Vector(3, int$2),
        // Origin in fractional coords
        'origin': Vector(3),
        // Dimension in fractional coords
        'dimensions': Vector(3),
        'sample_rate': int$2,
        // number of samples along each axis
        'sample_count': Vector(3, int$2),
        'spacegroup_number': int$2,
        'spacegroup_cell_size': Vector(3),
        // angles in degrees
        'spacegroup_cell_angles': Vector(3),
        'mean_source': float$1,
        'mean_sampled': float$1,
        'sigma_source': float$1,
        'sigma_sampled': float$1,
        'min_source': float$1,
        'min_sampled': float$1,
        'max_source': float$1,
        'max_sampled': float$1
    },
    volume_data_3d: {
        values: float$1
    }
};

/**
 * Copyright (c) 2017-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * Code-generated 'CifCore' schema file. Dictionary versions: CifCore 3.3.0.
 *
 * @author molstar/ciftools package
 */
var Schema$1 = Column.Schema;
const float = Schema$1.float;
const int$1 = Schema$1.int;
const str = Schema$1.str;
const Matrix = Schema$1.Matrix;
const CifCore_Schema = {
    /**
     * The CATEGORY of data items used to describe the parameters of
     * the crystal unit cell.
     */
    cell: {
        /**
         * The angle between the bounding cell axes.
         */
        angle_alpha: float,
        /**
         * The angle between the bounding cell axes.
         */
        angle_beta: float,
        /**
         * The angle between the bounding cell axes.
         */
        angle_gamma: float,
        /**
         * The number of the formula units in the unit cell as specified
         * by _chemical_formula.structural, _chemical_formula.moiety or
         * _chemical_formula.sum.
         */
        formula_units_z: int$1,
        /**
         * The length of each cell axis.
         */
        length_a: float,
        /**
         * The length of each cell axis.
         */
        length_b: float,
        /**
         * The length of each cell axis.
         */
        length_c: float,
        /**
         * Volume of the crystal unit cell.
         */
        volume: float,
    },
    /**
     * The CATEGORY of data items which describe the composition and
     * chemical properties of the compound under study. The formula data
     * items must be consistent with the density, unit-cell and Z values.
     */
    chemical: {
        /**
         * The temperature at which a crystalline solid changes to a liquid.
         */
        melting_point: float,
        /**
         * Trivial name by which the compound is commonly known.
         */
        name_common: str,
        /**
         * IUPAC or Chemical Abstracts full name of compound.
         */
        name_systematic: str,
    },
    /**
     * The CATEGORY of data items which specify the composition and chemical
     * properties of the compound. The formula data items must agree
     * with those that specify the density, unit-cell and Z values.
     *
     * The following rules apply to the construction of the data items
     * _chemical_formula.analytical, *.structural and *.sum. For the
     * data item *.moiety the formula construction is broken up into
     * residues or moieties, i.e. groups of atoms that form a molecular
     * unit or molecular ion. The rules given below apply within each
     * moiety, but different requirements apply to the way that moieties
     * are connected (see _chemical_formula.moiety).
     *
     * 1. Only recognized element symbols may be used.
     *
     * 2. Each element symbol is followed by a 'count' number. A count of
     * '1' may be omitted.
     *
     * 3. A space or parenthesis must separate each cluster of (element
     * symbol + count).
     *
     * 4. Where a group of elements is enclosed in parentheses, the
     * multiplier for the group must follow the closing parentheses.
     * That is, all element and group multipliers are assumed to be
     * printed as subscripted numbers. [An exception to this rule
     * exists for *.moiety formulae where pre- and post-multipliers
     * are permitted for molecular units].
     *
     * 5. Unless the elements are ordered in a manner that corresponds to
     * their chemical structure, as in _chemical_formula.structural,
     * the order of the elements within any group or moiety
     * depends on whether or not carbon is present. If carbon is
     * present, the order should be: C, then H, then the other
     * elements in alphabetical order of their symbol. If carbon is
     * not present, the elements are listed purely in alphabetical order
     * of their symbol. This is the 'Hill' system used by Chemical
     * Abstracts. This ordering is used in _chemical_formula.moiety
     * and _chemical_formula.sum.
     *
     * _chemical_formula.IUPAC      '[Mo (C O)4 (C18 H33 P)2]'
     * _chemical_formula.moiety     'C40 H66 Mo O4 P2'
     * _chemical_formula.structural '((C O)4 (P (C6 H11)3)2)Mo'
     * _chemical_formula.sum         'C40 H66 Mo O4 P2'
     * _chemical_formula.weight      768.81
     */
    chemical_formula: {
        /**
         * Formula with each discrete bonded residue or ion shown as a
         * separate moiety. See above CHEMICAL_FORMULA for rules
         * for writing chemical formulae. In addition to the general
         * formulae requirements, the following rules apply:
         * 1. Moieties are separated by commas ','.
         * 2. The order of elements within a moiety follows general rule
         * 5 in CHEMICAL_FORMULA.
         * 3. Parentheses are not used within moieties but may surround
         * a moiety. Parentheses may not be nested.
         * 4. Charges should be placed at the end of the moiety. The
         * Singlege '+' or '-' may be preceded by a numerical multiplier
         * and should be separated from the last (element symbol +
         * count) by a space. Pre- or post-multipliers may be used for
         * individual moieties.
         */
        moiety: str,
        /**
         * Chemical formulae in which all discrete bonded residues and ions are
         * summed over the constituent elements, following the ordering given
         * in rule 5 of the CATEGORY description. Parentheses normally not used.
         */
        sum: str,
        /**
         * Mass corresponding to the formulae _chemical_formula.structural,
         * *_IUPAC, *_moiety or *_sum and, together with the Z value and cell
         * parameters yield the density given as _exptl_crystal.density_diffrn.
         */
        weight: float,
    },
    /**
     * The CATEGORY of data items used to specify space group
     * information about the crystal used in the diffraction measurements.
     *
     * Space-group types are identified by their number as listed in
     * International Tables for Crystallography Volume A, or by their
     * Schoenflies symbol. Specific settings of the space groups can
     * be identified by their Hall symbol, by specifying their
     * symmetry operations or generators, or by giving the
     * transformation that relates the specific setting to the
     * reference setting based on International Tables Volume A and
     * stored in this dictionary.
     *
     * The commonly used Hermann-Mauguin symbol determines the
     * space-group type uniquely, but several different Hermann-Mauguin
     * symbols may refer to the same space-group type. A
     * Hermann-Mauguin symbol contains information on the choice of
     * the basis, but not on the choice of origin.
     *
     * Ref: International Tables for Crystallography (2002). Volume A,
     * Space-group symmetry, edited by Th. Hahn, 5th ed.
     * Dordrecht: Kluwer Academic Publishers.
     */
    space_group: {
        /**
         * The name of the system of geometric crystal classes of space
         * groups (crystal system) to which the space group belongs.
         * Note that rhombohedral space groups belong to the
         * trigonal system.
         */
        crystal_system: str,
        /**
         * The number as assigned in International Tables for Crystallography
         * Vol. A, specifying the proper affine class (i.e. the orientation
         * preserving affine class) of space groups (crystallographic space
         * group type) to which the space group belongs. This number defines
         * the space group type but not the coordinate system expressed.
         */
        it_number: int$1,
        /**
         * The full international Hermann-Mauguin space-group symbol as
         * defined in Section 2.2.3 and given as the second item of the
         * second line of each of the space-group tables of Part 7 of
         * International Tables for Crystallography Volume A (2002).
         *
         * Each component of the space-group name is separated by a
         * space or an underscore character. The use of a space is
         * strongly recommended.  The underscore is only retained
         * because it was used in old CIFs. It should not be used in
         * new CIFs.
         *
         * Subscripts should appear without special symbols. Bars should
         * be given as negative signs before the numbers to which they
         * apply. The commonly used Hermann-Mauguin symbol determines the
         * space-group type uniquely, but a given space-group type may
         * be described by more than one Hermann-Mauguin symbol. The
         * space-group type is best described using
         * _space_group.IT_number or _space_group.name_Schoenflies. The
         * full international Hermann-Mauguin symbol contains information
         * about the choice of basis for monoclinic and orthorhombic
         * space groups, but does not give information about the choice
         * of origin. To define the setting uniquely use
         * _space_group.name_Hall, or list the symmetry operations
         * or generators.
         *
         * Ref: International Tables for Crystallography (2002). Volume A,
         * Space-group symmetry, edited by Th. Hahn, 5th ed.
         * Dordrecht: Kluwer Academic Publishers.
         */
        'name_h-m_full': str,
    },
    /**
     * The CATEGORY of data items used to describe symmetry equivalent sites
     * in the crystal unit cell.
     */
    space_group_symop: {
        /**
         * A parsable string giving one of the symmetry operations of the
         * space group in algebraic form.  If W is a matrix representation
         * of the rotational part of the symmetry operation defined by the
         * positions and signs of x, y and z, and w is a column of
         * translations defined by fractions, an equivalent position
         * X' is generated from a given position X by the equation
         *
         * X' = WX + w
         *
         * (Note: X is used to represent bold_italics_x in International
         * Tables for Crystallography Vol. A, Part 5)
         *
         * When a list of symmetry operations is given, it must contain
         * a complete set of coordinate representatives which generates
         * all the operations of the space group by the addition of
         * all primitive translations of the space group. Such
         * representatives are to be found as the coordinates of
         * the general-equivalent position in International Tables for
         * Crystallography Vol. A (2002), to which it is necessary to
         * add any centring translations shown above the
         * general-equivalent position.
         *
         * That is to say, it is necessary to list explicitly all the
         * symmetry operations required to generate all the atoms in
         * the unit cell defined by the setting used.
         */
        operation_xyz: str,
    },
    /**
     * The CATEGORY of data items used to specify the geometry bonds in the
     * structural model as derived from the atomic sites.
     */
    geom_bond: {
        /**
         * This label is a unique identifier for a particular site in the
         * asymmetric unit of the crystal unit cell.
         */
        atom_site_label_1: str,
        /**
         * This label is a unique identifier for a particular site in the
         * asymmetric unit of the crystal unit cell.
         */
        atom_site_label_2: str,
        /**
         * Intramolecular bond distance between the sites identified
         * by _geom_bond.id
         */
        distance: float,
        /**
         * This code signals whether the angle is referred to in a
         * publication or should be placed in a table of significant angles.
         */
        publ_flag: str,
        /**
         * Data item specifying the symmetry operation codes applied to the atom
         * sites involved in a specific geometric configuration.
         *
         * The symmetry code of each atom site as the symmetry-equivalent position
         * number 'n' and the cell translation number 'pqr'. These numbers are
         * combined to form the code 'n pqr' or n_pqr.
         *
         * The character string n_pqr is composed as follows:
         *
         * n refers to the symmetry operation that is applied to the
         * coordinates stored in _atom_site.fract_xyz. It must match
         * a number given in _space_group_symop.id (or one of its
         * aliases, such as _symmetry_equiv_pos_site_id).
         *
         * p, q and r refer to the translations that are subsequently
         * applied to the symmetry transformed coordinates to generate
         * the atom used in calculating the angle. These translations
         * (x,y,z) are related to (p,q,r) by the relations
         * p = 5 + x
         * q = 5 + y
         * r = 5 + z
         */
        site_symmetry_1: str,
        /**
         * Data item specifying the symmetry operation codes applied to the atom
         * sites involved in a specific geometric configuration.
         *
         * The symmetry code of each atom site as the symmetry-equivalent position
         * number 'n' and the cell translation number 'pqr'. These numbers are
         * combined to form the code 'n pqr' or n_pqr.
         *
         * The character string n_pqr is composed as follows:
         *
         * n refers to the symmetry operation that is applied to the
         * coordinates stored in _atom_site.fract_xyz. It must match
         * a number given in _space_group_symop.id (or one of its
         * aliases, such as _symmetry_equiv_pos_site_id).
         *
         * p, q and r refer to the translations that are subsequently
         * applied to the symmetry transformed coordinates to generate
         * the atom used in calculating the angle. These translations
         * (x,y,z) are related to (p,q,r) by the relations
         * p = 5 + x
         * q = 5 + y
         * r = 5 + z
         */
        site_symmetry_2: str,
        /**
         * Bond valence calculated from the bond distance.
         */
        valence: float,
    },
    /**
     * The CATEGORY of data items used to record details about the
     * creation and subsequent updating of the data block.
     */
    audit: {
        /**
         * The digital object identifier (DOI) registered to identify
         * the data set publication represented by the current
         * data block. This can be used as a unique identifier for
         * the data block so long as the code used is a valid DOI
         * (i.e. begins with a valid publisher prefix assigned by a
         * Registration Agency and a suffix guaranteed to be unique
         * by the publisher) and has had its metadata deposited
         * with a DOI Registration Agency.
         *
         * A DOI is a unique character string identifying any
         * object of intellectual property. It provides a
         * persistent identifier for an object on a digital network
         * and permits the association of related current data in a
         * structured extensible way. A DOI is an implementation
         * of the Internet concepts of Uniform Resource Name and
         * Universal Resource Locator managed according to the
         * specifications of the International DOI Foundation
         * (see https://www.doi.org/).
         */
        block_doi: str,
    },
    /**
     * The CATEGORY of data items recording database deposition. These data items
     * are assigned by database managers and should only appear in a CIF if they
     * originate from that source.
     */
    database_code: {
        /**
         * Code assigned by the Crystallography Open Database (COD).
         */
        cod: str,
        /**
         * Code assigned by the Cambridge Structural Database.
         */
        csd: str,
        /**
         * Deposition numbers assigned by the Cambridge Crystallographic
         * Data Centre (CCDC) to files containing structural information
         * archived by the CCDC.
         */
        depnum_ccdc_archive: str,
        /**
         * Deposition numbers assigned by the Fachinformationszentrum
         * Karlsruhe (FIZ) to files containing structural information
         * archived by the Cambridge Crystallographic Data Centre (CCDC).
         */
        depnum_ccdc_fiz: str,
        /**
         * Code assigned by the Inorganic Crystal Structure Database.
         */
        icsd: str,
        /**
         * Code assigned in the Metals Data File.
         */
        mdf: str,
        /**
         * Code assigned by the NBS (NIST) Crystal Data Database.
         */
        nbs: str,
    },
    /**
     * The CATEGORY of data items used to describe atom site information
     * used in crystallographic structure studies.
     */
    atom_site: {
        /**
         * Code for type of atomic displacement parameters used for the site.
         */
        adp_type: str,
        /**
         * A standard code to signal if the site coordinates have been
         * determined from the intensities or calculated from the geometry
         * of surrounding sites, or have been assigned dummy coordinates.
         */
        calc_flag: str,
        /**
         * A code which identifies a cluster of atoms that show long range disorder
         * but are locally ordered. Within each such cluster of atoms,
         * _atom_site.disorder_group is used to identify the sites that are
         * simultaneously occupied. This field is only needed if there is more than
         * one cluster of disordered atoms showing independent local order.
         */
        disorder_assembly: str,
        /**
         * A code that identifies a group of disordered atom sites that are locally
         * simultaneously occupied. Atoms that are positionally disordered over two or
         * more sites (e.g. the H atoms of a methyl group that exists in two
         * orientations) should be assigned to two or more groups. Similarly, atoms
         * that describe a specific alternative composition of a compositionally
         * disordered site should be assigned to a distinct disorder group (e.g. a site
         * that is partially occupied by Mg and Mn atoms should be described by
         * assigning the Mg atom to one group and the Mn atom to another group). Sites
         * belonging to the same group are simultaneously occupied, but those belonging
         * to different groups are not. A minus prefix (e.g. "-1") is used to indicate
         * sites disordered about a special position.
         */
        disorder_group: str,
        /**
         * Atom site coordinates as fractions of the cell length values.
         */
        fract_x: float,
        /**
         * Atom site coordinates as fractions of the cell length values.
         */
        fract_y: float,
        /**
         * Atom site coordinates as fractions of the cell length values.
         */
        fract_z: float,
        /**
         * This label is a unique identifier for a particular site in the
         * asymmetric unit of the crystal unit cell. It is made up of
         * components, _atom_site.label_component_0 to *_6, which may be
         * specified as separate data items. Component 0 usually matches one
         * of the specified _atom_type.symbol codes. This is not mandatory
         * if an _atom_site.type_symbol item is included in the atom site
         * list. The _atom_site.type_symbol always takes precedence over
         * an _atom_site.label in the identification of the atom type. The
         * label components 1 to 6 are optional, and normally only
         * components 0 and 1 are used. Note that components 0 and 1 are
         * concatenated, while all other components, if specified, are
         * separated by an underline character. Underline separators are
         * only used if higher-order components exist. If an intermediate
         * component is not used it may be omitted provided the underline
         * separators are inserted. For example the label 'C233__ggg' is
         * acceptable and represents the components C, 233, '', and ggg.
         * Each label may have a different number of components.
         */
        label: str,
        /**
         * The fraction of the atom type present at this site.
         * The sum of the occupancies of all the atom types at this site
         * may not significantly exceed 1.0 unless it is a dummy site. The
         * value must lie in the 99.97% Gaussian confidence interval
         * -3u =< x =< 1 + 3u. The _enumeration.range of 0.0:1.0 is thus
         * correctly interpreted as meaning (0.0 - 3u) =< x =< (1.0 + 3u).
         */
        occupancy: float,
        /**
         * A concatenated series of single-letter codes which indicate the
         * refinement restraints or constraints applied to this site. This
         * item should not be used. It has been replaced by
         * _atom_site.refinement_flags_posn, _ADP and _occupancy. It is
         * retained in this dictionary only to provide compatibility with
         * legacy CIFs.
         */
        refinement_flags: str,
        /**
         * The number of different sites that are generated by the
         * application of the space-group symmetry to the coordinates
         * given for this site. It is equal to the multiplicity given
         * for this Wyckoff site in International Tables for Cryst.
         * Vol. A (2002). It is equal to the multiplicity of the general
         * position divided by the order of the site symmetry given in
         * _atom_site.site_symmetry_order.
         *
         * The _atom_site_symmetry_multiplicity form of this data name is
         * deprecated because of historical inconsistencies in practice among
         * structure refinement software packages and should not be used.
         */
        site_symmetry_multiplicity: int$1,
        /**
         * A code to identify the atom specie(s) occupying this site.
         * This code must match a corresponding _atom_type.symbol. The
         * specification of this code is optional if component_0 of the
         * _atom_site.label is used for this purpose. See _atom_type.symbol.
         */
        type_symbol: str,
        /**
         * Isotropic atomic displacement parameter, or equivalent isotropic
         * atomic displacement parameter, U(equiv), in angstroms squared,
         * calculated from anisotropic atomic displacement parameters.
         *
         * U(equiv) = (1/3) sum~i~[sum~j~(U^ij^ a*~i~ a*~j~ a~i~.a~j~)]
         *
         * a  = the real-space cell vectors
         * a* = the reciprocal-space cell lengths
         * Ref: Fischer, R. X. & Tillmanns, E. (1988). Acta Cryst. C44, 775-776.
         */
        u_iso_or_equiv: float,
    },
    /**
     * The CATEGORY of data items used to describe the anisotropic atomic
     * displacement parameters of the atomic sites in a crystal structure.
     */
    atom_site_aniso: {
        /**
         * Anisotropic atomic displacement parameters are usually looped in
         * a separate list. If this is the case, this code must match the
         * _atom_site.label of the associated atom in the atom coordinate
         * list and conform with the same rules described in _atom_site.label.
         */
        label: str,
        /**
         * These are the standard anisotropic atomic displacement components, in
         * angstroms squared, which appear in the structure factor term:
         *
         * T = exp{ -2π^2^ sum~i~ [ sum~j~ (U^ij^ h~i~ h~j~ a*~i~ a*~j~) ] }
         *
         * h = the Miller indices
         * a* = the reciprocal-space cell lengths
         *
         * The unique elements of the real symmetric matrix are entered by row.
         *
         * The IUCr Commission on Nomenclature recommends the use of U for reporting
         * atomic displacement parameters .
         *
         * Note that U^ij^ = β^ij^/(2 π^2^ a*~i~ a*~j~) = B^ij^/(8 π^2^) [1].
         *
         * [1] Trueblood, K. N. et al. (1996). Acta Crystallogr. A52(5), 770-781.
         */
        u_11: float,
        /**
         * These are the standard anisotropic atomic displacement components, in
         * angstroms squared, which appear in the structure factor term:
         *
         * T = exp{ -2π^2^ sum~i~ [ sum~j~ (U^ij^ h~i~ h~j~ a*~i~ a*~j~) ] }
         *
         * h = the Miller indices
         * a* = the reciprocal-space cell lengths
         *
         * The unique elements of the real symmetric matrix are entered by row.
         *
         * The IUCr Commission on Nomenclature recommends the use of U for reporting
         * atomic displacement parameters .
         *
         * Note that U^ij^ = β^ij^/(2 π^2^ a*~i~ a*~j~) = B^ij^/(8 π^2^) [1].
         *
         * [1] Trueblood, K. N. et al. (1996). Acta Crystallogr. A52(5), 770-781.
         */
        u: Matrix(3, 3),
        /**
         * These are the standard anisotropic atomic displacement components, in
         * angstroms squared, which appear in the structure factor term:
         *
         * T = exp{ -2π^2^ sum~i~ [ sum~j~ (U^ij^ h~i~ h~j~ a*~i~ a*~j~) ] }
         *
         * h = the Miller indices
         * a* = the reciprocal-space cell lengths
         *
         * The unique elements of the real symmetric matrix are entered by row.
         *
         * The IUCr Commission on Nomenclature recommends the use of U for reporting
         * atomic displacement parameters .
         *
         * Note that U^ij^ = β^ij^/(2 π^2^ a*~i~ a*~j~) = B^ij^/(8 π^2^) [1].
         *
         * [1] Trueblood, K. N. et al. (1996). Acta Crystallogr. A52(5), 770-781.
         */
        u_12: float,
        /**
         * These are the standard anisotropic atomic displacement components, in
         * angstroms squared, which appear in the structure factor term:
         *
         * T = exp{ -2π^2^ sum~i~ [ sum~j~ (U^ij^ h~i~ h~j~ a*~i~ a*~j~) ] }
         *
         * h = the Miller indices
         * a* = the reciprocal-space cell lengths
         *
         * The unique elements of the real symmetric matrix are entered by row.
         *
         * The IUCr Commission on Nomenclature recommends the use of U for reporting
         * atomic displacement parameters .
         *
         * Note that U^ij^ = β^ij^/(2 π^2^ a*~i~ a*~j~) = B^ij^/(8 π^2^) [1].
         *
         * [1] Trueblood, K. N. et al. (1996). Acta Crystallogr. A52(5), 770-781.
         */
        u_13: float,
        /**
         * These are the standard anisotropic atomic displacement components, in
         * angstroms squared, which appear in the structure factor term:
         *
         * T = exp{ -2π^2^ sum~i~ [ sum~j~ (U^ij^ h~i~ h~j~ a*~i~ a*~j~) ] }
         *
         * h = the Miller indices
         * a* = the reciprocal-space cell lengths
         *
         * The unique elements of the real symmetric matrix are entered by row.
         *
         * The IUCr Commission on Nomenclature recommends the use of U for reporting
         * atomic displacement parameters .
         *
         * Note that U^ij^ = β^ij^/(2 π^2^ a*~i~ a*~j~) = B^ij^/(8 π^2^) [1].
         *
         * [1] Trueblood, K. N. et al. (1996). Acta Crystallogr. A52(5), 770-781.
         */
        u_22: float,
        /**
         * These are the standard anisotropic atomic displacement components, in
         * angstroms squared, which appear in the structure factor term:
         *
         * T = exp{ -2π^2^ sum~i~ [ sum~j~ (U^ij^ h~i~ h~j~ a*~i~ a*~j~) ] }
         *
         * h = the Miller indices
         * a* = the reciprocal-space cell lengths
         *
         * The unique elements of the real symmetric matrix are entered by row.
         *
         * The IUCr Commission on Nomenclature recommends the use of U for reporting
         * atomic displacement parameters .
         *
         * Note that U^ij^ = β^ij^/(2 π^2^ a*~i~ a*~j~) = B^ij^/(8 π^2^) [1].
         *
         * [1] Trueblood, K. N. et al. (1996). Acta Crystallogr. A52(5), 770-781.
         */
        u_23: float,
        /**
         * These are the standard anisotropic atomic displacement components, in
         * angstroms squared, which appear in the structure factor term:
         *
         * T = exp{ -2π^2^ sum~i~ [ sum~j~ (U^ij^ h~i~ h~j~ a*~i~ a*~j~) ] }
         *
         * h = the Miller indices
         * a* = the reciprocal-space cell lengths
         *
         * The unique elements of the real symmetric matrix are entered by row.
         *
         * The IUCr Commission on Nomenclature recommends the use of U for reporting
         * atomic displacement parameters .
         *
         * Note that U^ij^ = β^ij^/(2 π^2^ a*~i~ a*~j~) = B^ij^/(8 π^2^) [1].
         *
         * [1] Trueblood, K. N. et al. (1996). Acta Crystallogr. A52(5), 770-781.
         */
        u_33: float,
    },
    /**
     * The CATEGORY of data items used to describe atomic type information
     * used in crystallographic structure studies.
     */
    atom_type: {
        /**
         * A description of the atom(s) designated by this atom type. In
         * most cases this will be the element name and oxidation state of
         * a single atom species. For disordered or nonstoichiometric
         * structures it will describe a combination of atom species.
         */
        description: str,
        /**
         * The identity of the atom specie(s) representing this atom type.
         * Normally this code is the element symbol followed by the charge
         * if there is one. The symbol may be composed of any character except
         * an underline or a blank, with the proviso that digits designate an
         * oxidation state and must be followed by a + or - character.
         */
        symbol: str,
    },
    /**
     * The CATEGORY of data items used to describe atomic scattering
     * information used in crystallographic structure studies.
     */
    atom_type_scat: {
        /**
         * The imaginary component of the anomalous dispersion scattering factors
         * for this atom type and radiation by _diffrn_radiation_wavelength.value
         */
        dispersion_imag: float,
        /**
         * The real component of the anomalous dispersion scattering factors
         * for this atom type and radiation by _diffrn_radiation_wavelength.value
         */
        dispersion_real: float,
        /**
         * Reference to source of scattering factors used for this atom type.
         */
        source: str,
    },
};
const CifCore_Aliases = {
    'cell.formula_units_z': [
        'cell_formula_units_Z',
    ],
    'space_group.it_number': [
        'space_group_IT_number',
        'symmetry_Int_Tables_number',
    ],
    'space_group.name_h-m_full': [
        'symmetry_space_group_name_H-M',
    ],
    'space_group_symop.operation_xyz': [
        'symmetry_equiv_pos_as_xyz',
    ],
    'geom_bond.atom_site_label_1': [
        'geom_bond_atom_site_id_1',
    ],
    'geom_bond.atom_site_label_2': [
        'geom_bond_atom_site_id_2',
    ],
    'geom_bond.distance': [
        'geom_bond_dist',
    ],
    'audit.block_doi': [
        'audit_block_DOI',
    ],
    'database_code.cod': [
        'database_code_COD',
    ],
    'database_code.csd': [
        'database_code_CSD',
    ],
    'database_code.depnum_ccdc_archive': [
        'database_code_depnum_CCDC_archive',
    ],
    'database_code.depnum_ccdc_fiz': [
        'database_code_depnum_CCDC_fiz',
    ],
    'database_code.icsd': [
        'database_code_ICSD',
    ],
    'database_code.mdf': [
        'database_code_MDF',
    ],
    'database_code.nbs': [
        'database_code_NBS',
    ],
    'atom_site.adp_type': [
        'atom_site_ADP_type',
        'atom_site_thermal_displace_type',
    ],
    'atom_site.label': [
        'atom_site_id',
    ],
    'atom_site.site_symmetry_multiplicity': [
        'atom_site_symmetry_multiplicity',
    ],
    'atom_site.u_iso_or_equiv': [
        'atom_site_U_iso_or_equiv',
    ],
    'atom_site_aniso.label': [
        'atom_site_anisotrop_id',
    ],
    'atom_site_aniso.u_11': [
        'atom_site_aniso_U_11',
        'atom_site_anisotrop_U_11',
    ],
    'atom_site_aniso.u_12': [
        'atom_site_aniso_U_12',
        'atom_site_anisotrop_U_12',
    ],
    'atom_site_aniso.u_13': [
        'atom_site_aniso_U_13',
        'atom_site_anisotrop_U_13',
    ],
    'atom_site_aniso.u_22': [
        'atom_site_aniso_U_22',
        'atom_site_anisotrop_U_22',
    ],
    'atom_site_aniso.u_23': [
        'atom_site_aniso_U_23',
        'atom_site_anisotrop_U_23',
    ],
    'atom_site_aniso.u_33': [
        'atom_site_aniso_U_33',
        'atom_site_anisotrop_U_33',
    ],
};

/**
 * Copyright (c) 2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
var Schema = Column.Schema;
const int = Schema.int;
const Segmentation_Data_Schema = {
    volume_data_3d_info: DensityServer_Data_Schema.volume_data_3d_info,
    segmentation_data_table: {
        set_id: int,
        segment_id: int,
    },
    segmentation_data_3d: {
        values: int
    }
};

/**
 * Copyright (c) 2017-2022 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
const CIF = {
    parse: (data) => typeof data === 'string' ? parseCifText(data) : parseCifBinary(data),
    parseText: parseCifText,
    parseBinary: parseCifBinary,
    toDatabaseCollection,
    toDatabase,
    schema: {
        mmCIF: (frame) => toDatabase(mmCIF_Schema, frame),
        CCD: (frame) => toDatabase(CCD_Schema, frame),
        BIRD: (frame) => toDatabase(BIRD_Schema, frame),
        dic: (frame) => toDatabase(dic_Schema, frame),
        cifCore: (frame) => toDatabase(CifCore_Schema, frame, CifCore_Aliases),
        densityServer: (frame) => toDatabase(DensityServer_Data_Schema, frame),
        segmentation: (frame) => toDatabase(Segmentation_Data_Schema, frame),
    }
};

/**
 * @file Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Parser {
    constructor(streamer, params) {
        var p = params || {};
        this.streamer = streamer;
        this.name = defaults(p.name, '');
        this.path = defaults(p.path, '');
    }
    get type() { return ''; }
    get __objName() { return ''; }
    get isBinary() { return false; }
    get isJson() { return false; }
    get isXml() { return false; }
    parse() {
        return this.streamer.read().then(() => __awaiter(this, void 0, void 0, function* () {
            yield this._beforeParse();
            yield this._parse();
            yield this._afterParse();
            return this[this.__objName];
        }));
    }
    _parse() { }
    _beforeParse() { }
    _afterParse() {
        if (Debug)
            Log.log(this[this.__objName]);
    }
}

/**
 * @file Structure Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class StructureParser extends Parser {
    constructor(streamer, params) {
        var p = params || {};
        super(streamer, p);
        this.firstModelOnly = defaults(p.firstModelOnly, false);
        this.asTrajectory = defaults(p.asTrajectory, false);
        this.cAlphaOnly = defaults(p.cAlphaOnly, false);
        this.structure = new Structure(this.name, this.path);
        this.structureBuilder = new StructureBuilder(this.structure);
    }
    get type() { return 'structure'; }
    get __objName() { return 'structure'; }
}

/**
 * @file Entity
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function entityTypeFromString(string) {
    string = string.toLowerCase();
    switch (string) {
        case 'polymer':
            return PolymerEntity;
        case 'non-polymer':
            return NonPolymerEntity;
        case 'macrolide':
            return MacrolideEntity;
        case 'water':
            return WaterEntity;
        default:
            return UnknownEntity;
    }
}
function entityFromType(type) {
    switch (type) {
        case PolymerEntity:
            return 'polymer';
        case NonPolymerEntity:
            return 'non-polymer';
        case MacrolideEntity:
            return 'macrolide';
        case WaterEntity:
            return 'water';
        default:
            return undefined;
    }
}
/**
 * Entity of a {@link Structure}
 */
class Entity {
    /**
     * @param {Structure} structure - structure the entity belongs to
     * @param {Integer} index - index within structure.entityList
     * @param {String} description - entity description
     * @param {String} type - entity type
     * @param {Array} chainIndexList - entity chainIndexList
     */
    constructor(structure, index, description = '', type, chainIndexList = []) {
        this.structure = structure;
        this.index = index;
        this.description = description;
        this.entityType = entityTypeFromString(type || '');
        this.chainIndexList = chainIndexList;
        chainIndexList.forEach(function (ci) {
            structure.chainStore.entityIndex[ci] = index;
        });
    }
    get type() { return entityFromType(this.entityType); }
    getEntityType() {
        return this.entityType;
    }
    isPolymer() {
        return this.entityType === PolymerEntity;
    }
    isNonPolymer() {
        return this.entityType === NonPolymerEntity;
    }
    isMacrolide() {
        return this.entityType === MacrolideEntity;
    }
    isWater() {
        return this.entityType === WaterEntity;
    }
    eachChain(callback) {
        const cp = this.structure.getChainProxy();
        this.chainIndexList.forEach(function (index) {
            cp.index = index;
            callback(cp);
        });
    }
}

/**
 * @file Unitcell
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const DefaultBoxParams = {
    a: 1,
    b: 1,
    c: 1,
    alpha: 90,
    beta: 90,
    gamma: 90,
    spacegroup: 'P 1'
};
/**
 * Unitcell class
 */
class Unitcell {
    /**
     * @param  {Object} params - unitcell parameters
     * @param  {Number} params.a - length a
     * @param  {Number} params.b - length b
     * @param  {Number} params.c - length c
     * @param  {Number} params.alpha - angle alpha
     * @param  {Number} params.beta - angle beta
     * @param  {Number} params.gamma - angle gamma
     * @param  {String} params.spacegroup - spacegroup
     * @param  {Matrix4} [params.cartToFrac] - transformation matrix from
     *                                         cartesian to fractional coordinates
     * @param  {Matrix4} [params.scale] - alias for `params.cartToFrac`
     */
    constructor(params = DefaultBoxParams) {
        this.cartToFrac = new Matrix4();
        this.fracToCart = new Matrix4();
        this.a = params.a;
        this.b = params.b;
        this.c = params.c;
        this.alpha = params.alpha;
        this.beta = params.beta;
        this.gamma = params.gamma;
        this.spacegroup = params.spacegroup;
        const alphaRad = degToRad$1(this.alpha);
        const betaRad = degToRad$1(this.beta);
        const gammaRad = degToRad$1(this.gamma);
        const cosAlpha = Math.cos(alphaRad);
        const cosBeta = Math.cos(betaRad);
        const cosGamma = Math.cos(gammaRad);
        const sinBeta = Math.sin(betaRad);
        const sinGamma = Math.sin(gammaRad);
        this.volume = (this.a * this.b * this.c *
            Math.sqrt(1 - cosAlpha * cosAlpha - cosBeta * cosBeta - cosGamma * cosGamma +
                2.0 * cosAlpha * cosBeta * cosGamma));
        if (params.cartToFrac === undefined) {
            // https://github.com/biojava/biojava/blob/master/biojava-structure/src/main/java/org/biojava/nbio/structure/xtal/CrystalCell.java
            const cStar = (this.a * this.b * sinGamma) / this.volume;
            const cosAlphaStar = ((cosBeta * cosGamma - cosAlpha) / (sinBeta * sinGamma));
            this.fracToCart.set(this.a, 0, 0, 0, this.b * cosGamma, this.b * sinGamma, 0, 0, this.c * cosBeta, -this.c * sinBeta * cosAlphaStar, 1.0 / cStar, 0, 0, 0, 0, 1).transpose();
            this.cartToFrac.copy(this.fracToCart).invert();
        }
        else {
            this.cartToFrac.copy(params.cartToFrac);
            this.fracToCart.copy(this.cartToFrac).invert();
        }
    }
    getPosition(structure) {
        const vertexPosition = new Float32Array(3 * 8);
        if (structure.unitcell) {
            const uc = structure.unitcell;
            const centerFrac = structure.center.clone().applyMatrix4(uc.cartToFrac).floor();
            const v = new Vector3();
            let cornerOffset = 0;
            const addCorner = function (x, y, z) {
                v.set(x, y, z)
                    .add(centerFrac)
                    .applyMatrix4(uc.fracToCart)
                    .toArray(vertexPosition, cornerOffset);
                cornerOffset += 3;
            };
            addCorner(0, 0, 0);
            addCorner(1, 0, 0);
            addCorner(0, 1, 0);
            addCorner(0, 0, 1);
            addCorner(1, 1, 0);
            addCorner(1, 0, 1);
            addCorner(0, 1, 1);
            addCorner(1, 1, 1);
        }
        return vertexPosition;
    }
    getCenter(structure) {
        return centerArray3(this.getPosition(structure));
    }
    getData(structure, params = {}) {
        const colorValue = defaults(params.colorValue, 'orange');
        const radius = defaults(params.radius, Math.cbrt(this.volume) / 200);
        const c = new Color(colorValue);
        const v = new Vector3();
        const vertexPosition = this.getPosition(structure);
        const vertexColor = uniformArray3(8, c.r, c.g, c.b);
        const vertexRadius = uniformArray(8, radius);
        const edgePosition1 = new Float32Array(3 * 12);
        const edgePosition2 = new Float32Array(3 * 12);
        const edgeColor = uniformArray3(12, c.r, c.g, c.b);
        const edgeRadius = uniformArray(12, radius);
        let edgeOffset = 0;
        function addEdge(a, b) {
            v.fromArray(vertexPosition, a * 3)
                .toArray(edgePosition1, edgeOffset);
            v.fromArray(vertexPosition, b * 3)
                .toArray(edgePosition2, edgeOffset);
            edgeOffset += 3;
        }
        addEdge(0, 1);
        addEdge(0, 2);
        addEdge(0, 3);
        addEdge(1, 4);
        addEdge(1, 5);
        addEdge(2, 6);
        addEdge(3, 5);
        addEdge(4, 7);
        addEdge(5, 7);
        addEdge(2, 4);
        addEdge(7, 6);
        addEdge(3, 6);
        const picker = new UnitcellPicker(this, structure);
        return {
            vertex: {
                position: vertexPosition,
                color: vertexColor,
                radius: vertexRadius,
                picking: picker
            },
            edge: {
                position1: edgePosition1,
                position2: edgePosition2,
                color: edgeColor,
                color2: edgeColor,
                radius: edgeRadius,
                picking: picker
            }
        };
    }
}

/**
 * @file Pdb Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// PDB helix record encoding
const HelixTypes = {
    1: 'h',
    2: 'h',
    3: 'i',
    4: 'h',
    5: 'g',
    6: 'h',
    7: 'h',
    8: 'h',
    9: 'h',
    10: 'h',
    0: 'h' //Used to be ''
};
const dAminoAcids = [
    'DAL',
    'DAR',
    'DSG',
    'DAS',
    'DCY',
    'DGL',
    'DGN',
    'DHI',
    'DIL',
    'DLE',
    'DLY',
    'MED',
    'DPN',
    'DPR',
    'DSN',
    'DTH',
    'DTR',
    'DTY',
    'DVA',
    'DNE' // D-NORLEUCINE
    // ???  // D-SELENOCYSTEINE
];
const entityKeyList = [
    'MOL_ID', 'MOLECULE', 'CHAIN', 'FRAGMENT', 'SYNONYM',
    'EC', 'ENGINEERED', 'MUTATION', 'OTHER_DETAILS'
];
const reWhitespace$6 = /\s+/;
function getModresId(resno, chainname, inscode) {
    let id = `${resno}`;
    if (chainname)
        id += `:${chainname}`;
    if (inscode)
        id += `^${inscode}`;
    return id;
}
class PdbParser extends StructureParser {
    /**
     * Create a pdb parser
     * @param  {Streamer} streamer - streamer object
     * @param  {Object} params - params object
     * @param  {Boolean} params.hex - hexadecimal parsing of
     *                                atom numbers >99.999 and
     *                                residue numbers >9.999
     * @param  {InferBondsOptions} params.inferBonds: 'all': use explicit bonds and detect by distance
     *                                               'auto': If a hetgroup residue has explicit bonds, don't auto-detect
     *                                               'none': Don't add any bonds automatically
     * @return {undefined}
     */
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.hex = defaults(p.hex, false);
        this.inferBonds = defaults(p.inferBonds, 'all');
    }
    get type() { return 'pdb'; }
    _parse() {
        // http://www.wwpdb.org/documentation/file-format.php
        if (Debug)
            Log.time('PdbParser._parse ' + this.name);
        let isLegacy = false;
        const headerLine = this.streamer.peekLines(1)[0];
        const headerId = headerLine.substr(62, 4);
        const legacyId = headerLine.substr(72, 4);
        if (headerId === legacyId && legacyId.trim()) {
            isLegacy = true;
        }
        const isPqr = this.type === 'pqr';
        const isPdbqt = this.type === 'pdbqt';
        const s = this.structure;
        const sb = this.structureBuilder;
        const hex = this.hex;
        let serialRadix = 10;
        let resnoRadix = 10;
        const firstModelOnly = this.firstModelOnly;
        const asTrajectory = this.asTrajectory;
        const cAlphaOnly = this.cAlphaOnly;
        const frames = s.frames;
        const boxes = s.boxes;
        let doFrames = false;
        let currentFrame, currentCoord;
        const biomolDict = s.biomolDict;
        let currentBiomol;
        let currentPart;
        let currentMatrix;
        let line, recordName;
        let serial, chainname, resno, resname, occupancy;
        let inscode, atomname, hetero, bfactor, altloc;
        let formalCharge;
        let startChain, startResi, startIcode;
        let endChain, endResi, endIcode;
        let serialDict = {};
        const unitcellDict = {};
        const bondDict = {};
        const entityDataList = [];
        let currentEntityData;
        let currentEntityKey;
        // MOL_ID                 Numbers each component; also used in  SOURCE to associate
        //                        the information.
        // MOLECULE               Name of the macromolecule.
        // CHAIN                  Comma-separated list of chain  identifier(s).
        // FRAGMENT               Specifies a domain or region of the  molecule.
        // SYNONYM                Comma-separated list of synonyms for  the MOLECULE.
        // EC                     The Enzyme Commission number associated  with the molecule.
        //                        If there is more than one EC number,  they are presented
        //                        as a comma-separated list.
        // ENGINEERED             Indicates that the molecule was  produced using
        //                        recombinant technology or by purely  chemical synthesis.
        // MUTATION               Indicates if there is a mutation.
        // OTHER_DETAILS          Additional comments.
        const hetnameDict = {};
        const modresDict = {};
        const chainDict = {};
        let chainIdx, chainid, newChain;
        let currentChainname, currentResno, currentResname, currentInscode;
        const seqresDict = {};
        let currentSeqresChainname;
        const secStruct = {
            helices: [],
            sheets: []
        };
        const helices = secStruct.helices;
        const sheets = secStruct.sheets;
        const atomMap = s.atomMap;
        const atomStore = s.atomStore;
        atomStore.resize(Math.round(this.streamer.data.length / 80));
        if (isPqr || isPdbqt)
            atomStore.addField('partialCharge', 1, 'float32');
        if (isPqr)
            atomStore.addField('radius', 1, 'float32');
        const ap1 = s.getAtomProxy();
        const ap2 = s.getAtomProxy();
        let idx = 0;
        let modelIdx = 0;
        let pendingStart = true;
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                line = lines[i];
                recordName = line.substr(0, 6);
                if (recordName === 'ATOM  ' || recordName === 'HETATM') {
                    // http://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM
                    // PQR: Field_name Atom_number Atom_name Residue_name Chain_ID Residue_number X Y Z Charge Radius
                    if (pendingStart) {
                        if (asTrajectory) {
                            if (doFrames) {
                                currentFrame = new Float32Array(atomStore.count * 3);
                                frames.push(currentFrame);
                            }
                            else {
                                currentFrame = [];
                            }
                            currentCoord = 0;
                        }
                        else {
                            if (!firstModelOnly)
                                serialDict = {};
                        }
                        chainIdx = 1;
                        chainid = chainIdx.toString();
                        newChain = true;
                        pendingStart = false;
                    }
                    if (firstModelOnly && modelIdx > 0)
                        continue;
                    let x, y, z, ls, dd = 0;
                    if (isPqr) {
                        ls = line.split(reWhitespace$6);
                        dd = ls.length === 10 ? 1 : 0;
                        atomname = ls[2];
                        if (cAlphaOnly && atomname !== 'CA')
                            continue;
                        x = parseFloat(ls[6 - dd]);
                        y = parseFloat(ls[7 - dd]);
                        z = parseFloat(ls[8 - dd]);
                    }
                    else {
                        atomname = line.substr(12, 4).trim();
                        if (cAlphaOnly && atomname !== 'CA')
                            continue;
                        x = parseFloat(line.substr(30, 8));
                        y = parseFloat(line.substr(38, 8));
                        z = parseFloat(line.substr(46, 8));
                    }
                    if (asTrajectory) {
                        const j = currentCoord * 3;
                        currentFrame[j + 0] = x;
                        currentFrame[j + 1] = y;
                        currentFrame[j + 2] = z;
                        currentCoord += 1;
                        if (doFrames)
                            continue;
                    }
                    let element;
                    if (isPqr) {
                        serial = parseInt(ls[1]);
                        element = '';
                        hetero = (line[0] === 'H');
                        chainname = dd ? '' : ls[4];
                        resno = parseInt(ls[5 - dd]);
                        inscode = '';
                        resname = ls[3];
                        altloc = '';
                        occupancy = 1.0;
                    }
                    else {
                        serial = parseInt(line.substr(6, 5), serialRadix);
                        if (hex && serial === 99999) {
                            serialRadix = 16;
                        }
                        hetero = (line[0] === 'H');
                        chainname = line[21].trim();
                        resno = parseInt(line.substr(22, 4), resnoRadix);
                        if (hex && resno === 9999) {
                            resnoRadix = 16;
                        }
                        inscode = line[26].trim();
                        resname = line.substr(17, 4).trim() || 'MOL';
                        bfactor = parseFloat(line.substr(60, 6));
                        altloc = line[16].trim();
                        occupancy = parseFloat(line.substr(54, 6));
                        if (!isLegacy) {
                            if (isPdbqt) {
                                element = line.substr(76, 3).trim();
                                // @ts-expect-error TS limitation on narrowing indexes types with `in`
                                if (element in PDBQTSpecialElements)
                                    element = PDBQTSpecialElements[element];
                            }
                            else {
                                element = line.substr(76, 2).trim();
                                if (!chainname) {
                                    chainname = line.substr(72, 4).trim(); // segid
                                }
                            }
                            // Where specified, formalCharge is of form "2-" or "1+"
                            formalCharge = parseInt((line.substr(79, 1) + line.substr(78, 1)).trim());
                        }
                    }
                    atomStore.growIfFull();
                    atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                    atomStore.x[idx] = x;
                    atomStore.y[idx] = y;
                    atomStore.z[idx] = z;
                    atomStore.serial[idx] = serial;
                    atomStore.altloc[idx] = altloc.charCodeAt(0);
                    atomStore.occupancy[idx] = isNaN(occupancy) ? 0 : occupancy;
                    if (isPqr) {
                        atomStore.partialCharge[idx] = parseFloat(ls[9 - dd]);
                        atomStore.radius[idx] = parseFloat(ls[10 - dd]);
                    }
                    else {
                        atomStore.bfactor[idx] = isNaN(bfactor) ? 0 : bfactor;
                        if (isPdbqt) {
                            atomStore.partialCharge[idx] = parseFloat(line.substr(70, 6));
                        }
                        // isFinite check will reject undefined (in legacy case) and NaN values
                        if (isFinite(formalCharge)) {
                            if (!atomStore.formalCharge) {
                                atomStore.addField('formalCharge', 1, 'int8');
                            }
                            atomStore.formalCharge[idx] = formalCharge;
                        }
                    }
                    const modresId = getModresId(resno, chainname, inscode);
                    // TODO instead of looking at MODRES look at SEQRES and
                    //      missing residues in REMARK 465
                    if (hetero && !modresDict[modresId] && !dAminoAcids.includes(resname)) {
                        if (currentChainname !== chainname || currentResname !== resname ||
                            (!WaterNames.includes(resname) &&
                                (currentResno !== resno || currentInscode !== inscode))) {
                            chainIdx += 1;
                            chainid = chainIdx.toString();
                            currentResno = resno;
                            currentResname = resname;
                            currentInscode = inscode;
                        }
                    }
                    else if (!newChain && currentChainname !== chainname) {
                        chainIdx += 1;
                        chainid = chainIdx.toString();
                    }
                    sb.addAtom(modelIdx, chainname, chainid, resname, resno, hetero, undefined, inscode);
                    serialDict[serial] = idx;
                    idx += 1;
                    newChain = false;
                    currentChainname = chainname;
                }
                else if (recordName === 'CONECT') {
                    const fromIdx = serialDict[parseInt(line.substr(6, 5))];
                    const pos = [11, 16, 21, 26];
                    const bondIndex = {};
                    if (fromIdx === undefined) {
                        // Log.log( "missing CONNECT serial" );
                        continue;
                    }
                    for (let j = 0; j < 4; ++j) {
                        let toIdx = parseInt(line.substr(pos[j], 5));
                        if (Number.isNaN(toIdx))
                            continue;
                        toIdx = serialDict[toIdx];
                        if (toIdx === undefined) {
                            // Log.log( "missing CONNECT serial" );
                            continue;
                        } /* else if( toIdx < fromIdx ){
                            // likely a duplicate in standard PDB format
                            // but not necessarily, so better remove duplicates
                            // in a pass after parsing (and auto bonding)
                            continue;
                        } */
                        if (fromIdx < toIdx) {
                            ap1.index = fromIdx;
                            ap2.index = toIdx;
                        }
                        else {
                            ap1.index = toIdx;
                            ap2.index = fromIdx;
                        }
                        // interpret records where a 'toIdx' atom is given multiple times
                        // as double/triple bonds, e.g. CONECT 1529 1528 1528 is a double bond
                        if (bondIndex[toIdx] !== undefined) {
                            s.bondStore.bondOrder[bondIndex[toIdx]] += 1;
                        }
                        else {
                            const hash = ap1.index + '|' + ap2.index;
                            if (bondDict[hash] === undefined) {
                                bondDict[hash] = true;
                                bondIndex[toIdx] = s.bondStore.count;
                                s.bondStore.addBond(ap1, ap2, 1); // start/assume with single bond
                            }
                        }
                    }
                }
                else if (recordName === 'HELIX ') {
                    startChain = line[19].trim();
                    startResi = parseInt(line.substr(21, 4));
                    startIcode = line[25].trim();
                    endChain = line[31].trim();
                    endResi = parseInt(line.substr(33, 4));
                    endIcode = line[37].trim();
                    let helixType = parseInt(line.substr(39, 1));
                    helixType = (HelixTypes[helixType] || HelixTypes[0]).charCodeAt(0);
                    helices.push([
                        startChain, startResi, startIcode,
                        endChain, endResi, endIcode,
                        helixType
                    ]);
                }
                else if (recordName === 'SHEET ') {
                    startChain = line[21].trim();
                    startResi = parseInt(line.substr(22, 4));
                    startIcode = line[26].trim();
                    endChain = line[32].trim();
                    endResi = parseInt(line.substr(33, 4));
                    endIcode = line[37].trim();
                    sheets.push([
                        startChain, startResi, startIcode,
                        endChain, endResi, endIcode
                    ]);
                }
                else if (recordName === 'HETNAM') {
                    hetnameDict[line.substr(11, 3)] = line.substr(15).trim();
                }
                else if (recordName === 'SEQRES') {
                    const seqresChainname = line[11].trim();
                    if (seqresChainname !== currentSeqresChainname) {
                        seqresDict[seqresChainname] = [];
                        currentSeqresChainname = seqresChainname;
                    }
                    seqresDict[seqresChainname].push(...line.substr(19).trim().split(reWhitespace$6));
                }
                else if (recordName === 'MODRES') {
                    // MODRES 2SRC PTR A  527  TYR  O-PHOSPHOTYROSINE
                    const resname = line.substr(12, 3).trim();
                    const chainname = line[16].trim();
                    const inscode = line[22].trim();
                    const resno = parseInt(line.substr(18, 4).trim());
                    const id = getModresId(resno, chainname, inscode);
                    modresDict[id] = { resname, chainname, inscode, resno };
                }
                else if (recordName === 'COMPND') {
                    const comp = line.substr(10, 70).trim();
                    const keyEnd = comp.indexOf(':');
                    const key = comp.substring(0, keyEnd);
                    let value;
                    if (entityKeyList.includes(key)) {
                        currentEntityKey = key;
                        value = comp.substring(keyEnd + 2);
                    }
                    else {
                        value = comp;
                    }
                    value = value.replace(/;$/, '');
                    if (currentEntityKey === 'MOL_ID') {
                        currentEntityData = {
                            chainList: [],
                            name: ''
                        };
                        entityDataList.push(currentEntityData);
                    }
                    else if (currentEntityKey === 'MOLECULE') {
                        if (currentEntityData.name)
                            currentEntityData.name += ' ';
                        currentEntityData.name += value;
                    }
                    else if (currentEntityKey === 'CHAIN') {
                        Array.prototype.push.apply(currentEntityData.chainList, value.split(/\s*,\s*/));
                    }
                }
                else if (line.startsWith('TER')) {
                    const cp = s.getChainProxy(s.chainStore.count - 1);
                    chainDict[cp.chainname] = cp.index;
                    chainIdx += 1;
                    chainid = chainIdx.toString();
                    newChain = true;
                }
                else if (recordName === 'REMARK' && line.substr(7, 3) === '350') {
                    if (line.substr(11, 12) === 'BIOMOLECULE:') {
                        let name = line.substr(23).trim();
                        if (/^(0|[1-9][0-9]*)$/.test(name))
                            name = 'BU' + name;
                        currentBiomol = new Assembly(name);
                        biomolDict[name] = currentBiomol;
                    }
                    else if (line.substr(13, 5) === 'BIOMT') {
                        const biomt = line.split(/\s+/);
                        const row = parseInt(line[18]) - 1;
                        if (row === 0) {
                            currentMatrix = new Matrix4();
                            currentPart.matrixList.push(currentMatrix);
                        }
                        const biomtElms = currentMatrix.elements;
                        biomtElms[4 * 0 + row] = parseFloat(biomt[4]);
                        biomtElms[4 * 1 + row] = parseFloat(biomt[5]);
                        biomtElms[4 * 2 + row] = parseFloat(biomt[6]);
                        biomtElms[4 * 3 + row] = parseFloat(biomt[7]);
                    }
                    else if (line.substr(11, 30) === 'APPLY THE FOLLOWING TO CHAINS:' ||
                        line.substr(11, 30) === '                   AND CHAINS:') {
                        if (line.substr(11, 5) === 'APPLY') {
                            currentPart = currentBiomol.addPart();
                        }
                        const chainList = line.substr(41, 30).split(',');
                        for (let j = 0, jl = chainList.length; j < jl; ++j) {
                            const c = chainList[j].trim();
                            if (c)
                                currentPart.chainList.push(c);
                        }
                    }
                }
                else if (recordName === 'HEADER') {
                    s.id = line.substr(62, 4);
                }
                else if (recordName === 'TITLE ') {
                    s.title += (s.title ? ' ' : '') + line.substr(10, 70).trim();
                }
                else if (recordName === 'MODEL ') {
                    pendingStart = true;
                }
                else if (recordName === 'ENDMDL' || line.trim() === 'END') {
                    if (pendingStart)
                        continue;
                    if (asTrajectory && !doFrames) {
                        frames.push(new Float32Array(currentFrame));
                        doFrames = true;
                    }
                    modelIdx += 1;
                    pendingStart = true;
                }
                else if (line.substr(0, 5) === 'MTRIX') {
                    // ignore 'given' operators
                    if (line[59] === '1')
                        continue;
                    if (!currentBiomol || currentBiomol.name !== 'NCS') {
                        const ncsName = 'NCS';
                        currentBiomol = new Assembly(ncsName);
                        biomolDict[ncsName] = currentBiomol;
                        currentPart = currentBiomol.addPart();
                    }
                    const ncs = line.split(/\s+/);
                    const ncsRow = parseInt(line[5]) - 1;
                    if (ncsRow === 0) {
                        currentMatrix = new Matrix4();
                        currentPart.matrixList.push(currentMatrix);
                    }
                    const ncsElms = currentMatrix.elements;
                    ncsElms[4 * 0 + ncsRow] = parseFloat(ncs[2]);
                    ncsElms[4 * 1 + ncsRow] = parseFloat(ncs[3]);
                    ncsElms[4 * 2 + ncsRow] = parseFloat(ncs[4]);
                    ncsElms[4 * 3 + ncsRow] = parseFloat(ncs[5]);
                }
                else if (line.substr(0, 5) === 'ORIGX') {
                    if (!unitcellDict.origx) {
                        unitcellDict.origx = new Matrix4();
                    }
                    const orgix = line.split(/\s+/);
                    const origxRow = parseInt(line[5]) - 1;
                    const origxElms = unitcellDict.origx.elements;
                    origxElms[4 * 0 + origxRow] = parseFloat(orgix[1]);
                    origxElms[4 * 1 + origxRow] = parseFloat(orgix[2]);
                    origxElms[4 * 2 + origxRow] = parseFloat(orgix[3]);
                    origxElms[4 * 3 + origxRow] = parseFloat(orgix[4]);
                }
                else if (line.substr(0, 5) === 'SCALE') {
                    if (!unitcellDict.scale) {
                        unitcellDict.scale = new Matrix4();
                    }
                    const scale = line.split(/\s+/);
                    const scaleRow = parseInt(line[5]) - 1;
                    const scaleElms = unitcellDict.scale.elements;
                    scaleElms[4 * 0 + scaleRow] = parseFloat(scale[1]);
                    scaleElms[4 * 1 + scaleRow] = parseFloat(scale[2]);
                    scaleElms[4 * 2 + scaleRow] = parseFloat(scale[3]);
                    scaleElms[4 * 3 + scaleRow] = parseFloat(scale[4]);
                }
                else if (recordName === 'CRYST1') {
                    // CRYST1   55.989   55.989   55.989  90.00  90.00  90.00 P 1           1
                    //  7 - 15       Real(9.3)      a (Angstroms)
                    // 16 - 24       Real(9.3)      b (Angstroms)
                    // 25 - 33       Real(9.3)      c (Angstroms)
                    // 34 - 40       Real(7.2)      alpha         alpha (degrees).
                    // 41 - 47       Real(7.2)      beta          beta (degrees).
                    // 48 - 54       Real(7.2)      gamma         gamma (degrees).
                    // 56 - 66       LString        sGroup        Space group.
                    // 67 - 70       Integer        z             Z value.
                    const aLength = parseFloat(line.substr(6, 9));
                    const bLength = parseFloat(line.substr(15, 9));
                    const cLength = parseFloat(line.substr(24, 9));
                    const alpha = parseFloat(line.substr(33, 7));
                    const beta = parseFloat(line.substr(40, 7));
                    const gamma = parseFloat(line.substr(47, 7));
                    const sGroup = line.substr(55, 11).trim();
                    // const zValue = parseInt( line.substr( 66, 4 ) );
                    const box = new Float32Array(9);
                    box[0] = aLength;
                    box[4] = bLength;
                    box[8] = cLength;
                    boxes.push(box);
                    if (modelIdx === 0) {
                        unitcellDict.a = aLength;
                        unitcellDict.b = bLength;
                        unitcellDict.c = cLength;
                        unitcellDict.alpha = alpha;
                        unitcellDict.beta = beta;
                        unitcellDict.gamma = gamma;
                        unitcellDict.spacegroup = sGroup;
                    }
                }
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        // finalize ensures resname will be defined for all rp.resname
        // (required in entity handling below)
        sb.finalize();
        //
        const en = entityDataList.length;
        if (en) {
            s.eachChain(function (cp) {
                cp.entityIndex = en;
            });
            entityDataList.forEach(function (e, i) {
                const chainIndexList = e.chainList.map(function (chainname) {
                    return chainDict[chainname];
                });
                s.entityList.push(new Entity(s, i, e.name, 'polymer', chainIndexList));
            });
            let ei = entityDataList.length;
            const rp = s.getResidueProxy();
            const residueDict = {};
            s.eachChain(function (cp) {
                if (cp.entityIndex === en) {
                    rp.index = cp.residueOffset;
                    if (!residueDict[rp.resname]) {
                        residueDict[rp.resname] = [];
                    }
                    residueDict[rp.resname].push(cp.index);
                }
            });
            Object.keys(residueDict).forEach(function (resname) {
                const chainList = residueDict[resname];
                let type = 'non-polymer';
                let name = hetnameDict[resname] || resname;
                if (WaterNames.includes(resname)) {
                    name = 'water';
                    type = 'water';
                }
                s.entityList.push(new Entity(s, ei, name, type, chainList));
                ei += 1;
            });
        }
        //
        if (unitcellDict.a !== undefined) {
            s.unitcell = new Unitcell(unitcellDict);
        }
        else {
            s.unitcell = undefined;
        }
        if (helices.length || sheets.length) {
            assignSecondaryStructure(s, secStruct);
        }
        s.finalizeAtoms();
        if (!isLegacy)
            calculateChainnames(s);
        calculateBonds(s, this.inferBonds);
        s.finalizeBonds();
        if (!helices.length && !sheets.length) {
            calculateSecondaryStructure(s);
        }
        buildUnitcellAssembly(s);
        if (Debug)
            Log.timeEnd('PdbParser._parse ' + this.name);
    }
}
ParserRegistry.add('pdb', PdbParser);
ParserRegistry.add('pdb1', PdbParser);
ParserRegistry.add('ent', PdbParser);

/**
 * @file ChemComp Map
 * @author Paul Pillot <paul.pillot@tandemai.com>
 * @private
 */
class ChemCompMap {
    constructor(structure) {
        this.structure = structure;
        this.dict = {};
        this.structure = structure;
    }
    add(resname, chemCompType, bonds) {
        this.dict[resname] = { chemCompType };
        if (bonds) {
            this.dict[resname].bonds = bonds;
        }
    }
    addBond(resname, atom1, atom2, bondOrder) {
        const d = this.dict[resname];
        if (!d)
            return;
        if (!d.bonds) {
            d.bonds = { atom1: [], atom2: [], bondOrders: [] };
        }
        const b = d.bonds;
        b.atom1.push(atom1);
        b.atom2.push(atom2);
        b.bondOrders.push(bondOrder);
    }
    getBonds(resname, atomList) {
        var _a;
        const bonds = (_a = this.dict[resname]) === null || _a === void 0 ? void 0 : _a.bonds;
        if (!bonds)
            return undefined;
        const atomMap = this.structure.atomMap;
        const atomsToListindex = new Map(atomList.map((val, key) => { var _a; return [(_a = atomMap.get(val)) === null || _a === void 0 ? void 0 : _a.atomname, key]; }));
        const atomIndices1 = [];
        const atomIndices2 = [];
        const bondOrders = [];
        let a1;
        let a2;
        for (let i = 0; i < bonds.atom1.length; i++) {
            if ((a1 = atomsToListindex.get(bonds.atom1[i])) !== undefined
                && (a2 = atomsToListindex.get(bonds.atom2[i])) !== undefined) {
                atomIndices1.push(a1);
                atomIndices2.push(a2);
                bondOrders.push(bonds.bondOrders[i]);
            }
        }
        return {
            atomIndices1,
            atomIndices2,
            bondOrders
        };
    }
}

/**
 * @file Cif Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Paul Pillot <paul.pillot@tandemai.com>
 * @private
 */
const reAtomSymbol = /^\D{1,2}/; // atom symbol in atom_site_label
// source: dssp man page
const cif2dssp = {
    HELX_RH_AL_P: 'h',
    STRN: 'e',
    HELX_RH_3T_P: 'g',
    HELX_RH_PI_P: 'i',
    HELX_LH_PP_P: 'e',
    TURN_TY1_P: 't',
    BEND: 's',
    OTHER: ' ', // Coil
};
const valueOrder2bondOrder = {
    AROM: 1,
    DELO: 2,
    DIRECTED: 0,
    DOUB: 2,
    PI: 0,
    POLY: 0,
    QUAD: 4,
    SING: 1,
    TRIP: 3
};
function getBondOrder(valueOrder) {
    switch (valueOrder.toLowerCase()) {
        case '?': // assume single bond
        case 'sing':
            return 1;
        case 'doub':
            return 2;
        case 'trip':
            return 3;
        case 'quad':
            return 4;
    }
    return 0;
}
function parseChemComp(cif, structure, structureBuilder) {
    const atomStore = structure.atomStore;
    const atomMap = structure.atomMap;
    let i, n;
    const cc = cif.chem_comp;
    const cca = cif.chem_comp_atom;
    const ccb = cif.chem_comp_bond;
    let field;
    if (cc) {
        if (field = cc.getField('name')) {
            structure.title = field.str(0);
        }
        if (field = cc.getField('id')) {
            structure.id = field.str(0);
        }
    }
    const atomnameDict = {};
    if (cca) {
        let atomname, element, resname, resno;
        n = cca.rowCount;
        atomStore.resize(n * 2);
        const atomnameField = cca.getField('atom_id');
        const elementField = cca.getField('type_symbol');
        const resnameField = cca.getField('pdbx_component_comp_id');
        const resnoField = cca.getField('pdbx_residue_numbering');
        [
            ['model_Cartn_x', 'model_Cartn_y', 'model_Cartn_z'],
            ['pdbx_model_Cartn_x_ideal', 'pdbx_model_Cartn_y_ideal', 'pdbx_model_Cartn_z_ideal',]
        ].forEach(([xFieldName, yFieldName, zFieldName], modelindex) => {
            var _a;
            const xField = cca.getField(xFieldName);
            const yField = cca.getField(yFieldName);
            const zField = cca.getField(zFieldName);
            const atomOffset = modelindex * n;
            for (let i = 0; i < n; ++i) {
                const asindex = i + atomOffset;
                atomStore.growIfFull();
                atomname = atomnameField === null || atomnameField === void 0 ? void 0 : atomnameField.str(i);
                element = elementField === null || elementField === void 0 ? void 0 : elementField.str(i);
                atomnameDict[atomname] = i;
                atomStore.atomTypeId[asindex] = atomMap.add(atomname, element);
                atomStore.x[asindex] = xField.float(i);
                atomStore.y[asindex] = yField.float(i);
                atomStore.z[asindex] = zField.float(i);
                atomStore.serial[asindex] = i;
                resname = resnameField.str(i);
                resno = (_a = resnoField === null || resnoField === void 0 ? void 0 : resnoField.int(i)) !== null && _a !== void 0 ? _a : 1;
                structureBuilder.addAtom(modelindex, '', '', resname, resno, true);
            }
        });
    }
    if (cca && ccb) {
        let atomname1, atomname2, bondOrder;
        n = ccb.rowCount;
        const na = cca.rowCount;
        const ap1 = structure.getAtomProxy();
        const ap2 = structure.getAtomProxy();
        const atomname1Field = ccb.getField('atom_id_1');
        const atomname2Field = ccb.getField('atom_id_2');
        const bondOrderField = ccb.getField('value_order');
        for (i = 0; i < n; ++i) {
            atomname1 = atomname1Field.str(i);
            atomname2 = atomname2Field.str(i);
            bondOrder = getBondOrder(bondOrderField.str(i));
            ap1.index = atomnameDict[atomname1];
            ap2.index = atomnameDict[atomname2];
            structure.bondStore.growIfFull();
            structure.bondStore.addBond(ap1, ap2, bondOrder);
            ap1.index += na;
            ap2.index += na;
            structure.bondStore.growIfFull();
            structure.bondStore.addBond(ap1, ap2, bondOrder);
        }
    }
}
function parseCore(cif, structure, structureBuilder) {
    var _a, _b;
    var atomStore = structure.atomStore;
    var atomMap = structure.atomMap;
    if (cif.header) {
        structure.id = cif.header;
        structure.name = cif.header;
    }
    structure.unitcell = new Unitcell({
        a: cif.getField('cell_length_a').float(0),
        b: cif.getField('cell_length_b').float(0),
        c: cif.getField('cell_length_c').float(0),
        alpha: cif.getField('cell_angle_alpha').float(0),
        beta: cif.getField('cell_angle_beta').float(0),
        gamma: cif.getField('cell_angle_gamma').float(0),
        spacegroup: cif.getField('symmetry_space_group_name_H-M').str(0)
    });
    const v = new Vector3();
    const c = new Vector3();
    const typeSymbolField = cif.getField('atom_site_type_symbol');
    if (!typeSymbolField)
        return;
    const n = (_a = typeSymbolField.rowCount) !== null && _a !== void 0 ? _a : 0;
    const atomnameField = cif.getField('atom_site_type_symbol');
    const fractXField = cif.getField('atom_site_fract_x');
    const fractYField = cif.getField('atom_site_fract_y');
    const fractZField = cif.getField('atom_site_fract_z');
    const occField = cif.getField('atom_site_occupancy');
    const typeSymbolMap = {};
    for (let i = 0; i < n; ++i) {
        atomStore.growIfFull();
        const atomname = atomnameField.str(i);
        const typeSymbol = typeSymbolField.str(i);
        // typeSymbol can be like `Al2.5+`. Retain element symbol only.
        let element = typeSymbolMap[typeSymbol];
        if (!element) {
            const match = typeSymbol.match(reAtomSymbol);
            typeSymbolMap[typeSymbol] = element = (_b = match === null || match === void 0 ? void 0 : match[0]) !== null && _b !== void 0 ? _b : typeSymbol;
        }
        atomStore.atomTypeId[i] = atomMap.add(atomname, element);
        v.set(fractXField.float(i), fractYField.float(i), fractZField.float(i));
        v.applyMatrix4(structure.unitcell.fracToCart);
        c.add(v);
        atomStore.x[i] = v.x;
        atomStore.y[i] = v.y;
        atomStore.z[i] = v.z;
        if (occField) {
            atomStore.occupancy[i] = occField.float(i);
        }
        atomStore.serial[i] = i;
        structureBuilder.addAtom(0, '', '', 'HET', 1, true);
    }
    c.divideScalar(n);
    structure.center = c;
    buildUnitcellAssembly(structure);
    const v2 = new Vector3();
    const v3 = new Vector3();
    const ml = structure.biomolDict.SUPERCELL.partList[0].matrixList;
    let k = n;
    function covalent(idx) {
        return atomMap.get(atomStore.atomTypeId[idx]).covalent;
    }
    const identityMatrix = new Matrix4();
    for (let i = 0; i < n; ++i) {
        const covalentI = covalent(i);
        v.set(atomStore.x[i], atomStore.y[i], atomStore.z[i]);
        ml.forEach(function (m) {
            if (identityMatrix.equals(m))
                return;
            v2.copy(v);
            v2.applyMatrix4(m);
            for (let j = 0; j < n; ++j) {
                v3.set(atomStore.x[j], atomStore.y[j], atomStore.z[j]);
                const distSquared = v2.distanceToSquared(v3);
                const d = covalent(j) + covalentI;
                const d1 = d + 0.3;
                const d2 = d - 0.5;
                if (distSquared < (d1 * d1) && distSquared > (d2 * d2)) {
                    atomStore.growIfFull();
                    atomStore.atomTypeId[k] = atomStore.atomTypeId[i];
                    atomStore.x[k] = v2.x;
                    atomStore.y[k] = v2.y;
                    atomStore.z[k] = v2.z;
                    atomStore.occupancy[k] = atomStore.occupancy[i];
                    atomStore.serial[k] = k;
                    atomStore.altloc[k] = 'A'.charCodeAt(0);
                    structureBuilder.addAtom(0, '', '', 'HET', 1, true);
                    k += 1;
                    return;
                }
            }
        });
    }
}
function processSecondaryStructure(cif, structure, asymIdDict) {
    var _a, _b, _c, _d, _e, _f;
    const helices = [];
    const sheets = [];
    let i, il, begIcode, endIcode;
    // get helices
    const sc = cif.struct_conf;
    if (sc === null || sc === void 0 ? void 0 : sc.fieldNames.includes('pdbx_PDB_helix_class')) {
        const begIcodeField = sc.getField('pdbx_beg_PDB_ins_code');
        const endIcodeField = sc.getField('pdbx_end_PDB_ins_code');
        const helixClassField = sc.getField('pdbx_PDB_helix_class');
        const begAsymIdField = sc.getField('beg_label_asym_id');
        const endAsymIdField = sc.getField('end_label_asym_id');
        const begSeqIdField = sc.getField('beg_auth_seq_id');
        const endSeqIdField = sc.getField('end_auth_seq_id');
        for (i = 0, il = sc.rowCount; i < il; ++i) {
            const helixType = helixClassField === null || helixClassField === void 0 ? void 0 : helixClassField.int(i);
            if (Number.isFinite(helixType)) {
                begIcode = (_a = begIcodeField === null || begIcodeField === void 0 ? void 0 : begIcodeField.str(i)) !== null && _a !== void 0 ? _a : '';
                endIcode = (_b = endIcodeField === null || endIcodeField === void 0 ? void 0 : endIcodeField.str(i)) !== null && _b !== void 0 ? _b : '';
                helices.push([
                    asymIdDict[begAsymIdField.str(i)],
                    begSeqIdField.int(i),
                    begIcode,
                    asymIdDict[endAsymIdField.str(i)],
                    endSeqIdField.int(i),
                    endIcode,
                    (HelixTypes[helixType] || HelixTypes[0]).charCodeAt(0)
                ]);
            }
        }
    }
    // AlphaFold mmCifs have their secondary structures assigned from DSSP 
    // entirely defined in the `struct_conf` category  
    else if (sc === null || sc === void 0 ? void 0 : sc.fieldNames.includes('conf_type_id')) {
        const conftypeField = sc.getField('conf_type_id');
        const begIcodeField = sc.getField('pdbx_beg_PDB_ins_code');
        const endIcodeField = sc.getField('pdbx_end_PDB_ins_code');
        const begAsymIdField = sc.getField('beg_label_asym_id');
        const endAsymIdField = sc.getField('end_label_asym_id');
        const begSeqIdField = sc.getField('beg_auth_seq_id');
        const endSeqIdField = sc.getField('end_auth_seq_id');
        let dsspcode;
        for (i = 0, il = sc.rowCount; i < il; ++i) {
            const conftype = conftypeField.str(i);
            if (dsspcode = cif2dssp[conftype]) {
                begIcode = (_c = begIcodeField === null || begIcodeField === void 0 ? void 0 : begIcodeField.str(i)) !== null && _c !== void 0 ? _c : '';
                endIcode = (_d = endIcodeField === null || endIcodeField === void 0 ? void 0 : endIcodeField.str(i)) !== null && _d !== void 0 ? _d : '';
                if (dsspcode === 'h' || dsspcode === 'g' || dsspcode === 'i') {
                    helices.push([
                        asymIdDict[begAsymIdField.str(i)],
                        begSeqIdField.int(i),
                        begIcode,
                        asymIdDict[endAsymIdField.str(i)],
                        endSeqIdField.int(i),
                        endIcode,
                        dsspcode.charCodeAt(0)
                    ]);
                }
                else if (dsspcode === 'e') {
                    sheets.push([
                        asymIdDict[begAsymIdField.str(i)],
                        begSeqIdField.int(i),
                        begIcode,
                        asymIdDict[endAsymIdField.str(i)],
                        endSeqIdField.int(i),
                        endIcode
                    ]);
                }
            }
        }
    }
    // get sheets
    const ssr = cif.struct_sheet_range;
    if (ssr && sheets.length === 0) {
        const begIcodeField = ssr.getField('pdbx_beg_PDB_ins_code');
        const endIcodeField = ssr.getField('pdbx_end_PDB_ins_code');
        const begAsymIdField = ssr.getField('beg_label_asym_id');
        const endAsymIdField = ssr.getField('end_label_asym_id');
        const begSeqIdField = ssr.getField('beg_auth_seq_id');
        const endSeqIdField = ssr.getField('end_auth_seq_id');
        for (i = 0, il = ssr.rowCount; i < il; ++i) {
            begIcode = (_e = begIcodeField === null || begIcodeField === void 0 ? void 0 : begIcodeField.str(i)) !== null && _e !== void 0 ? _e : '';
            endIcode = (_f = endIcodeField === null || endIcodeField === void 0 ? void 0 : endIcodeField.str(i)) !== null && _f !== void 0 ? _f : '';
            sheets.push([
                asymIdDict[begAsymIdField.str(i)],
                begSeqIdField.int(i),
                begIcode,
                asymIdDict[endAsymIdField.str(i)],
                endSeqIdField.int(i),
                endIcode
            ]);
        }
    }
    if (sc || ssr) {
        return {
            helices: helices,
            sheets: sheets
        };
    }
    else {
        return false;
    }
}
function processSymmetry(cif, structure, asymIdDict) {
    // biomol & ncs processing
    const operDict = {};
    const biomolDict = structure.biomolDict;
    if (cif.pdbx_struct_oper_list) {
        const biomolOp = cif.pdbx_struct_oper_list;
        const idField = biomolOp.getField('id');
        const mat_1_1Field = biomolOp.getField('matrix[1][1]');
        const mat_1_2Field = biomolOp.getField('matrix[1][2]');
        const mat_1_3Field = biomolOp.getField('matrix[1][3]');
        const mat_2_1Field = biomolOp.getField('matrix[2][1]');
        const mat_2_2Field = biomolOp.getField('matrix[2][2]');
        const mat_2_3Field = biomolOp.getField('matrix[2][3]');
        const mat_3_1Field = biomolOp.getField('matrix[3][1]');
        const mat_3_2Field = biomolOp.getField('matrix[3][2]');
        const mat_3_3Field = biomolOp.getField('matrix[3][3]');
        const vec1Field = biomolOp.getField('vector[1]');
        const vec2Field = biomolOp.getField('vector[2]');
        const vec3Field = biomolOp.getField('vector[3]');
        for (let i = 0; i < biomolOp.rowCount; i++) {
            const m = new Matrix4();
            const elms = m.elements;
            elms[0] = mat_1_1Field.float(i);
            elms[1] = mat_1_2Field.float(i);
            elms[2] = mat_1_3Field.float(i);
            elms[4] = mat_2_1Field.float(i);
            elms[5] = mat_2_2Field.float(i);
            elms[6] = mat_2_3Field.float(i);
            elms[8] = mat_3_1Field.float(i);
            elms[9] = mat_3_2Field.float(i);
            elms[10] = mat_3_3Field.float(i);
            elms[3] = vec1Field.float(i);
            elms[7] = vec2Field.float(i);
            elms[11] = vec3Field.float(i);
            m.transpose();
            operDict[idField.str(i)] = m;
        }
    }
    if (cif.pdbx_struct_assembly_gen) {
        const gen = cif.pdbx_struct_assembly_gen;
        const getMatrixDict = function (expr) {
            const matDict = {};
            const l = expr.replace(/[()']/g, '').split(',');
            l.forEach(function (e) {
                if (e.includes('-')) {
                    var es = e.split('-');
                    var j = parseInt(es[0]);
                    var m = parseInt(es[1]);
                    for (; j <= m; ++j) {
                        matDict[j] = operDict[j];
                    }
                }
                else {
                    matDict[e] = operDict[e];
                }
            });
            return matDict;
        };
        const assemblyIdField = gen.getField('assembly_id');
        const operExpressionField = gen.getField('oper_expression');
        const asymIds = gen.getField('asym_id_list');
        for (let i = 0; i < gen.rowCount; i++) {
            const id = assemblyIdField.int(i);
            let md = {};
            let oe = operExpressionField.str(i).replace(/['"]\(|['"]/g, '');
            // Example: '(1,2,6,10,23,24)' and '(X0)(1-60)' in 6CGV
            if (oe.includes(')(') || oe.indexOf('(') > 0) {
                const [oe1, oe2] = oe.split('(').filter(piece => !!piece);
                const md1 = getMatrixDict(oe1);
                const md2 = getMatrixDict(oe2);
                Object.keys(md1).forEach(function (k1) {
                    Object.keys(md2).forEach(function (k2) {
                        const mat = new Matrix4();
                        mat.multiplyMatrices(md1[k1], md2[k2]);
                        md[k1 + 'x' + k2] = mat;
                    });
                });
            }
            else {
                md = getMatrixDict(oe);
            }
            const matrixList = [];
            for (let k in md) {
                matrixList.push(md[k]);
            }
            let name = '' + id;
            if (/^(0|[1-9][0-9]*)$/.test(name))
                name = 'BU' + name;
            const chainList = asymIds.str(i).split(',').map(ch => asymIdDict[ch]);
            if (biomolDict[name] === undefined) {
                biomolDict[name] = new Assembly(name);
            }
            biomolDict[name].addPart(matrixList, chainList);
        }
    }
    // non-crystallographic symmetry operations
    if (cif.struct_ncs_oper) {
        const ncsOp = cif.struct_ncs_oper;
        const ncsName = 'NCS';
        biomolDict[ncsName] = new Assembly(ncsName);
        const ncsPart = biomolDict[ncsName].addPart();
        const codeField = ncsOp.getField('code');
        const mat_1_1Field = ncsOp.getField('matrix[1][1]');
        const mat_1_2Field = ncsOp.getField('matrix[1][2]');
        const mat_1_3Field = ncsOp.getField('matrix[1][3]');
        const mat_2_1Field = ncsOp.getField('matrix[2][1]');
        const mat_2_2Field = ncsOp.getField('matrix[2][2]');
        const mat_2_3Field = ncsOp.getField('matrix[2][3]');
        const mat_3_1Field = ncsOp.getField('matrix[3][1]');
        const mat_3_2Field = ncsOp.getField('matrix[3][2]');
        const mat_3_3Field = ncsOp.getField('matrix[3][3]');
        const vec1Field = ncsOp.getField('vector[1]');
        const vec2Field = ncsOp.getField('vector[2]');
        const vec3Field = ncsOp.getField('vector[3]');
        for (let i = 0; i < ncsOp.rowCount; i++) {
            // ignore 'given' operators
            if (codeField.str(i) === 'given')
                return;
            const m = new Matrix4();
            const elms = m.elements;
            elms[0] = mat_1_1Field.float(i);
            elms[1] = mat_1_2Field.float(i);
            elms[2] = mat_1_3Field.float(i);
            elms[4] = mat_2_1Field.float(i);
            elms[5] = mat_2_2Field.float(i);
            elms[6] = mat_2_3Field.float(i);
            elms[8] = mat_3_1Field.float(i);
            elms[9] = mat_3_2Field.float(i);
            elms[10] = mat_3_3Field.float(i);
            elms[3] = vec1Field.float(i);
            elms[7] = vec2Field.float(i);
            elms[11] = vec3Field.float(i);
            m.transpose();
            ncsPart.matrixList.push(m);
        }
        if (ncsPart.matrixList.length === 0) {
            delete biomolDict[ncsName];
        }
    }
    // cell & symmetry
    const unitcellDict = {};
    if (cif.cell) {
        const cell = cif.cell;
        const a = cell.getField('length_a').float(0);
        const b = cell.getField('length_b').float(0);
        const c = cell.getField('length_c').float(0);
        const box = new Float32Array(9);
        box[0] = a;
        box[4] = b;
        box[8] = c;
        structure.boxes.push(box);
        unitcellDict.a = a;
        unitcellDict.b = b;
        unitcellDict.c = c;
        unitcellDict.alpha = cell.getField('angle_alpha').float(0);
        unitcellDict.beta = cell.getField('angle_beta').float(0);
        unitcellDict.gamma = cell.getField('angle_gamma').float(0);
    }
    if (cif.symmetry) {
        unitcellDict.spacegroup = cif.symmetry.getField('space_group_name_H-M').str(0);
    }
    // origx
    const origx = new Matrix4();
    if (cif.database_PDB_matrix) {
        const origxMat = cif.database_PDB_matrix;
        const origxElms = origx.elements;
        const mat_1_1Field = origxMat.getField('origx[1][1]');
        const mat_1_2Field = origxMat.getField('origx[1][2]');
        const mat_1_3Field = origxMat.getField('origx[1][3]');
        const mat_2_1Field = origxMat.getField('origx[2][1]');
        const mat_2_2Field = origxMat.getField('origx[2][2]');
        const mat_2_3Field = origxMat.getField('origx[2][3]');
        const mat_3_1Field = origxMat.getField('origx[3][1]');
        const mat_3_2Field = origxMat.getField('origx[3][2]');
        const mat_3_3Field = origxMat.getField('origx[3][3]');
        const vec1Field = origxMat.getField('origx_vector[1]');
        const vec2Field = origxMat.getField('origx_vector[2]');
        const vec3Field = origxMat.getField('origx_vector[3]');
        origxElms[0] = mat_1_1Field.float(0);
        origxElms[1] = mat_1_2Field.float(0);
        origxElms[2] = mat_1_3Field.float(0);
        origxElms[4] = mat_2_1Field.float(0);
        origxElms[5] = mat_2_2Field.float(0);
        origxElms[6] = mat_2_3Field.float(0);
        origxElms[8] = mat_3_1Field.float(0);
        origxElms[9] = mat_3_2Field.float(0);
        origxElms[10] = mat_3_3Field.float(0);
        origxElms[3] = vec1Field.float(0);
        origxElms[7] = vec2Field.float(0);
        origxElms[11] = vec3Field.float(0);
        origx.transpose();
        unitcellDict.origx = origx;
    }
    // scale
    const scale = new Matrix4();
    if (cif.atom_sites) {
        const scaleMat = cif.atom_sites;
        const scaleElms = scale.elements;
        const mat_1_1Field = scaleMat.getField('fract_transf_matrix[1][1]');
        const mat_1_2Field = scaleMat.getField('fract_transf_matrix[1][2]');
        const mat_1_3Field = scaleMat.getField('fract_transf_matrix[1][3]');
        const mat_2_1Field = scaleMat.getField('fract_transf_matrix[2][1]');
        const mat_2_2Field = scaleMat.getField('fract_transf_matrix[2][2]');
        const mat_2_3Field = scaleMat.getField('fract_transf_matrix[2][3]');
        const mat_3_1Field = scaleMat.getField('fract_transf_matrix[3][1]');
        const mat_3_2Field = scaleMat.getField('fract_transf_matrix[3][2]');
        const mat_3_3Field = scaleMat.getField('fract_transf_matrix[3][3]');
        const vec1Field = scaleMat.getField('fract_transf_vector[1]');
        const vec2Field = scaleMat.getField('fract_transf_vector[2]');
        const vec3Field = scaleMat.getField('fract_transf_vector[3]');
        scaleElms[0] = mat_1_1Field.float(0);
        scaleElms[1] = mat_1_2Field.float(0);
        scaleElms[2] = mat_1_3Field.float(0);
        scaleElms[4] = mat_2_1Field.float(0);
        scaleElms[5] = mat_2_2Field.float(0);
        scaleElms[6] = mat_2_3Field.float(0);
        scaleElms[8] = mat_3_1Field.float(0);
        scaleElms[9] = mat_3_2Field.float(0);
        scaleElms[10] = mat_3_3Field.float(0);
        scaleElms[3] = vec1Field.float(0);
        scaleElms[7] = vec2Field.float(0);
        scaleElms[11] = vec3Field.float(0);
        scale.transpose();
        unitcellDict.scale = scale;
    }
    if (unitcellDict.a !== undefined) {
        structure.unitcell = new Unitcell(unitcellDict);
    }
    else {
        structure.unitcell = undefined;
    }
}
function processConnections(cif, structure, asymIdDict) {
    // add connections
    const sc = cif.struct_conn;
    if (sc) {
        const ap1 = structure.getAtomProxy();
        const ap2 = structure.getAtomProxy();
        const atomIndicesCache = {};
        const connTypeIdField = sc.getField('conn_type_id');
        const ptnr1SymmetryField = sc.getField('ptnr1_symmetry');
        const ptnr1InsCodeField = sc.getField('pdbx_ptnr1_PDB_ins_code');
        const ptnr1AltLocField = sc.getField('pdbx_ptnr1_label_alt_id');
        const ptnr1SeqIdField = sc.getField('ptnr1_auth_seq_id');
        const ptnr1AsymIdField = sc.getField('ptnr1_label_asym_id');
        const ptnr1AtomIdField = sc.getField('ptnr1_label_atom_id');
        const ptnr2SymmetryField = sc.getField('ptnr2_symmetry');
        const ptnr2InsCodeField = sc.getField('pdbx_ptnr2_PDB_ins_code');
        const ptnr2AltLocField = sc.getField('pdbx_ptnr2_label_alt_id');
        const ptnr2SeqIdField = sc.getField('ptnr2_auth_seq_id');
        const ptnr2AsymIdField = sc.getField('ptnr2_label_asym_id');
        const ptnr2AtomIdField = sc.getField('ptnr2_label_atom_id');
        const bondOrderField = sc.getField('pdbx_value_order');
        for (let i = 0, il = sc.rowCount; i < il; ++i) {
            // ignore:
            // hydrog - hydrogen bond
            // mismat - mismatched base pairs
            // saltbr - ionic interaction
            const connTypeId = connTypeIdField.str(i);
            if (connTypeId === 'hydrog' ||
                connTypeId === 'mismat' ||
                connTypeId === 'saltbr')
                continue;
            // ignore bonds between symmetry mates
            if (ptnr1SymmetryField.str(i) !== '1_555' ||
                ptnr2SymmetryField.str(i) !== '1_555')
                continue;
            // process:
            // covale - covalent bond
            // covale_base -
            //      covalent modification of a nucleotide base
            // covale_phosphate -
            //      covalent modification of a nucleotide phosphate
            // covale_sugar -
            //      covalent modification of a nucleotide sugar
            // disulf - disulfide bridge
            // metalc - metal coordination
            // modres - covalent residue modification
            const inscode1 = ptnr1InsCodeField.str(i);
            const altloc1 = ptnr1AltLocField.str(i);
            const sele1 = (ptnr1SeqIdField.str(i) +
                (inscode1 ? ('^' + inscode1) : '') +
                ':' + asymIdDict[ptnr1AsymIdField.str(i)] +
                '.' + ptnr1AtomIdField.str(i) +
                (altloc1 ? ('%' + altloc1) : ''));
            let atomIndices1 = atomIndicesCache[sele1];
            if (!atomIndices1) {
                const selection1 = new Selection(sele1);
                if (selection1.selection.error) {
                    if (Debug)
                        Log.warn('invalid selection for connection', sele1);
                    continue;
                }
                atomIndices1 = structure.getAtomIndices(selection1);
                atomIndicesCache[sele1] = atomIndices1;
            }
            const inscode2 = ptnr2InsCodeField.str(i);
            const altloc2 = ptnr2AltLocField.str(i);
            const sele2 = (ptnr2SeqIdField.str(i) +
                (inscode2 ? ('^' + inscode2) : '') +
                ':' + asymIdDict[ptnr2AsymIdField.str(i)] +
                '.' + ptnr2AtomIdField.str(i) +
                (altloc2 ? ('%' + altloc2) : ''));
            let atomIndices2 = atomIndicesCache[sele2];
            if (!atomIndices2) {
                const selection2 = new Selection(sele2);
                if (selection2.selection.error) {
                    if (Debug)
                        Log.warn('invalid selection for connection', sele2);
                    continue;
                }
                atomIndices2 = structure.getAtomIndices(selection2);
                atomIndicesCache[sele2] = atomIndices2;
            }
            // cases with more than one atom per selection
            // - #altloc1 to #altloc2
            // - #model to #model
            // - #altloc1 * #model to #altloc2 * #model
            var k = atomIndices1.length;
            var l = atomIndices2.length;
            if (k > l) {
                [k, l] = [l, k];
                [atomIndices1, atomIndices2] = [atomIndices2, atomIndices1];
            }
            // console.log( k, l );
            if (k === 0 || l === 0) {
                if (Debug)
                    Log.warn('no atoms found for', sele1, sele2);
                continue;
            }
            for (let j = 0; j < l; ++j) {
                ap1.index = atomIndices1[j % k];
                ap2.index = atomIndices2[j];
                if (ap1 && ap2) {
                    structure.bondStore.addBond(ap1, ap2, getBondOrder(bondOrderField.str(i)));
                }
                else {
                    Log.log('atoms for connection not found');
                }
            }
        }
    }
}
function processEntities(cif, structure, chainIndexDict) {
    var _a;
    if (cif.entity) {
        const e = cif.entity;
        const idField = e.getField('id');
        const descriptionField = e.getField('pdbx_description');
        const typeField = e.getField('type');
        const n = e.rowCount;
        for (let i = 0; i < n; ++i) {
            // 7a4p has a missing entity in chainIndexDict (entity 20 has no coordinates)
            const chainIndexList = Array.from((_a = chainIndexDict[idField.int(i)]) !== null && _a !== void 0 ? _a : []);
            structure.entityList[i] = new Entity(structure, i, descriptionField === null || descriptionField === void 0 ? void 0 : descriptionField.str(i), typeField.str(i), chainIndexList);
        }
    }
}
//
class CifParser extends StructureParser {
    get type() { return 'cif'; }
    get isBinary() { return false; }
    _parse() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        return __awaiter(this, void 0, void 0, function* () {
            // http://mmcif.wwpdb.org/
            Log.time('CifParser._parse ' + this.name);
            const s = this.structure;
            const sb = this.structureBuilder;
            const firstModelOnly = this.firstModelOnly;
            const asTrajectory = this.asTrajectory;
            //@TODO add back the cAlphaOnly property
            //const cAlphaOnly = this.cAlphaOnly
            const frames = s.frames;
            let currentFrame;
            let currentCoord;
            // CIF library expects a string for regular cif/mmCIF files and an ArrayBuffer for binary CIF files.
            // As compressed CIF files are returned as an ArrayBuffer from Streamer.read(), they need to be 
            // explicitly converted to a string.
            const data = this.isBinary
                ? CIF.parseBinary(this.streamer.data)
                : CIF.parseText(this.streamer.compressed
                    ? uint8ToString(this.streamer.data)
                    : this.streamer.data);
            const parsed = yield data.run();
            if (parsed.isError) {
                throw parsed;
            }
            const cif = parsed.result.blocks[0];
            // PDB chemcomp dictionary schema
            // (This is how the PDB dictionary for ligands is distributed)
            if ('chem_comp' in cif.categories
                && 'chem_comp_atom' in cif.categories
                && !('struct' in cif.categories)) {
                parseChemComp(cif.categories, s, sb);
                sb.finalize();
                s.finalizeAtoms();
                s.finalizeBonds();
                assignResidueTypeBonds(s);
            }
            // IUCr core CIF schema
            // (This format is used in IUCr publications, or databases such as COD)
            else if ('atom_site_type_symbol' in cif.categories && 'atom_site_label' in cif.categories && 'atom_site_fract_x' in cif.categories) {
                parseCore(cif, s, sb);
                sb.finalize();
                s.finalizeAtoms();
                calculateBonds(s);
                s.finalizeBonds();
                // assignResidueTypeBonds( s );
            }
            // PDBx/mmCIF schema
            // (Preferred format from wwPDB for macromolecular data. PDBe also distributes 
            // "Updated mmCif files" that notably contain intra-residue connectivities - chem_comp_bond records -)
            else {
                const asymIdDict = {};
                const chainIndexDict = {};
                const atomMap = s.atomMap;
                const atomStore = s.atomStore;
                // Find atom count (depending on asTrajectory and firstModelOnly flags)
                const atomSite = cif.categories.atom_site;
                let numAtoms = atomSite.rowCount;
                const modelNumField = atomSite.getField('pdbx_PDB_model_num');
                const hasSingleModel = (_a = modelNumField === null || modelNumField === void 0 ? void 0 : modelNumField.areValuesEqual(0, numAtoms - 1)) !== null && _a !== void 0 ? _a : true;
                if (!hasSingleModel && (asTrajectory || firstModelOnly)) {
                    const firstModel = modelNumField.int(0);
                    for (let i = 0; i < numAtoms; i++) {
                        if (modelNumField.int(i) > firstModel) {
                            numAtoms = i;
                            break;
                        }
                    }
                }
                // Collect chem_comp data for intra-residues connectivity if present
                s.chemCompMap = new ChemCompMap(s);
                const cc = cif.categories.chem_comp;
                let resnameField = cc.getField('id');
                const ccTypeField = cc.getField('type');
                for (let i = 0; i < cc.rowCount; i++) {
                    s.chemCompMap.add(resnameField.str(i), ccTypeField.str(i).toUpperCase());
                }
                // "Updated" mmcif files from PDBe also contain connectivity from PDB chemcomp dictionary
                if (cif.categoryNames.includes('chem_comp_bond')) {
                    const ccb = cif.categories.chem_comp_bond;
                    resnameField = ccb.getField('comp_id');
                    const atom1Field = ccb.getField('atom_id_1');
                    const atom2Field = ccb.getField('atom_id_2');
                    const bondOrderField = ccb.getField('value_order');
                    for (let i = 0; i < ccb.rowCount; i++) {
                        const order = valueOrder2bondOrder[bondOrderField.str(i)];
                        if (!order)
                            continue;
                        s.chemCompMap.addBond(resnameField.str(i), atom1Field.str(i), atom2Field.str(i), order);
                    }
                }
                const getFieldAsFloat32 = (cat, field, endAtom) => {
                    const cifField = cat.getField(field);
                    if (!cifField) {
                        return new Float32Array(endAtom);
                    }
                    return cifField.toFloatArray({ array: Float32Array, start: 0, end: endAtom });
                };
                atomStore.resize(numAtoms);
                atomStore.x = getFieldAsFloat32(atomSite, 'Cartn_x', numAtoms);
                atomStore.y = getFieldAsFloat32(atomSite, 'Cartn_y', numAtoms);
                atomStore.z = getFieldAsFloat32(atomSite, 'Cartn_z', numAtoms);
                atomStore.serial = atomSite.getField('id').toIntArray({ start: 0, end: numAtoms });
                atomStore.bfactor = getFieldAsFloat32(atomSite, 'B_iso_or_equiv', numAtoms);
                atomStore.occupancy = getFieldAsFloat32(atomSite, 'occupancy', numAtoms);
                const altlocField = atomSite.getField('label_alt_id');
                if (altlocField === null || altlocField === void 0 ? void 0 : altlocField.isDefined) {
                    atomStore.altloc = Uint8Array.from(altlocField.toStringArray(), c => c.charCodeAt(0));
                }
                const atomnameField = atomSite.getField('label_atom_id');
                const elementField = atomSite.getField('type_symbol');
                resnameField = atomSite.getField('label_comp_id');
                const resnoField = (_b = atomSite.getField('auth_seq_id')) !== null && _b !== void 0 ? _b : atomSite.getField('label_seq_id');
                const inscodeField = atomSite.getField('pdbx_PDB_ins_code');
                const chainnameField = atomSite.getField('auth_asym_id');
                const chainidField = atomSite.getField('label_asym_id');
                const heteroField = atomSite.getField('group_PDB');
                const entityIdField = atomSite.getField('label_entity_id');
                for (let row = 0; row < numAtoms; row++) {
                    const modelNum = (_c = modelNumField === null || modelNumField === void 0 ? void 0 : modelNumField.int(row)) !== null && _c !== void 0 ? _c : 1;
                    const chainname = (_d = chainnameField === null || chainnameField === void 0 ? void 0 : chainnameField.str(row)) !== null && _d !== void 0 ? _d : '';
                    const chainid = (_e = chainidField === null || chainidField === void 0 ? void 0 : chainidField.str(row)) !== null && _e !== void 0 ? _e : '';
                    const resname = (_f = resnameField === null || resnameField === void 0 ? void 0 : resnameField.str(row)) !== null && _f !== void 0 ? _f : '';
                    const resno = (_g = resnoField === null || resnoField === void 0 ? void 0 : resnoField.int(row)) !== null && _g !== void 0 ? _g : 0;
                    const hetero = (heteroField === null || heteroField === void 0 ? void 0 : heteroField.str(row)[0]) === 'H';
                    const inscode = (_h = inscodeField === null || inscodeField === void 0 ? void 0 : inscodeField.str(row)) !== null && _h !== void 0 ? _h : '';
                    const entityId = (_j = entityIdField === null || entityIdField === void 0 ? void 0 : entityIdField.int(row)) !== null && _j !== void 0 ? _j : 1;
                    atomStore.atomTypeId[row] = atomMap.add((atomnameField === null || atomnameField === void 0 ? void 0 : atomnameField.str(row)) || '', elementField === null || elementField === void 0 ? void 0 : elementField.str(row));
                    sb.addAtom(modelNum - 1, chainname, chainid, resname, resno, hetero, undefined, inscode);
                    // chainname mapping: label_asym_id -> auth_asym_id
                    asymIdDict[chainid] = chainname;
                    // entity mapping: chainIndex -> label_entity_id
                    if (!chainIndexDict[entityId]) {
                        chainIndexDict[entityId] = new Set();
                    }
                    chainIndexDict[entityId].add(s.chainStore.count - 1);
                }
                if (asTrajectory) {
                    const nbFrames = (atomSite.rowCount / numAtoms) | 0;
                    const xField = atomSite.getField('Cartn_x');
                    const yField = atomSite.getField('Cartn_y');
                    const zField = atomSite.getField('Cartn_z');
                    for (let f = 0; f < nbFrames; f++) {
                        currentFrame = new Float32Array(numAtoms * 3);
                        const start = f * numAtoms;
                        const end = start + numAtoms;
                        currentCoord = 0;
                        for (let i = start; i < end; i++) {
                            currentFrame[currentCoord + 0] = xField.float(i);
                            currentFrame[currentCoord + 1] = yField.float(i);
                            currentFrame[currentCoord + 2] = zField.float(i);
                            currentCoord += 3;
                        }
                        frames.push(currentFrame);
                    }
                }
                const secStruct = processSecondaryStructure(cif.categories, s, asymIdDict);
                processSymmetry(cif.categories, s, asymIdDict);
                processConnections(cif.categories, s, asymIdDict);
                processEntities(cif.categories, s, chainIndexDict);
                let field;
                let valData;
                if (field = (_k = cif.categories.struct) === null || _k === void 0 ? void 0 : _k.getField('title')) {
                    if (valData = field.str(0))
                        s.title = valData;
                }
                if (field = (_l = cif.categories.entry) === null || _l === void 0 ? void 0 : _l.getField('id')) {
                    if (valData = field.str(0))
                        s.id = valData;
                }
                // structure header (mimicking biojava)
                if (cif.categories.pdbx_audit_revision_history) {
                    if (field = (_m = cif.categories.pdbx_audit_revision_history) === null || _m === void 0 ? void 0 : _m.getField('revision_date')) {
                        for (let i = 0; i < field.rowCount; i++) {
                            if (valData = field.str(i)) {
                                s.header.releaseDate = valData;
                                break;
                            }
                        }
                    }
                    if (field = (_o = cif.categories.pdbx_database_status) === null || _o === void 0 ? void 0 : _o.getField('recvd_initial_deposition_date')) {
                        for (let i = 0; i < field.rowCount; i++) {
                            if (valData = field.str(i)) {
                                s.header.depositionDate = valData;
                                break;
                            }
                        }
                    }
                }
                else if (cif.categories.database_PDB_rev) {
                    if (field = (_p = cif.categories.database_PDB_rev) === null || _p === void 0 ? void 0 : _p.getField('date')) {
                        for (let i = 0; i < field.rowCount; i++) {
                            if (valData = field.str(i)) {
                                s.header.releaseDate = valData;
                                break;
                            }
                        }
                    }
                    if (field = (_q = cif.categories.database_PDB_rev) === null || _q === void 0 ? void 0 : _q.getField('date_original')) {
                        for (let i = 0; i < field.rowCount; i++) {
                            if (valData = field.str(i)) {
                                s.header.depositionDate = valData;
                                break;
                            }
                        }
                    }
                }
                if (field = (_s = (_r = cif.categories.reflns) === null || _r === void 0 ? void 0 : _r.getField('d_resolution_high')) !== null && _s !== void 0 ? _s : (_t = cif.categories.refine) === null || _t === void 0 ? void 0 : _t.getField('ls_d_res_high')) {
                    if (field.valueKind(0) === 0) { // is value present?
                        s.header.resolution = field.float(0);
                    }
                }
                if (field = (_u = cif.categories.refine) === null || _u === void 0 ? void 0 : _u.getField('ls_R_factor_R_free')) {
                    if (field.valueKind(0) === 0) { // is value present?
                        s.header.rFree = field.float(0);
                    }
                }
                if (field = (_v = cif.categories.refine) === null || _v === void 0 ? void 0 : _v.getField('ls_R_factor_R_work')) {
                    if (field.valueKind(0) === 0) { // is value present?
                        s.header.rFree = field.float(0);
                    }
                }
                if (field = (_w = cif.categories.exptl) === null || _w === void 0 ? void 0 : _w.getField('method')) {
                    s.header.experimentalMethods = field.toStringArray().slice();
                }
                sb.finalize();
                s.finalizeAtoms();
                calculateBonds(s);
                s.finalizeBonds();
                if (!secStruct) {
                    calculateSecondaryStructure(s);
                }
                else {
                    assignSecondaryStructure(s, secStruct);
                }
                buildUnitcellAssembly(s);
                s.extraData.cif = cif;
            }
            if (Debug)
                Log.timeEnd('CifParser._parse ' + this.name);
        });
    }
}
class BinaryCifParser extends CifParser {
    get type() { return 'bcif'; }
    get isBinary() { return true; }
}
ParserRegistry.add('bcif', BinaryCifParser);
ParserRegistry.add('cif', CifParser);
ParserRegistry.add('mcif', CifParser);
ParserRegistry.add('mmcif', CifParser);

/**
 * @file Gro Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class GroParser extends StructureParser {
    get type() { return 'gro'; }
    _parse() {
        // http://manual.gromacs.org/current/online/gro.html
        if (Debug)
            Log.time('GroParser._parse ' + this.name);
        var s = this.structure;
        var sb = this.structureBuilder;
        var firstModelOnly = this.firstModelOnly;
        var asTrajectory = this.asTrajectory;
        var cAlphaOnly = this.cAlphaOnly;
        var frames = s.frames;
        var boxes = s.boxes;
        var currentFrame, currentCoord;
        var firstLines = this.streamer.peekLines(3);
        s.title = firstLines[0].trim();
        // determine number of decimal places
        var ndec = firstLines[2].length - firstLines[2].lastIndexOf('.') - 1;
        var lpos = 5 + ndec;
        var xpos = 20;
        var ypos = 20 + lpos;
        var zpos = 20 + 2 * lpos;
        //
        var atomname, resname, resno, serial;
        var atomCount = parseInt(firstLines[1]);
        var modelLineCount = atomCount + 3;
        var atomMap = s.atomMap;
        var atomStore = s.atomStore;
        atomStore.resize(atomCount);
        var idx = 0;
        var modelIdx = 0;
        var lineNo = 0;
        function _parseChunkOfLines(_i, _n, lines) {
            for (var i = _i; i < _n; ++i) {
                ++lineNo;
                var l = lineNo - 1;
                var line = lines[i];
                if (!line)
                    continue;
                if (l % modelLineCount === 0) {
                    // Log.log( "title", line )
                    if (asTrajectory) {
                        currentFrame = new Float32Array(atomCount * 3);
                        frames.push(currentFrame);
                        currentCoord = 0;
                    }
                }
                else if (l % modelLineCount === 1) ;
                else if (l % modelLineCount === modelLineCount - 1) {
                    var str = line.trim().split(/\s+/);
                    var box = new Float32Array(9);
                    box[0] = parseFloat(str[0]) * 10;
                    box[4] = parseFloat(str[1]) * 10;
                    box[8] = parseFloat(str[2]) * 10;
                    boxes.push(box);
                    if (firstModelOnly) {
                        return true;
                    }
                    modelIdx += 1;
                }
                else {
                    atomname = line.substr(10, 5).trim();
                    if (cAlphaOnly && atomname !== 'CA')
                        continue;
                    var x = parseFloat(line.substr(xpos, lpos)) * 10;
                    var y = parseFloat(line.substr(ypos, lpos)) * 10;
                    var z = parseFloat(line.substr(zpos, lpos)) * 10;
                    if (asTrajectory) {
                        var j = currentCoord * 3;
                        currentFrame[j + 0] = x;
                        currentFrame[j + 1] = y;
                        currentFrame[j + 2] = z;
                        currentCoord += 1;
                        if (l > modelLineCount)
                            continue;
                    }
                    resname = line.substr(5, 5).trim();
                    resno = parseInt(line.substr(0, 5));
                    serial = parseInt(line.substr(15, 5));
                    atomStore.growIfFull();
                    atomStore.atomTypeId[idx] = atomMap.add(atomname);
                    atomStore.x[idx] = x;
                    atomStore.y[idx] = y;
                    atomStore.z[idx] = z;
                    atomStore.serial[idx] = serial;
                    sb.addAtom(modelIdx, '', '', resname, resno, false, 'l');
                    idx += 1;
                }
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        sb.finalize();
        s.finalizeAtoms();
        calculateChainnames(s);
        calculateBonds(s);
        s.finalizeBonds();
        calculateSecondaryStructure(s);
        if (Debug)
            Log.timeEnd('GroParser._parse ' + this.name);
    }
}
ParserRegistry.add('gro', GroParser);

/**
 * @file utf8-utils
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * mostly copied from https://github.com/creationix/msgpack-js-browser
 * by Tim Caswell <tim@creationix.com>, MIT License, Copyright (c) 2013
 */

/**
 * @file mmtf-constants
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */


var PassThroughFields = [
    "mmtfVersion", "mmtfProducer",
    "unitCell", "spaceGroup", "structureId", "title",
    "depositionDate", "releaseDate",
    "experimentalMethods", "resolution", "rFree", "rWork",
    "bioAssemblyList", "ncsOperatorList", "entityList", "groupList",
    "numBonds", "numAtoms", "numGroups", "numChains", "numModels",
    "groupsPerChain", "chainsPerModel",
];

var EncodedFields = [
	// required
    "xCoordList", "yCoordList", "zCoordList",
    "groupIdList", "groupTypeList",
    "chainIdList",
    // optional
    "bFactorList", "atomIdList", "altLocList", "occupancyList",
    "secStructList", "insCodeList", "sequenceIndexList",
    "chainNameList",
    "bondAtomList", "bondOrderList"
];

var AllFields = PassThroughFields.concat( EncodedFields );

/**
 * @file mmtf-utils
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */

/**
 * mmtf utils module.
 * @module MmtfUtils
 */


function getView( ctor, typedArray, elemSize ){
    return typedArray ? new ctor(
        typedArray.buffer,
        typedArray.byteOffset,
        typedArray.byteLength / ( elemSize || 1 )
    ) : undefined;
}

function getDataView( typedArray ){
    return getView( DataView, typedArray );
}

/**
 * get an Uint8Array view on the input array memory
 * @static
 * @param  {TypedArray} dataArray - input array
 * @return {Uint8Array} new view on the input array memory
 */
function getUint8View( typedArray ){
    return getView( Uint8Array, typedArray );
}

/**
 * get an Int8Array view on the input array memory
 * @static
 * @param  {TypedArray} dataArray - input array
 * @return {Int8Array} new view on the input array memory
 */
function getInt8View( typedArray ){
    return getView( Int8Array, typedArray );
}

/**
 * get an Int32Array view on the input array memory
 * @static
 * @param  {TypedArray} dataArray - input array
 * @return {Int32Array} new view on the input array memory
 */
function getInt32View( typedArray ){
    return getView( Int32Array, typedArray, 4 );
}

function getFloat32View( typedArray ){
    return getView( Float32Array, typedArray, 4 );
}


/**
 * get an Int16Array copy of the the input array data
 * @static
 * @param  {TypedArray} view - input data in big endian format
 * @param  {Int16Array} [dataArray] - pre-allocated output array
 * @return {Int16Array} copy of the input array data
 */
function decodeInt16( bytes, output ){
    var n = bytes.length / 2;
    if( !output ) output = new Int16Array( n );
    for( var i = 0, i2 = 0; i < n; ++i, i2 += 2 ){
        output[ i ] = bytes[ i2 ] << 8 ^ bytes[ i2 + 1 ] << 0;
    }
    return output;
}

/**
 * get an Int32Array copy of the the input array data
 * @static
 * @param  {TypedArray} view - input data in big endian format
 * @param  {Int32Array} [dataArray] - pre-allocated output array
 * @return {Int32Array} copy of the input array data
 */
function decodeInt32( bytes, output ){
    var n = bytes.length / 4;
    if( !output ) output = new Int32Array( n );
    for( var i = 0, i4 = 0; i < n; ++i, i4 += 4 ){
        output[ i ] = (
            bytes[ i4     ] << 24 ^ bytes[ i4 + 1 ] << 16 ^
            bytes[ i4 + 2 ] <<  8 ^ bytes[ i4 + 3 ] <<  0
        );
    }
    return output;
}

function decodeFloat32( bytes, output ){
    var n = bytes.length;
    if( !output ) output = new Float32Array( n / 4 );
    var dvOut = getDataView( output );
    var dvIn = getDataView( bytes );
    for( var i = 0, i4 = 0, il = n / 4; i < il; ++i, i4 += 4 ){
        dvOut.setFloat32( i4, dvIn.getFloat32( i4 ), true );
    }
    return output;
}

/**
 * decode integers into floats using given divisor
 * example:
 *     intArray: [ 12, 34, 543, 687, 2, 0, 4689 ]
 *     divisor: 100
 *     return: [ 0.12, 0.34, 5.43, 6.87, 0.02, 0.00, 46.89 ]
 * @static
 * @param  {TypedArray|Array} intArray - input array containing integers
 * @param  {Number} divisor - number to devide the integers to obtain floats
 * @param  {Float32Array} [dataArray] - pre-allocated output array
 * @return {Float32Array} decoded array
 */
function decodeInteger( intArray, divisor, output ){
    var n = intArray.length;
    var invDiv = 1/divisor;
    if( !output ) output = new Float32Array( n );
    for( var i = 0; i < n; ++i ){
        // multiply by inverse of the divisor which is faster then division
        output[ i ] = intArray[ i ] * invDiv;
    }
    return output;
}



/**
 * perform run-length decoding of input array
 * example:
 *     array: [ 0, 2, 3, 5 ]  // pairs of values and length of a run
 *     return: [ 0, 0, 3, 3, 3, 3, 3 ]
 * @static
 * @param  {TypedArray|Array} array - run-length encoded input array
 * @param  {TypedArray|Array} [dataArray] - pre-allocated output array
 * @return {TypedArray|Array} decoded array
 */
function decodeRun( array, output ){
    var i, il;
    if( !output ){
        // calculate the length the decoded array will have
        var fullLength = 0;
        for( i = 0, il = array.length; i < il; i+=2 ){
            fullLength += array[ i + 1 ];
        }
        // create a new array of the same type of the input array
        output = new array.constructor( fullLength );
    }
    var dataOffset = 0;
    for( i = 0, il = array.length; i < il; i+=2 ){
        var value = array[ i ];  // value to be repeated
        var length = array[ i + 1 ];  // number of repeats
        for( var j = 0; j < length; ++j ){
            output[ dataOffset ] = value;
            ++dataOffset;
        }
    }
    return output;
}



/**
 * perform delta decoding of the input array
 * by iterativly adding the ith element's value to the i+1th
 * example:
 *     dataArray: [ 0, 2, 1, 2, 1, 1, -4, -2, 9 ]
 *     return: [ 0, 2, 3, 5, 6, 7, 3, 1, 10 ]
 * @static
 * @param  {TypedArray|Array} dataArray - delta encoded input array
 * @return {TypedArray|Array} decoded array
 */
function decodeDelta( array, output ){
    var n = array.length;
    if( !output ) output = new array.constructor( n );
    if( n ) output[ 0 ] = array[ 0 ];
    for( var i = 1; i < n; ++i ){
        output[ i ] = array[ i ] + output[ i - 1 ];
    }
    return output;
}



/**
 * [decodePacking description]
 * @param  {Int16Array|Int8Array} int16or8 [description]
 * @param  {Int32Array} output   [description]
 * @return {Int32Array}          [description]
 */
function decodePacking( int16or8, output ){
    var upperLimit = int16or8 instanceof Int8Array ? 0x7F : 0x7FFF;
    var lowerLimit = -upperLimit - 1;
    var n = int16or8.length;
    var i, j;
    if( !output ){
        var fullLength = 0;
        for( i = 0; i < n; ++i ){
            if( int16or8[ i ] < upperLimit && int16or8[ i ] > lowerLimit ){
                ++fullLength;
            }
        }
        output = new Int32Array( fullLength );
    }
    i = 0;
    j = 0;
    while( i < n ){
        var value = 0;
        while( int16or8[ i ] === upperLimit || int16or8[ i ] === lowerLimit ){
            value += int16or8[ i ];
            ++i;
        }
        value += int16or8[ i ];
        ++i;
        output[ j ] = value;
        ++j;
    }
    return output;
}



function decodeDeltaRun( array, output ){
    return decodeDelta( decodeRun( array ), output );
}



/**
 * perform run-length decoding followed (@see decodeRunLength)
 * by decoding integers into floats using given divisor (@see decodeIntegerToFloat)
 * example:
 *     array: [ 320, 3, 100, 2 ]
 *     divisor: 100
 *     return: [ 3.20, 3.20, 3.20, 1.00, 1.00 ]
 * @static
 * @param  {Uint8Array} array - run-length encoded int32 array as bytes in big endian format
 * @param  {Integer} divisor - number to devide the integers to obtain floats
 * @param  {Float32Array} dataArray - pre-allocated output array
 * @return {Float32Array} decoded array
 */
function decodeIntegerRun( intArray, divisor, output ){
    return decodeInteger(
        decodeRun( intArray, getInt32View( output ) ), divisor, output
    );
}



function decodeIntegerDelta( intArray, divisor, output ){
    return decodeInteger(
        decodeDelta( intArray, getInt32View( output ) ), divisor, output
    );
}



function decodeIntegerPacking( int16or8, divisor, output ){
    return decodeInteger(
        decodePacking( int16or8, getInt32View( output ) ), divisor, output
    );
}

function decodeIntegerDeltaPacking( int16or8, divisor, output ){
    var unpacked = decodePacking( int16or8, getInt32View( output ) );
    return decodeIntegerDelta( unpacked, divisor, getFloat32View( unpacked ) );
}



function decodeBytes( bytes ){
    var dv = getDataView( bytes );
    var type = dv.getInt32( 0 );
    var size = dv.getInt32( 4 );
    var param = bytes.subarray( 8, 12 );
    var bytes = bytes.subarray( 12 );
    return [ type, bytes, size, param ];
}

/**
 * @file msgpack-decode
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */

/**
 * msgpack decode module.
 * @module MsgpackDecode
 */

/**
 * decode binary encoded MessagePack v5 (http://msgpack.org/) data
 * @static
 * @param  {Uint8Array} buffer - binary encoded MessagePack data
 * @return {Object|Array|String|Number|Boolean|null} decoded Messagepack data
 */
function decodeMsgpack(buffer) {
  // Loosely based on
  // The MIT License (MIT)
  // Copyright (c) 2013 Tim Caswell <tim@creationix.com>
  // https://github.com/creationix/msgpack-js
  var offset = 0;
  var dataView = new DataView(buffer.buffer);

  /**
   * decode all key-value pairs of a map into an object
   * @param  {Integer} length - number of key-value pairs
   * @return {Object} decoded map
   */
  function map(length) {
    var value = {};
    for (var i = 0; i < length; i++) {
      var key = parse();
      value[key] = parse();
    }
    return value;
  }

  /**
   * decode binary array
   * @param  {Integer} length - number of elements in the array
   * @return {Uint8Array} decoded array
   */
  function bin(length) {
    var value = buffer.subarray(offset, offset + length);
    offset += length;
    return value;
  }

  /**
   * decode string
   * @param  {Integer} length - number string characters
   * @return {String} decoded string
   */
  function str(length) {
    var array = buffer.subarray(offset, offset + length);
    offset += length;
    // limit number of arguments to String.fromCharCode to something
    // browsers can handle, see http://stackoverflow.com/a/22747272
    var chunkSize = 0xffff;
    if(length > chunkSize){
      var c = [];
      for(var i = 0; i < array.length; i += chunkSize) {
        c.push(String.fromCharCode.apply(
          null, array.subarray(i, i + chunkSize)
        ));
      }
      return c.join("");
    }else {
      return String.fromCharCode.apply(null, array);
    }
  }

  /**
   * decode array
   * @param  {Integer} length - number of array elements
   * @return {Array} decoded array
   */
  function array(length) {
    var value = new Array(length);
    for (var i = 0; i < length; i++) {
      value[i] = parse();
    }
    return value;
  }

  /**
   * recursively parse the MessagePack data
   * @return {Object|Array|String|Number|Boolean|null} decoded MessagePack data
   */
  function parse() {
    var type = buffer[offset];
    var value, length;
    // Positive FixInt
    if ((type & 0x80) === 0x00) {
      offset++;
      return type;
    }
    // FixMap
    if ((type & 0xf0) === 0x80) {
      length = type & 0x0f;
      offset++;
      return map(length);
    }
    // FixArray
    if ((type & 0xf0) === 0x90) {
      length = type & 0x0f;
      offset++;
      return array(length);
    }
    // FixStr
    if ((type & 0xe0) === 0xa0) {
      length = type & 0x1f;
      offset++;
      return str(length);
    }
    // Negative FixInt
    if ((type & 0xe0) === 0xe0) {
      value = dataView.getInt8(offset);
      offset++;
      return value;
    }
    switch (type) {
    // nil
    case 0xc0:
      offset++;
      return null;
    // 0xc1: (never used, could be employed for padding)
    // false
    case 0xc2:
      offset++;
      return false;
    // true
    case 0xc3:
      offset++;
      return true;
    // bin 8
    case 0xc4:
      length = dataView.getUint8(offset + 1);
      offset += 2;
      return bin(length);
    // bin 16
    case 0xc5:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return bin(length);
    // bin 32
    case 0xc6:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return bin(length);
    // // ext 8
    // case 0xc7:
    //   length = dataView.getUint8(offset + 1);
    //   extType = dataView.getUint8(offset + 2);
    //   offset += 3;
    //   return [extType, bin(length)];
    // // ext 16
    // case 0xc8:
    //   length = dataView.getUint16(offset + 1);
    //   extType = dataView.getUint8(offset + 3);
    //   offset += 4;
    //   return [extType, bin(length)];
    // // ext 32
    // case 0xc9:
    //   length = dataView.getUint32(offset + 1);
    //   extType = dataView.getUint8(offset + 5);
    //   offset += 6;
    //   return [extType, bin(length)];
    // float 32
    case 0xca:
      value = dataView.getFloat32(offset + 1);
      offset += 5;
      return value;
    // float 64
    case 0xcb:
      value = dataView.getFloat64(offset + 1);
      offset += 9;
      return value;
    // uint8
    case 0xcc:
      value = buffer[offset + 1];
      offset += 2;
      return value;
    // uint 16
    case 0xcd:
      value = dataView.getUint16(offset + 1);
      offset += 3;
      return value;
    // uint 32
    case 0xce:
      value = dataView.getUint32(offset + 1);
      offset += 5;
      return value;
    // // uint64
    // case 0xcf:
    //   // FIXME not available/representable in JS
    //   // largest possible int in JS is 2^53
    //   // value = dataView.getUint64(offset + 1);
    //   offset += 9;
    //   return 0;
    // int 8
    case 0xd0:
      value = dataView.getInt8(offset + 1);
      offset += 2;
      return value;
    // int 16
    case 0xd1:
      value = dataView.getInt16(offset + 1);
      offset += 3;
      return value;
    // int 32
    case 0xd2:
      value = dataView.getInt32(offset + 1);
      offset += 5;
      return value;
    // // int 64
    // case 0xd3:
    //   // FIXME not available/representable in JS
    //   // largest possible int in JS is 2^53
    //   // value = dataView.getInt64(offset + 1);
    //   offset += 9;
    //   return 0;

    // // fixext 1
    // case 0xd4:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(1)];
    // // fixext 2
    // case 0xd5:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(2)];
    // // fixext 4
    // case 0xd6:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(4)];
    // // fixext 8
    // case 0xd7:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(8)];
    // // fixext 16
    // case 0xd8:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(16)];
    // str 8
    case 0xd9:
      length = dataView.getUint8(offset + 1);
      offset += 2;
      return str(length);
    // str 16
    case 0xda:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return str(length);
    // str 32
    case 0xdb:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return str(length);
    // array 16
    case 0xdc:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return array(length);
    // array 32
    case 0xdd:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return array(length);
    // map 16:
    case 0xde:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return map(length);
    // map 32
    case 0xdf:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return map(length);
    }

    throw new Error("Unknown type 0x" + type.toString(16));
  }

  // start the recursive parsing
  return parse();
}

/**
 * Fields shared in encoded and decoded mmtf data objects.
 * @typedef {Object} module:MmtfDecode.SharedMmtfData
 * @property {String} mmtfVersion - MMTF specification version
 * @property {String} mmtfProducer - Program that created the file
 * @property {Float[]} [unitCell] - Crystallographic unit cell
 * @property {Float} unitCell.0 - x length
 * @property {Float} unitCell.1 - y length
 * @property {Float} unitCell.2 - z length
 * @property {Float} unitCell.3 - alpha angle
 * @property {Float} unitCell.4 - beta angle
 * @property {Float} unitCell.5 - gamma angle
 * @property {String} [spaceGroup] - Hermann-Mauguin symbol
 * @property {String} [structureId] - Some reference, e.g. a PDB ID
 * @property {String} [title] - Short description
 * @property {String} [depositionDate] - Deposition date in YYYY-MM-DD format
 * @property {String} [releaseDate] - Release date in YYYY-MM-DD format
 * @property {String[]} [experimentalMethods] - Structure determination methods
 * @property {Float} [resolution] - Resolution in Å
 * @property {Float} [rFree] - R-free value
 * @property {Float} [rWork] - R-work value
 * @property {Integer} numBonds - Number of bonds
 * @property {Integer} numAtoms - Number of atoms
 * @property {Integer} numGroups - Number of groups (residues)
 * @property {Integer} numChains - Number of chains
 * @property {Integer} numModels - Number of models
 * @property {Integer[]} chainsPerModel - List of number of chains in each model
 * @property {Integer[]} groupsPerChain - List of number of groups in each chain
 * @property {Entity[]} [entityList] - List of entity objects
 * @property {Integer[]} entityList.chainIndexList - Pointers into chain data fields
 * @property {String} entityList.description - Description of the entity
 * @property {String} entityList.type - Name of the entity type
 * @property {String} entityList.sequence - One letter code sequence
 * @property {Assembly[]} [bioAssemblyList] - List of assembly objects
 * @property {Transform[]} bioAssemblyList.transformList - List of transform objects
 * @property {Integer[]} bioAssemblyList.transformList.chainIndexList - Pointers into chain data fields
 * @property {Float[]} bioAssemblyList.transformList.matrix - 4x4 transformation matrix
 * @property {Array[]} [ncsOperatorList] - List of ncs operator matrices
 * @property {Float[]} ncsOperatorList. - 4x4 transformation matrix
 * @property {GroupType[]} groupList - List of groupType objects
 * @property {Integer[]} groupList.formalChargeList - List of atom formal charges
 * @property {String[]} groupList.elementList - List of elements
 * @property {String[]} groupList.atomNameList - List of atom names
 * @property {Integer[]} groupList.bondAtomList - List of bonded atom indices
 * @property {Integer[]} groupList.bondOrderList - List of bond orders
 * @property {String} groupList.groupName - The name of the group
 * @property {String} groupList.singleLetterCode - The single letter code
 * @property {String} groupList.chemCompType -  The chemical component type
 */

/**
 * Encoded mmtf data object. Also includes the fields from {@link module:MmtfDecode.SharedMmtfData}. See MMTF specification on how they are encoded.
 * @typedef {Object} module:MmtfDecode.EncodedMmtfData
 * @mixes module:MmtfDecode.SharedMmtfData
 * @property {Uint8Array} [bondAtomList] - Encoded bonded atom indices
 * @property {Uint8Array} [bondOrderList] - Encoded bond orders
 * @property {Uint8Array} xCoordBig - Encoded x coordinates in Å, part 1
 * @property {Uint8Array} xCoordSmall - Encoded x coordinates in Å, part 2
 * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
 * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
 * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
 * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
 * @property {Uint8Array} [bFactorBig] - Encoded B-factors in Å^2, part 1
 * @property {Uint8Array} [bFactorSmall] - Encoded B-factors in Å^2, part 2
 * @property {Uint8Array} [atomIdList] - Encoded  atom ids
 * @property {Uint8Array} [altLocList] - Encoded alternate location labels
 * @property {Uint8Array} [occupancyList] - Encoded occupancies
 * @property {Uint8Array} groupIdList - Encoded group ids
 * @property {Uint8Array} groupTypeList - Encoded group types
 * @property {Uint8Array} [secStructList] - Encoded secondary structure codes
 * @property {Uint8Array} [insCodeList] - Encoded insertion codes
 * @property {Uint8Array} [seuenceIdList] - Encoded sequence ids
 * @property {Uint8Array} chainIdList - Encoded chain ids
 * @property {Uint8Array} [chainNameList] - Encoded chain names
 */

/**
 * Decoded mmtf data object. Also includes fields the from {@link module:MmtfDecode.SharedMmtfData}.
 * @typedef {Object} module:MmtfDecode.MmtfData
 * @mixes module:MmtfDecode.SharedMmtfData
 * @property {Int32Array} [bondAtomList] - List of bonded atom indices
 * @property {Uint8Array} [bondOrderList] - List of bond orders
 * @property {Float32Array} xCoordList - List of x coordinates in Å
 * @property {Float32Array} yCoordList - List of y coordinates in Å
 * @property {Float32Array} zCoordList - List of z coordinates in Å
 * @property {Float32Array} [bFactorList] - List of B-factors in Å^2
 * @property {Int32Array} [atomIdList] - List of atom ids
 * @property {Uint8Array} [altLocList] - List of alternate location labels
 * @property {Float32Array} [occupancyList] - List of occupancies
 * @property {Int32Array} groupIdList - List of group ids
 * @property {Int32Array} groupTypeList - List of group types
 * @property {Int8Array} [secStructList] - List of secondary structure codes, encoding
 *    0: pi helix, 1: bend, 2: alpha helix, 3: extended,
 *    4: 3-10 helix, 5: bridge, 6: turn, 7: coil, -1: undefined
 * @property {Uint8Array} [insCodeList] - List of insertion codes
 * @property {Int32Array} [seuenceIdList] - List of sequence ids
 * @property {Uint8Array} chainIdList - List of chain ids
 * @property {Uint8Array} [chainNameList] - List of chain names
 */


/**
 * [performDecoding description]
 * @param  {Integer} bytes [description]
 * @param  {Integer} size  [description]
 * @param  {Uint8Array} param [description]
 * @return {TypedArray}       [description]
 */
function performDecoding( type, bytes, size, param ){

    switch( type ){
        case 1:
            return decodeFloat32( bytes );
        case 2:
            return getInt8View( bytes );
        case 3:
            return decodeInt16( bytes );
        case 4:
            return decodeInt32( bytes );
        case 5:
            // var length = decodeInt32( param )[ 0 ];
            return getUint8View( bytes );  // interpret as string array
        case 6:
            // interpret as char array
            return decodeRun( decodeInt32( bytes ), new Uint8Array( size ) );
        case 7:
            return decodeRun( decodeInt32( bytes ) )
        case 8:
            return decodeDeltaRun( decodeInt32( bytes ) );
        case 9:
            return decodeIntegerRun( decodeInt32( bytes ), decodeInt32( param )[ 0 ] );
        case 10:
            return decodeIntegerDeltaPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
        case 11:
            return decodeInteger( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
        case 12:
            return decodeIntegerPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
        case 13:
            return decodeIntegerPacking( getInt8View( bytes ), decodeInt32( param )[ 0 ] );
        case 14:
            return decodePacking( decodeInt16( bytes ) );
        case 15:
            return decodePacking( getInt8View( bytes ) );
    }

}

/**
 * Decode MMTF fields
 * @static
 * @param  {Object} inputDict - encoded MMTF data
 * @param  {Object} [params] - decoding parameters
 * @param  {String[]} params.ignoreFields - names of optional fields not to decode
 * @return {module:MmtfDecode.MmtfData} mmtfData
 */
function decodeMmtf( inputDict, params ){

    params = params || {};
    var ignoreFields = params.ignoreFields;
    var outputDict = {};

    AllFields.forEach( function( name ){
        var ignore = ignoreFields ? ignoreFields.indexOf( name ) !== -1 : false;
        var data = inputDict[ name ];
        if( !ignore && data !== undefined ){
            if( data instanceof Uint8Array ){
                outputDict[ name ] = performDecoding.apply( null, decodeBytes( data ) );
            }else {
                outputDict[ name ] = data;
            }
        }
    } );

    return outputDict;

}

/**
 * @file Mmtf Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const SstrucMap = {
    '0': 'i'.charCodeAt(0),
    '1': 's'.charCodeAt(0),
    '2': 'h'.charCodeAt(0),
    '3': 'e'.charCodeAt(0),
    '4': 'g'.charCodeAt(0),
    '5': 'b'.charCodeAt(0),
    '6': 't'.charCodeAt(0),
    '7': 'l'.charCodeAt(0),
    '-1': ''.charCodeAt(0) // NA
};
class MmtfParser extends StructureParser {
    get type() { return 'mmtf'; }
    get isBinary() { return true; }
    _parse() {
        // https://github.com/rcsb/mmtf
        if (Debug)
            Log.time('MmtfParser._parse ' + this.name);
        let i, il, j, jl, groupData;
        const s = this.structure;
        const sd = decodeMmtf(decodeMsgpack(this.streamer.data));
        // structure header
        const headerFields = [
            'depositionDate', 'releaseDate', 'resolution',
            'rFree', 'rWork', 'experimentalMethods'
        ];
        headerFields.forEach(function (name) {
            if (sd[name] !== undefined) {
                s.header[name] = sd[name];
            }
        });
        let numBonds, numAtoms, numGroups, numChains, numModels;
        let chainsPerModel;
        s.id = sd.structureId;
        s.title = sd.title;
        s.atomStore.addField('formalCharge', 1, 'int8');
        if (this.firstModelOnly || this.asTrajectory) {
            numModels = 1;
            numChains = sd.chainsPerModel[0];
            numGroups = 0;
            for (i = 0, il = numChains; i < il; ++i) {
                numGroups += sd.groupsPerChain[i];
            }
            numAtoms = 0;
            for (i = 0, il = numGroups; i < il; ++i) {
                groupData = sd.groupList[sd.groupTypeList[i]];
                numAtoms += groupData.atomNameList.length;
            }
            numBonds = sd.numBonds;
            chainsPerModel = [numChains];
        }
        else {
            numBonds = sd.numBonds;
            numAtoms = sd.numAtoms;
            numGroups = sd.numGroups;
            numChains = sd.numChains;
            numModels = sd.numModels;
            chainsPerModel = sd.chainsPerModel;
        }
        numBonds += numGroups; // add numGroups to have space for polymer bonds
        //
        if (this.asTrajectory) {
            for (i = 0, il = sd.numModels; i < il; ++i) {
                const frame = new Float32Array(numAtoms * 3);
                const frameAtomOffset = numAtoms * i;
                for (j = 0; j < numAtoms; ++j) {
                    const j3 = j * 3;
                    const offset = j + frameAtomOffset;
                    frame[j3] = sd.xCoordList[offset];
                    frame[j3 + 1] = sd.yCoordList[offset];
                    frame[j3 + 2] = sd.zCoordList[offset];
                }
                s.frames.push(frame);
            }
        }
        // bondStore
        const bAtomIndex1 = new Uint32Array(numBonds);
        const bAtomIndex2 = new Uint32Array(numBonds);
        const bBondOrder = new Uint8Array(numBonds);
        const aGroupIndex = new Uint32Array(numAtoms);
        const aFormalCharge = new Int8Array(numAtoms);
        const gChainIndex = new Uint32Array(numGroups);
        const gAtomOffset = new Uint32Array(numGroups);
        const gAtomCount = new Uint32Array(numGroups);
        const cModelIndex = new Uint16Array(numChains);
        const cGroupOffset = new Uint32Array(numChains);
        const cGroupCount = new Uint32Array(numChains);
        const mChainOffset = new Uint32Array(numModels);
        const mChainCount = new Uint32Array(numModels);
        // set-up model-chain relations
        let chainOffset = 0;
        for (i = 0, il = numModels; i < il; ++i) {
            const modelChainCount = chainsPerModel[i];
            mChainOffset[i] = chainOffset;
            mChainCount[i] = modelChainCount;
            for (j = 0; j < modelChainCount; ++j) {
                cModelIndex[j + chainOffset] = i;
            }
            chainOffset += modelChainCount;
        }
        // set-up chain-residue relations
        const groupsPerChain = sd.groupsPerChain;
        let groupOffset = 0;
        for (i = 0, il = numChains; i < il; ++i) {
            const chainGroupCount = groupsPerChain[i];
            cGroupOffset[i] = groupOffset;
            cGroupCount[i] = chainGroupCount;
            for (j = 0; j < chainGroupCount; ++j) {
                gChainIndex[j + groupOffset] = i;
            }
            groupOffset += chainGroupCount;
        }
        /// ///
        // get data from group map
        let atomOffset = 0;
        let bondOffset = 0;
        for (i = 0, il = numGroups; i < il; ++i) {
            groupData = sd.groupList[sd.groupTypeList[i]];
            const groupAtomCount = groupData.atomNameList.length;
            const groupFormalChargeList = groupData.formalChargeList;
            const groupBondAtomList = groupData.bondAtomList;
            const groupBondOrderList = groupData.bondOrderList;
            for (j = 0, jl = groupBondOrderList.length; j < jl; ++j) {
                bAtomIndex1[bondOffset] = atomOffset + groupBondAtomList[j * 2];
                bAtomIndex2[bondOffset] = atomOffset + groupBondAtomList[j * 2 + 1];
                bBondOrder[bondOffset] = groupBondOrderList[j];
                bondOffset += 1;
            }
            //
            gAtomOffset[i] = atomOffset;
            gAtomCount[i] = groupAtomCount;
            for (j = 0; j < groupAtomCount; ++j) {
                aGroupIndex[atomOffset] = i;
                aFormalCharge[atomOffset] = groupFormalChargeList[j];
                atomOffset += 1;
            }
        }
        // extra bonds
        const bondAtomList = sd.bondAtomList;
        if (bondAtomList) {
            if (sd.bondOrderList) {
                bBondOrder.set(sd.bondOrderList, bondOffset);
            }
            for (i = 0, il = bondAtomList.length; i < il; i += 2) {
                const atomIndex1 = bondAtomList[i];
                const atomIndex2 = bondAtomList[i + 1];
                if (atomIndex1 < numAtoms && atomIndex2 < numAtoms) {
                    bAtomIndex1[bondOffset] = atomIndex1;
                    bAtomIndex2[bondOffset] = atomIndex2;
                    bondOffset += 1;
                }
            }
        }
        //
        s.bondStore.length = bBondOrder.length;
        s.bondStore.count = bondOffset;
        s.bondStore.atomIndex1 = bAtomIndex1;
        s.bondStore.atomIndex2 = bAtomIndex2;
        s.bondStore.bondOrder = bBondOrder;
        s.atomStore.length = numAtoms;
        s.atomStore.count = numAtoms;
        s.atomStore.residueIndex = aGroupIndex;
        s.atomStore.atomTypeId = new Uint16Array(numAtoms);
        s.atomStore.x = sd.xCoordList.subarray(0, numAtoms);
        s.atomStore.y = sd.yCoordList.subarray(0, numAtoms);
        s.atomStore.z = sd.zCoordList.subarray(0, numAtoms);
        s.atomStore.serial = sd.atomIdList.subarray(0, numAtoms);
        s.atomStore.bfactor = sd.bFactorList.subarray(0, numAtoms);
        s.atomStore.altloc = sd.altLocList.subarray(0, numAtoms);
        s.atomStore.occupancy = sd.occupancyList.subarray(0, numAtoms);
        s.atomStore.formalCharge = aFormalCharge;
        s.residueStore.length = numGroups;
        s.residueStore.count = numGroups;
        s.residueStore.chainIndex = gChainIndex;
        s.residueStore.residueTypeId = sd.groupTypeList;
        s.residueStore.atomOffset = gAtomOffset;
        s.residueStore.atomCount = gAtomCount;
        s.residueStore.resno = sd.groupIdList.subarray(0, numGroups);
        s.residueStore.sstruc = sd.secStructList.subarray(0, numGroups);
        s.residueStore.inscode = sd.insCodeList.subarray(0, numGroups);
        s.chainStore.length = numChains;
        s.chainStore.count = numChains;
        s.chainStore.entityIndex = new Uint16Array(numChains);
        s.chainStore.modelIndex = cModelIndex;
        s.chainStore.residueOffset = cGroupOffset;
        s.chainStore.residueCount = cGroupCount;
        s.chainStore.chainname = sd.chainNameList.subarray(0, numChains * 4);
        s.chainStore.chainid = sd.chainIdList.subarray(0, numChains * 4);
        s.modelStore.length = numModels;
        s.modelStore.count = numModels;
        s.modelStore.chainOffset = mChainOffset;
        s.modelStore.chainCount = mChainCount;
        //
        let groupTypeDict = {};
        for (i = 0, il = sd.groupList.length; i < il; ++i) {
            const groupType = sd.groupList[i];
            const atomTypeIdList = [];
            for (j = 0, jl = groupType.atomNameList.length; j < jl; ++j) {
                const element = groupType.elementList[j].toUpperCase();
                const atomname = groupType.atomNameList[j];
                atomTypeIdList.push(s.atomMap.add(atomname, element));
            }
            const chemCompType = groupType.chemCompType.toUpperCase();
            const hetFlag = ChemCompHetero.includes(chemCompType);
            const numGroupBonds = groupType.bondOrderList.length;
            const atomIndices1 = new Array(numGroupBonds);
            const atomIndices2 = new Array(numGroupBonds);
            for (j = 0; j < numGroupBonds; ++j) {
                atomIndices1[j] = groupType.bondAtomList[j * 2];
                atomIndices2[j] = groupType.bondAtomList[j * 2 + 1];
            }
            const bonds = {
                atomIndices1: atomIndices1,
                atomIndices2: atomIndices2,
                bondOrders: groupType.bondOrderList
            };
            groupTypeDict[i] = s.residueMap.add(groupType.groupName, atomTypeIdList, hetFlag, chemCompType, bonds);
        }
        for (i = 0, il = numGroups; i < il; ++i) {
            s.residueStore.residueTypeId[i] = groupTypeDict[s.residueStore.residueTypeId[i]];
        }
        for (i = 0, il = s.atomStore.count; i < il; ++i) {
            const residueIndex = s.atomStore.residueIndex[i];
            const residueType = s.residueMap.list[s.residueStore.residueTypeId[residueIndex]];
            const resAtomOffset = s.residueStore.atomOffset[residueIndex];
            s.atomStore.atomTypeId[i] = residueType.atomTypeIdList[i - resAtomOffset];
        }
        if (sd.secStructList) {
            const secStructLength = sd.secStructList.length;
            for (i = 0, il = s.residueStore.count; i < il; ++i) {
                // with ( i % secStructLength ) secStruct entries are reused
                const sstruc = SstrucMap[s.residueStore.sstruc[i % secStructLength]];
                if (sstruc !== undefined)
                    s.residueStore.sstruc[i] = sstruc;
            }
        }
        //
        if (sd.entityList) {
            sd.entityList.forEach(function (e, i) {
                s.entityList[i] = new Entity(s, i, e.description, e.type, e.chainIndexList);
            });
        }
        if (sd.bioAssemblyList) {
            sd.bioAssemblyList.forEach(function (_assembly, k) {
                const id = k + 1;
                const assembly = new Assembly('' + id);
                s.biomolDict['BU' + id] = assembly;
                let chainToPart = {};
                _assembly.transformList.forEach(function (_transform) {
                    const matrix = new Matrix4().fromArray(_transform.matrix).transpose();
                    const chainList = _transform.chainIndexList.map(function (chainIndex) {
                        let chainname = '';
                        for (let k = 0; k < 4; ++k) {
                            const code = sd.chainNameList[chainIndex * 4 + k];
                            if (code) {
                                chainname += String.fromCharCode(code);
                            }
                            else {
                                break;
                            }
                        }
                        return chainname;
                    });
                    const part = chainToPart[chainList.toString()];
                    if (part) {
                        part.matrixList.push(matrix);
                    }
                    else {
                        chainToPart[chainList.toString()] = assembly.addPart([matrix], chainList);
                    }
                });
            });
        }
        if (sd.ncsOperatorList) {
            const ncsName = 'NCS';
            const ncsAssembly = new Assembly(ncsName);
            const ncsPart = ncsAssembly.addPart();
            sd.ncsOperatorList.forEach(function (_operator) {
                const matrix = new Matrix4().fromArray(_operator).transpose();
                ncsPart.matrixList.push(matrix);
            });
            if (ncsPart.matrixList.length > 0) {
                s.biomolDict[ncsName] = ncsAssembly;
            }
        }
        const uc = sd.unitCell;
        if (uc && Array.isArray(uc) && uc[0]) {
            s.unitcell = new Unitcell({
                a: uc[0],
                b: uc[1],
                c: uc[2],
                alpha: uc[3],
                beta: uc[4],
                gamma: uc[5],
                spacegroup: sd.spaceGroup
            });
        }
        else {
            s.unitcell = undefined;
        }
        // calculate backbone bonds
        calculateBondsBetween(s, true);
        // calculate rung bonds
        calculateBondsWithin(s, true);
        s.finalizeAtoms();
        s.finalizeBonds();
        buildUnitcellAssembly(s);
        if (Debug)
            Log.timeEnd('MmtfParser._parse ' + this.name);
    }
}
ParserRegistry.add('mmtf', MmtfParser);

/**
 * @file Mol2 Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reWhitespace$5 = /\s+/;
const bondTypes = {
    '1': 1,
    '2': 2,
    '3': 3,
    'am': 1,
    'ar': 1,
    'du': 1,
    'un': 1,
    'nc': 0 // not connected
};
class Mol2Parser extends StructureParser {
    get type() { return 'mol2'; }
    _parse() {
        // http://paulbourke.net/dataformats/mol2/
        if (Debug)
            Log.time('Mol2Parser._parse ' + this.name);
        const s = this.structure;
        const sb = this.structureBuilder;
        const firstModelOnly = this.firstModelOnly;
        const asTrajectory = this.asTrajectory;
        const frames = s.frames;
        let doFrames = false;
        let currentFrame, currentCoord;
        const atomMap = s.atomMap;
        const atomStore = s.atomStore;
        atomStore.resize(Math.round(this.streamer.data.length / 60));
        atomStore.addField('partialCharge', 1, 'float32');
        let idx = 0;
        let moleculeLineNo = 0;
        let modelAtomIdxStart = 0;
        let modelIdx = -1;
        let numAtoms = 0;
        let currentRecordType = 0;
        let moleculeRecordType = 1;
        let atomRecordType = 2;
        let bondRecordType = 3;
        const ap1 = s.getAtomProxy();
        const ap2 = s.getAtomProxy();
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i].trim();
                if (line === '' || line[0] === '#')
                    continue;
                if (line[0] === '@') {
                    if (line === '@<TRIPOS>MOLECULE') {
                        currentRecordType = moleculeRecordType;
                        moleculeLineNo = 0;
                        ++modelIdx;
                    }
                    else if (line === '@<TRIPOS>ATOM') {
                        currentRecordType = atomRecordType;
                        modelAtomIdxStart = atomStore.count;
                        if (asTrajectory) {
                            currentCoord = 0;
                            currentFrame = new Float32Array(numAtoms * 3);
                            frames.push(currentFrame);
                            if (modelIdx > 0)
                                doFrames = true;
                        }
                    }
                    else if (line === '@<TRIPOS>BOND') {
                        currentRecordType = bondRecordType;
                    }
                    else {
                        currentRecordType = 0;
                    }
                }
                else if (currentRecordType === moleculeRecordType) {
                    if (moleculeLineNo === 0) {
                        s.title = line;
                        s.id = line;
                    }
                    else if (moleculeLineNo === 1) {
                        const ls = line.split(reWhitespace$5);
                        numAtoms = parseInt(ls[0]);
                        // num_atoms [num_bonds [num_subst [num_feat [num_sets]]]]
                    }
                    else ;
                    ++moleculeLineNo;
                }
                else if (currentRecordType === atomRecordType) {
                    const ls = line.split(reWhitespace$5);
                    if (firstModelOnly && modelIdx > 0)
                        continue;
                    const x = parseFloat(ls[2]);
                    const y = parseFloat(ls[3]);
                    const z = parseFloat(ls[4]);
                    if (asTrajectory) {
                        const j = currentCoord * 3;
                        currentFrame[j + 0] = x;
                        currentFrame[j + 1] = y;
                        currentFrame[j + 2] = z;
                        currentCoord += 1;
                        if (doFrames)
                            continue;
                    }
                    const serial = ls[0];
                    const atomname = ls[1];
                    const element = ls[5].split('.')[0];
                    const resno = ls[6] ? parseInt(ls[6]) : 1;
                    const resname = ls[7] ? ls[7] : '';
                    const partialCharge = ls[8] ? parseFloat(ls[8]) : 0.0;
                    atomStore.growIfFull();
                    atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                    atomStore.x[idx] = x;
                    atomStore.y[idx] = y;
                    atomStore.z[idx] = z;
                    atomStore.serial[idx] = +serial;
                    atomStore.partialCharge[idx] = partialCharge;
                    sb.addAtom(modelIdx, '', '', resname, resno, true);
                    idx += 1;
                }
                else if (currentRecordType === bondRecordType) {
                    if (firstModelOnly && modelIdx > 0)
                        continue;
                    if (asTrajectory && modelIdx > 0)
                        continue;
                    const ls = line.split(reWhitespace$5);
                    // ls[ 0 ] is bond id
                    ap1.index = parseInt(ls[1]) - 1 + modelAtomIdxStart;
                    ap2.index = parseInt(ls[2]) - 1 + modelAtomIdxStart;
                    const order = bondTypes[ls[3]];
                    s.bondStore.addBond(ap1, ap2, order);
                }
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        sb.finalize();
        s.finalizeAtoms();
        calculateChainnames(s);
        calculateBondsWithin(s, true);
        calculateBondsBetween(s, true);
        s.finalizeBonds();
        assignResidueTypeBonds(s);
        calculateSecondaryStructure(s);
        if (Debug)
            Log.timeEnd('Mol2Parser._parse ' + this.name);
    }
}
ParserRegistry.add('mol2', Mol2Parser);

/**
 * @file Pdbqt Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// autodock variant of PDB format with
// - atom partial charges (empty column in pdb format)
// - atom types (bfactor column in pdb format)
// http://autodock.scripps.edu/faqs-help/faq/what-is-the-format-of-a-pdbqt-file
class PdbqtParser extends PdbParser {
    get type() { return 'pdbqt'; }
}
ParserRegistry.add('pdbqt', PdbqtParser);

/**
 * @file Pqr Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// http://www.poissonboltzmann.org/docs/file-format-info/
class PqrParser extends PdbParser {
    get type() { return 'pqr'; }
}
ParserRegistry.add('pqr', PqrParser);

/**
 * @file Sdf Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reItem = /> +<(.+)>/;
class SdfParser extends StructureParser {
    get type() { return 'sdf'; }
    _parse() {
        // https://en.wikipedia.org/wiki/Chemical_table_file#SDF
        // http://download.accelrys.com/freeware/ctfile-formats/ctfile-formats.zip
        if (Debug)
            Log.time('SdfParser._parse ' + this.name);
        const s = this.structure;
        const sb = this.structureBuilder;
        const firstModelOnly = this.firstModelOnly;
        const asTrajectory = this.asTrajectory;
        const headerLines = this.streamer.peekLines(2);
        s.id = headerLines[0].trim();
        s.title = headerLines[1].trim();
        const frames = s.frames;
        let doFrames = false;
        let currentFrame, currentCoord;
        const atomMap = s.atomMap;
        const atomStore = s.atomStore;
        atomStore.resize(Math.round(this.streamer.data.length / 50));
        atomStore.addField('formalCharge', 1, 'int8');
        const ap1 = s.getAtomProxy();
        const ap2 = s.getAtomProxy();
        let idx = 0;
        let lineNo = 0; // for V2000: current line number in currently parsed Mol file
        let modelIdx = 0;
        let modelAtomIdxStart = 0;
        const sdfData = [];
        let currentItem = false;
        let currentData = {};
        let mItem;
        s.extraData.sdf = sdfData;
        let atomCount, bondCount, atomStart, atomEnd, bondStart, bondEnd, x, y, z, atomname, element, atomindex, order;
        let isV3000 = false, isAtomBlock = false, isBondBlock = false;
        let tokens = [], acc = [];
        const atomindexToStoreindex = new Map();
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i];
                if (isV3000 && line) {
                    tokens = line.substring(7).split(' ');
                    // Entity properties may extend over multiple lines (hanging line finishes with '-')
                    // Tokens are accumulated to be processed at the same time for a given entity
                    if (acc.length) {
                        tokens = [...acc, ...tokens];
                        acc = [];
                    }
                    if (tokens[tokens.length - 1] === '-') {
                        tokens.pop();
                        acc = tokens;
                        continue;
                    }
                }
                if (line.substr(0, 4) === '$$$$') {
                    lineNo = -1;
                    ++modelIdx;
                    modelAtomIdxStart = atomStore.count;
                    sdfData.push(currentData);
                    currentData = {};
                    currentItem = false;
                    isV3000 = false;
                }
                else if (lineNo === 3) {
                    isV3000 = line.indexOf(' V3000') > -1;
                    if (isV3000) {
                        atomindexToStoreindex.clear();
                    }
                    else {
                        atomCount = parseInt(line.substr(0, 3));
                        bondCount = parseInt(line.substr(3, 3));
                        atomStart = 4;
                        atomEnd = atomStart + atomCount;
                        bondStart = atomEnd;
                        bondEnd = bondStart + bondCount;
                        if (asTrajectory) {
                            currentCoord = 0;
                            currentFrame = new Float32Array(atomCount * 3);
                            frames.push(currentFrame);
                            if (modelIdx > 0)
                                doFrames = true;
                        }
                    }
                }
                else if (isV3000 && tokens[0] === 'COUNTS') {
                    atomCount = parseInt(tokens[1]);
                    if (asTrajectory) {
                        currentCoord = 0;
                        currentFrame = new Float32Array(atomCount * 3);
                        frames.push(currentFrame);
                        if (modelIdx > 0)
                            doFrames = true;
                    }
                }
                else if (isV3000 && tokens.length == 2) {
                    if (tokens[1] === 'ATOM') {
                        if (tokens[0] === 'BEGIN')
                            isAtomBlock = true;
                        else if (tokens[0] === 'END')
                            isAtomBlock = false;
                    }
                    else if (tokens[1] === 'BOND') {
                        if (tokens[0] === 'BEGIN')
                            isBondBlock = true;
                        else if (tokens[0] === 'END')
                            isBondBlock = false;
                    }
                }
                else if (isAtomBlock
                    || (!isV3000 && lineNo >= atomStart && lineNo < atomEnd)) {
                    if (firstModelOnly && modelIdx > 0)
                        continue;
                    let charge = 0;
                    if (isV3000) {
                        x = parseFloat(tokens[2]);
                        y = parseFloat(tokens[3]);
                        z = parseFloat(tokens[4]);
                        element = tokens[1];
                        atomindex = parseInt(tokens[0]);
                        atomindexToStoreindex.set(atomindex, idx);
                        atomname = element + atomindex;
                        if (tokens.length > 6) {
                            let chgTok = tokens.slice(6).find(t => t.indexOf('CHG=') === 0);
                            if (chgTok) {
                                charge = parseInt(chgTok.substring(4));
                            }
                        }
                    }
                    else {
                        x = parseFloat(line.substr(0, 10));
                        y = parseFloat(line.substr(10, 10));
                        z = parseFloat(line.substr(20, 10));
                        element = line.substr(31, 3).trim();
                        atomname = element + (idx - modelAtomIdxStart + 1);
                    }
                    if (asTrajectory) {
                        const j = currentCoord * 3;
                        currentFrame[j + 0] = x;
                        currentFrame[j + 1] = y;
                        currentFrame[j + 2] = z;
                        currentCoord += 1;
                        if (doFrames)
                            continue;
                    }
                    atomStore.growIfFull();
                    atomStore.atomTypeId[idx] = atomMap.add(atomname, element);
                    atomStore.x[idx] = x;
                    atomStore.y[idx] = y;
                    atomStore.z[idx] = z;
                    atomStore.serial[idx] = isV3000 ? atomindex : idx;
                    atomStore.formalCharge[idx] = charge;
                    sb.addAtom(modelIdx, '', '', 'HET', 1, true);
                    idx += 1;
                }
                else if (isBondBlock
                    || (!isV3000 && lineNo >= bondStart && lineNo < bondEnd)) {
                    if (firstModelOnly && modelIdx > 0)
                        continue;
                    if (asTrajectory && modelIdx > 0)
                        continue;
                    if (isV3000) {
                        ap1.index = atomindexToStoreindex.get(parseInt(tokens[2]));
                        ap2.index = atomindexToStoreindex.get(parseInt(tokens[3]));
                        order = parseInt(tokens[1]);
                    }
                    else {
                        ap1.index = parseInt(line.substr(0, 3)) - 1 + modelAtomIdxStart;
                        ap2.index = parseInt(line.substr(3, 3)) - 1 + modelAtomIdxStart;
                        order = parseInt(line.substr(6, 3));
                    }
                    s.bondStore.addBond(ap1, ap2, order);
                }
                else if (line.substr(0, 6) === 'M  CHG') {
                    const chargeCount = parseInt(line.substr(6, 3));
                    for (let ci = 0, coffset = 10; ci < chargeCount; ++ci, coffset += 8) {
                        const aToken = parseInt(line.substr(coffset, 3));
                        const atomIdx = aToken - 1 + modelAtomIdxStart;
                        const cToken = parseInt(line.substr(coffset + 4, 3));
                        atomStore.formalCharge[atomIdx] = cToken;
                    }
                    // eslint-disable-next-line no-cond-assign
                }
                else if (line.charAt(0) === '>' && (mItem = line.match(reItem))) {
                    currentItem = mItem[1];
                    currentData[currentItem] = [];
                }
                else if (currentItem !== false && line) {
                    currentData[currentItem].push(line);
                }
                ++lineNo;
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        sb.finalize();
        s.finalizeAtoms();
        s.finalizeBonds();
        assignResidueTypeBonds(s);
        if (Debug)
            Log.timeEnd('SdfParser._parse ' + this.name);
    }
    _postProcess() {
        assignResidueTypeBonds(this.structure);
    }
}
ParserRegistry.add('sdf', SdfParser);
ParserRegistry.add('sd', SdfParser);
ParserRegistry.add('mol', SdfParser);

/**
 * @file Prmtop Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const amberChargeUnitFactor = 18.2223;
function parseIntSubstr(line, start, length) {
    return parseInt(line.substr(start, length).trim());
}
class PrmtopParser extends StructureParser {
    get type() { return 'prmtop'; }
    _parse() {
        // http://ambermd.org/prmtop.pdf
        // http://ambermd.org/formats.html#topology
        if (Debug)
            Log.time('PrmtopParser._parse ' + this.name);
        const s = this.structure;
        const sb = this.structureBuilder;
        //
        const atomMap = s.atomMap;
        const atomStore = s.atomStore;
        atomStore.addField('partialCharge', 1, 'float32');
        atomStore.addField('radius', 1, 'float32');
        const title = [];
        const pointersDict = {};
        const pointers = [
            'NATOM', 'NTYPES', 'NBONH', 'MBONA', 'NTHETH', 'MTHETA',
            'NPHIH', 'MPHIA', 'NHPARM', 'NPARM', 'NNB', 'NRES',
            'NBONA', 'NTHETA', 'NPHIA', 'NUMBND', 'NUMANG', 'NPTRA',
            'NATYP', 'NPHB', 'IFPERT', 'NBPER', 'NGPER', 'NDPER',
            'MBPER', 'MGPER', 'MDPER', 'IFBOX', 'NMXRS', 'IFCAP',
            'NUMEXTRA', 'NCOPY'
        ];
        pointers.forEach(name => { pointersDict[name] = 0; });
        let atomNames;
        let charges;
        let radii;
        let bAtomIndex1;
        let bAtomIndex2;
        let bBondOrder = new Uint8Array(0);
        let residueLabels;
        let residuePointers;
        let mode;
        // let currentFormat
        let curIdx;
        let bondIdx;
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i];
                const lt = line.trim();
                if (!lt) {
                    continue;
                }
                else if (line.startsWith('%FORMAT')) ;
                else if (line.startsWith('%FLAG')) {
                    const flag = line.substr(5).trim();
                    curIdx = 0;
                    if (flag === 'TITLE') {
                        mode = 0 /* Mode.Title */;
                    }
                    else if (flag === 'POINTERS') {
                        mode = 1 /* Mode.Pointers */;
                    }
                    else if (flag === 'ATOM_NAME') {
                        mode = 2 /* Mode.AtomName */;
                    }
                    else if (flag === 'CHARGE') {
                        mode = 3 /* Mode.Charge */;
                    }
                    else if (flag === 'MASS') {
                        mode = 4 /* Mode.Mass */;
                    }
                    else if (flag === 'RESIDUE_LABEL') {
                        mode = 5 /* Mode.ResidueLabel */;
                    }
                    else if (flag === 'RESIDUE_POINTER') {
                        mode = 6 /* Mode.ResiduePointer */;
                    }
                    else if (flag === 'BONDS_INC_HYDROGEN') {
                        bondIdx = 0;
                        mode = 7 /* Mode.BondsIncHydrogen */;
                    }
                    else if (flag === 'BONDS_WITHOUT_HYDROGEN') {
                        bondIdx = pointersDict['NBONH'];
                        mode = 8 /* Mode.BondsWithoutHydrogen */;
                    }
                    else if (flag === 'RADII') {
                        mode = 9 /* Mode.Radii */;
                    }
                    else {
                        mode = undefined;
                    }
                }
                else if (mode === 0 /* Mode.Title */) {
                    title.push(lt);
                }
                else if (mode === 1 /* Mode.Pointers */) {
                    const n = Math.min(curIdx + 10, 32);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        pointersDict[pointers[curIdx]] = parseInt(line.substr(i * 8, 8).trim());
                    }
                    atomNames = new Array(pointersDict.NATOM);
                    charges = new Float32Array(pointersDict.NATOM);
                    radii = new Float32Array(pointersDict.NATOM);
                    atomStore.resize(pointersDict.NATOM);
                    const bondCount = pointersDict.NBONH + pointersDict.MBONA;
                    bAtomIndex1 = new Uint32Array(bondCount);
                    bAtomIndex2 = new Uint32Array(bondCount);
                    bBondOrder = new Uint8Array(bondCount);
                    residueLabels = new Array(pointersDict.NRES);
                    residuePointers = new Uint32Array(pointersDict.NRES);
                }
                else if (mode === 2 /* Mode.AtomName */) {
                    const n = Math.min(curIdx + 20, pointersDict.NATOM);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        atomNames[curIdx] = line.substr(i * 4, 4).trim();
                    }
                }
                else if (mode === 3 /* Mode.Charge */) {
                    const n = Math.min(curIdx + 5, pointersDict.NATOM);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        charges[curIdx] = parseFloat(line.substr(i * 16, 16)) / amberChargeUnitFactor;
                    }
                }
                else if (mode === 4 /* Mode.Mass */) ;
                else if (mode === 5 /* Mode.ResidueLabel */) {
                    const n = Math.min(curIdx + 20, pointersDict.NRES);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        residueLabels[curIdx] = line.substr(i * 4, 4).trim();
                    }
                }
                else if (mode === 6 /* Mode.ResiduePointer */) {
                    const n = Math.min(curIdx + 10, pointersDict.NRES);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        residuePointers[curIdx] = parseIntSubstr(line, i * 8, 8);
                    }
                }
                else if (mode === 7 /* Mode.BondsIncHydrogen */) {
                    const n = Math.min(curIdx + 10, pointersDict.NBONH * 3);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        const r = curIdx % 3;
                        if (r === 0) {
                            bAtomIndex1[bondIdx] = parseIntSubstr(line, i * 8, 8) / 3;
                        }
                        if (r === 1) {
                            bAtomIndex2[bondIdx] = parseIntSubstr(line, i * 8, 8) / 3;
                            bBondOrder[bondIdx] = 1;
                            ++bondIdx;
                        }
                    }
                }
                else if (mode === 8 /* Mode.BondsWithoutHydrogen */) {
                    const n = Math.min(curIdx + 10, pointersDict.MBONA * 3);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        const r = curIdx % 3;
                        if (r === 0) {
                            bAtomIndex1[bondIdx] = parseIntSubstr(line, i * 8, 8) / 3;
                        }
                        if (r === 1) {
                            bAtomIndex2[bondIdx] = parseIntSubstr(line, i * 8, 8) / 3;
                            bBondOrder[bondIdx] = 1;
                            ++bondIdx;
                        }
                    }
                }
                else if (mode === 9 /* Mode.Radii */) {
                    const n = Math.min(curIdx + 5, pointersDict.NATOM);
                    for (let i = 0; curIdx < n; ++i, ++curIdx) {
                        radii[curIdx] = parseFloat(line.substr(i * 16, 16));
                    }
                }
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        s.title = title.join(' ');
        const atomCount = pointersDict.NATOM;
        let curResIdx = 0;
        let curResname = residueLabels[0];
        let curResno = 1;
        for (let i = 0; i < atomCount; ++i) {
            if (i + 1 === residuePointers[curResIdx + 1]) {
                ++curResIdx;
                curResname = residueLabels[curResIdx];
                curResno = curResIdx + 1;
            }
            atomStore.atomTypeId[i] = atomMap.add(atomNames[i]);
            atomStore.serial[i] = i + 1;
            sb.addAtom(0, '', '', curResname, curResno, false);
        }
        atomStore.partialCharge.set(charges);
        atomStore.radius.set(radii);
        s.bondStore.length = bBondOrder.length;
        s.bondStore.count = bBondOrder.length;
        s.bondStore.atomIndex1 = bAtomIndex1;
        s.bondStore.atomIndex2 = bAtomIndex2;
        s.bondStore.bondOrder = bBondOrder;
        sb.finalize();
        s.finalizeAtoms();
        s.finalizeBonds();
        calculateBondsWithin(s, true);
        calculateBondsBetween(s, true, true);
        calculateChainnames(s, true);
        assignResidueTypeBonds(s);
        if (Debug)
            Log.timeEnd('PrmtopParser._parse ' + this.name);
    }
}
ParserRegistry.add('prmtop', PrmtopParser);
ParserRegistry.add('parm7', PrmtopParser);

/**
 * @file Psf Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const TitleMode = 1;
const AtomMode = 2;
const BondMode = 3;
const AngleMode = 4;
const DihedralMode = 5;
const ImproperMode = 6;
const reWhitespace$4 = /\s+/;
const reTitle = /(^\*|REMARK)*/;
class PsfParser extends StructureParser {
    get type() { return 'psf'; }
    _parse() {
        // http://www.ks.uiuc.edu/Training/Tutorials/namd/namd-tutorial-unix-html/node23.html
        if (Debug)
            Log.time('PsfParser._parse ' + this.name);
        const s = this.structure;
        const sb = this.structureBuilder;
        //
        const atomMap = s.atomMap;
        const atomStore = s.atomStore;
        atomStore.addField('partialCharge', 1, 'float32');
        const title = [];
        let mode;
        let chainid;
        let lastSegid;
        let idx = 0;
        let chainIdx = 0;
        let bondIdx = 0;
        let bAtomIndex1, bAtomIndex2, bBondOrder;
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i].trim();
                if (!line) {
                    mode = undefined;
                    continue;
                }
                if (mode === AtomMode) {
                    const ls = line.split(reWhitespace$4);
                    const serial = parseInt(ls[0]);
                    const segid = ls[1];
                    const resno = parseInt(ls[2]);
                    const resname = ls[3];
                    const atomname = ls[4];
                    const charge = parseFloat(ls[6]);
                    if (segid !== lastSegid) {
                        chainid = getChainname(chainIdx);
                        ++chainIdx;
                    }
                    atomStore.growIfFull();
                    atomStore.atomTypeId[idx] = atomMap.add(atomname);
                    atomStore.serial[idx] = serial;
                    atomStore.partialCharge[idx] = charge;
                    sb.addAtom(0, chainid, chainid, resname, resno, false);
                    idx += 1;
                    lastSegid = segid;
                }
                else if (mode === BondMode) {
                    const ls = line.split(reWhitespace$4);
                    for (let j = 0, m = ls.length; j < m; j += 2) {
                        bAtomIndex1[bondIdx] = parseInt(ls[j]) - 1;
                        bAtomIndex2[bondIdx] = parseInt(ls[j + 1]) - 1;
                        bBondOrder[bondIdx] = 1;
                        bondIdx += 1;
                    }
                }
                else if (mode === TitleMode) {
                    title.push(line.replace(reTitle, '').trim());
                }
                else if (mode === AngleMode) ;
                else if (mode === DihedralMode) ;
                else if (mode === ImproperMode) ;
                else if (line.includes('!NATOM')) {
                    mode = AtomMode;
                    const numAtoms = parseInt(line.split(reWhitespace$4)[0]);
                    atomStore.resize(numAtoms);
                }
                else if (line.includes('!NBOND')) {
                    mode = BondMode;
                    const numBonds = parseInt(line.split(reWhitespace$4)[0]);
                    bAtomIndex1 = new Uint32Array(numBonds);
                    bAtomIndex2 = new Uint32Array(numBonds);
                    bBondOrder = new Uint8Array(numBonds);
                }
                else if (line.includes('!NTITLE')) {
                    mode = TitleMode;
                }
                else if (line.includes('!NTHETA')) {
                    mode = AngleMode;
                }
                else if (line.includes('!NPHI')) {
                    mode = DihedralMode;
                }
                else if (line.includes('!NIMPHI')) {
                    mode = ImproperMode;
                }
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        s.title = title.join(' ');
        s.bondStore.length = bBondOrder.length;
        s.bondStore.count = bondIdx;
        s.bondStore.atomIndex1 = bAtomIndex1;
        s.bondStore.atomIndex2 = bAtomIndex2;
        s.bondStore.bondOrder = bBondOrder;
        sb.finalize();
        s.finalizeAtoms();
        s.finalizeBonds();
        calculateBondsWithin(s, true);
        calculateBondsBetween(s, true, true);
        assignResidueTypeBonds(s);
        if (Debug)
            Log.timeEnd('PsfParser._parse ' + this.name);
    }
}
ParserRegistry.add('psf', PsfParser);

/**
 * @file Top Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reField = /\[ (.+) \]/;
const reWhitespace$3 = /\s+/;
class TopParser extends StructureParser {
    get type() { return 'top'; }
    _parse() {
        // http://manual.gromacs.org/online/top.html
        if (Debug)
            Log.time('TopParser._parse ' + this.name);
        const s = this.structure;
        const sb = this.structureBuilder;
        //
        const atomMap = s.atomMap;
        const bondStore = s.bondStore;
        const atomStore = s.atomStore;
        atomStore.addField('partialCharge', 1, 'float32');
        const molecules = [];
        const moleculetypeDict = {};
        let currentMoleculetype;
        let mode;
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i];
                let lt = line.trim();
                if (!lt || lt[0] === '*' || lt[0] === ';') {
                    continue;
                }
                if (lt.startsWith('#include')) {
                    throw new Error('TopParser: #include statements not allowed');
                }
                const fieldMatch = line.match(reField);
                if (fieldMatch !== null) {
                    const name = fieldMatch[1];
                    if (name === 'moleculetype') {
                        mode = 2 /* Mode.Moleculetype */;
                        currentMoleculetype = {
                            atoms: [],
                            bonds: []
                        };
                    }
                    else if (name === 'atoms') {
                        mode = 3 /* Mode.Atoms */;
                    }
                    else if (name === 'bonds') {
                        mode = 4 /* Mode.Bonds */;
                    }
                    else if (name === 'system') {
                        mode = 0 /* Mode.System */;
                    }
                    else if (name === 'molecules') {
                        mode = 1 /* Mode.Molecules */;
                    }
                    else {
                        mode = undefined;
                    }
                    continue;
                }
                const cIdx = lt.indexOf(';');
                if (cIdx !== -1) {
                    lt = lt.substring(0, cIdx).trim();
                }
                if (mode === 2 /* Mode.Moleculetype */) {
                    const molName = lt.split(reWhitespace$3)[0];
                    moleculetypeDict[molName] = currentMoleculetype;
                }
                else if (mode === 3 /* Mode.Atoms */) {
                    const ls = lt.split(reWhitespace$3);
                    currentMoleculetype.atoms.push([
                        parseInt(ls[2]),
                        ls[3],
                        ls[4],
                        parseFloat(ls[6]) // charge
                    ]);
                }
                else if (mode === 4 /* Mode.Bonds */) {
                    const ls = lt.split(reWhitespace$3);
                    currentMoleculetype.bonds.push([
                        parseInt(ls[0]),
                        parseInt(ls[1]) // aj
                    ]);
                }
                else if (mode === 0 /* Mode.System */) {
                    s.title = lt;
                }
                else if (mode === 1 /* Mode.Molecules */) {
                    const ls = lt.split(reWhitespace$3);
                    molecules.push([
                        ls[0],
                        parseInt(ls[1]) // count
                    ]);
                }
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        let atomCount = 0;
        let bondCount = 0;
        molecules.forEach(function (val) {
            const [name, molCount] = val;
            const molType = moleculetypeDict[name];
            atomCount += molCount * molType.atoms.length;
            bondCount += molCount * molType.bonds.length;
        });
        atomStore.resize(atomCount);
        bondStore.resize(bondCount);
        let atomIdx = 0;
        let resIdx = 0;
        let chainidIdx = 0;
        let chainnameIdx = 0;
        let bondIdx = 0;
        let atomOffset = 0;
        let lastResno;
        molecules.forEach(function (val) {
            const [name, molCount] = val;
            const molType = moleculetypeDict[name];
            const chainname = getChainname(chainnameIdx);
            for (let i = 0; i < molCount; ++i) {
                lastResno = -1;
                const chainid = WaterNames.includes(name) ? chainname : getChainname(chainidIdx);
                molType.atoms.forEach(function (atomData) {
                    const [resno, resname, atomname, charge] = atomData;
                    if (resno !== lastResno) {
                        ++resIdx;
                    }
                    atomStore.atomTypeId[atomIdx] = atomMap.add(atomname);
                    atomStore.serial[atomIdx] = atomIdx + 1;
                    atomStore.partialCharge[atomIdx] = charge;
                    sb.addAtom(0, chainname, chainid, resname, resIdx + 1, false);
                    ++atomIdx;
                    lastResno = resno;
                });
                molType.bonds.forEach(function (bondData) {
                    bondStore.atomIndex1[bondIdx] = atomOffset + bondData[0] - 1;
                    bondStore.atomIndex2[bondIdx] = atomOffset + bondData[1] - 1;
                    ++bondIdx;
                });
                ++chainidIdx;
                atomOffset += molType.atoms.length;
            }
            ++chainnameIdx;
        });
        bondStore.count = bondCount;
        sb.finalize();
        s.finalizeAtoms();
        s.finalizeBonds();
        calculateBondsWithin(s, true);
        calculateBondsBetween(s, true, true);
        assignResidueTypeBonds(s);
        if (Debug)
            Log.timeEnd('TopParser._parse ' + this.name);
    }
}
ParserRegistry.add('top', TopParser);

/**
 * @file Trajectory Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class TrajectoryParser extends Parser {
    constructor(streamer, params) {
        super(streamer, params);
        this.frames = new Frames(this.name, this.path);
    }
    get type() { return 'trajectory'; }
    get __objName() { return 'frames'; }
}

/**
 * @file Dcd Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const charmmTimeUnitFactor = 20.45482949774598;
class DcdParser extends TrajectoryParser {
    get type() { return 'dcd'; }
    get isBinary() { return true; }
    _parse() {
        // http://www.ks.uiuc.edu/Research/vmd/plugins/molfile/dcdplugin.html
        // The DCD format is structured as follows
        //   (FORTRAN UNFORMATTED, with Fortran data type descriptions):
        // HDR     NSET    ISTRT   NSAVC   5-ZEROS NATOM-NFREAT    DELTA   9-ZEROS
        // `CORD'  #files  step 1  step    zeroes  (zero)          timestep  (zeroes)
        //                         interval
        // C*4     INT     INT     INT     5INT    INT             DOUBLE  9INT
        // ==========================================================================
        // NTITLE          TITLE
        // INT (=2)        C*MAXTITL
        //                 (=32)
        // ==========================================================================
        // NATOM
        // #atoms
        // INT
        // ==========================================================================
        // X(I), I=1,NATOM         (DOUBLE)
        // Y(I), I=1,NATOM
        // Z(I), I=1,NATOM
        // ==========================================================================
        if (Debug)
            Log.time('DcdParser._parse ' + this.name);
        const bin = ensureBuffer(this.streamer.data);
        const dv = new DataView(bin);
        const f = this.frames;
        const coordinates = f.coordinates;
        const boxes = f.boxes;
        const header = {};
        let nextPos = 0;
        // header block
        const intView = new Int32Array(bin, 0, 23);
        const ef = intView[0] !== dv.getInt32(0); // endianess flag
        // swap byte order when big endian (84 indicates little endian)
        if (intView[0] !== 84) {
            const n = bin.byteLength;
            for (let i = 0; i < n; i += 4) {
                dv.setFloat32(i, dv.getFloat32(i), true);
            }
        }
        if (intView[0] !== 84) {
            Log.error('dcd bad format, header block start');
        }
        // format indicator, should read 'CORD'
        const formatString = String.fromCharCode(dv.getUint8(4), dv.getUint8(5), dv.getUint8(6), dv.getUint8(7));
        if (formatString !== 'CORD') {
            Log.error('dcd bad format, format string');
        }
        let isCharmm = false;
        let extraBlock = false;
        let fourDims = false;
        // version field in charmm, unused in X-PLOR
        if (intView[22] !== 0) {
            isCharmm = true;
            if (intView[12] !== 0)
                extraBlock = true;
            if (intView[13] === 1)
                fourDims = true;
        }
        header.NSET = intView[2];
        header.ISTART = intView[3];
        header.NSAVC = intView[4];
        header.NAMNF = intView[10];
        if (isCharmm) {
            header.DELTA = dv.getFloat32(44, ef);
        }
        else {
            header.DELTA = dv.getFloat64(44, ef);
        }
        if (intView[22] !== 84) {
            Log.error('dcd bad format, header block end');
        }
        nextPos = nextPos + 21 * 4 + 8;
        // title block
        const titleLength = dv.getInt32(nextPos, ef);
        const titlePos = nextPos + 1;
        if ((titleLength - 4) % 80 !== 0) {
            Log.error('dcd bad format, title block start');
        }
        header.TITLE = uint8ToString(new Uint8Array(bin, titlePos, titleLength));
        if (dv.getInt32(titlePos + titleLength + 4 - 1, ef) !== titleLength) {
            Log.error('dcd bad format, title block end');
        }
        nextPos = nextPos + titleLength + 8;
        // natom block
        if (dv.getInt32(nextPos, ef) !== 4) {
            Log.error('dcd bad format, natom block start');
        }
        header.NATOM = dv.getInt32(nextPos + 4, ef);
        if (dv.getInt32(nextPos + 8, ef) !== 4) {
            Log.error('dcd bad format, natom block end');
        }
        nextPos = nextPos + 4 + 8;
        // fixed atoms block
        if (header.NAMNF > 0) {
            // TODO read coordinates and indices of fixed atoms
            Log.error('dcd format with fixed atoms unsupported, aborting');
            return;
        }
        // frames
        const natom = header.NATOM;
        const natom4 = natom * 4;
        for (let i = 0, n = header.NSET; i < n; ++i) {
            if (extraBlock) {
                nextPos += 4; // block start
                // unitcell: A, alpha, B, beta, gamma, C (doubles)
                const box = new Float32Array(9);
                box[0] = dv.getFloat64(nextPos, ef);
                box[4] = dv.getFloat64(nextPos + 2 * 8, ef);
                box[8] = dv.getFloat64(nextPos + 5 * 8, ef);
                boxes.push(box);
                nextPos += 48;
                nextPos += 4; // block end
            }
            // xyz coordinates
            const coord = new Float32Array(natom * 3);
            for (let j = 0; j < 3; ++j) {
                if (dv.getInt32(nextPos, ef) !== natom4) {
                    Log.error('dcd bad format, coord block start', i, j);
                }
                nextPos += 4; // block start
                const c = new Float32Array(bin, nextPos, natom);
                for (let k = 0; k < natom; ++k) {
                    coord[3 * k + j] = c[k];
                }
                nextPos += natom4;
                if (dv.getInt32(nextPos, ef) !== natom4) {
                    Log.error('dcd bad format, coord block end', i, j);
                }
                nextPos += 4; // block end
            }
            coordinates.push(coord);
            if (fourDims) {
                const bytes = dv.getInt32(nextPos, ef);
                nextPos += 4 + bytes + 4; // block start + skip + block end
            }
        }
        if (header.DELTA) {
            f.deltaTime = header.DELTA * charmmTimeUnitFactor;
        }
        if (header.ISTART >= 1) {
            f.timeOffset = (header.ISTART - 1) * f.deltaTime;
        }
        // console.log(header)
        // console.log(header.TITLE)
        // console.log('isCharmm', isCharmm, 'extraBlock', extraBlock, 'fourDims, fourDims)
        if (Debug)
            Log.timeEnd('DcdParser._parse ' + this.name);
    }
}
ParserRegistry.add('dcd', DcdParser);

/**
 * @file Netcdf Reader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 *
 * Adapted from https://github.com/cheminfo-js/netcdfjs
 * MIT License, Copyright (c) 2016 cheminfo
 */
/**
 * Throws a non-valid NetCDF exception if the statement it's true
 * @ignore
 * @param {boolean} statement - Throws if true
 * @param {string} reason - Reason to throw
 */
function notNetcdf(statement, reason) {
    if (statement) {
        throw new TypeError('Not a valid NetCDF v3.x file: ' + reason);
    }
}
/**
 * Moves 1, 2, or 3 bytes to next 4-byte boundary
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 */
function padding(buffer) {
    if ((buffer.offset % 4) !== 0) {
        buffer.skip(4 - (buffer.offset % 4));
    }
}
/**
 * Reads the name
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @return {string} - Name
 */
function readName(buffer) {
    // Read name
    const nameLength = buffer.readUint32();
    const name = buffer.readChars(nameLength);
    // validate name
    // TODO
    // Apply padding
    padding(buffer);
    return name;
}
const types = {
    BYTE: 1,
    CHAR: 2,
    SHORT: 3,
    INT: 4,
    FLOAT: 5,
    DOUBLE: 6
};
/**
 * Parse a number into their respective type
 * @ignore
 * @param {number} type - integer that represents the type
 * @return {string} - parsed value of the type
 */
function num2str(type) {
    switch (Number(type)) {
        case types.BYTE:
            return 'byte';
        case types.CHAR:
            return 'char';
        case types.SHORT:
            return 'short';
        case types.INT:
            return 'int';
        case types.FLOAT:
            return 'float';
        case types.DOUBLE:
            return 'double';
        default:
            return 'undefined';
    }
}
/**
 * Parse a number type identifier to his size in bytes
 * @ignore
 * @param {number} type - integer that represents the type
 * @return {number} -size of the type
 */
function num2bytes(type) {
    switch (Number(type)) {
        case types.BYTE:
            return 1;
        case types.CHAR:
            return 1;
        case types.SHORT:
            return 2;
        case types.INT:
            return 4;
        case types.FLOAT:
            return 4;
        case types.DOUBLE:
            return 8;
        default:
            return -1;
    }
}
/**
 * Reverse search of num2str
 * @ignore
 * @param {string} type - string that represents the type
 * @return {number} - parsed value of the type
 */
function str2num(type) {
    switch (String(type)) {
        case 'byte':
            return types.BYTE;
        case 'char':
            return types.CHAR;
        case 'short':
            return types.SHORT;
        case 'int':
            return types.INT;
        case 'float':
            return types.FLOAT;
        case 'double':
            return types.DOUBLE;
        default:
            return -1;
    }
}
/**
 * Auxiliary function to read numeric data
 * @ignore
 * @param {number} size - Size of the element to read
 * @param {function} bufferReader - Function to read next value
 * @return {Array<number>|number}
 */
function readNumber(size, bufferReader) {
    if (size !== 1) {
        const numbers = new Array(size);
        for (let i = 0; i < size; i++) {
            numbers[i] = bufferReader();
        }
        return numbers;
    }
    else {
        return bufferReader();
    }
}
/**
 * Given a type and a size reads the next element
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @param {number} type - Type of the data to read
 * @param {number} size - Size of the element to read
 * @return {string|Array<number>|number}
 */
function readType(buffer, type, size) {
    switch (type) {
        case types.BYTE:
            return buffer.readBytes(size);
        case types.CHAR:
            return trimNull(buffer.readChars(size));
        case types.SHORT:
            return readNumber(size, buffer.readInt16.bind(buffer));
        case types.INT:
            return readNumber(size, buffer.readInt32.bind(buffer));
        case types.FLOAT:
            return readNumber(size, buffer.readFloat32.bind(buffer));
        case types.DOUBLE:
            return readNumber(size, buffer.readFloat64.bind(buffer));
        default:
            notNetcdf(true, 'non valid type ' + type);
            return undefined;
    }
}
/**
 * Removes null terminate value
 * @ignore
 * @param {string} value - String to trim
 * @return {string} - Trimmed string
 */
function trimNull(value) {
    if (value.charCodeAt(value.length - 1) === 0) {
        return value.substring(0, value.length - 1);
    }
    return value;
}
// const STREAMING = 4294967295;
/**
 * Read data for the given non-record variable
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @param {object} variable - Variable metadata
 * @return {Array} - Data of the element
 */
function nonRecord(buffer, variable) {
    // variable type
    const type = str2num(variable.type);
    // size of the data
    const size = variable.size / num2bytes(type);
    // iterates over the data
    const data = new Array(size);
    for (let i = 0; i < size; i++) {
        data[i] = readType(buffer, type, 1);
    }
    return data;
}
/**
 * Read data for the given record variable
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @param {object} variable - Variable metadata
 * @param {object} recordDimension - Record dimension metadata
 * @return {Array} - Data of the element
 */
function record(buffer, variable, recordDimension) {
    // variable type
    const type = str2num(variable.type);
    const width = variable.size ? variable.size / num2bytes(type) : 1;
    // size of the data
    // TODO streaming data
    const size = recordDimension.length;
    // iterates over the data
    const data = new Array(size);
    const step = recordDimension.recordStep;
    for (let i = 0; i < size; i++) {
        const currentOffset = buffer.offset;
        data[i] = readType(buffer, type, width);
        buffer.seek(currentOffset + step);
    }
    return data;
}
// Grammar constants
const ZERO = 0;
const NC_DIMENSION = 10;
const NC_VARIABLE = 11;
const NC_ATTRIBUTE = 12;
/**
 * Read the header of the file
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @param {number} version - Version of the file
 * @return {object} - Object with the fields:
 *  * `recordDimension`: Number with the length of record dimension
 *  * `dimensions`: List of dimensions
 *  * `globalAttributes`: List of global attributes
 *  * `variables`: List of variables
 */
function header(buffer, version) {
    // Length of record dimension
    // sum of the varSize's of all the record variables.
    const header = { recordDimension: { length: buffer.readUint32() } };
    // Version
    header.version = version;
    // List of dimensions
    const dimList = dimensionsList(buffer);
    header.recordDimension.id = dimList.recordId;
    header.recordDimension.name = dimList.recordName;
    header.dimensions = dimList.dimensions;
    // List of global attributes
    header.globalAttributes = attributesList(buffer);
    // List of variables
    const variables = variablesList(buffer, dimList.recordId, version);
    header.variables = variables.variables;
    header.recordDimension.recordStep = variables.recordStep;
    return header;
}
/**
 * List of dimensions
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @return {object} - List of dimensions and record dimension with:
 *  * `name`: String with the name of the dimension
 *  * `size`: Number with the size of the dimension
 */
function dimensionsList(buffer) {
    let dimensions, recordId, recordName;
    const dimList = buffer.readUint32();
    if (dimList === ZERO) {
        notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of dimensions');
        return [];
    }
    else {
        notNetcdf((dimList !== NC_DIMENSION), 'wrong tag for list of dimensions');
        // Length of dimensions
        const dimensionSize = buffer.readUint32();
        dimensions = new Array(dimensionSize);
        for (let dim = 0; dim < dimensionSize; dim++) {
            // Read name
            const name = readName(buffer);
            // Read dimension size
            const size = buffer.readUint32();
            if (size === 0) {
                recordId = dim;
                recordName = name;
            }
            dimensions[dim] = {
                name: name,
                size: size
            };
        }
        return {
            dimensions: dimensions,
            recordId: recordId,
            recordName: recordName
        };
    }
}
/**
 * List of attributes
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @return {Array<object>} - List of attributes with:
 *  * `name`: String with the name of the attribute
 *  * `type`: String with the type of the attribute
 *  * `value`: A number or string with the value of the attribute
 */
function attributesList(buffer) {
    let attributes;
    const gAttList = buffer.readUint32();
    if (gAttList === ZERO) {
        notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of attributes');
        return [];
    }
    else {
        notNetcdf((gAttList !== NC_ATTRIBUTE), 'wrong tag for list of attributes');
        // Length of attributes
        const attributeSize = buffer.readUint32();
        attributes = new Array(attributeSize);
        for (let gAtt = 0; gAtt < attributeSize; gAtt++) {
            // Read name
            const name = readName(buffer);
            // Read type
            const type = buffer.readUint32();
            notNetcdf(((type < 1) || (type > 6)), 'non valid type ' + type);
            // Read attribute
            const size = buffer.readUint32();
            const value = readType(buffer, type, size);
            // Apply padding
            padding(buffer);
            attributes[gAtt] = {
                name: name,
                type: num2str(type),
                value: value
            };
        }
    }
    return attributes;
}
/**
 * List of variables
 * @ignore
 * @param {IOBuffer} buffer - Buffer for the file data
 * @param {number} recordId - Id if the record dimension
 * @param {number} version - Version of the file
 * @return {object} - Number of recordStep and list of variables with:
 *  * `name`: String with the name of the variable
 *  * `dimensions`: Array with the dimension IDs of the variable
 *  * `attributes`: Array with the attributes of the variable
 *  * `type`: String with the type of the variable
 *  * `size`: Number with the size of the variable
 *  * `offset`: Number with the offset where of the variable begins
 *  * `record`: True if is a record variable, false otherwise
 */
function variablesList(buffer, recordId, version) {
    const varList = buffer.readUint32();
    let recordStep = 0;
    let variables;
    if (varList === ZERO) {
        notNetcdf((buffer.readUint32() !== ZERO), 'wrong empty tag for list of variables');
        return [];
    }
    else {
        notNetcdf((varList !== NC_VARIABLE), 'wrong tag for list of variables');
        // Length of variables
        const variableSize = buffer.readUint32();
        variables = new Array(variableSize);
        for (let v = 0; v < variableSize; v++) {
            // Read name
            const name = readName(buffer);
            // Read dimensionality of the variable
            const dimensionality = buffer.readUint32();
            // Index into the list of dimensions
            const dimensionsIds = new Array(dimensionality);
            for (let dim = 0; dim < dimensionality; dim++) {
                dimensionsIds[dim] = buffer.readUint32();
            }
            // Read variables size
            const attributes = attributesList(buffer);
            // Read type
            const type = buffer.readUint32();
            notNetcdf(((type < 1) && (type > 6)), 'non valid type ' + type);
            // Read variable size
            // The 32-bit varSize field is not large enough to contain the
            // size of variables that require more than 2^32 - 4 bytes,
            // so 2^32 - 1 is used in the varSize field for such variables.
            const varSize = buffer.readUint32();
            // Read offset
            let offset = buffer.readUint32();
            if (version === 2) {
                notNetcdf((offset > 0), 'offsets larger than 4GB not supported');
                offset = buffer.readUint32();
            }
            // Count amount of record variables
            if (dimensionsIds[0] === recordId) {
                recordStep += varSize;
            }
            variables[v] = {
                name: name,
                dimensions: dimensionsIds,
                attributes: attributes,
                type: num2str(type),
                size: varSize,
                offset: offset,
                record: (dimensionsIds[0] === recordId)
            };
        }
    }
    return {
        variables: variables,
        recordStep: recordStep
    };
}
/**
 * Reads a NetCDF v3.x file
 * https://www.unidata.ucar.edu/software/netcdf/docs/file_format_specifications.html
 */
class NetcdfReader {
    /**
     * @param {ArrayBuffer} data - ArrayBuffer or any Typed Array with the data
     */
    constructor(data) {
        const buffer = new IOBuffer(data);
        buffer.setBigEndian();
        // Validate that it's a NetCDF file
        notNetcdf((buffer.readChars(3) !== 'CDF'), 'should start with CDF');
        // Check the NetCDF format
        const version = buffer.readByte();
        notNetcdf((version > 2), 'unknown version');
        // Read the header
        this.header = header(buffer, version);
        this.buffer = buffer;
    }
    /**
     * @return {string} - Version for the NetCDF format
     */
    get version() {
        if (this.header.version === 1) {
            return 'classic format';
        }
        else {
            return '64-bit offset format';
        }
    }
    /**
     * @return {object} - Metadata for the record dimension
     *  * `length`: Number of elements in the record dimension
     *  * `id`: Id number in the list of dimensions for the record dimension
     *  * `name`: String with the name of the record dimension
     *  * `recordStep`: Number with the record variables step size
     */
    get recordDimension() {
        return this.header.recordDimension;
    }
    /**
     * @return {Array<object>} - List of dimensions with:
     *  * `name`: String with the name of the dimension
     *  * `size`: Number with the size of the dimension
     */
    get dimensions() {
        return this.header.dimensions;
    }
    /**
     * @return {Array<object>} - List of global attributes with:
     *  * `name`: String with the name of the attribute
     *  * `type`: String with the type of the attribute
     *  * `value`: A number or string with the value of the attribute
     */
    get globalAttributes() {
        return this.header.globalAttributes;
    }
    /**
     * @return {Array<object>} - List of variables with:
     *  * `name`: String with the name of the variable
     *  * `dimensions`: Array with the dimension IDs of the variable
     *  * `attributes`: Array with the attributes of the variable
     *  * `type`: String with the type of the variable
     *  * `size`: Number with the size of the variable
     *  * `offset`: Number with the offset where of the variable begins
     *  * `record`: True if is a record variable, false otherwise
     */
    get variables() {
        return this.header.variables;
    }
    /**
     * Checks if a variable is available
     * @param {string|object} variableName - Name of the variable to check
     * @return {Boolean} - Variable existence
     */
    hasDataVariable(variableName) {
        return this.header.variables.findIndex(function (val) {
            return val.name === variableName;
        }) !== -1;
    }
    /**
     * Retrieves the data for a given variable
     * @param {string|object} variableName - Name of the variable to search or variable object
     * @return {Array} - List with the variable values
     */
    getDataVariable(variableName) {
        let variable;
        if (typeof variableName === 'string') {
            // search the variable
            variable = this.header.variables.find(function (val) {
                return val.name === variableName;
            });
        }
        else {
            variable = variableName;
        }
        // throws if variable not found
        notNetcdf((variable === undefined), 'variable not found');
        // go to the offset position
        this.buffer.seek(variable.offset);
        if (variable.record) {
            // record variable case
            return record(this.buffer, variable, this.header.recordDimension);
        }
        else {
            // non-record variable case
            return nonRecord(this.buffer, variable);
        }
    }
}

/**
 * @file Nctraj Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class NctrajParser extends TrajectoryParser {
    get type() { return 'nctraj'; }
    get isBinary() { return true; }
    _parse() {
        // http://ambermd.org/netcdf/nctraj.xhtml
        if (Debug)
            Log.time('NctrajParser._parse ' + this.name);
        const netcdfReader = new NetcdfReader(this.streamer.data);
        const f = this.frames;
        const coordinates = f.coordinates;
        const boxes = f.boxes;
        const times = f.times;
        netcdfReader.getDataVariable('coordinates').forEach(function (c) {
            coordinates.push(new Float32Array(c));
        });
        if (netcdfReader.hasDataVariable('cell_lengths')) {
            netcdfReader.getDataVariable('cell_lengths').forEach(function (b) {
                boxes.push(new Float32Array(b));
            });
        }
        if (netcdfReader.hasDataVariable('time')) {
            netcdfReader.getDataVariable('time').forEach(function (t) {
                times.push(t);
            });
        }
        if (times.length >= 1) {
            f.timeOffset = times[0];
        }
        if (times.length >= 2) {
            f.deltaTime = times[1] - times[0];
        }
        if (Debug)
            Log.timeEnd('NctrajParser._parse ' + this.name);
    }
}
ParserRegistry.add('nctraj', NctrajParser);
ParserRegistry.add('ncdf', NctrajParser);
ParserRegistry.add('nc', NctrajParser);

/**
 * @file Trr Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class TrrParser extends TrajectoryParser {
    get type() { return 'trr'; }
    get isBinary() { return true; }
    _parse() {
        // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/trrio.cpp
        if (Debug)
            Log.time('TrrParser._parse ' + this.name);
        const bin = ensureBuffer(this.streamer.data);
        const dv = new DataView(bin);
        const f = this.frames;
        const coordinates = f.coordinates;
        const boxes = f.boxes;
        const times = f.times;
        let offset = 0;
        while (true) {
            // const magicnum = dv.getInt32(offset)
            // const i1 = dv.getFloat32(offset + 4)
            offset += 8;
            const versionSize = dv.getInt32(offset);
            offset += 4;
            offset += versionSize;
            // const irSize = dv.getInt32(offset)
            // const eSize = dv.getInt32(offset + 4)
            const boxSize = dv.getInt32(offset + 8);
            const virSize = dv.getInt32(offset + 12);
            const presSize = dv.getInt32(offset + 16);
            // const topSize = dv.getInt32(offset + 20)
            // const symSize = dv.getInt32(offset + 24)
            const coordSize = dv.getInt32(offset + 28);
            const velocitySize = dv.getInt32(offset + 32);
            const forceSize = dv.getInt32(offset + 36);
            const natoms = dv.getInt32(offset + 40);
            // const step = dv.getInt32(offset + 44)
            // const nre = dv.getInt32(offset + 48)
            offset += 52;
            const floatSize = boxSize / 9;
            const natoms3 = natoms * 3;
            // let lambda
            if (floatSize === 8) {
                times.push(dv.getFloat64(offset));
                // lambda = dv.getFloat64(offset + 8)
            }
            else {
                times.push(dv.getFloat32(offset));
                // lambda = dv.getFloat32(offset + 4)
            }
            offset += 2 * floatSize;
            if (boxSize) {
                const box = new Float32Array(9);
                if (floatSize === 8) {
                    for (let i = 0; i < 9; ++i) {
                        box[i] = dv.getFloat64(offset) * 10;
                        offset += 8;
                    }
                }
                else {
                    for (let i = 0; i < 9; ++i) {
                        box[i] = dv.getFloat32(offset) * 10;
                        offset += 4;
                    }
                }
                boxes.push(box);
            }
            // ignore, unused
            offset += virSize;
            // ignore, unused
            offset += presSize;
            if (coordSize) {
                let frameCoords;
                if (floatSize === 8) {
                    frameCoords = new Float32Array(natoms3);
                    for (let i = 0; i < natoms3; ++i) {
                        frameCoords[i] = dv.getFloat64(offset) * 10;
                        offset += 8;
                    }
                }
                else {
                    const tmp = new Uint32Array(bin, offset, natoms3);
                    for (let i = 0; i < natoms3; ++i) {
                        const value = tmp[i];
                        tmp[i] = (((value & 0xFF) << 24) | ((value & 0xFF00) << 8) |
                            ((value >> 8) & 0xFF00) | ((value >> 24) & 0xFF));
                    }
                    frameCoords = new Float32Array(bin, offset, natoms3);
                    for (let i = 0; i < natoms3; ++i) {
                        frameCoords[i] *= 10;
                        offset += 4;
                    }
                }
                coordinates.push(frameCoords);
            }
            // ignore, unused
            offset += velocitySize;
            // ignore, unused
            offset += forceSize;
            if (offset >= bin.byteLength)
                break;
        }
        if (times.length >= 1) {
            f.timeOffset = times[0];
        }
        if (times.length >= 2) {
            f.deltaTime = times[1] - times[0];
        }
        if (Debug)
            Log.timeEnd('TrrParser._parse ' + this.name);
    }
}
ParserRegistry.add('trr', TrrParser);

/**
 * @file Xtc Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const MagicInts = new Uint32Array([
    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 12, 16, 20, 25, 32, 40, 50, 64,
    80, 101, 128, 161, 203, 256, 322, 406, 512, 645, 812, 1024, 1290,
    1625, 2048, 2580, 3250, 4096, 5060, 6501, 8192, 10321, 13003,
    16384, 20642, 26007, 32768, 41285, 52015, 65536, 82570, 104031,
    131072, 165140, 208063, 262144, 330280, 416127, 524287, 660561,
    832255, 1048576, 1321122, 1664510, 2097152, 2642245, 3329021,
    4194304, 5284491, 6658042, 8388607, 10568983, 13316085, 16777216
]);
const FirstIdx = 9;
// const LastIdx = MagicInts.length
function sizeOfInt(size) {
    let num = 1;
    let numOfBits = 0;
    while (size >= num && numOfBits < 32) {
        numOfBits++;
        num <<= 1;
    }
    return numOfBits;
}
const _tmpBytes = new Uint8Array(32);
function sizeOfInts(numOfInts, sizes) {
    let numOfBytes = 1;
    let numOfBits = 0;
    _tmpBytes[0] = 1;
    for (let i = 0; i < numOfInts; i++) {
        let bytecnt;
        let tmp = 0;
        for (bytecnt = 0; bytecnt < numOfBytes; bytecnt++) {
            tmp += _tmpBytes[bytecnt] * sizes[i];
            _tmpBytes[bytecnt] = tmp & 0xff;
            tmp >>= 8;
        }
        while (tmp !== 0) {
            _tmpBytes[bytecnt++] = tmp & 0xff;
            tmp >>= 8;
        }
        numOfBytes = bytecnt;
    }
    let num = 1;
    numOfBytes--;
    while (_tmpBytes[numOfBytes] >= num) {
        numOfBits++;
        num *= 2;
    }
    return numOfBits + numOfBytes * 8;
}
function decodeBits(buf, cbuf, numOfBits, buf2) {
    const mask = (1 << numOfBits) - 1;
    let lastBB0 = buf2[1];
    let lastBB1 = buf2[2];
    let cnt = buf[0];
    let num = 0;
    while (numOfBits >= 8) {
        lastBB1 = (lastBB1 << 8) | cbuf[cnt++];
        num |= (lastBB1 >> lastBB0) << (numOfBits - 8);
        numOfBits -= 8;
    }
    if (numOfBits > 0) {
        if (lastBB0 < numOfBits) {
            lastBB0 += 8;
            lastBB1 = (lastBB1 << 8) | cbuf[cnt++];
        }
        lastBB0 -= numOfBits;
        num |= (lastBB1 >> lastBB0) & ((1 << numOfBits) - 1);
    }
    num &= mask;
    buf[0] = cnt;
    buf[1] = lastBB0;
    buf[2] = lastBB1;
    return num;
}
const _tmpIntBytes = new Int32Array(32);
function decodeInts(buf, cbuf, numOfInts, numOfBits, sizes, nums, buf2) {
    let numOfBytes = 0;
    _tmpIntBytes[1] = 0;
    _tmpIntBytes[2] = 0;
    _tmpIntBytes[3] = 0;
    while (numOfBits > 8) {
        // this is inversed??? why??? because of the endiannness???
        _tmpIntBytes[numOfBytes++] = decodeBits(buf, cbuf, 8, buf2);
        numOfBits -= 8;
    }
    if (numOfBits > 0) {
        _tmpIntBytes[numOfBytes++] = decodeBits(buf, cbuf, numOfBits, buf2);
    }
    for (let i = numOfInts - 1; i > 0; i--) {
        let num = 0;
        for (let j = numOfBytes - 1; j >= 0; j--) {
            num = (num << 8) | _tmpIntBytes[j];
            const p = (num / sizes[i]) | 0;
            _tmpIntBytes[j] = p;
            num = num - p * sizes[i];
        }
        nums[i] = num;
    }
    nums[0] = (_tmpIntBytes[0] |
        (_tmpIntBytes[1] << 8) |
        (_tmpIntBytes[2] << 16) |
        (_tmpIntBytes[3] << 24));
}
class XtcParser extends TrajectoryParser {
    get type() { return 'xtc'; }
    get isBinary() { return true; }
    _parse() {
        // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/xtcio.cpp
        // https://github.com/gromacs/gromacs/blob/master/src/gromacs/fileio/libxdrf.cpp
        if (Debug)
            Log.time('XtcParser._parse ' + this.name);
        const bin = ensureBuffer(this.streamer.data);
        const dv = new DataView(bin);
        const f = this.frames;
        const coordinates = f.coordinates;
        const boxes = f.boxes;
        const times = f.times;
        const minMaxInt = new Int32Array(6);
        const sizeint = new Int32Array(3);
        const bitsizeint = new Int32Array(3);
        const sizesmall = new Uint32Array(3);
        const thiscoord = new Float32Array(3);
        const prevcoord = new Float32Array(3);
        let offset = 0;
        const buf = new Int32Array(3);
        const buf2 = new Uint32Array(buf.buffer);
        while (true) {
            let frameCoords;
            // const magicnum = dv.getInt32(offset)
            const natoms = dv.getInt32(offset + 4);
            // const step = dv.getInt32(offset + 8)
            offset += 12;
            const natoms3 = natoms * 3;
            times.push(dv.getFloat32(offset));
            offset += 4;
            const box = new Float32Array(9);
            for (let i = 0; i < 9; ++i) {
                box[i] = dv.getFloat32(offset) * 10;
                offset += 4;
            }
            boxes.push(box);
            if (natoms <= 9) { // no compression
                frameCoords = new Float32Array(natoms);
                for (let i = 0; i < natoms; ++i) {
                    frameCoords[i] = dv.getFloat32(offset);
                    offset += 4;
                }
            }
            else {
                buf[0] = buf[1] = buf[2] = 0.0;
                sizeint[0] = sizeint[1] = sizeint[2] = 0;
                sizesmall[0] = sizesmall[1] = sizesmall[2] = 0;
                bitsizeint[0] = bitsizeint[1] = bitsizeint[2] = 0;
                thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                prevcoord[0] = prevcoord[1] = prevcoord[2] = 0;
                frameCoords = new Float32Array(natoms3);
                let lfp = 0;
                const lsize = dv.getInt32(offset);
                offset += 4;
                const precision = dv.getFloat32(offset);
                offset += 4;
                minMaxInt[0] = dv.getInt32(offset);
                minMaxInt[1] = dv.getInt32(offset + 4);
                minMaxInt[2] = dv.getInt32(offset + 8);
                minMaxInt[3] = dv.getInt32(offset + 12);
                minMaxInt[4] = dv.getInt32(offset + 16);
                minMaxInt[5] = dv.getInt32(offset + 20);
                sizeint[0] = minMaxInt[3] - minMaxInt[0] + 1;
                sizeint[1] = minMaxInt[4] - minMaxInt[1] + 1;
                sizeint[2] = minMaxInt[5] - minMaxInt[2] + 1;
                offset += 24;
                let bitsize;
                if ((sizeint[0] | sizeint[1] | sizeint[2]) > 0xffffff) {
                    bitsizeint[0] = sizeOfInt(sizeint[0]);
                    bitsizeint[1] = sizeOfInt(sizeint[1]);
                    bitsizeint[2] = sizeOfInt(sizeint[2]);
                    bitsize = 0; // flag the use of large sizes
                }
                else {
                    bitsize = sizeOfInts(3, sizeint);
                }
                let smallidx = dv.getInt32(offset);
                offset += 4;
                // if (smallidx == 0) {alert("Undocumented error 1"); return;}
                // let tmpIdx = smallidx + 8
                // const maxidx = (LastIdx < tmpIdx) ? LastIdx : tmpIdx
                // const minidx = maxidx - 8  // often this equal smallidx
                let tmpIdx = smallidx - 1;
                tmpIdx = (FirstIdx > tmpIdx) ? FirstIdx : tmpIdx;
                let smaller = (MagicInts[tmpIdx] / 2) | 0;
                let smallnum = (MagicInts[smallidx] / 2) | 0;
                sizesmall[0] = sizesmall[1] = sizesmall[2] = MagicInts[smallidx];
                // larger = MagicInts[maxidx]
                let adz = Math.ceil(dv.getInt32(offset) / 4) * 4;
                offset += 4;
                // if (tmpIdx == 0) {alert("Undocumented error 2"); return;}
                // buf = new Int32Array(bin, offset);
                // buf8 = new Uint8Array(bin, offset);
                // tmpIdx += 3; rndup = tmpIdx%4;
                // for (i=tmpIdx+rndup-1; i>=tmpIdx; i--) buf8[i] = 0;
                // now unpack buf2...
                const invPrecision = 1.0 / precision;
                let run = 0;
                let i = 0;
                const buf8 = new Uint8Array(bin, offset); // 229...
                thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                while (i < lsize) {
                    if (bitsize === 0) {
                        thiscoord[0] = decodeBits(buf, buf8, bitsizeint[0], buf2);
                        thiscoord[1] = decodeBits(buf, buf8, bitsizeint[1], buf2);
                        thiscoord[2] = decodeBits(buf, buf8, bitsizeint[2], buf2);
                    }
                    else {
                        decodeInts(buf, buf8, 3, bitsize, sizeint, thiscoord, buf2);
                    }
                    i++;
                    thiscoord[0] += minMaxInt[0];
                    thiscoord[1] += minMaxInt[1];
                    thiscoord[2] += minMaxInt[2];
                    prevcoord[0] = thiscoord[0];
                    prevcoord[1] = thiscoord[1];
                    prevcoord[2] = thiscoord[2];
                    const flag = decodeBits(buf, buf8, 1, buf2);
                    let isSmaller = 0;
                    if (flag === 1) {
                        run = decodeBits(buf, buf8, 5, buf2);
                        isSmaller = run % 3;
                        run -= isSmaller;
                        isSmaller--;
                    }
                    // if ((lfp-ptrstart)+run > size3){
                    //   fprintf(stderr, "(xdrfile error) Buffer overrun during decompression.\n");
                    //   return 0;
                    // }
                    if (run > 0) {
                        thiscoord[0] = thiscoord[1] = thiscoord[2] = 0;
                        for (let k = 0; k < run; k += 3) {
                            decodeInts(buf, buf8, 3, smallidx, sizesmall, thiscoord, buf2);
                            i++;
                            thiscoord[0] += prevcoord[0] - smallnum;
                            thiscoord[1] += prevcoord[1] - smallnum;
                            thiscoord[2] += prevcoord[2] - smallnum;
                            if (k === 0) {
                                // interchange first with second atom for
                                // better compression of water molecules
                                let tmpSwap = thiscoord[0];
                                thiscoord[0] = prevcoord[0];
                                prevcoord[0] = tmpSwap;
                                tmpSwap = thiscoord[1];
                                thiscoord[1] = prevcoord[1];
                                prevcoord[1] = tmpSwap;
                                tmpSwap = thiscoord[2];
                                thiscoord[2] = prevcoord[2];
                                prevcoord[2] = tmpSwap;
                                frameCoords[lfp++] = prevcoord[0] * invPrecision;
                                frameCoords[lfp++] = prevcoord[1] * invPrecision;
                                frameCoords[lfp++] = prevcoord[2] * invPrecision;
                            }
                            else {
                                prevcoord[0] = thiscoord[0];
                                prevcoord[1] = thiscoord[1];
                                prevcoord[2] = thiscoord[2];
                            }
                            frameCoords[lfp++] = thiscoord[0] * invPrecision;
                            frameCoords[lfp++] = thiscoord[1] * invPrecision;
                            frameCoords[lfp++] = thiscoord[2] * invPrecision;
                        }
                    }
                    else {
                        frameCoords[lfp++] = thiscoord[0] * invPrecision;
                        frameCoords[lfp++] = thiscoord[1] * invPrecision;
                        frameCoords[lfp++] = thiscoord[2] * invPrecision;
                    }
                    smallidx += isSmaller;
                    if (isSmaller < 0) {
                        smallnum = smaller;
                        if (smallidx > FirstIdx) {
                            smaller = (MagicInts[smallidx - 1] / 2) | 0;
                        }
                        else {
                            smaller = 0;
                        }
                    }
                    else if (isSmaller > 0) {
                        smaller = smallnum;
                        smallnum = (MagicInts[smallidx] / 2) | 0;
                    }
                    sizesmall[0] = sizesmall[1] = sizesmall[2] = MagicInts[smallidx];
                    if (sizesmall[0] === 0 || sizesmall[1] === 0 || sizesmall[2] === 0) {
                        console.error('(xdrfile error) Undefined error.');
                        return;
                    }
                }
                offset += adz;
            }
            for (let c = 0; c < natoms3; c++) {
                frameCoords[c] *= 10;
            }
            coordinates.push(frameCoords);
            if (offset >= bin.byteLength)
                break;
        }
        if (times.length >= 1) {
            f.timeOffset = times[0];
        }
        if (times.length >= 2) {
            f.deltaTime = times[1] - times[0];
        }
        if (Debug)
            Log.timeEnd('XtcParser._parse ' + this.name);
    }
}
ParserRegistry.add('xtc', XtcParser);

/**
 * @file Volume Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class VolumeParser extends Parser {
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.volume = new Volume(this.name, this.path);
        this.voxelSize = defaults(p.voxelSize, 1);
    }
    get type() { return 'volume'; }
    get __objName() { return 'volume'; }
    _afterParse() {
        this.volume.setMatrix(this.getMatrix());
        super._afterParse();
    }
    getMatrix() {
        return new Matrix4();
    }
}

/**
 * @file Cube Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
// @author Johanna Tiemann <johanna.tiemann@googlemail.com>
// @author Alexander Rose <alexander.rose@weirdbyte.de>
const reWhitespace$2 = /\s+/;
const reScientificNotation = /-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?/g;
const bohrToAngstromFactor = 0.529177210859;
class CubeParser extends VolumeParser {
    get type() { return 'cube'; }
    _parse() {
        // http://paulbourke.net/dataformats/cube/
        if (Debug)
            Log.time('CubeParser._parse ' + this.name);
        const v = this.volume;
        const headerLines = this.streamer.peekLines(6);
        const header = {};
        const scaleFactor = bohrToAngstromFactor * this.voxelSize;
        function h(k, l) {
            var field = headerLines[k].trim().split(reWhitespace$2)[l];
            return parseFloat(field);
        }
        header.atomCount = Math.abs(h(2, 0)); // Number of atoms
        header.originX = h(2, 1) * bohrToAngstromFactor; // Position of origin of volumetric data
        header.originY = h(2, 2) * bohrToAngstromFactor;
        header.originZ = h(2, 3) * bohrToAngstromFactor;
        header.NVX = h(3, 0); // Number of voxels
        header.NVY = h(4, 0);
        header.NVZ = h(5, 0);
        header.basisX = new Vector3(h(3, 1), h(3, 2), h(3, 3))
            .multiplyScalar(scaleFactor);
        header.basisY = new Vector3(h(4, 1), h(4, 2), h(4, 3))
            .multiplyScalar(scaleFactor);
        header.basisZ = new Vector3(h(5, 1), h(5, 2), h(5, 3))
            .multiplyScalar(scaleFactor);
        const data = new Float32Array(header.NVX * header.NVY * header.NVZ);
        let count = 0;
        let lineNo = 0;
        const oribitalFlag = h(2, 0) > 0 ? 0 : 1;
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i].trim();
                if (line !== '' && lineNo >= header.atomCount + 6 + oribitalFlag) {
                    const m = line.match(reScientificNotation);
                    for (let j = 0, lj = m.length; j < lj; ++j) {
                        data[count] = parseFloat(m[j]);
                        ++count;
                    }
                }
                ++lineNo;
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        v.header = header;
        v.setData(data, header.NVZ, header.NVY, header.NVX);
        if (Debug)
            Log.timeEnd('CubeParser._parse ' + this.name);
    }
    getMatrix() {
        const h = this.volume.header;
        const matrix = new Matrix4();
        matrix.multiply(new Matrix4().makeTranslation(h.originX, h.originY, h.originZ));
        matrix.multiply(new Matrix4().makeBasis(h.basisZ, h.basisY, h.basisX));
        return matrix;
    }
}
ParserRegistry.add('cub', CubeParser);
ParserRegistry.add('cube', CubeParser);

/**
 * @file Dsn6 Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class Dsn6Parser extends VolumeParser {
    get type() { return 'dsn6'; }
    get isBinary() { return true; }
    _parse() {
        // DSN6 http://www.uoxray.uoregon.edu/tnt/manual/node104.html
        // BRIX http://svn.cgl.ucsf.edu/svn/chimera/trunk/libs/VolumeData/dsn6/brix-1.html
        if (Debug)
            Log.time('Dsn6Parser._parse ' + this.name);
        const v = this.volume;
        const header = {};
        let divisor, summand;
        const bin = ensureBuffer(this.streamer.data);
        const intView = new Int16Array(bin);
        const byteView = new Uint8Array(bin);
        const brixStr = String.fromCharCode.apply(null, byteView.subarray(0, 512));
        if (brixStr.startsWith(':-)')) {
            header.xStart = parseInt(brixStr.substr(10, 5)); // NXSTART
            header.yStart = parseInt(brixStr.substr(15, 5));
            header.zStart = parseInt(brixStr.substr(20, 5));
            header.xExtent = parseInt(brixStr.substr(32, 5)); // NX
            header.yExtent = parseInt(brixStr.substr(38, 5));
            header.zExtent = parseInt(brixStr.substr(42, 5));
            header.xRate = parseInt(brixStr.substr(52, 5)); // MX
            header.yRate = parseInt(brixStr.substr(58, 5));
            header.zRate = parseInt(brixStr.substr(62, 5));
            header.xlen = parseFloat(brixStr.substr(73, 10)) * this.voxelSize;
            header.ylen = parseFloat(brixStr.substr(83, 10)) * this.voxelSize;
            header.zlen = parseFloat(brixStr.substr(93, 10)) * this.voxelSize;
            header.alpha = parseFloat(brixStr.substr(103, 10));
            header.beta = parseFloat(brixStr.substr(113, 10));
            header.gamma = parseFloat(brixStr.substr(123, 10));
            divisor = parseFloat(brixStr.substr(138, 12)) / 100;
            summand = parseInt(brixStr.substr(155, 8));
            header.sigma = parseFloat(brixStr.substr(170, 12)) * 100;
        }
        else {
            // swap byte order when big endian
            if (intView[18] !== 100) {
                for (let i = 0, n = intView.length; i < n; ++i) {
                    const val = intView[i];
                    intView[i] = ((val & 0xff) << 8) | ((val >> 8) & 0xff);
                }
            }
            header.xStart = intView[0]; // NXSTART
            header.yStart = intView[1];
            header.zStart = intView[2];
            header.xExtent = intView[3]; // NX
            header.yExtent = intView[4];
            header.zExtent = intView[5];
            header.xRate = intView[6]; // MX
            header.yRate = intView[7];
            header.zRate = intView[8];
            const factor = 1 / intView[17];
            const scalingFactor = factor * this.voxelSize;
            header.xlen = intView[9] * scalingFactor;
            header.ylen = intView[10] * scalingFactor;
            header.zlen = intView[11] * scalingFactor;
            header.alpha = intView[12] * factor;
            header.beta = intView[13] * factor;
            header.gamma = intView[14] * factor;
            divisor = intView[15] / 100;
            summand = intView[16];
            header.gamma = intView[14] * factor;
        }
        v.header = header;
        if (Debug)
            Log.log(header, divisor, summand);
        const data = new Float32Array(header.xExtent * header.yExtent * header.zExtent);
        let offset = 512;
        const xBlocks = Math.ceil(header.xExtent / 8);
        const yBlocks = Math.ceil(header.yExtent / 8);
        const zBlocks = Math.ceil(header.zExtent / 8);
        // loop over blocks
        for (var zz = 0; zz < zBlocks; ++zz) {
            for (var yy = 0; yy < yBlocks; ++yy) {
                for (var xx = 0; xx < xBlocks; ++xx) {
                    // loop inside block
                    for (var k = 0; k < 8; ++k) {
                        var z = 8 * zz + k;
                        for (var j = 0; j < 8; ++j) {
                            var y = 8 * yy + j;
                            for (var i = 0; i < 8; ++i) {
                                var x = 8 * xx + i;
                                // check if remaining slice-part contains data
                                if (x < header.xExtent && y < header.yExtent && z < header.zExtent) {
                                    var idx = ((((x * header.yExtent) + y) * header.zExtent) + z);
                                    data[idx] = (byteView[offset] - summand) / divisor;
                                    ++offset;
                                }
                                else {
                                    offset += 8 - i;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        v.setData(data, header.zExtent, header.yExtent, header.xExtent);
        if (header.sigma) {
            v.setStats(undefined, undefined, undefined, header.sigma);
        }
        if (Debug)
            Log.timeEnd('Dsn6Parser._parse ' + this.name);
    }
    getMatrix() {
        const h = this.volume.header;
        const basisX = [
            h.xlen,
            0,
            0
        ];
        const basisY = [
            h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
            h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
            0
        ];
        const basisZ = [
            h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
            h.zlen * (Math.cos(Math.PI / 180.0 * h.alpha) -
                Math.cos(Math.PI / 180.0 * h.gamma) *
                    Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
            0
        ];
        basisZ[2] = Math.sqrt(h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
            Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
        const basis = [[], basisX, basisY, basisZ];
        const nxyz = [0, h.xRate, h.yRate, h.zRate];
        const mapcrs = [0, 1, 2, 3];
        const matrix = new Matrix4();
        matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
        matrix.multiply(new Matrix4().makeRotationY(degToRad$1(90)));
        matrix.multiply(new Matrix4().makeTranslation(-h.zStart, h.yStart, h.xStart));
        matrix.multiply(new Matrix4().makeScale(-1, 1, 1));
        return matrix;
    }
}
ParserRegistry.add('dsn6', Dsn6Parser);
ParserRegistry.add('brix', Dsn6Parser);

/**
 * @file Dx Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reWhitespace$1 = /\s+/;
class DxParser extends VolumeParser {
    get type() { return 'dx'; }
    _parse() {
        // http://apbs.readthedocs.io/en/latest/formats/opendx.html
        if (Debug)
            Log.time('DxParser._parse ' + this.name);
        const v = this.volume;
        const headerLines = this.streamer.peekLines(30);
        const headerInfo = this.parseHeaderLines(headerLines);
        const header = this.volume.header;
        const dataLineStart = headerInfo.dataLineStart;
        const size = header.nx * header.ny * header.nz;
        const data = new Float32Array(size);
        let count = 0;
        let lineNo = 0;
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                if (count < size && lineNo > dataLineStart) {
                    const line = lines[i].trim();
                    if (line !== '') {
                        const ls = line.split(reWhitespace$1);
                        for (let j = 0, lj = ls.length; j < lj; ++j) {
                            data[count] = parseFloat(ls[j]);
                            ++count;
                        }
                    }
                }
                ++lineNo;
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        v.setData(data, header.nz, header.ny, header.nx);
        if (Debug)
            Log.timeEnd('DxParser._parse ' + this.name);
    }
    parseHeaderLines(headerLines) {
        const header = {};
        const n = headerLines.length;
        let dataLineStart = 0;
        let headerByteCount = 0;
        let deltaLineCount = 0;
        for (let i = 0; i < n; ++i) {
            let ls;
            const line = headerLines[i];
            if (line.startsWith('object 1')) {
                ls = line.split(reWhitespace$1);
                header.nx = parseInt(ls[5]);
                header.ny = parseInt(ls[6]);
                header.nz = parseInt(ls[7]);
            }
            else if (line.startsWith('origin')) {
                ls = line.split(reWhitespace$1);
                header.xmin = parseFloat(ls[1]);
                header.ymin = parseFloat(ls[2]);
                header.zmin = parseFloat(ls[3]);
            }
            else if (line.startsWith('delta')) {
                ls = line.split(reWhitespace$1);
                if (deltaLineCount === 0) {
                    header.hx = parseFloat(ls[1]) * this.voxelSize;
                }
                else if (deltaLineCount === 1) {
                    header.hy = parseFloat(ls[2]) * this.voxelSize;
                }
                else if (deltaLineCount === 2) {
                    header.hz = parseFloat(ls[3]) * this.voxelSize;
                }
                deltaLineCount += 1;
            }
            else if (line.startsWith('object 3')) {
                dataLineStart = i;
                headerByteCount += line.length + 1;
                break;
            }
            headerByteCount += line.length + 1;
        }
        this.volume.header = header;
        return {
            dataLineStart: dataLineStart,
            headerByteCount: headerByteCount
        };
    }
    getMatrix() {
        const h = this.volume.header;
        const matrix = new Matrix4();
        matrix.multiply(new Matrix4().makeRotationY(degToRad$1(90)));
        matrix.multiply(new Matrix4().makeTranslation(-h.zmin, h.ymin, h.xmin));
        matrix.multiply(new Matrix4().makeScale(-h.hz, h.hy, h.hx));
        return matrix;
    }
}
ParserRegistry.add('dx', DxParser);

/**
 * @file Dxbin Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class DxbinParser extends DxParser {
    get type() { return 'dxbin'; }
    get isBinary() { return true; }
    _parse() {
        // https://github.com/Electrostatics/apbs-pdb2pqr/issues/216
        if (Debug)
            Log.time('DxbinParser._parse ' + this.name);
        const bin = ensureBuffer(this.streamer.data);
        const headerLines = uint8ToLines(new Uint8Array(bin, 0, 1000));
        const headerInfo = this.parseHeaderLines(headerLines);
        const header = this.volume.header;
        const headerByteCount = headerInfo.headerByteCount;
        const size = header.nx * header.ny * header.nz;
        const dv = new DataView(bin);
        const data = new Float32Array(size);
        for (let i = 0; i < size; ++i) {
            data[i] = dv.getFloat64(i * 8 + headerByteCount, true);
        }
        this.volume.setData(data, header.nz, header.ny, header.nx);
        if (Debug)
            Log.timeEnd('DxbinParser._parse ' + this.name);
    }
}
ParserRegistry.add('dxbin', DxbinParser);

/**
 * @file Mrc Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class MrcParser extends VolumeParser {
    get type() { return 'mrc'; }
    get isBinary() { return true; }
    _parse() {
        // MRC
        // http://ami.scripps.edu/software/mrctools/mrc_specification.php
        // http://www2.mrc-lmb.cam.ac.uk/research/locally-developed-software/image-processing-software/#image
        // http://bio3d.colorado.edu/imod/doc/mrc_format.txt
        // CCP4 (MAP)
        // http://www.ccp4.ac.uk/html/maplib.html
        // MRC format does not use the skew transformation header records (words 25-37)
        // CCP4 format does not use the ORIGIN header records (words 50-52)
        if (Debug)
            Log.time('MrcParser._parse ' + this.name);
        const v = this.volume;
        const header = {};
        const bin = ensureBuffer(this.streamer.data);
        const intView = new Int32Array(bin, 0, 56);
        const floatView = new Float32Array(bin, 0, 56);
        const dv = new DataView(bin);
        // 53  MAP         Character string 'MAP ' to identify file type
        header.MAP = String.fromCharCode(dv.getUint8(52 * 4), dv.getUint8(52 * 4 + 1), dv.getUint8(52 * 4 + 2), dv.getUint8(52 * 4 + 3));
        // 54  MACHST      Machine stamp indicating machine type which wrote file
        //                 17 and 17 for big-endian or 68 and 65 for little-endian
        header.MACHST = [dv.getUint8(53 * 4), dv.getUint8(53 * 4 + 1)];
        // swap byte order when big endian
        if (header.MACHST[0] === 17 && header.MACHST[1] === 17) {
            const n = bin.byteLength;
            for (let i = 0; i < n; i += 4) {
                dv.setFloat32(i, dv.getFloat32(i), true);
            }
        }
        header.NX = intView[0]; // NC - columns (fastest changing)
        header.NY = intView[1]; // NR - rows
        header.NZ = intView[2]; // NS - sections (slowest changing)
        // mode
        //  0 image : signed 8-bit bytes range -128 to 127
        //  1 image : 16-bit halfwords
        //  2 image : 32-bit reals
        //  3 transform : complex 16-bit integers
        //  4 transform : complex 32-bit reals
        //  6 image : unsigned 16-bit range 0 to 65535
        // 16 image: unsigned char * 3 (for rgb data, non-standard)
        //
        // Note: Mode 2 is the normal mode used in the CCP4 programs.
        //       Other modes than 2 and 0 may NOT WORK
        header.MODE = intView[3];
        // start
        header.NXSTART = intView[4]; // NCSTART - first column
        header.NYSTART = intView[5]; // NRSTART - first row
        header.NZSTART = intView[6]; // NSSTART - first section
        // intervals
        header.MX = intView[7]; // intervals along x
        header.MY = intView[8]; // intervals along y
        header.MZ = intView[9]; // intervals along z
        // cell length (Angstroms in CCP4)
        header.xlen = floatView[10] * this.voxelSize;
        header.ylen = floatView[11] * this.voxelSize;
        header.zlen = floatView[12] * this.voxelSize;
        // cell angle (Degrees)
        header.alpha = floatView[13];
        header.beta = floatView[14];
        header.gamma = floatView[15];
        // axis correspondence (1,2,3 for X,Y,Z)
        header.MAPC = intView[16]; // column
        header.MAPR = intView[17]; // row
        header.MAPS = intView[18]; // section
        // density statistics
        header.DMIN = floatView[19];
        header.DMAX = floatView[20];
        header.DMEAN = floatView[21];
        // space group number 0 or 1 (default=0)
        header.ISPG = intView[22];
        // number of bytes used for symmetry data (0 or 80)
        header.NSYMBT = intView[23];
        // Flag for skew transformation, =0 none, =1 if foll
        header.LSKFLG = intView[24];
        // 26-34  SKWMAT  Skew matrix S (in order S11, S12, S13, S21 etc) if
        //                LSKFLG .ne. 0.
        // 35-37  SKWTRN  Skew translation t if LSKFLG != 0.
        //                Skew transformation is from standard orthogonal
        //                coordinate frame (as used for atoms) to orthogonal
        //                map frame, as Xo(map) = S * (Xo(atoms) - t)
        // 38      future use       (some of these are used by the MSUBSX routines
        //  .          "              in MAPBRICK, MAPCONT and FRODO)
        //  .          "   (all set to zero by default)
        //  .          "
        // 52          "
        // 50-52 origin in X,Y,Z used for transforms
        header.originX = floatView[49];
        header.originY = floatView[50];
        header.originZ = floatView[51];
        // 53  MAP         Character string 'MAP ' to identify file type
        // => see top of this parser
        // 54  MACHST      Machine stamp indicating machine type which wrote file
        // => see top of this parser
        // Rms deviation of map from mean density
        header.ARMS = floatView[54];
        // 56      NLABL           Number of labels being used
        // 57-256  LABEL(20,10)    10  80 character text labels (ie. A4 format)
        v.header = header;
        // Log.log( header );
        let data;
        if (header.MODE === 2) {
            data = new Float32Array(bin, 256 * 4 + header.NSYMBT, header.NX * header.NY * header.NZ);
        }
        else if (header.MODE === 0) {
            data = new Float32Array(new Int8Array(bin, 256 * 4 + header.NSYMBT, header.NX * header.NY * header.NZ));
            // based on uglymol (https://github.com/uglymol/uglymol) by Marcin Wojdyr (wojdyr)
            // if the file was converted by mapmode2to0 - scale the data
            if (intView[39] === -128 && intView[40] === 127) {
                // scaling f(x)=b1*x+b0 such that f(-128)=min and f(127)=max
                const b1 = (header.DMAX - header.DMIN) / 255.0;
                const b0 = 0.5 * (header.DMIN + header.DMAX + b1);
                for (let j = 0, jl = data.length; j < jl; ++j) {
                    data[j] = b1 * data[j] + b0;
                }
            }
        }
        else {
            Log.error('MrcParser unknown mode', header.MODE);
        }
        v.setData(data, header.NX, header.NY, header.NZ);
        if (header.ARMS !== 0) {
            v.setStats(header.DMIN, header.DMAX, header.DMEAN, header.ARMS);
        }
        if (Debug)
            Log.timeEnd('MrcParser._parse ' + this.name);
    }
    getMatrix() {
        const h = this.volume.header;
        const basisX = [
            h.xlen,
            0,
            0
        ];
        const basisY = [
            h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
            h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
            0
        ];
        const basisZ = [
            h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
            h.zlen * (Math.cos(Math.PI / 180.0 * h.alpha) -
                Math.cos(Math.PI / 180.0 * h.gamma) *
                    Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
            0
        ];
        basisZ[2] = Math.sqrt(h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
            Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
        const basis = [[], basisX, basisY, basisZ];
        const nxyz = [0, h.MX, h.MY, h.MZ];
        const mapcrs = [0, h.MAPC, h.MAPR, h.MAPS];
        const matrix = new Matrix4();
        matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
        matrix.setPosition(new Vector3(h.originX, h.originY, h.originZ));
        matrix.multiply(new Matrix4().makeTranslation(h.NXSTART, h.NYSTART, h.NZSTART));
        return matrix;
    }
}
ParserRegistry.add('mrc', MrcParser);
ParserRegistry.add('ccp4', MrcParser);
ParserRegistry.add('map', MrcParser);

/**
 * @file Xplor Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reWhitespace = /\s+/;
function parseNumberLine(line) {
    return line.trim().split(reWhitespace).map(parseFloat);
}
class XplorParser extends VolumeParser {
    get type() { return 'xplor'; }
    _parse() {
        // http://hincklab.uthscsa.edu/html/soft_packs/msi_docs/insight980/xplor/formats.html
        // http://www.mrc-lmb.cam.ac.uk/public/xtal/doc/cns/cns_1.3/tutorial/formats/maps/text.html
        if (Debug)
            Log.time('XplorParser._parse ' + this.name);
        const v = this.volume;
        const headerLines = this.streamer.peekLines(8);
        const header = {};
        let infoStart;
        if (headerLines[2].startsWith('REMARKS')) {
            infoStart = parseInt(headerLines[1].substring(0, 8)) + 2;
        }
        else {
            infoStart = 5;
        }
        const dataStart = infoStart + 3;
        const gridInfo = parseNumberLine(headerLines[infoStart]);
        header.NA = gridInfo[0];
        header.AMIN = gridInfo[1];
        header.AMAX = gridInfo[2];
        header.NB = gridInfo[3];
        header.BMIN = gridInfo[4];
        header.BMAX = gridInfo[5];
        header.NC = gridInfo[6];
        header.CMIN = gridInfo[7];
        header.CMAX = gridInfo[8];
        const cellInfo = parseNumberLine(headerLines[infoStart + 1]);
        header.a = cellInfo[0] * this.voxelSize;
        header.b = cellInfo[1] * this.voxelSize;
        header.c = cellInfo[2] * this.voxelSize;
        header.alpha = cellInfo[3];
        header.beta = cellInfo[4];
        header.gamma = cellInfo[5];
        const na = header.AMAX - header.AMIN + 1;
        const nb = header.BMAX - header.BMIN + 1;
        const nc = header.CMAX - header.CMIN + 1;
        const n = na * nb * nc;
        const data = new Float32Array(n);
        const lineSection = Math.ceil(1 + (na * nb) / 6);
        let count = 0;
        let lineNo = 0;
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i];
                if (lineNo >= dataStart && (lineNo - dataStart) % lineSection !== 0 && count < n) {
                    for (let j = 0, lj = 6; j < lj; ++j) {
                        const value = parseFloat(line.substr(12 * j, 12));
                        if (isNaN(value)) {
                            break;
                        } // Last line of map section
                        data[count++] = value;
                    }
                }
                else if (count === n) {
                    const lt = line.trim();
                    if (lt && lt !== '-9999') {
                        const ls = parseNumberLine(line);
                        header.RAVE = ls[0];
                        header.RSIGMA = ls[1];
                    }
                }
                ++lineNo;
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        v.header = header;
        v.setData(data, na, nb, nc);
        if (header.RAVE !== 0 && header.RSIGMA !== 1) {
            v.setStats(undefined, undefined, header.RAVE, header.RSIGMA);
        }
        if (Debug)
            Log.timeEnd('XplorParser._parse ' + this.name);
    }
    getMatrix() {
        const h = this.volume.header;
        const basisX = [
            h.a,
            0,
            0
        ];
        const basisY = [
            h.b * Math.cos(Math.PI / 180.0 * h.gamma),
            h.b * Math.sin(Math.PI / 180.0 * h.gamma),
            0
        ];
        const basisZ = [
            h.c * Math.cos(Math.PI / 180.0 * h.beta),
            h.c * (Math.cos(Math.PI / 180.0 * h.alpha) -
                Math.cos(Math.PI / 180.0 * h.gamma) *
                    Math.cos(Math.PI / 180.0 * h.beta)) / Math.sin(Math.PI / 180.0 * h.gamma),
            0
        ];
        basisZ[2] = Math.sqrt(h.c * h.c * Math.sin(Math.PI / 180.0 * h.beta) *
            Math.sin(Math.PI / 180.0 * h.beta) - basisZ[1] * basisZ[1]);
        const basis = [[], basisX, basisY, basisZ];
        const nxyz = [0, h.NA, h.NB, h.NC];
        const mapcrs = [0, 1, 2, 3];
        const matrix = new Matrix4();
        matrix.set(basis[mapcrs[1]][0] / nxyz[mapcrs[1]], basis[mapcrs[2]][0] / nxyz[mapcrs[2]], basis[mapcrs[3]][0] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][1] / nxyz[mapcrs[1]], basis[mapcrs[2]][1] / nxyz[mapcrs[2]], basis[mapcrs[3]][1] / nxyz[mapcrs[3]], 0, basis[mapcrs[1]][2] / nxyz[mapcrs[1]], basis[mapcrs[2]][2] / nxyz[mapcrs[2]], basis[mapcrs[3]][2] / nxyz[mapcrs[3]], 0, 0, 0, 0, 1);
        matrix.multiply(new Matrix4().makeTranslation(h.AMIN, h.BMIN, h.CMIN));
        return matrix;
    }
}
ParserRegistry.add('xplor', XplorParser);
ParserRegistry.add('cns', XplorParser);

/**
 * @file Kin Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function hsvToRgb(h, s, v) {
    h /= 360;
    s /= 100;
    v /= 100;
    let r, g, b;
    const i = Math.floor(h * 6);
    const f = h * 6 - i;
    const p = v * (1 - s);
    const q = v * (1 - f * s);
    const t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            r = v;
            g = t;
            b = p;
            break;
        case 1:
            r = q;
            g = v;
            b = p;
            break;
        case 2:
            r = p;
            g = v;
            b = t;
            break;
        case 3:
            r = p;
            g = q;
            b = v;
            break;
        case 4:
            r = t;
            g = p;
            b = v;
            break;
        case 5:
            r = v;
            g = p;
            b = q;
            break;
    }
    return [r, g, b];
}
const ColorDict = {
    red: hsvToRgb(0, 100, 100),
    orange: hsvToRgb(20, 100, 100),
    gold: hsvToRgb(40, 100, 100),
    yellow: hsvToRgb(60, 100, 100),
    lime: hsvToRgb(80, 100, 100),
    green: hsvToRgb(120, 80, 100),
    sea: hsvToRgb(150, 100, 100),
    cyan: hsvToRgb(180, 100, 85),
    sky: hsvToRgb(210, 75, 95),
    blue: hsvToRgb(240, 70, 100),
    purple: hsvToRgb(275, 75, 100),
    magenta: hsvToRgb(300, 95, 100),
    hotpink: hsvToRgb(335, 100, 100),
    pink: hsvToRgb(350, 55, 100),
    peach: hsvToRgb(25, 75, 100),
    lilac: hsvToRgb(275, 55, 100),
    pinktint: hsvToRgb(340, 30, 100),
    peachtint: hsvToRgb(25, 50, 100),
    yellowtint: hsvToRgb(60, 50, 100),
    greentint: hsvToRgb(135, 40, 100),
    bluetint: hsvToRgb(220, 40, 100),
    lilactint: hsvToRgb(275, 35, 100),
    white: hsvToRgb(0, 0, 100),
    gray: hsvToRgb(0, 0, 50),
    brown: hsvToRgb(20, 45, 75),
    deadwhite: [1, 1, 1],
    deadblack: [0, 0, 0],
    invisible: [0, 0, 0]
};
const reWhitespaceComma = /[\s,]+/;
const reCurlyWhitespace = /[^{}\s]*{[^{}]+}|[^{}\s]+/g;
const reTrimCurly = /^{+|}+$/g;
const reTrimQuotes = /^['"]+|['"]+$/g;
const reCollapseEqual = /\s*=\s*/g;
function parseListDef(line) {
    let name;
    let defaultColor;
    let master = [];
    let width;
    line = line.replace(reCollapseEqual, '=');
    const lm = line.match(reCurlyWhitespace);
    for (let j = 1; j < lm.length; ++j) {
        const e = lm[j];
        if (e[0] === '{') {
            name = e.substring(1, e.length - 1);
        }
        else {
            const es = e.split('=');
            if (es.length === 2) {
                if (es[0] === 'color') {
                    defaultColor = ColorDict[es[1]];
                }
                else if (es[0] === 'width') {
                    width = parseInt(es[1]);
                }
                else if (es[0] === 'master') {
                    master.push(es[1].replace(reTrimCurly, ''));
                }
            }
        }
    }
    return {
        listName: name,
        listColor: defaultColor,
        listMasters: master,
        listWidth: width
    };
}
function parseListElm(line) {
    line = line.trim();
    const idx1 = line.indexOf('{');
    const idx2 = line.indexOf('}');
    const ls = line.substr(idx2 + 1).split(reWhitespaceComma);
    const label = line.substr(idx1 + 1, idx2 - 1);
    const position = [
        parseFloat(ls[ls.length - 3]),
        parseFloat(ls[ls.length - 2]),
        parseFloat(ls[ls.length - 1])
    ];
    let color, width, radius;
    let lineBreak = false;
    let triangleBreak = false;
    for (let lsindex = 4; lsindex <= ls.length; lsindex++) {
        const literal = ls[ls.length - lsindex];
        if (literal in ColorDict) {
            color = ColorDict[ls[ls.length - lsindex]];
        }
        if (literal.startsWith('width')) {
            width = parseInt(literal.substring(5));
        }
        if (literal.startsWith('r=')) {
            radius = parseFloat(literal.split('=')[1]);
        }
        if (literal.startsWith('P')) {
            lineBreak = true;
        }
        if (literal.startsWith('X')) {
            triangleBreak = true;
        }
    }
    // const color = line[ idx2 + 1 ] === ' ' ? undefined : ColorDict[ ls[ 0 ] ]
    return {
        label: label,
        position: position,
        color: color,
        radius: radius,
        width: width,
        isLineBreak: lineBreak,
        isTriangleBreak: triangleBreak
    };
}
function parseStr(line) {
    const start = line.indexOf('{');
    const end = line.indexOf('}');
    return line.substring(start !== -1 ? start + 1 : 0, end !== -1 ? end : undefined).trim();
}
function parseFlag(line) {
    const end = line.indexOf('}');
    return end === -1 ? undefined : line.substr(end + 1).trim();
}
function parseGroup(line) {
    let name = '';
    let master = [];
    let flags = {};
    line = line.replace(reCollapseEqual, '=');
    const lm = line.match(reCurlyWhitespace);
    for (let j = 1; j < lm.length; ++j) {
        const e = lm[j];
        if (e[0] === '{') {
            name = e.substring(1, e.length - 1);
        }
        else {
            const es = e.split('=');
            if (es.length === 2) {
                if (es[0] === 'master') {
                    master.push(es[1].replace(reTrimCurly, ''));
                }
                else {
                    flags[es[0]] = es[1].replace(reTrimCurly, '');
                }
            }
            else {
                flags[es[0]] = true;
            }
        }
    }
    return { groupName: name,
        groupFlags: flags,
        groupMasters: master
    };
}
function convertKinTriangleArrays(ribbonObject) {
    // have to convert ribbons/triangle lists from stripdrawmode to normal drawmode
    // index                    [ 0 1 2 3 4 5 6 7 8 91011 ]
    // label [ 0 1 2 3 4 5 ] to [ 0 1 2 1 2 3 2 3 4 3 4 5 ]
    // convertedindex                                      [ 0 1 2 3 4 5 6 7 8 91011121314151617181920212223242526 ]
    // index          [ 0 1 2 3 4 5 6 7 8 91011121314 ]    [ 0 1 2 3 4 5 6 7 8 3 4 5 6 7 8 91011 6 7 8 91011121314 ]
    // position/color [ 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 ] to [ 0 0 0 1 1 1 2 2 2 1 1 1 2 2 2 3 3 3 2 2 2 3 3 3 4 4 4 ]
    let { labelArray, positionArray, colorArray, breakArray } = ribbonObject;
    let convertedLabels = [];
    for (let i = 0; i < (labelArray.length - 2) * 3; ++i) {
        convertedLabels[i] = labelArray[i - Math.floor(i / 3) * 2];
    }
    let convertedBreaks = [];
    for (let i = 0; i < (breakArray.length - 2) * 3; ++i) {
        convertedBreaks[i] = breakArray[i - Math.floor(i / 3) * 2];
    }
    let convertedPositions = [];
    for (let i = 0; i < (positionArray.length / 3 - 2) * 9; ++i) {
        convertedPositions[i] = positionArray[i - Math.floor(i / 9) * 6];
    }
    let convertedColors = [];
    for (let i = 0; i < (colorArray.length / 3 - 2) * 9; ++i) {
        convertedColors[i] = colorArray[i - Math.floor(i / 9) * 6];
    }
    let vector3Positions = [];
    for (let i = 0; i < (convertedPositions.length) / 3; ++i) {
        vector3Positions.push(new Vector3(convertedPositions[i * 3], convertedPositions[i * 3] + 1, convertedPositions[i * 3] + 2));
    }
    //let normals = []
    //for (let i = 0; i < vector3Positions.length - 1; ++i) {
    //  let normalVec3 = vector3Positions[i].cross(vector3Positions[i + 1])
    //  normals.push(normalVec3.x)
    //  normals.push(normalVec3.y)
    //  normals.push(normalVec3.z)
    //}
    return {
        name: ribbonObject.name,
        masterArray: ribbonObject.masterArray,
        labelArray: convertedLabels,
        positionArray: convertedPositions,
        breakArray: convertedBreaks,
        colorArray: convertedColors
    };
}
function removePointBreaksTriangleArrays(convertedRibbonObject) {
    // after converting ribbon/triangle arrys to drawmode, removed point break triangles
    // label [ 0 1 2 3 4 5 ] to [ 0 1 2 1 2 3 2 3 4 3 4 5 ]
    // position/color [ 0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 ] to [ 0 0 0 1 1 1 2 2 2 1 1 1 2 2 2 3 3 3 2 2 2 3 3 3 4 4 4 ]
    let { labelArray, positionArray, colorArray, breakArray } = convertedRibbonObject;
    let editedLabels = [];
    let editedPositions = [];
    let editedColors = [];
    let editedBreaks = [];
    for (let i = 0; i < breakArray.length / 3; i++) {
        let breakPointer = i * 3;
        let positionPointer = i * 9;
        if (!breakArray[breakPointer + 1] && !breakArray[breakPointer + 2]) {
            editedLabels.push(labelArray[breakPointer]);
            editedLabels.push(labelArray[breakPointer + 1]);
            editedLabels.push(labelArray[breakPointer + 2]);
            editedBreaks.push(breakArray[breakPointer]);
            editedBreaks.push(breakArray[breakPointer + 1]);
            editedBreaks.push(breakArray[breakPointer + 2]);
            editedPositions.push(positionArray[positionPointer]);
            editedPositions.push(positionArray[positionPointer + 1]);
            editedPositions.push(positionArray[positionPointer + 2]);
            editedPositions.push(positionArray[positionPointer + 3]);
            editedPositions.push(positionArray[positionPointer + 4]);
            editedPositions.push(positionArray[positionPointer + 5]);
            editedPositions.push(positionArray[positionPointer + 6]);
            editedPositions.push(positionArray[positionPointer + 7]);
            editedPositions.push(positionArray[positionPointer + 8]);
            editedColors.push(colorArray[positionPointer]);
            editedColors.push(colorArray[positionPointer + 1]);
            editedColors.push(colorArray[positionPointer + 2]);
            editedColors.push(colorArray[positionPointer + 3]);
            editedColors.push(colorArray[positionPointer + 4]);
            editedColors.push(colorArray[positionPointer + 5]);
            editedColors.push(colorArray[positionPointer + 6]);
            editedColors.push(colorArray[positionPointer + 7]);
            editedColors.push(colorArray[positionPointer + 8]);
        }
    }
    return {
        name: convertedRibbonObject.name,
        masterArray: convertedRibbonObject.masterArray,
        labelArray: editedLabels,
        positionArray: editedPositions,
        breakArray: editedBreaks,
        colorArray: editedColors
    };
}
class KinParser extends Parser {
    get type() { return 'kin'; }
    get __objName() { return 'kinemage'; }
    _parse() {
        // http://kinemage.biochem.duke.edu/software/king.php
        if (Debug)
            Log.time(`KinParser._parse ${this.name}`);
        const kinemage = {
            kinemage: undefined,
            onewidth: undefined,
            '1viewid': undefined,
            pdbfile: undefined,
            texts: [],
            text: '',
            captions: [],
            caption: '',
            groupDict: {},
            subgroupDict: {},
            masterDict: {},
            pointmasterDict: {},
            dotLists: [],
            vectorLists: [],
            ballLists: [],
            ribbonLists: []
        };
        this.kinemage = kinemage;
        let currentGroupMasters;
        let currentSubgroupMasters;
        let isDotList = false;
        let prevDotLabel = '';
        let dotDefaultColor;
        let dotLabel, dotPosition, dotColor;
        let isVectorList = false;
        let prevVecLabel = '';
        let prevVecPosition = null;
        let prevVecColor = null;
        let vecDefaultColor, vecDefaultWidth;
        let vecLabel1, vecLabel2, vecPosition1, vecPosition2, vecColor1, vecColor2;
        let isBallList = false;
        let prevBallLabel = '';
        let ballRadius, ballDefaultColor;
        let ballLabel, ballPosition, ballColor;
        let isRibbonList = false;
        let prevRibbonPointLabel = '';
        let ribbonListDefaultColor;
        let ribbonPointLabelArray, ribbonPointPositionArray, ribbonPointBreakArray, ribbonPointColorArray;
        let isText = false;
        let isCaption = false;
        // @vectorlist {mc} color= white  master= {mainchain}
        // { n   thr A   1  B13.79 1crnFH} P 17.047, 14.099, 3.625 { n   thr A   1  B13.79 1crnFH} L 17.047, 14.099, 3.625
        // @dotlist {x} color=white master={vdw contact} master={dots}
        // { CB  THR   1  A}sky  'P' 18.915,14.199,5.024
        function _parseChunkOfLines(_i, _n, lines) {
            for (let i = _i; i < _n; ++i) {
                const line = lines[i];
                if (line[0] === '@') {
                    isDotList = false;
                    isVectorList = false;
                    isBallList = false;
                    isRibbonList = false;
                    isText = false;
                    isCaption = false;
                }
                if (!line) {
                    isDotList = false;
                    isVectorList = false;
                    isBallList = false;
                    isRibbonList = false;
                }
                else if (line.startsWith('@dotlist')) {
                    // @dotlist {x} color=white master={vdw contact} master={dots}
                    let { listColor, listName, listMasters } = parseListDef(line);
                    isDotList = true;
                    prevDotLabel = '';
                    dotLabel = [];
                    dotPosition = [];
                    dotColor = [];
                    dotDefaultColor = listColor;
                    if (currentGroupMasters) {
                        listMasters = listMasters.concat(currentGroupMasters);
                    }
                    if (currentSubgroupMasters) {
                        listMasters = listMasters.concat(currentSubgroupMasters);
                    }
                    kinemage.dotLists.push({
                        name: listName,
                        masterArray: listMasters,
                        labelArray: dotLabel,
                        positionArray: dotPosition,
                        colorArray: dotColor
                    });
                }
                else if (line.startsWith('@vectorlist')) {
                    // @vectorlist {x} color=white master={small overlap} master={dots}
                    let { listMasters, listName, listWidth, listColor } = parseListDef(line);
                    if (listMasters) {
                        listMasters.forEach(function (name) {
                            if (!kinemage.masterDict[name]) {
                                kinemage.masterDict[name] = {
                                    indent: false,
                                    visible: false
                                };
                            }
                        });
                    }
                    isVectorList = true;
                    prevVecLabel = '';
                    prevVecPosition = null;
                    prevVecColor = null;
                    vecLabel1 = [];
                    vecLabel2 = [];
                    vecPosition1 = [];
                    vecPosition2 = [];
                    vecColor1 = [];
                    vecColor2 = [];
                    vecDefaultColor = listColor;
                    vecDefaultWidth = [];
                    if (listWidth) {
                        vecDefaultWidth.push(listWidth);
                    }
                    if (currentGroupMasters) {
                        listMasters = listMasters.concat(currentGroupMasters);
                    }
                    if (currentSubgroupMasters) {
                        listMasters = listMasters.concat(currentSubgroupMasters);
                    }
                    kinemage.vectorLists.push({
                        name: listName,
                        masterArray: listMasters,
                        label1Array: vecLabel1,
                        label2Array: vecLabel2,
                        position1Array: vecPosition1,
                        position2Array: vecPosition2,
                        color1Array: vecColor1,
                        color2Array: vecColor2,
                        width: vecDefaultWidth
                    });
                }
                else if (line.startsWith('@balllist')) {
                    let { listName, listColor, listMasters } = parseListDef(line);
                    if (listMasters) {
                        listMasters.forEach(function (name) {
                            if (!kinemage.masterDict[name]) {
                                kinemage.masterDict[name] = {
                                    indent: false,
                                    visible: false
                                };
                            }
                        });
                    }
                    isBallList = true;
                    prevBallLabel = '';
                    ballLabel = [];
                    ballRadius = [];
                    ballPosition = [];
                    ballColor = [];
                    ballDefaultColor = listColor;
                    if (currentGroupMasters) {
                        listMasters = listMasters.concat(currentGroupMasters);
                    }
                    if (currentSubgroupMasters) {
                        listMasters = listMasters.concat(currentSubgroupMasters);
                    }
                    kinemage.ballLists.push({
                        name: listName,
                        masterArray: listMasters,
                        labelArray: ballLabel,
                        radiusArray: ballRadius,
                        positionArray: ballPosition,
                        colorArray: ballColor
                    });
                }
                else if (line.startsWith('@ribbonlist') || line.startsWith('@trianglelist')) {
                    let { listMasters, listName, listColor } = parseListDef(line);
                    if (listMasters) {
                        listMasters.forEach(function (name) {
                            if (!kinemage.masterDict[name]) {
                                kinemage.masterDict[name] = {
                                    indent: false,
                                    visible: false
                                };
                            }
                        });
                    }
                    isRibbonList = true;
                    prevRibbonPointLabel = '';
                    ribbonPointLabelArray = [];
                    ribbonPointPositionArray = [];
                    ribbonPointBreakArray = [];
                    ribbonPointColorArray = [];
                    ribbonListDefaultColor = listColor;
                    if (currentGroupMasters) {
                        listMasters = listMasters.concat(currentGroupMasters);
                    }
                    if (currentSubgroupMasters) {
                        listMasters = listMasters.concat(currentSubgroupMasters);
                    }
                    kinemage.ribbonLists.push({
                        name: listName,
                        masterArray: listMasters,
                        labelArray: ribbonPointLabelArray,
                        positionArray: ribbonPointPositionArray,
                        breakArray: ribbonPointBreakArray,
                        colorArray: ribbonPointColorArray
                    });
                }
                else if (line.startsWith('@text')) {
                    isText = true;
                    kinemage.texts.push(line.substr(5));
                }
                else if (line.startsWith('@caption')) {
                    isCaption = true;
                    kinemage.captions.push(line.substr(8));
                }
                else if (isDotList) {
                    // { CB  THR   1  A}sky  'P' 18.915,14.199,5.024
                    let { label, color, position } = parseListElm(line);
                    if (label === '"') {
                        label = prevDotLabel;
                    }
                    else {
                        prevDotLabel = label;
                    }
                    if (color === undefined) {
                        color = dotDefaultColor;
                    }
                    dotLabel.push(label);
                    dotPosition.push(...position);
                    dotColor.push(...color);
                }
                else if (isVectorList) {
                    // { n   thr A   1  B13.79 1crnFH} P 17.047, 14.099, 3.625 { n   thr A   1  B13.79 1crnFH} L 17.047, 14.099, 3.625
                    let doubleLine = line.replace(/(?!^){/g, '\n{');
                    let splitLine = doubleLine.split(/\n/);
                    for (var i2 = 0; i2 < splitLine.length; i2++) {
                        let singlePointLine = splitLine[i2];
                        let { label, color, width, position, isLineBreak } = parseListElm(singlePointLine);
                        if (label === '"') {
                            label = prevVecLabel;
                        }
                        else {
                            prevVecLabel = label;
                        }
                        if (color === undefined) {
                            color = vecDefaultColor;
                        }
                        if (!isLineBreak) {
                            if (prevVecPosition !== null) {
                                if (width) {
                                    vecDefaultWidth.push(width);
                                }
                                vecLabel1.push(prevVecLabel);
                                vecPosition1.push(...prevVecPosition);
                                vecColor1.push(...prevVecColor);
                                vecLabel2.push(label);
                                vecPosition2.push(...position);
                                vecColor2.push(...color);
                            }
                        }
                        prevVecLabel = label;
                        prevVecPosition = position;
                        prevVecColor = color;
                    }
                }
                else if (isBallList) {
                    // {cb arg A   1   1.431 -106.80} r=1.431  39.085, 8.083, 22.182
                    let { label, radius, color, position } = parseListElm(line);
                    if (label === '"') {
                        label = prevBallLabel;
                    }
                    else {
                        prevBallLabel = label;
                    }
                    if (radius === undefined) {
                        radius = 1; // temporary default radius
                    }
                    if (color === undefined) {
                        color = ballDefaultColor;
                    }
                    ballLabel.push(label);
                    ballRadius.push(radius);
                    ballPosition.push(...position);
                    ballColor.push(...color);
                }
                else if (isRibbonList) {
                    let { label, color, position, isTriangleBreak } = parseListElm(line);
                    if (label === '"') {
                        label = prevRibbonPointLabel;
                    }
                    else {
                        prevRibbonPointLabel = label;
                    }
                    if (color === undefined) {
                        color = ribbonListDefaultColor;
                    }
                    ribbonPointLabelArray.push(label);
                    ribbonPointPositionArray.push(...position);
                    ribbonPointBreakArray.push(isTriangleBreak);
                    ribbonPointColorArray.push(...color);
                }
                else if (isText) {
                    kinemage.texts.push(line);
                }
                else if (isCaption) {
                    kinemage.captions.push(line);
                }
                else if (line.startsWith('@kinemage')) {
                    kinemage.kinemage = parseInt(line.substr(9).trim());
                }
                else if (line.startsWith('@onewidth')) {
                    kinemage.onewidth = true;
                }
                else if (line.startsWith('@1viewid')) {
                    kinemage['1viewid'] = parseStr(line);
                }
                else if (line.startsWith('@pdbfile')) {
                    kinemage.pdbfile = parseStr(line);
                }
                else if (line.startsWith('@group')) {
                    let { groupName, groupFlags, groupMasters } = parseGroup(line);
                    if (!kinemage.groupDict[groupName]) {
                        kinemage.groupDict[groupName] = {
                            dominant: false,
                            animate: false
                        };
                        currentGroupMasters = groupMasters;
                    }
                    if (currentGroupMasters) {
                        currentGroupMasters.forEach(function (master) {
                            if (!kinemage.masterDict[master]) {
                                kinemage.masterDict[master] = {
                                    indent: false,
                                    visible: false
                                };
                            }
                        });
                    }
                    for (let key in groupFlags) {
                        kinemage.groupDict[groupName][key] = groupFlags[key];
                    }
                }
                else if (line.startsWith('@subgroup')) {
                    const { groupName, groupFlags, groupMasters } = parseGroup(line);
                    if (!kinemage.subgroupDict[groupName]) {
                        kinemage.subgroupDict[groupName] = {
                            dominant: false,
                            animate: false
                        };
                        currentSubgroupMasters = groupMasters;
                    }
                    if (currentSubgroupMasters) {
                        currentSubgroupMasters.forEach(function (master) {
                            if (!kinemage.masterDict[master]) {
                                kinemage.masterDict[master] = {
                                    indent: false,
                                    visible: false
                                };
                            }
                        });
                    }
                    for (let key in groupFlags) {
                        kinemage.subgroupDict[groupName][key] = groupFlags[key];
                    }
                }
                else if (line.startsWith('@master')) {
                    const name = parseStr(line);
                    const flag = parseFlag(line);
                    if (!kinemage.masterDict[name]) {
                        kinemage.masterDict[name] = {
                            indent: false,
                            visible: false
                        };
                    }
                    if (flag === 'on') {
                        kinemage.masterDict[name].visible = true;
                    }
                    else if (flag === 'off') {
                        kinemage.masterDict[name].visible = false;
                    }
                    else if (flag === 'indent') {
                        kinemage.masterDict[name].indent = true;
                    }
                    else ;
                }
                else if (line.startsWith('@pointmaster')) {
                    const { groupName, groupFlags } = parseGroup(line);
                    kinemage.pointmasterDict[groupName] = {
                        id: Object.keys(groupFlags)[0].replace(reTrimQuotes, '')
                    };
                }
                else {
                    console.log(line);
                }
            }
        }
        this.streamer.eachChunkOfLines(function (lines /*, chunkNo, chunkCount */) {
            _parseChunkOfLines(0, lines.length, lines);
        });
        kinemage.text = kinemage.texts.join('\n').trim();
        kinemage.caption = kinemage.captions.join('\n').trim();
        if (kinemage.ribbonLists) {
            let convertedLists = [];
            kinemage.ribbonLists.forEach(function (listObject) {
                convertedLists.push(removePointBreaksTriangleArrays(convertKinTriangleArrays(listObject)));
            });
            kinemage.ribbonLists = convertedLists;
        }
        if (Debug)
            Log.timeEnd(`KinParser._parse ${this.name}`);
    }
}
ParserRegistry.add('kin', KinParser);

/**
 * @file Surface Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class SurfaceParser extends Parser {
    constructor(streamer, params) {
        super(streamer, params);
        this.loader = this.getLoader();
        this.surface = new Surface(this.name, this.path);
    }
    get type() { return 'surface'; }
    get __objName() { return 'surface'; }
    _parse() {
        var geometry = this.loader.parse(this.streamer.asText());
        this.surface.fromGeometry(geometry);
    }
}

/**
 * @file Obj Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * OBJLoader
 * @class
 * @private
 * @author mrdoob / http://mrdoob.com/
 */
const OBJLoader = (function OBJLoader() {
    this.regexp = {
        // v float float float
        vertex_pattern: /^v\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
        // vn float float float
        normal_pattern: /^vn\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
        // vt float float
        uv_pattern: /^vt\s+([\d.+\-eE]+)\s+([\d.+\-eE]+)/,
        // f vertex vertex vertex
        face_vertex: /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
        // f vertex/uv vertex/uv vertex/uv
        face_vertex_uv: /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
        face_vertex_uv_normal: /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
        // f vertex//normal vertex//normal vertex//normal
        face_vertex_normal: /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
        // o object_name | g group_name
        object_pattern: /^[og]\s*(.+)?/,
        // s boolean
        smoothing_pattern: /^s\s+(\d+|on|off)/,
        // mtllib file_reference
        material_library_pattern: /^mtllib /,
        // usemtl material_name
        material_use_pattern: /^usemtl /
    };
});
OBJLoader.prototype = {
    constructor: OBJLoader,
    setPath: function (value) {
        this.path = value;
    },
    _createParserState: function () {
        var state = {
            objects: [],
            object: {},
            vertices: [],
            normals: [],
            startObject: function (name, fromDeclaration) {
                // If the current object (initial from reset) is not from a g/o declaration in the parsed
                // file. We need to use it for the first parsed g/o to keep things in sync.
                if (this.object && this.object.fromDeclaration === false) {
                    this.object.name = name;
                    this.object.fromDeclaration = (fromDeclaration !== false);
                    return;
                }
                this.object = {
                    name: name || '',
                    geometry: {
                        vertices: [],
                        normals: []
                    },
                    fromDeclaration: (fromDeclaration !== false)
                };
                this.objects.push(this.object);
            },
            parseVertexIndex: function (value, len) {
                var index = parseInt(value, 10);
                return (index >= 0 ? index - 1 : index + len / 3) * 3;
            },
            parseNormalIndex: function (value, len) {
                var index = parseInt(value, 10);
                return (index >= 0 ? index - 1 : index + len / 3) * 3;
            },
            addVertex: function (a, b, c) {
                var src = this.vertices;
                var dst = this.object.geometry.vertices;
                dst.push(src[a + 0]);
                dst.push(src[a + 1]);
                dst.push(src[a + 2]);
                dst.push(src[b + 0]);
                dst.push(src[b + 1]);
                dst.push(src[b + 2]);
                dst.push(src[c + 0]);
                dst.push(src[c + 1]);
                dst.push(src[c + 2]);
            },
            addVertexLine: function (a) {
                var src = this.vertices;
                var dst = this.object.geometry.vertices;
                dst.push(src[a + 0]);
                dst.push(src[a + 1]);
                dst.push(src[a + 2]);
            },
            addNormal: function (a, b, c) {
                var src = this.normals;
                var dst = this.object.geometry.normals;
                dst.push(src[a + 0]);
                dst.push(src[a + 1]);
                dst.push(src[a + 2]);
                dst.push(src[b + 0]);
                dst.push(src[b + 1]);
                dst.push(src[b + 2]);
                dst.push(src[c + 0]);
                dst.push(src[c + 1]);
                dst.push(src[c + 2]);
            },
            addFace: function (a, b, c, d, na, nb, nc, nd) {
                var vLen = this.vertices.length;
                var ia = this.parseVertexIndex(a, vLen);
                var ib = this.parseVertexIndex(b, vLen);
                var ic = this.parseVertexIndex(c, vLen);
                var id;
                if (d === undefined) {
                    this.addVertex(ia, ib, ic);
                }
                else {
                    id = this.parseVertexIndex(d, vLen);
                    this.addVertex(ia, ib, id);
                    this.addVertex(ib, ic, id);
                }
                if (na !== undefined) {
                    // Normals are many times the same. If so, skip function call and parseInt.
                    var nLen = this.normals.length;
                    ia = this.parseNormalIndex(na, nLen);
                    ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);
                    ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);
                    if (d === undefined) {
                        this.addNormal(ia, ib, ic);
                    }
                    else {
                        id = this.parseNormalIndex(nd, nLen);
                        this.addNormal(ia, ib, id);
                        this.addNormal(ib, ic, id);
                    }
                }
            },
            addLineGeometry: function (vertices) {
                this.object.geometry.type = 'Line';
                var vLen = this.vertices.length;
                for (var vi = 0, l = vertices.length; vi < l; vi++) {
                    this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));
                }
            }
        };
        state.startObject('', false);
        return state;
    },
    parse: function (text) {
        var state = this._createParserState();
        if (text.indexOf('\r\n') !== -1) {
            // This is faster than String.split with regex that splits on both
            text = text.replace(/\r\n/g, '\n');
        }
        if (text.indexOf('\\\n') !== -1) {
            // join lines separated by a line continuation character (\)
            text = text.replace(/\\\n/g, '');
        }
        var i, l;
        var lines = text.split('\n');
        var line = '';
        var lineFirstChar = '';
        var lineSecondChar = '';
        var lineLength = 0;
        var result = [];
        // Faster to just trim left side of the line. Use if available.
        var trimLeft = (typeof ''.trimLeft === 'function');
        for (i = 0, l = lines.length; i < l; i++) {
            line = lines[i];
            line = trimLeft ? line.trimLeft() : line.trim();
            lineLength = line.length;
            if (lineLength === 0)
                continue;
            lineFirstChar = line.charAt(0);
            // @todo invoke passed in handler if any
            if (lineFirstChar === '#')
                continue;
            if (lineFirstChar === 'v') {
                lineSecondChar = line.charAt(1);
                if (lineSecondChar === ' ' && (result = this.regexp.vertex_pattern.exec(line)) !== null) {
                    // 0                  1      2      3
                    // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                    state.vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                }
                else if (lineSecondChar === 'n' && (result = this.regexp.normal_pattern.exec(line)) !== null) {
                    // 0                   1      2      3
                    // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
                    state.normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));
                }
                else if (lineSecondChar === 't' && this.regexp.uv_pattern.exec(line) !== null) ;
                else {
                    throw new Error("Unexpected vertex/normal/uv line: '" + line + "'");
                }
            }
            else if (lineFirstChar === 'f') {
                if ((result = this.regexp.face_vertex_uv_normal.exec(line)) !== null) {
                    // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
                    // 0                        1    2    3    4    5    6    7    8    9   10         11         12
                    // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]
                    state.addFace(result[1], result[4], result[7], result[10], 
                    // result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],  // ignore uv part
                    result[3], result[6], result[9], result[12]);
                }
                else if (this.regexp.face_vertex_uv.exec(line) !== null) ;
                else if ((result = this.regexp.face_vertex_normal.exec(line)) !== null) {
                    // f vertex//normal vertex//normal vertex//normal
                    // 0                     1    2    3    4    5    6   7          8
                    // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]
                    state.addFace(result[1], result[3], result[5], result[7], result[2], result[4], result[6], result[8]);
                }
                else if ((result = this.regexp.face_vertex.exec(line)) !== null) {
                    // f vertex vertex vertex
                    // 0            1    2    3   4
                    // ["f 1 2 3", "1", "2", "3", undefined]
                    state.addFace(result[1], result[2], result[3], result[4]);
                }
                else {
                    throw new Error("Unexpected face line: '" + line + "'");
                }
            }
            else if (lineFirstChar === 'l') {
                var lineParts = line.substring(1).trim().split(' ');
                var lineVertices = [];
                var lineUVs = [];
                if (line.indexOf('/') === -1) {
                    lineVertices = lineParts;
                }
                else {
                    for (var li = 0, llen = lineParts.length; li < llen; li++) {
                        var parts = lineParts[li].split('/');
                        if (parts[0] !== '')
                            lineVertices.push(parts[0]);
                        if (parts[1] !== '')
                            lineUVs.push(parts[1]);
                    }
                }
                state.addLineGeometry(lineVertices, lineUVs);
            }
            else if ((result = this.regexp.object_pattern.exec(line)) !== null) {
                // o object_name
                // or
                // g group_name
                var name = result[0].substr(1).trim();
                state.startObject(name);
                // ignore material related lines
                // eslint-disable-next-line no-empty
            }
            else if (this.regexp.material_use_pattern.test(line)) ;
            else if (this.regexp.material_library_pattern.test(line)) ;
            else if (this.regexp.smoothing_pattern.exec(line) !== null) ;
            else {
                // Handle null terminated files without exception
                if (line === '\0')
                    continue;
                throw new Error("Unexpected line: '" + line + "'");
            }
        }
        var container = [];
        for (i = 0, l = state.objects.length; i < l; i++) {
            var object = state.objects[i];
            var geometry = object.geometry;
            // Skip o/g line declarations that did not follow with any faces
            if (geometry.vertices.length === 0)
                continue;
            var buffergeometry = new BufferGeometry();
            buffergeometry.setAttribute('position', new BufferAttribute(new Float32Array(geometry.vertices), 3));
            if (geometry.normals.length > 0) {
                buffergeometry.setAttribute('normal', new BufferAttribute(new Float32Array(geometry.normals), 3));
            }
            else {
                buffergeometry.computeVertexNormals();
            }
            container.push(buffergeometry);
        }
        return container;
    }
};
class ObjParser extends SurfaceParser {
    get type() { return 'obj'; }
    getLoader() {
        return new OBJLoader();
    }
}
ParserRegistry.add('obj', ObjParser);

/**
 * Port of PLYLoader from the MIT-licensed three.js project:
 * https://github.com/mrdoob/three.js/blob/97b5d428d598228cae9b206d9a321f18d53a3e86/examples/jsm/loaders/PLYLoader.js
 *
 * The original code has been modified to work with NGL and TypeScript.
 * Adaptation by @fredludlow
 *
 * Description: A THREE loader for PLY ASCII files (known as the Polygon
 * File Format or the Stanford Triangle Format).
 *
 * Limitations: ASCII decoding assumes file is UTF-8.
 *
 * Usage:
 *	const loader = new PLYLoader();
 *	loader.load('./models/ply/ascii/dolphins.ply', function (geometry) {
 *
 *		scene.add( new THREE.Mesh( geometry ) );
 *
 *	} );
 *
 * If the PLY file uses non standard property names, they can be mapped while
 * loading. For example, the following maps the properties
 * “diffuse_(red|green|blue)” in the file to standard color names.
 *
 * loader.setPropertyNameMapping( {
 *	diffuse_red: 'red',
 *	diffuse_green: 'green',
 *	diffuse_blue: 'blue'
 * } );
 *
 * Custom properties outside of the defaults for position, uv, normal
 * and color attributes can be added using the setCustomPropertyNameMapping method.
 * For example, the following maps the element properties “custom_property_a”
 * and “custom_property_b” to an attribute “customAttribute” with an item size of 2.
 * Attribute item sizes are set from the number of element properties in the property array.
 *
 * loader.setCustomPropertyNameMapping( {
 *	customAttribute: ['custom_property_a', 'custom_property_b'],
 * } );
 *
 */
const dataTypes = [
    'int8', 'char', 'uint8', 'uchar',
    'int16', 'short', 'uint16', 'ushort',
    'int32', 'int', 'uint32', 'uint',
    'float32', 'float', 'float64', 'double'
];
// Define a function that checks if the string is a valid DataType
function is(type) {
    return dataTypes.includes(type);
}
// Wrapper function to check and return the DataType
function getDataType(type) {
    if (is(type)) {
        return type;
    }
    throw new Error(`Unsupported data type: ${type}`);
}
function assertPLYElementSpec(element) {
    if (typeof element !== 'object' || element === null) {
        throw new Error('Expected element to be an object');
    }
    if (typeof element.name !== 'string') {
        throw new Error('Expected element.name to be a string');
    }
    if (typeof element.count !== 'number') {
        throw new Error('Expected element.count to be a number');
    }
    if (!Array.isArray(element.properties)) {
        throw new Error('Expected element.properties to be an array');
    }
}
function getBinaryReader(dataview, type, little_endian) {
    switch (type) {
        case 'int8':
        case 'char':
            return {
                read: (at) => dataview.getInt8(at),
                size: 1
            };
        case 'uint8':
        case 'uchar':
            return {
                read: (at) => dataview.getUint8(at),
                size: 1
            };
        case 'int16':
        case 'short':
            return {
                read: (at) => dataview.getInt16(at, little_endian),
                size: 2
            };
        case 'uint16':
        case 'ushort':
            return {
                read: (at) => dataview.getUint16(at, little_endian),
                size: 2
            };
        case 'int32':
        case 'int':
            return {
                read: (at) => dataview.getInt32(at, little_endian),
                size: 4
            };
        case 'uint32':
        case 'uint':
            return {
                read: (at) => dataview.getUint32(at, little_endian),
                size: 4
            };
        case 'float32':
        case 'float':
            return {
                read: (at) => dataview.getFloat32(at, little_endian),
                size: 4
            };
        case 'float64':
        case 'double':
            return {
                read: (at) => dataview.getFloat64(at, little_endian),
                size: 8
            };
        default:
            throw new Error(`Unsupported data type: ${type}`);
    }
}
function binaryReadElement(at, properties) {
    const element = {};
    let read = 0;
    for (let i = 0; i < properties.length; i++) {
        const property = properties[i];
        const valueReader = property.valueReader;
        if (property.isList) {
            const list = [];
            const n = property.countReader.read(at + read);
            read += property.countReader.size;
            for (let j = 0; j < n; j++) {
                list.push(valueReader.read(at + read));
                read += valueReader.size;
            }
            element[property.name] = list;
        }
        else {
            element[property.name] = valueReader.read(at + read);
            read += valueReader.size;
        }
    }
    // assertPLYElement(element)
    return [element, read]; // TODO: We're sloppy about what types are actually available in PLYElement
}
class PLYLoader {
    constructor() {
        this._color = new Color();
        this.propertyNameMapping = {};
        this.customPropertyMapping = {};
    }
    setPropertyNameMapping(mapping) {
        this.propertyNameMapping = mapping;
    }
    createBuffer() {
        const buffer = {
            indices: [],
            vertices: [],
            normals: [],
            uvs: [],
            faceVertexUvs: [],
            colors: [],
            faceVertexColors: []
        };
        for (const customProperty of Object.keys(this.customPropertyMapping)) {
            buffer[customProperty] = [];
        }
        return buffer;
    }
    extractHeaderText(bytes) {
        let i = 0;
        let cont = true;
        let line = '';
        const lines = [];
        const startLine = new TextDecoder().decode(bytes.subarray(0, 5));
        const hasCRNL = /^ply\r\n/.test(startLine);
        do {
            const c = String.fromCharCode(bytes[i++]);
            if (c !== '\n' && c !== '\r') {
                line += c;
            }
            else {
                if (line === 'end_header')
                    cont = false;
                if (line !== '') {
                    lines.push(line);
                    line = '';
                }
            }
        } while (cont && i < bytes.length);
        // ascii section using \r\n as line endings
        if (hasCRNL === true)
            i++;
        return { headerText: lines.join('\r') + '\r', headerLength: i };
    }
    handleElement(buffer, elementName, element, cacheEntry) {
        if (elementName === 'vertex') {
            buffer.vertices.push(element[cacheEntry.attrX], element[cacheEntry.attrY], element[cacheEntry.attrZ]);
            if (cacheEntry.attrNX !== null && cacheEntry.attrNY !== null && cacheEntry.attrNZ !== null) {
                buffer.normals.push(element[cacheEntry.attrNX], element[cacheEntry.attrNY], element[cacheEntry.attrNZ]);
            }
            if (cacheEntry.attrS !== null && cacheEntry.attrT !== null) {
                buffer.uvs.push(element[cacheEntry.attrS], element[cacheEntry.attrT]);
            }
            if (cacheEntry.attrR !== null && cacheEntry.attrG !== null && cacheEntry.attrB !== null) {
                this._color.setRGB(element[cacheEntry.attrR] / 255.0, element[cacheEntry.attrG] / 255.0, element[cacheEntry.attrB] / 255.0).convertSRGBToLinear();
                buffer.colors.push(this._color.r, this._color.g, this._color.b);
            }
            for (const customProperty of Object.keys(this.customPropertyMapping)) {
                for (const elementProperty of this.customPropertyMapping[customProperty]) {
                    buffer[customProperty].push(element[elementProperty]);
                }
            }
        }
        else if (elementName === 'face') {
            const vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338
            const texcoord = element.texcoord;
            if (vertex_indices.length === 3) {
                buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);
                if (texcoord && texcoord.length === 6) {
                    buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);
                    buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);
                    buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);
                }
            }
            else if (vertex_indices.length === 4) {
                buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);
                buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);
            }
            // face colors
            if (cacheEntry.attrR !== null && cacheEntry.attrG !== null && cacheEntry.attrB !== null) {
                this._color.setRGB(element[cacheEntry.attrR] / 255.0, element[cacheEntry.attrG] / 255.0, element[cacheEntry.attrB] / 255.0).convertSRGBToLinear();
                buffer.faceVertexColors.push(this._color.r, this._color.g, this._color.b);
                buffer.faceVertexColors.push(this._color.r, this._color.g, this._color.b);
                buffer.faceVertexColors.push(this._color.r, this._color.g, this._color.b);
            }
        }
    }
    parse(data) {
        let geometry;
        if (data instanceof ArrayBuffer) {
            const bytes = new Uint8Array(data);
            const { headerText, headerLength } = this.extractHeaderText(bytes);
            const header = this.parseHeader(headerText, headerLength);
            if (header.format === 'ascii') {
                const text = new TextDecoder().decode(bytes);
                geometry = this.parseASCII(text, header);
            }
            else {
                geometry = this.parseBinary(bytes, header);
            }
        }
        else {
            geometry = this.parseASCII(data, this.parseHeader(data));
        }
        return geometry;
    }
    parseHeader(data, headerLength = 0) {
        const patternHeader = /^ply([\s\S]*)end_header(\r\n|\r|\n)/;
        let headerText = '';
        const result = patternHeader.exec(data);
        if (result !== null) {
            headerText = result[1];
        }
        const header = {
            comments: [],
            elements: [],
            headerLength: headerLength,
            objInfo: '',
            format: '',
            version: ''
        };
        const lines = headerText.split(/\r\n|\r|\n/);
        let currentElement;
        for (let i = 0; i < lines.length; i++) {
            let line = lines[i];
            line = line.trim();
            if (line === '')
                continue;
            const lineValues = line.split(/\s+/);
            const lineType = lineValues.shift();
            line = lineValues.join(' ');
            switch (lineType) {
                case 'format':
                    header.format = lineValues[0];
                    header.version = lineValues[1];
                    break;
                case 'comment':
                    header.comments.push(line);
                    break;
                case 'element':
                    if (currentElement !== undefined) {
                        assertPLYElementSpec(currentElement);
                        header.elements.push(currentElement);
                    }
                    currentElement = {
                        name: lineValues[0],
                        count: parseInt(lineValues[1]),
                        properties: [],
                    };
                    break;
                case 'property':
                    if (currentElement === undefined) {
                        console.warn('property without element');
                        continue;
                    }
                    currentElement.properties.push(makePlyPropertySpec(lineValues, this.propertyNameMapping));
                    break;
                case 'obj_info':
                    header.objInfo = line;
                    break;
                default:
                    console.log('unhandled', lineType, lineValues);
            }
        }
        if (currentElement !== undefined) {
            header.elements.push(currentElement);
        }
        return header;
    }
    parseASCII(data, header) {
        // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)
        const buffer = this.createBuffer();
        const patternBody = /end_header\s+(\S[\s\S]*\S|\S)\s*$/;
        let body, matches;
        if ((matches = patternBody.exec(data)) !== null) {
            body = matches[1].split(/\s+/);
        }
        else {
            body = [];
        }
        const tokens = new ArrayStream(body);
        loop: for (let i = 0; i < header.elements.length; i++) {
            const elementDesc = header.elements[i];
            const attributeMap = mapElementAttributes(elementDesc.properties);
            for (let j = 0; j < elementDesc.count; j++) {
                // TODO - we're cooercing element to PLYElement inside this call
                // handle properly!
                const element = parseASCIIElement(elementDesc.properties, tokens);
                if (!element)
                    break loop;
                this.handleElement(buffer, elementDesc.name, element, attributeMap);
            }
        }
        return this.postProcess(buffer);
    }
    parseBinary(data, header) {
        const buffer = this.createBuffer();
        const little_endian = (header.format === 'binary_little_endian');
        const body = new DataView(data, header.headerLength);
        let result, loc = 0;
        for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {
            const elementDesc = header.elements[currentElement];
            const properties = elementDesc.properties;
            const attributeMap = mapElementAttributes(properties);
            const binaryProperties = this.makeBinaryProperties(properties, body, little_endian);
            for (let currentElementCount = 0; currentElementCount < elementDesc.count; currentElementCount++) {
                result = binaryReadElement(loc, binaryProperties);
                loc += result[1];
                const element = result[0];
                this.handleElement(buffer, elementDesc.name, element, attributeMap);
            }
        }
        return this.postProcess(buffer);
    }
    postProcess(buffer) {
        let geometry = new BufferGeometry();
        // mandatory buffer data
        if (buffer.indices.length > 0) {
            geometry.setIndex(buffer.indices);
        }
        geometry.setAttribute('position', new Float32BufferAttribute(buffer.vertices, 3));
        // optional buffer data
        if (buffer.normals.length > 0) {
            geometry.setAttribute('normal', new Float32BufferAttribute(buffer.normals, 3));
        }
        if (buffer.uvs.length > 0) {
            geometry.setAttribute('uv', new Float32BufferAttribute(buffer.uvs, 2));
        }
        if (buffer.colors.length > 0) {
            geometry.setAttribute('color', new Float32BufferAttribute(buffer.colors, 3));
        }
        if (buffer.faceVertexUvs.length > 0 || buffer.faceVertexColors.length > 0) {
            geometry = geometry.toNonIndexed();
            if (buffer.faceVertexUvs.length > 0)
                geometry.setAttribute('uv', new Float32BufferAttribute(buffer.faceVertexUvs, 2));
            if (buffer.faceVertexColors.length > 0)
                geometry.setAttribute('color', new Float32BufferAttribute(buffer.faceVertexColors, 3));
        }
        // custom buffer data
        for (const customProperty of Object.keys(this.customPropertyMapping)) {
            if (buffer[customProperty].length > 0) {
                geometry.setAttribute(customProperty, new Float32BufferAttribute(buffer[customProperty], this.customPropertyMapping[customProperty].length));
            }
        }
        geometry.computeBoundingSphere();
        return geometry;
    }
    /** Augments properties with their appropriate valueReader attribute and
     * countReader if the property is a list type
     */
    makeBinaryProperties(properties, body, little_endian) {
        const newProperties = [];
        for (let i = 0, l = properties.length; i < l; i++) {
            const property = properties[i];
            if (property.isList) {
                newProperties.push(Object.assign(Object.assign({}, property), { countReader: getBinaryReader(body, property.countType, little_endian), valueReader: getBinaryReader(body, property.type, little_endian) }));
            }
            else {
                newProperties.push(Object.assign(Object.assign({}, property), { valueReader: getBinaryReader(body, property.type, little_endian) }));
            }
        }
        return newProperties;
    }
}
function makePlyPropertySpec(propertyValues, propertyNameMapping) {
    const prop0 = propertyValues[0];
    let property;
    if (prop0 === 'list') {
        property = {
            isList: true,
            name: propertyValues[3],
            type: getDataType(propertyValues[2]),
            countType: getDataType(propertyValues[1]),
        };
    }
    else {
        property = {
            isList: false,
            name: propertyValues[1],
            type: getDataType(prop0)
        };
    }
    if (property.name in propertyNameMapping) {
        property.name = propertyNameMapping[property.name];
    }
    return property;
}
function parseASCIINumber(n, type) {
    switch (type) {
        case 'char':
        case 'uchar':
        case 'short':
        case 'ushort':
        case 'int':
        case 'uint':
        case 'int8':
        case 'uint8':
        case 'int16':
        case 'uint16':
        case 'int32':
        case 'uint32':
            return parseInt(n);
        case 'float':
        case 'double':
        case 'float32':
        case 'float64':
            return parseFloat(n);
    }
    return 0;
}
function parseASCIIElement(properties, tokens) {
    const element = {
        name: '',
        type: ''
    };
    for (let i = 0; i < properties.length; i++) {
        if (tokens.empty())
            return null;
        const property = properties[i];
        if (property.isList) {
            const list = [];
            const n = parseASCIINumber(tokens.next(), property.countType);
            for (let j = 0; j < n; j++) {
                if (tokens.empty())
                    return null;
                list.push(parseASCIINumber(tokens.next(), property.type));
            }
            element[property.name] = list;
        }
        else {
            element[properties[i].name] = parseASCIINumber(tokens.next(), properties[i].type);
        }
    }
    return element; // TODO: Properly handle types here
}
function mapElementAttributes(properties) {
    const elementNames = properties.map(property => {
        return property.name;
    });
    function findAttrName(names) {
        for (let i = 0, l = names.length; i < l; i++) {
            const name = names[i];
            if (elementNames.includes(name))
                return name;
        }
        return null;
    }
    return {
        attrX: findAttrName(['x', 'px', 'posx']) || 'x',
        attrY: findAttrName(['y', 'py', 'posy']) || 'y',
        attrZ: findAttrName(['z', 'pz', 'posz']) || 'z',
        attrNX: findAttrName(['nx', 'normalx']),
        attrNY: findAttrName(['ny', 'normaly']),
        attrNZ: findAttrName(['nz', 'normalz']),
        attrS: findAttrName(['s', 'u', 'texture_u', 'tx']),
        attrT: findAttrName(['t', 'v', 'texture_v', 'ty']),
        attrR: findAttrName(['red', 'diffuse_red', 'r', 'diffuse_r']),
        attrG: findAttrName(['green', 'diffuse_green', 'g', 'diffuse_g']),
        attrB: findAttrName(['blue', 'diffuse_blue', 'b', 'diffuse_b']),
    };
}
class PlyParser extends SurfaceParser {
    get type() { return 'ply'; }
    getLoader() {
        return new PLYLoader();
    }
}
class ArrayStream {
    constructor(arr) {
        this.arr = arr;
        this.i = 0;
    }
    empty() {
        return this.i >= this.arr.length;
    }
    next() {
        return this.arr[this.i++];
    }
}
ParserRegistry.add('ply', PlyParser);

/**
 * @file Csv Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * CSV parser
 */
class CsvParser extends Parser {
    /**
       * [constructor description]
       * @param  {Streamer} streamer - the streamer object
       * @param  {Object} params - parameter object
       * @param  {Char} params.delimiter - delimiter character
       * @param  {Char} params.comment - comment character
       * @param  {Boolean} params.columnNames - use first data line as column names
       */
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.delimiter = defaults(p.delimiter, ',');
        this.comment = defaults(p.comment, '#');
        this.columnNames = defaults(p.columnNames, false);
        this.table = {
            name: this.name,
            path: this.path,
            columnNames: [],
            data: []
        };
    }
    get type() { return 'csv'; }
    get __objName() { return 'table'; }
    _parse() {
        const data = this.table.data;
        const reDelimiter = new RegExp('\\s*' + this.delimiter + '\\s*');
        let j = 0;
        this.streamer.eachChunkOfLines(chunk => {
            const n = chunk.length;
            for (let i = 0; i < n; ++i) {
                const line = chunk[i].trim();
                if (line.startsWith(this.comment))
                    continue;
                const values = line.split(reDelimiter);
                if (j === 0) {
                    this.table.columnNames = values;
                }
                else if (line) {
                    data.push(values);
                }
                ++j;
            }
        });
    }
}
ParserRegistry.add('csv', CsvParser);

/**
 * @file Json Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class JsonParser extends Parser {
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.string = defaults(p.string, false);
        this.json = {
            name: this.name,
            path: this.path,
            data: {}
        };
    }
    get type() { return 'json'; }
    get __objName() { return 'json'; }
    get isJson() { return true; }
    _parse() {
        if (this.streamer.isBinary() || this.string) {
            this.json.data = JSON.parse(this.streamer.asText());
        }
        else {
            this.json.data = this.streamer.data;
        }
    }
}
ParserRegistry.add('json', JsonParser);

/**
 * @file Msgpack Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class MsgpackParser extends Parser {
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.msgpack = {
            name: this.name,
            path: this.path,
            data: undefined
        };
    }
    get type() { return 'msgpack'; }
    get __objName() { return 'msgpack'; }
    get isBinary() { return true; }
    _parse() {
        if (Debug)
            Log.time('MsgpackParser._parse ' + this.name);
        this.msgpack.data = decodeMsgpack(this.streamer.data);
        if (Debug)
            Log.timeEnd('MsgpackParser._parse ' + this.name);
    }
}
ParserRegistry.add('msgpack', MsgpackParser);

/**
 * @file Netcdf Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class NetcdfParser extends Parser {
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.netcdf = {
            name: this.name,
            path: this.path,
            data: undefined
        };
    }
    get type() { return 'netcdf'; }
    get __objName() { return 'netcdf'; }
    get isBinary() { return true; }
    _parse() {
        if (Debug)
            Log.time('NetcdfParser._parse ' + this.name);
        this.netcdf.data = new NetcdfReader(this.streamer.data);
        if (Debug)
            Log.timeEnd('NetcdfParser._parse ' + this.name);
    }
}
ParserRegistry.add('netcdf', NetcdfParser);

/**
 * @file Text Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class TextParser extends Parser {
    constructor(streamer, params) {
        super(streamer, params);
        this.text = {
            name: this.name,
            path: this.path,
            data: ''
        };
    }
    get type() { return 'text'; }
    get __objName() { return 'text'; }
    _parse() {
        this.text.data = this.streamer.asText();
    }
}
ParserRegistry.add('txt', TextParser);
ParserRegistry.add('text', TextParser);

/**
 * @file Parse Xml
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reStrip = /^['"]|['"]$/g;
const reTag = /^<([\w-:.]+)\s*/;
const reContent = /^([^<]*)/;
const reAttr = /([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/;
function strip(val) {
    return val.replace(reStrip, '');
}
function parseXml(xml) {
    // trim and strip comments
    xml = xml.trim().replace(/<!--[\s\S]*?-->/g, '');
    return document();
    function document() {
        return {
            declaration: declaration(),
            root: tag()
        };
    }
    function declaration() {
        const m = match(/^<\?xml\s*/);
        if (!m)
            return;
        // tag
        const node = {
            attributes: {}
        };
        // attributes
        while (!(eos() || is('?>'))) {
            const attr = attribute();
            if (!attr)
                return node;
            node.attributes[attr.name] = attr.value;
        }
        match(/\?>\s*/);
        return node;
    }
    function tag() {
        const m = match(reTag);
        if (!m)
            return;
        // name
        const node = {
            name: m[1],
            attributes: {},
            children: []
        };
        // attributes
        while (!(eos() || is('>') || is('?>') || is('/>'))) {
            const attr = attribute();
            if (!attr)
                return node;
            node.attributes[attr.name] = attr.value;
        }
        // self closing tag
        if (match(/^\s*\/>\s*/)) {
            return node;
        }
        match(/\??>\s*/);
        // content
        node.content = content();
        // children
        let child;
        while ((child = tag())) {
            node.children.push(child);
        }
        // closing
        match(/^<\/[\w-:.]+>\s*/);
        return node;
    }
    function content() {
        const m = match(reContent);
        if (m)
            return m[1];
        return '';
    }
    function attribute() {
        const m = match(reAttr);
        if (!m)
            return;
        return { name: m[1], value: strip(m[2]) };
    }
    function match(re) {
        const m = xml.match(re);
        if (!m)
            return;
        xml = xml.slice(m[0].length);
        return m;
    }
    function eos() {
        return xml.length === 0;
    }
    function is(prefix) {
        return xml.indexOf(prefix) === 0;
    }
}

/**
 * @file Xml Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class XmlParser extends Parser {
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.useDomParser = defaults(p.useDomParser, false);
        this.xml = {
            name: this.name,
            path: this.path,
            data: {}
        };
    }
    get type() { return 'xml'; }
    get __objName() { return 'xml'; }
    get isXml() { return true; }
    __xmlParser(xml) {
        return parseXml(xml);
    }
    __domParser(xml) {
        const domParser = new window.DOMParser();
        return domParser.parseFromString(xml, 'text/xml');
    }
    _parse() {
        if (Debug)
            Log.time('XmlParser._parse ' + this.name);
        if (this.useDomParser) {
            if (this.streamer.data instanceof Document) { //TS conversion: stripped the window prefix from window.Document
                this.xml.data = this.streamer.data;
            }
            else {
                this.xml.data = this.__domParser(this.streamer.asText());
            }
        }
        else {
            this.xml.data = this.__xmlParser(this.streamer.asText());
        }
        if (Debug)
            Log.timeEnd('XmlParser._parse ' + this.name);
    }
}
ParserRegistry.add('xml', XmlParser);

/**
 * @file Validation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function getNamedItem(a, name) {
    const item = a.getNamedItem(name);
    return item !== null ? item.value : '';
}
function getSele(a, atomname, useAltcode = false) {
    const icode = getNamedItem(a, 'icode').trim();
    const chain = getNamedItem(a, 'chain').trim();
    const altcode = getNamedItem(a, 'altcode');
    let sele = getNamedItem(a, 'resnum');
    if (icode)
        sele += '^' + icode;
    if (chain)
        sele += ':' + chain;
    if (atomname)
        sele += '.' + atomname;
    if (useAltcode && altcode.trim())
        sele += '%' + altcode;
    sele += '/' + (parseInt(getNamedItem(a, 'model')) - 1);
    return sele;
}
function getResSele(a) {
    const chain = getNamedItem(a, 'chain').trim();
    const rescode = getNamedItem(a, 'rescode');
    const resnum = getNamedItem(a, 'resnum');
    let sele = `[${rescode}]${resnum}`;
    if (chain)
        sele += `:${chain}`;
    return sele;
}
function setBitDict(dict, key, bit) {
    if (dict[key] === undefined) {
        dict[key] = bit;
    }
    else {
        dict[key] |= bit;
    }
}
function hasAttrValue(attr, value) {
    return attr !== null && attr.value === value;
}
function getAtomSele(ap) {
    const icode = ap.inscode;
    const chain = ap.chainname;
    const atomname = ap.atomname;
    const altcode = ap.altloc;
    let sele = ap.resno + '';
    if (icode)
        sele += '^' + icode;
    if (chain)
        sele += ':' + chain;
    if (atomname)
        sele += '.' + atomname;
    if (altcode)
        sele += '%' + altcode;
    sele += '/' + ap.modelIndex;
    return sele;
}
function getProblemCount(clashDict, g, ga) {
    let geoProblemCount = 0;
    const clashes = g.getElementsByTagName('clash');
    for (let j = 0, jl = clashes.length; j < jl; ++j) {
        if (clashDict[getNamedItem(clashes[j].attributes, 'cid')]) {
            geoProblemCount += 1;
            break;
        }
    }
    const angleOutliers = g.getElementsByTagName('angle-outlier');
    if (angleOutliers.length > 0) {
        geoProblemCount += 1;
    }
    const bondOutliers = g.getElementsByTagName('bond-outlier');
    if (bondOutliers.length > 0) {
        geoProblemCount += 1;
    }
    const planeOutliers = g.getElementsByTagName('plane-outlier');
    if (planeOutliers.length > 0) {
        geoProblemCount += 1;
    }
    if (hasAttrValue(ga.getNamedItem('rota'), 'OUTLIER')) {
        geoProblemCount += 1;
    }
    if (hasAttrValue(ga.getNamedItem('rama'), 'OUTLIER')) {
        geoProblemCount += 1;
    }
    if (hasAttrValue(ga.getNamedItem('RNApucker'), 'outlier')) {
        geoProblemCount += 1;
    }
    return geoProblemCount;
}
class Validation {
    constructor(name, path) {
        this.name = name;
        this.path = path;
        this.rsrzDict = {};
        this.rsccDict = {};
        /**
         * Random Coil Index (RCI) - evaluates the proximity of residue structural
         * and dynamic properties to the properties of flexible random coil regions
         * from NMR chemical shifts.
         *
         * Mark V. Berjanskii and David S. Wishart (2005)
         * A Simple Method To Predict Protein Flexibility Using Secondary Chemical Shifts
         * J. Am. Chem. Soc., 2005, 127 (43), pp 14970–14971
         * http://pubs.acs.org/doi/abs/10.1021/ja054842f
         *
         * Mark V. Berjanskii and David S. Wishart (2008)
         * Application of the random coil index to studying protein flexibility.
         * J Biomol NMR. 2008 Jan;40(1):31-48. Epub 2007 Nov 6.
         * http://www.springerlink.com/content/2966482w10306126/
         */
        this.rciDict = {};
        this.clashDict = {};
        this.clashArray = [];
        this.geoDict = {};
        this.geoAtomDict = {};
        this.atomDict = {};
        this.clashSele = 'NONE';
    }
    get type() { return 'validation'; }
    fromXml(xml) {
        if (Debug)
            Log.time('Validation.fromXml');
        const rsrzDict = this.rsrzDict;
        const rsccDict = this.rsccDict;
        const rciDict = this.rciDict;
        const clashDict = this.clashDict;
        const clashArray = this.clashArray;
        const geoDict = this.geoDict;
        const geoAtomDict = this.geoAtomDict;
        const atomDict = this.atomDict;
        const entries = xml.getElementsByTagName('Entry');
        if (entries.length === 1) {
            const chemicalShiftLists = entries[0].getElementsByTagName('chemical_shift_list');
            if (chemicalShiftLists.length === 1) {
                const randomCoilIndices = chemicalShiftLists[0].getElementsByTagName('random_coil_index');
                for (let j = 0, jl = randomCoilIndices.length; j < jl; ++j) {
                    const rcia = randomCoilIndices[j].attributes;
                    const sele = getResSele(rcia);
                    rciDict[sele] = parseFloat(getNamedItem(rcia, 'value'));
                }
            }
        }
        const groups = xml.getElementsByTagName('ModelledSubgroup');
        const _clashDict = {};
        const clashList = [];
        if (Debug)
            Log.time('Validation.fromXml#clashDict');
        for (let i = 0, il = groups.length; i < il; ++i) {
            const g = groups[i];
            const ga = g.attributes;
            const sele = getSele(ga);
            if (ga.getNamedItem('rsrz') !== null) {
                rsrzDict[sele] = parseFloat(getNamedItem(ga, 'rsrz'));
            }
            if (ga.getNamedItem('rscc') !== null) {
                rsccDict[sele] = parseFloat(getNamedItem(ga, 'rscc'));
            }
            const seleAttr = xml.createAttribute('sele');
            seleAttr.value = sele;
            ga.setNamedItem(seleAttr);
            const clashes = g.getElementsByTagName('clash');
            for (let j = 0, jl = clashes.length; j < jl; ++j) {
                const ca = clashes[j].attributes;
                const atom = getNamedItem(ca, 'atom');
                if (guessElement(atom) !== 'H') {
                    const cid = getNamedItem(ca, 'cid');
                    const atomSele = getSele(ga, atom, true);
                    atomDict[atomSele] = true;
                    if (_clashDict[cid] === undefined) {
                        _clashDict[cid] = {
                            sele1: atomSele,
                            res1: sele
                        };
                    }
                    else {
                        const c = _clashDict[cid];
                        if (c.res1 !== sele) {
                            c.sele2 = atomSele;
                            c.res2 = sele;
                            clashList.push(c.res1, sele);
                            clashDict[cid] = c;
                            clashArray.push(c);
                        }
                    }
                }
            }
        }
        if (Debug)
            Log.timeEnd('Validation.fromXml#clashDict');
        for (let i = 0, il = groups.length; i < il; ++i) {
            const g = groups[i];
            const ga = g.attributes;
            const sele = getNamedItem(ga, 'sele');
            const isPolymer = getNamedItem(ga, 'seq') !== '.';
            if (isPolymer) {
                const geoProblemCount = getProblemCount(clashDict, g, ga);
                if (geoProblemCount > 0) {
                    geoDict[sele] = geoProblemCount;
                }
            }
            else {
                const clashes = g.getElementsByTagName('clash');
                const mogBondOutliers = g.getElementsByTagName('mog-bond-outlier');
                const mogAngleOutliers = g.getElementsByTagName('mog-angle-outlier');
                if (mogBondOutliers.length > 0 || mogAngleOutliers.length > 0 || clashes.length > 0) {
                    const atomDict = {};
                    geoAtomDict[sele] = atomDict;
                    for (let j = 0, jl = clashes.length; j < jl; ++j) {
                        const ca = clashes[j].attributes;
                        if (clashDict[getNamedItem(ca, 'cid')]) {
                            setBitDict(atomDict, getNamedItem(ca, 'atom'), 1);
                        }
                    }
                    for (let j = 0, jl = mogBondOutliers.length; j < jl; ++j) {
                        const mbo = mogBondOutliers[j].attributes;
                        getNamedItem(mbo, 'atoms').split(',').forEach(function (atomname) {
                            setBitDict(atomDict, atomname, 2);
                        });
                    }
                    for (let j = 0, jl = mogAngleOutliers.length; j < jl; ++j) {
                        const mao = mogAngleOutliers[j].attributes;
                        getNamedItem(mao, 'atoms').split(',').forEach(function (atomname) {
                            setBitDict(atomDict, atomname, 4);
                        });
                    }
                }
            }
        }
        this.clashSele = clashList.length ? clashList.join(' OR ') : 'NONE';
        if (Debug)
            Log.timeEnd('Validation.fromXml');
    }
    getClashData(params) {
        if (Debug)
            Log.time('Validation.getClashData');
        const p = params || {};
        const s = p.structure;
        const atomSet = s.atomSet; // TODO
        const c = new Color(defaults(p.color, '#f0027f'));
        const ap1 = s.getAtomProxy();
        const ap2 = s.getAtomProxy();
        const vDir = new Vector3();
        const vPos1 = new Vector3();
        const vPos2 = new Vector3();
        const clashArray = this.clashArray;
        const n = clashArray.length;
        const position1 = new Float32Array(n * 3);
        const position2 = new Float32Array(n * 3);
        const color = uniformArray3(n, c.r, c.g, c.b);
        const radius = new Float32Array(n);
        const picking = new Float32Array(n);
        if (Debug)
            Log.time('Validation.getClashData#atomDict');
        const atomDict = this.atomDict;
        s.eachAtom(function (ap) {
            const sele = getAtomSele(ap);
            if (atomDict[sele] === true) {
                atomDict[sele] = ap.index;
            }
        });
        if (Debug)
            Log.timeEnd('Validation.getClashData#atomDict');
        let i = 0;
        clashArray.forEach(function (c, idx) {
            ap1.index = atomDict[c.sele1]; // TODO
            ap2.index = atomDict[c.sele2]; // TODO
            if (ap1.index === undefined || ap2.index === undefined ||
                !atomSet.isSet(ap1.index, ap2.index))
                return;
            vDir.subVectors(ap2, ap1).setLength(ap1.vdw); // TODO
            vPos1.copy(ap1).add(vDir); // TODO
            vDir.subVectors(ap1, ap2).setLength(ap2.vdw); // TODO
            vPos2.copy(ap2).add(vDir); // TODO
            const dHalf = ap1.distanceTo(ap2) / 2;
            const r1 = Math.sqrt(ap1.vdw * ap1.vdw - dHalf * dHalf);
            const r2 = Math.sqrt(ap2.vdw * ap2.vdw - dHalf * dHalf);
            vPos1.toArray(position1, i * 3); // TODO
            vPos2.toArray(position2, i * 3);
            radius[i] = (r1 + r2) / 2;
            picking[i] = idx;
            ++i;
        });
        if (Debug)
            Log.timeEnd('Validation.getClashData');
        return {
            position1: position1.subarray(0, i * 3),
            position2: position2.subarray(0, i * 3),
            color: color.subarray(0, i * 3),
            color2: color.subarray(0, i * 3),
            radius: radius.subarray(0, i),
            picking: new ClashPicker(picking.subarray(0, i), this, s)
        };
    }
}

/**
 * @file Validation Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class ValidationParser extends XmlParser {
    constructor(streamer, params) {
        const p = params || {};
        super(streamer, p);
        this.useDomParser = true;
        this.validation = new Validation(this.name, this.path);
    }
    get __objName() { return 'validation'; }
    get isXml() { return true; }
    _parse() {
        super._parse();
        if (Debug)
            Log.time('ValidationParser._parse ' + this.name);
        this.validation.fromXml(this.xml.data);
        if (Debug)
            Log.timeEnd('ValidationParser._parse ' + this.name);
    }
}
ParserRegistry.add('validation', ValidationParser);

// https://github.com/nodeca/pako
// MIT License, Copyright (c) 2014 by Vitaly Puzrin


// 'use strict';


// var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
//                 (typeof Uint16Array !== 'undefined') &&
//                 (typeof Int32Array !== 'undefined');


function assign(obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
}


// reduce buffer size, avoiding mem copy
function shrinkBuf(buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
}


function arraySet(dest, src, src_offs, len, dest_offs) {
  if (src.subarray && dest.subarray) {
    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
    return;
  }
  // Fallback to ordinary array
  for (var i = 0; i < len; i++) {
    dest[dest_offs + i] = src[src_offs + i];
  }
}

// Join array of chunks to single array.
function flattenChunks(chunks) {
  var i, l, len, pos, chunk, result;

  // calculate data length
  len = 0;
  for (i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  result = new Uint8Array(len);
  pos = 0;
  for (i = 0, l = chunks.length; i < l; i++) {
    chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
}

// 'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}

// 'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}

// 'use strict';

// See state defs from inflate.js
var BAD$1 = 30;       /* got a data error -- remain here until reset */
var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
// module.exports =
function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE$1;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
}
// 'use strict';


// var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

// module.exports =
function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES$1) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS$1) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
    return 1;
  }
  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
}
// 'use strict';


// var utils         = require('../utils/common');
// var adler32       = require('./adler32');
// var crc32         = require('./crc32');
// var inflate_fast  = require('./inffast');
// var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix;
var distfix;
// We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

// String encode/decode helpers
// 'use strict';


// var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new Uint8Array(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
function string2buf(str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
}

// Helper (used in 2 places)
function _buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert binary string (typed, when possible)
function binstring2buf(str) {
  var buf = new Uint8Array(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
}


// convert array to string
function buf2string(buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return _buf2binstring(utf16buf, out);
}


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
function utf8border(buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
}

/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH        = 0;
var Z_SYNC_FLUSH      = 2;
var Z_FINISH$1          = 4;
/* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
var Z_OK$1              =  0;
var Z_STREAM_END$1      =  1;
var Z_NEED_DICT$1       =  2;
//export var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR$1       = -5;

// 'use strict';

var messages = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// 'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

// 'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

// 'use strict';


// var zlib_inflate = require('./zlib/inflate');
// var utils        = require('./utils/common');
// var strings      = require('./utils/strings');
// var c            = require('./zlib/constants');
// var msg          = require('./zlib/messages');
// var ZStream      = require('./zlib/zstream');
// var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK$1) {
    throw new Error(messages[status]);
  }

  this.header = new GZheader();

  inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate(strm, Z_NO_FLUSH);    /* no bad return value */

    if (status === Z_NEED_DICT$1 && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = inflateSetDictionary(this.strm, dict);

    }

    if (status === Z_BUF_ERROR$1 && allowBufError === true) {
      status = Z_OK$1;
      allowBufError = false;
    }

    if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END$1 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

  if (status === Z_STREAM_END$1) {
    _mode = Z_FINISH$1;
  }

  // Finalize on the last chunk.
  if (_mode === Z_FINISH$1) {
    status = inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK$1;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK$1);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$1) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function doInflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}

/**
 * @file Gzip Decompressor
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
function gzipDecompress(data) {
    let decompressedData;
    if (data instanceof ArrayBuffer) {
        data = new Uint8Array(data);
    }
    try {
        decompressedData = doInflate(data);
    }
    catch (e) {
        decompressedData = data; // assume it is already uncompressed
    }
    return decompressedData;
}
DecompressorRegistry.add('gz', gzipDecompress);

/**
 * @file Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
/**
 * Datasource base class
 * @interface
 */
class Datasource {
}

/**
 * @file RCSB Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const baseUrl$3 = '//files.rcsb.org/download/';
const bcifBaseUrl = '//models.rcsb.org/';
const protocol = 'https:';
class RcsbDatasource extends Datasource {
    getUrl(src) {
        // valid path are
        // XXXX.pdb, XXXX.pdb.gz, XXXX.cif, XXXX.cif.gz, XXXX.mmtf, XXXX.bb.mmtf
        // XXXX defaults to XXXX.cif
        const info = getFileInfo(src);
        const pdbid = info.name.indexOf('_') > -1 ? info.name : info.name.substring(0, 4); // Allow extended pdb codes and alphafold codes
        if (['pdb', 'cif'].includes(info.ext) &&
            (info.compressed === false || info.compressed === 'gz')) {
            return protocol + baseUrl$3 + info.path;
        }
        if (info.ext === 'mmtf') {
            Log.warn('MMTF files distribution has been discontinued by RCSB PDB as of July 2024.\n Defaulting to bcif format instead. See https://www.rcsb.org/news/65a1af31c76ca3abcc925d0c for the deprecation notice');
            if (info.base.endsWith('.bb')) {
                Log.warn('Backbone only files are not available from RCSB PDB anymore.');
            }
            info.ext = '';
        }
        if (!info.ext) {
            Log.warn('mmCif files available from RCSB PDB lack connectivity information.\n Consider using PDBe as the data provider for using "Updated mmCif files" that contain residues connectivity records.');
        }
        else {
            Log.warn('unsupported ext', info.ext);
        }
        return protocol + bcifBaseUrl + pdbid + '.bcif.gz';
    }
    getExt(src) {
        const ext = getFileInfo(src).ext;
        return ext ? ext : 'bcif';
    }
}
DatasourceRegistry.add('rcsb', new RcsbDatasource());

/**
 * @file PDB Europe Datasource
 * @author Paul Pillot <paul.pillot@tandemai.com>
 * @private
 */
const baseUrl$2 = '//www.ebi.ac.uk/pdbe/entry-files/download/';
// Examples:
//https://www.ebi.ac.uk/pdbe/entry-files/download/5z6y_updated.cif
//https://www.ebi.ac.uk/pdbe/entry-files/download/pdb5z6y.ent
//https://www.ebi.ac.uk/pdbe/entry-files/download/5z6y.bcif
class PDBeDatasource extends Datasource {
    getUrl(src) {
        // valid path are
        // XXXX.pdb, XXXX.ent, XXXX.cif, XXXX.bcif
        // XXXX defaults to XXXX.bcif
        const info = getFileInfo(src);
        let pdbid = info.name.indexOf('_') > -1 ? info.name : info.name.substring(0, 4); // Allow extended pdb codes
        let url;
        switch (info.ext) {
            case 'cif':
                url = baseUrl$2 + pdbid + '_updated.cif'; // "Updated mmcif" files contain connectivity
                break;
            case 'pdb':
            case 'ent':
                if (!pdbid.startsWith('pdb')) {
                    pdbid = 'pdb' + pdbid;
                }
                url = baseUrl$2 + pdbid + '.ent';
                break;
            case 'bcif':
                url = baseUrl$2 + info.path;
                break;
            case '':
                url = baseUrl$2 + pdbid + '.bcif';
                break;
            default:
                Log.warn('unsupported ext', info.ext);
                url = baseUrl$2 + pdbid + '.bcif';
        }
        return 'https://' + url;
    }
    getExt(src) {
        const ext = getFileInfo(src).ext;
        return ext ? ext : 'bcif';
    }
}
DatasourceRegistry.add('pdbe', new PDBeDatasource());

/**
 * @file PubChem Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const baseUrl$1 = '//pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/';
const suffixUrl = '/SDF?record_type=3d';
class PubchemDatasource extends Datasource {
    getUrl(src) {
        const info = getFileInfo(src);
        const cid = info.name;
        let url;
        if (!info.ext || info.ext === 'sdf') {
            url = baseUrl$1 + cid + suffixUrl;
        }
        else {
            Log.warn('unsupported ext', info.ext);
            url = baseUrl$1 + cid + suffixUrl;
        }
        return getProtocol() + url;
    }
    getExt(src) {
        const ext = getFileInfo(src).ext;
        return ext ? ext : 'sdf';
    }
}
DatasourceRegistry.add('pubchem', new PubchemDatasource());

/**
 * @file Pass Through Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class PassThroughDatasource extends Datasource {
    getUrl(path) {
        return path;
    }
    getExt(path) {
        return getFileInfo(path).ext;
    }
}
DatasourceRegistry.add('ftp', new PassThroughDatasource());
DatasourceRegistry.add('http', new PassThroughDatasource());
DatasourceRegistry.add('https', new PassThroughDatasource());

/**
 * @file Alphafold Datasource
 * @author Fredric Johansson <fredric@fredricj.se>
 * @private
 */
const baseUrl = '//alphafold.ebi.ac.uk/files/AF-';
const suffixURL = '-F1-model_v4.pdb';
class AlphafoldDatasource extends Datasource {
    getUrl(src) {
        const info = getFileInfo(src);
        const uniprotid = info.name;
        let url;
        if (!info.ext || info.ext === 'pdb') {
            url = baseUrl + uniprotid + suffixURL;
        }
        else {
            Log.warn('unsupported AF ext', info.ext);
            url = baseUrl + uniprotid + suffixURL;
        }
        return 'https://' + url;
    }
    getExt(src) {
        const ext = getFileInfo(src).ext;
        return ext ? ext : 'pdb';
    }
}
DatasourceRegistry.add('alphafold', new AlphafoldDatasource());

/**
 * @file Static Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
const reProtocol = /^((http|https|ftp):)*\/\//;
class StaticDatasource extends Datasource {
    constructor(baseUrl = '') {
        super();
        this.baseUrl = baseUrl;
    }
    getUrl(src) {
        const info = getFileInfo(src);
        let url = this.baseUrl + info.path;
        if (!reProtocol.test(this.baseUrl)) {
            url = getAbsolutePath(url);
        }
        return url;
    }
    getExt(src) {
        return getFileInfo(src).ext;
    }
}

/**
 * @file MDsrv Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */
class MdsrvDatasource extends Datasource {
    constructor(baseUrl = '') {
        super();
        this.baseUrl = baseUrl;
    }
    getListing(path = '') {
        let url = `${this.baseUrl}dir/${path}`;
        if (url[url.length - 1] !== '/')
            url += '/';
        return autoLoad(url, {
            ext: 'json'
        }).then((jsonData) => ({
            path: path,
            data: jsonData.data
        }));
    }
    getUrl(src) {
        const info = getFileInfo(src);
        return `${this.baseUrl}file/${info.path}${info.query}`;
    }
    getCountUrl(src) {
        const info = getFileInfo(src);
        return `${this.baseUrl}traj/numframes/${info.path}${info.query}`;
    }
    getFrameUrl(src, frameIndex) {
        const info = getFileInfo(src);
        return `${this.baseUrl}traj/frame/${frameIndex}/${info.path}${info.query}`;
    }
    getFrameParams(src, atomIndices) {
        return `atomIndices=${atomIndices.join(';')}`;
    }
    getPathUrl(src, atomIndex) {
        const info = getFileInfo(src);
        return `${this.baseUrl}traj/path/${atomIndex}/${info.path}${info.query}`;
    }
    getExt(src) {
        return getFileInfo(src).ext;
    }
}

/**
 * @file UI Parameters
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
function BooleanParam() { return { type: 'boolean' }; }
function ColorParam() { return { type: 'color' }; }
function IntegerParam(max, min) {
    return { type: 'integer', max, min };
}
function NumberParam(precision, max, min) {
    return { type: 'number', precision, max, min };
}
function RangeParam(step, max, min) {
    return { type: 'range', step, max, min };
}
function SelectParam(...options) {
    return { type: 'select', options: options.reduce((o, k) => (Object.assign(Object.assign({}, o), { [k]: k })), {}) };
}
const UIStageParameters = {
    backgroundColor: ColorParam(),
    quality: SelectParam('auto', 'low', 'medium', 'high'),
    sampleLevel: RangeParam(1, 5, -1),
    impostor: BooleanParam(),
    workerDefault: BooleanParam(),
    rotateSpeed: NumberParam(1, 10, 0),
    zoomSpeed: NumberParam(1, 10, 0),
    panSpeed: NumberParam(1, 10, 0),
    clipNear: RangeParam(1, 100, 0),
    clipFar: RangeParam(1, 100, 0),
    clipDist: IntegerParam(200, 0),
    clipMode: SelectParam('scene', 'camera'),
    clipScale: SelectParam('relative', 'absolute'),
    fogNear: RangeParam(1, 100, 0),
    fogFar: RangeParam(1, 100, 0),
    cameraType: SelectParam('perspective', 'orthographic', 'stereo'),
    cameraEyeSep: NumberParam(3, 1.0, 0.01),
    cameraFov: RangeParam(1, 120, 15),
    lightColor: ColorParam(),
    lightIntensity: NumberParam(2, 10, 0),
    ambientColor: ColorParam(),
    ambientIntensity: NumberParam(2, 10, 0),
    hoverTimeout: IntegerParam(10000, -1),
    tooltip: BooleanParam(),
    mousePreset: SelectParam(...Object.keys(MouseActionPresets))
};

var version = "2.4.0";

/**
 * @file Version
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */
/**
 * Version name
 * @type {String}
 */
const Version = version;

export { AngleRepresentation, ArrowBuffer, Assembly, AxesRepresentation, BackboneRepresentation, BallAndStickRepresentation, BaseRepresentation, BoxBuffer, BufferRepresentation, CartoonRepresentation, Collection, Colormaker, ColormakerRegistry, Component, ComponentCollection, ConeBuffer, ContactRepresentation, Counter, CylinderBuffer, DatasourceRegistry, Debug, DecompressorRegistry, DihedralHistogramRepresentation, DihedralRepresentation, DistanceRepresentation, EllipsoidBuffer, Frames, HelixorientRepresentation, HyperballRepresentation, Kdtree, KeyActions, LabelRepresentation, LeftMouseButton, LicoriceRepresentation, LineRepresentation, ListingDatasource, MdsrvDatasource, MeasurementDefaultParams, MeshBuffer, MiddleMouseButton, MolecularSurface, MolecularSurfaceRepresentation, MouseActions, OctahedronBuffer, ParserRegistry, PdbWriter, PickingProxy, PointBuffer, PointRepresentation, Queue, RepresentationCollection, RepresentationElement, RepresentationRegistry, RibbonRepresentation, RightMouseButton, RocketRepresentation, RopeRepresentation, ScriptExtensions, SdfWriter, Selection, Shape, ShapeComponent, SpacefillRepresentation, SpatialHash, SphereBuffer, Stage, StaticDatasource, StlWriter, Structure, StructureComponent, StructureComponentDefaultParameters, StructureRepresentation, Superposition, SurfaceComponent, TetrahedronBuffer, TextBuffer, TorusBuffer, TraceRepresentation, TrajectoryDatasource, TrajectoryPlayer, TubeRepresentation, UIStageParameters, UnitcellRepresentation, ValidationRepresentation, Version, Viewer, Volume, VolumeComponent, WideLineBuffer as WidelineBuffer, autoLoad, concatStructures, download, flatten, getDataInfo, getFileInfo, getQuery, guessElement, setDebug, setListingDatasource, setMeasurementDefaultParams, setTrajectoryDatasource, superpose, throttle, uniqueArray };
//# sourceMappingURL=ngl.esm.js.map
